<tt style='background-color:#E8E8E8;'> tools.graph_transforms. <a href=' /tools/graph_transforms/__init__.py#L27'>TransformGraph</a>(input_graph_def,inputs,outputs,transforms)</tt>	Python wrapper for the graph transform tool.
<tt style='background-color:#E8E8E8;'> tools.git. <a href=' /tools/git/gen_git_source.py#L37'>parse_branch_ref</a>(filename)</tt>	Given a filename of a git/head file return ref path.
<tt style='background-color:#E8E8E8;'> tools.git. <a href=' /tools/git/gen_git_source.py#L65'>configure</a>(src_base_path,debug)</tt>	Configure src_base_path to embed git hashes if available.
<tt style='background-color:#E8E8E8;'> tools.git. <a href=' /tools/git/gen_git_source.py#L136'>get_git_version</a>(git_base_path)</tt>	Get the git version from the repository.
<tt style='background-color:#E8E8E8;'> tools.git. <a href=' /tools/git/gen_git_source.py#L163'>write_version_info</a>(filename,git_version)</tt>	Write a c file that defines the version functions.
<tt style='background-color:#E8E8E8;'> tools.git. <a href=' /tools/git/gen_git_source.py#L179'>generate</a>(arglist)</tt>	Generate version_info cc as given destination_file.
<tt style='background-color:#E8E8E8;'> tools.git. <a href=' /tools/git/gen_git_source.py#L220'>raw_generate</a>(output_file)</tt>	Simple generator used for cmake/make build systems.
<tt style='background-color:#E8E8E8;'> tools.gcs_test.python. <a href=' /tools/gcs_test/python/gcs_smoke.py#L38'>create_examples</a>(num_examples,input_mean)</tt>	Create exampleproto's containg data.
<tt style='background-color:#E8E8E8;'> tools.gcs_test.python. <a href=' /tools/gcs_test/python/gcs_smoke.py#L52'>create_dir_test</a>()</tt>	Verifies file_io directory handling methods.
<tt style='background-color:#E8E8E8;'> tools.gcs_test.python. <a href=' /tools/gcs_test/python/gcs_smoke.py#L79'>create_object_test</a>()</tt>	Verifies file_io's object manipulation methods.
<tt style='background-color:#E8E8E8;'> tools.docker. <a href=' /tools/docker/simple_console.py#L26'>main</a>(_)</tt>	Run an interactive console.
<tt style='background-color:#E8E8E8;'> tools.compatibility.TestUpgradeFiles <a href=' /tools/compatibility/tf_upgrade_test.py#L135'>testInplace</a>()</tt>	Check to make sure we don't have a file system race.
<tt style='background-color:#E8E8E8;'> tools.compatibility.FileEditRecorder <a href=' /tools/compatibility/tf_upgrade.py#L224'>process</a>(text)</tt>	Process a list of strings each corresponding to the recorded changes.
<tt style='background-color:#E8E8E8;'> tools.compatibility.FileEditRecorder <a href=' /tools/compatibility/tf_upgrade.py#L289'>add</a>(comment,line,start,old)</tt>	Add a new change that is needed.
<tt style='background-color:#E8E8E8;'> tools.compatibility.TensorFlowCallVisitor <a href=' /tools/compatibility/tf_upgrade.py#L337'>_get_attribute_full_path</a>(node)</tt>	Traverse an attribute to generate a full name e g tf foo bar.
<tt style='background-color:#E8E8E8;'> tools.compatibility.TensorFlowCallVisitor <a href=' /tools/compatibility/tf_upgrade.py#L357'>_find_true_position</a>(node)</tt>	Return correct line number and column offset for a given node.
<tt style='background-color:#E8E8E8;'> tools.compatibility.TensorFlowCallVisitor <a href=' /tools/compatibility/tf_upgrade.py#L413'>visit_Call</a>(node)</tt>	Handle visiting a call node in the ast.
<tt style='background-color:#E8E8E8;'> tools.compatibility.TensorFlowCallVisitor <a href=' /tools/compatibility/tf_upgrade.py#L491'>visit_Attribute</a>(node)</tt>	Handle bare attributes i e [tf foo tf bar].
<tt style='background-color:#E8E8E8;'> tools.compatibility.TensorFlowCodeUpgrader <a href=' /tools/compatibility/tf_upgrade.py#L515'>process_file</a>(in_filename,out_filename)</tt>	Process the given python file for incompatible changes.
<tt style='background-color:#E8E8E8;'> tools.compatibility.TensorFlowCodeUpgrader <a href=' /tools/compatibility/tf_upgrade.py#L536'>process_opened_file</a>(in_filename,in_file,out_filename,out_file)</tt>	Process the given python file for incompatible changes.
<tt style='background-color:#E8E8E8;'> tools.compatibility.TensorFlowCodeUpgrader <a href=' /tools/compatibility/tf_upgrade.py#L574'>process_tree</a>(root_directory,output_root_directory,copy_other_files)</tt>	Processes upgrades on an entire tree of python files in place.
<tt style='background-color:#E8E8E8;'> tools.common.PublicAPIVisitor <a href=' /tools/common/public_api.py#L70'>do_not_descend_map</a>()</tt>	A map from parents to symbols that should not be descended into.
<tt style='background-color:#E8E8E8;'> tools.common.PublicAPIVisitor <a href=' /tools/common/public_api.py#L82'>_isprivate</a>(name)</tt>	Return whether a name is private.
<tt style='background-color:#E8E8E8;'> tools.common.PublicAPIVisitor <a href=' /tools/common/public_api.py#L88'>_do_not_descend</a>(path,name)</tt>	Safely queries if a specific fully qualified name should be excluded.
<tt style='background-color:#E8E8E8;'> tools.common.PublicAPIVisitor <a href=' /tools/common/public_api.py#L93'>__call__</a>(path,parent,children)</tt>	Visitor interface see traverse for details.
<tt style='background-color:#E8E8E8;'> tools.common. <a href=' /tools/common/traverse.py#L28'>_traverse_internal</a>(root,visit,stack,path)</tt>	Internal helper for traverse.
<tt style='background-color:#E8E8E8;'> tools.common. <a href=' /tools/common/traverse.py#L58'>traverse</a>(root,visit)</tt>	Recursively enumerate all members of root.
<tt style='background-color:#E8E8E8;'> tools.quantization. <a href=' /tools/quantization/quantize_graph.py#L186'>node_name_from_input</a>(node_name)</tt>	Strips off ports and other decorations to get the underlying node name.
<tt style='background-color:#E8E8E8;'> tools.quantization. <a href=' /tools/quantization/quantize_graph.py#L196'>ensure_tensor_name_has_port</a>(node_name)</tt>	Makes sure that a tensor name has :0 if no explicit port exists.
<tt style='background-color:#E8E8E8;'> tools.quantization. <a href=' /tools/quantization/quantize_graph.py#L206'>unique_node_name_from_input</a>(node_name)</tt>	Replaces invalid characters in input names to get a unique node name.
<tt style='background-color:#E8E8E8;'> tools.quantization. <a href=' /tools/quantization/quantize_graph.py#L211'>quantize_array</a>(arr,num_buckets)</tt>	Quantizes a numpy array.
<tt style='background-color:#E8E8E8;'> tools.quantization. <a href=' /tools/quantization/quantize_graph.py#L241'>quantize_weight_rounded</a>(input_node)</tt>	Returns a replacement node for input_node containing bucketed floats.
<tt style='background-color:#E8E8E8;'> tools.quantization. <a href=' /tools/quantization/quantize_graph.py#L265'>quantize_weight_eightbit</a>(input_node,quantization_mode)</tt>	Returns replacement nodes for input_node using the dequantize op.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L321'>__init__</a>(input_graph,mode,quantized_input_range,fallback_quantization_range)</tt>	Sets up the class to rewrite a float graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L376'>create_nodes_map</a>(graph)</tt>	Builds a mapping of node names to their defs from the graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L386'>rewrite</a>(output_node_names)</tt>	Triggers rewriting of the float graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L454'>round_nodes_recursively</a>(current_node)</tt>	The entry point for simple rounding quantization.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L486'>quantize_nodes_recursively</a>(current_node)</tt>	The entry point for quantizing nodes to eight bit and back.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L507'>quantize_node</a>(input_node)</tt>	Handles quantizing a single node.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L553'>should_merge_with_fake_quant_node</a>()</tt>	Should the current node merge with self state output_node_stack[-1]?.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L571'>eightbitize_nodes_recursively</a>(current_node)</tt>	The entry point for transforming a graph into full eight bit.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L654'>add_eightbit_prologue_nodes</a>(original_node)</tt>	Adds input conversion nodes to handle quantizing the underlying node.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L674'>add_common_quantization_nodes</a>(namespace_prefix)</tt>	Builds constant nodes needed for quantization of inputs.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L687'>eightbitize_input_to_node</a>(namespace_prefix,original_input_name,reshape_dims_name,reduction_dims_name)</tt>	Takes one float input to an op and converts it to quantized form.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L778'>eightbitize_mat_mul_node</a>(original_node)</tt>	Replaces a matmul node with the eight bit equivalent sub-graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L797'>eightbitize_conv_node</a>(original_node)</tt>	Replaces a conv2d node with the eight bit equivalent sub-graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L813'>eightbitize_bias_add_node</a>(original_node)</tt>	Replaces a biasadd node with the eight bit equivalent sub-graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L829'>eightbitize_single_input_tensor_node</a>(original_node,add_op_function)</tt>	Replaces a single-tensor node with the eight bit equivalent sub-graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L894'>eightbitize_concat_node</a>(original_node)</tt>	Replaces a concat node with the eight bit equivalent sub-graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L966'>eightbitize_placeholder_node</a>(current_node)</tt>	Replaces a placeholder node with a quint8 placeholder node+dequantize.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L993'>eightbitize_reshape_node</a>(original_node)</tt>	Replaces a reshape node with the eight bit equivalent sub-graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L1018'>eightbitize_batch_norm_node</a>(original_node)</tt>	Replaces a matmul node with the eight bit equivalent sub-graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L1065'>add_output_graph_node</a>(output_node)</tt>	Inserts one node into the new graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L1069'>remove_redundant_quantization</a>(old_graph)</tt>	Removes unneeded pairs of quantize/dequantize ops from the graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L1171'>apply_final_node_renames</a>()</tt>	Applies node renames in self final_node_renames to self output_graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L1186'>remove_dead_nodes</a>(output_names)</tt>	Removes nodes that are no longer needed for inference from the graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.GraphRewriter <a href=' /tools/quantization/quantize_graph.py#L1192'>quantize_weights</a>(input_graph,quantization_mode)</tt>	Quantize float const ops.
<tt style='background-color:#E8E8E8;'> tools.quantization. <a href=' /tools/quantization/quantize_graph_test.py#L50'>test_mat_mul</a>(m,n,k,a)</tt>	Tests a matmul replacement.
<tt style='background-color:#E8E8E8;'> tools.quantization. <a href=' /tools/quantization/quantize_graph_test.py#L73'>test_conv</a>(depth,image_width,image_height,image_batch_count)</tt>	Tests a conv replacement.
<tt style='background-color:#E8E8E8;'> tools.quantization. <a href=' /tools/quantization/quantize_graph_test.py#L103'>are_tensors_near</a>(a,b,tolerance)</tt>	Tests whether two tensors are nearly identical.
<tt style='background-color:#E8E8E8;'> tools.quantization. <a href=' /tools/quantization/quantize_graph_test.py#L160'>test_graph</a>(float_graph_def,input_map,output_names,log_graph)</tt>	Runs the float graph through the rewriter and tests the results.
<tt style='background-color:#E8E8E8;'> tools.quantization.QuantizeGraphTest <a href=' /tools/quantization/quantize_graph_test.py#L208'>test_odd_padding_problem</a>()</tt>	Tests one error case we ran into in a real graph.
<tt style='background-color:#E8E8E8;'> tools.quantization.QuantizeGraphTest <a href=' /tools/quantization/quantize_graph_test.py#L233'>test_reshape</a>()</tt>	Tests that matmul->reshape->matmul avoids extra quantize/dequantize.
<tt style='background-color:#E8E8E8;'> tools.pip_package. <a href=' /tools/pip_package/simple_console.py#L26'>main</a>()</tt>	This script runs the pip smoke test.
<tt style='background-color:#E8E8E8;'> tools.pip_package. <a href=' /tools/pip_package/simple_console.py#L26'>main</a>(_)</tt>	Run an interactive console.
<tt style='background-color:#E8E8E8;'> tools.pip_package. <a href=' /tools/pip_package/setup.py#L150'>find_files</a>(pattern,root)</tt>	Return all the files matching pattern below root dir.
<tt style='background-color:#E8E8E8;'> tools.docs.DocGeneratorVisitor <a href=' /tools/docs/doc_generator_visitor.py#L29'>__init__</a>(root_name)</tt>	Make a visitor.
<tt style='background-color:#E8E8E8;'> tools.docs.DocGeneratorVisitor <a href=' /tools/docs/doc_generator_visitor.py#L47'>set_root_name</a>(root_name)</tt>	Sets the root name for subsequent __call__s.
<tt style='background-color:#E8E8E8;'> tools.docs.DocGeneratorVisitor <a href=' /tools/docs/doc_generator_visitor.py#L52'>index</a>()</tt>	A map from fully qualified names to objects to be documented.
<tt style='background-color:#E8E8E8;'> tools.docs.DocGeneratorVisitor <a href=' /tools/docs/doc_generator_visitor.py#L63'>tree</a>()</tt>	A map from fully qualified names to all its child names for traversal.
<tt style='background-color:#E8E8E8;'> tools.docs.DocGeneratorVisitor <a href=' /tools/docs/doc_generator_visitor.py#L75'>reverse_index</a>()</tt>	A map from id object to the preferred fully qualified name.
<tt style='background-color:#E8E8E8;'> tools.docs.DocGeneratorVisitor <a href=' /tools/docs/doc_generator_visitor.py#L90'>duplicate_of</a>()</tt>	A map from duplicate full names to a preferred fully qualified name.
<tt style='background-color:#E8E8E8;'> tools.docs.DocGeneratorVisitor <a href=' /tools/docs/doc_generator_visitor.py#L104'>duplicates</a>()</tt>	A map from preferred full names to a list of all names for this symbol.
<tt style='background-color:#E8E8E8;'> tools.docs.DocGeneratorVisitor <a href=' /tools/docs/doc_generator_visitor.py#L121'>_add_prefix</a>(name)</tt>	Adds the root name to a name.
<tt style='background-color:#E8E8E8;'> tools.docs.DocGeneratorVisitor <a href=' /tools/docs/doc_generator_visitor.py#L125'>__call__</a>(parent_name,parent,children)</tt>	Visitor interface see tensorflow/tools/common traverse for details.
<tt style='background-color:#E8E8E8;'> tools.docs.DocGeneratorVisitor <a href=' /tools/docs/doc_generator_visitor.py#L161'>_maybe_find_duplicates</a>()</tt>	Compute data structures containing information about duplicates.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/generate_lib.py#L35'>_is_free_function</a>(py_object,full_name,index)</tt>	Check if input is a free function and not a class- or static method.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/generate_lib.py#L52'>write_docs</a>(output_dir,parser_config,yaml_toc)</tt>	Write previously extracted docs to disk.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/generate_lib.py#L220'>extract</a>(py_modules,do_not_descend_map)</tt>	Extract docs from tf namespace and write them to disk.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/generate_lib.py#L257'>build_doc_index</a>(src_dir)</tt>	Build an index from a keyword designating a doc to _docinfo objects.
<tt style='background-color:#E8E8E8;'> tools.docs._GenerateGuideIndex <a href=' /tools/docs/generate_lib.py#L297'>process</a>(full_path,base_name)</tt>	Index a file reading from full_path, with base_name as the link.
<tt style='background-color:#E8E8E8;'> tools.docs._GenerateGuideIndex <a href=' /tools/docs/generate_lib.py#L314'>process_line</a>(_,line)</tt>	Index @{symbol} references as in the current file & section.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/generate_lib.py#L324'>_build_guide_index</a>(guide_src_dir)</tt>	Return dict symbol name -> _guideref from the files in guide_src_dir.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/generate_lib.py#L343'>_other_docs</a>(src_dir,output_dir,reference_resolver)</tt>	Convert all the files in src_dir and write results to output_dir.
<tt style='background-color:#E8E8E8;'> tools.docs.DocGenerator <a href=' /tools/docs/generate_lib.py#L460'>build</a>(flags)</tt>	Actually build the docs.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/py_guide_parser.py#L26'>md_files_in_dir</a>(py_guide_src_dir)</tt>	Returns a list of filename (full_path base) pairs for guide files.
<tt style='background-color:#E8E8E8;'> tools.docs.PyGuideParser <a href=' /tools/docs/py_guide_parser.py#L45'>process</a>(full_path)</tt>	Read and process the file at full_path.
<tt style='background-color:#E8E8E8;'> tools.docs.PyGuideParser <a href=' /tools/docs/py_guide_parser.py#L84'>replace_line</a>(line_number,line)</tt>	Replace the contents of line numbered line_number with line.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/pretty_docs.py#L22'>build_md_page</a>(page_info)</tt>	Given a pageinfo object return markdown for the page.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/pretty_docs.py#L47'>_build_function_page</a>(page_info)</tt>	Given a functionpageinfo object return the page as an md string.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/pretty_docs.py#L71'>_build_class_page</a>(page_info)</tt>	Given a classpageinfo object return the page as an md string.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/pretty_docs.py#L151'>_build_module_page</a>(page_info)</tt>	Given a classpageinfo object return the page as an md string.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/pretty_docs.py#L214'>_build_signature</a>(obj_info)</tt>	Returns a md code block showing the function signature.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/pretty_docs.py#L232'>_build_compatibility</a>(compatibility)</tt>	Return the compatibility section as an md string.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/pretty_docs.py#L244'>_build_function_details</a>(function_details)</tt>	Return the function details section as an md string.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser_test.py#L30'>test_function</a>()</tt>	Docstring for test_function.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser_test.py#L30'>test_function</a>(unused_arg,unused_kwarg)</tt>	Docstring for test function.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser_test.py#L35'>test_function_with_args_kwargs</a>(unused_arg)</tt>	Docstring for second test function.
<tt style='background-color:#E8E8E8;'> tools.docs.TestClass <a href=' /tools/docs/parser_test.py#L43'>a_method</a>(arg)</tt>	Docstring for a method.
<tt style='background-color:#E8E8E8;'> tools.docs.TestClass <a href=' /tools/docs/parser_test.py#L51'>a_property</a>()</tt>	Docstring for a property.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser.py#L47'>documentation_path</a>(full_name)</tt>	Returns the file path for the documentation for the given api symbol.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser.py#L65'>_get_raw_docstring</a>(py_object)</tt>	Get the docs for a given python object.
<tt style='background-color:#E8E8E8;'> tools.docs.ReferenceResolver <a href=' /tools/docs/parser.py#L110'>from_visitor</a>(cls,visitor,doc_index)</tt>	A factory function for building a referenceresolver from a visitor.
<tt style='background-color:#E8E8E8;'> tools.docs.ReferenceResolver <a href=' /tools/docs/parser.py#L146'>to_json_file</a>(filepath)</tt>	Converts the refenceresolver to json and writes it to the specified file.
<tt style='background-color:#E8E8E8;'> tools.docs.ReferenceResolver <a href=' /tools/docs/parser.py#L166'>replace_references</a>(string,relative_path_to_root)</tt>	Replace "@{symbol}" references with links to symbol's documentation page.
<tt style='background-color:#E8E8E8;'> tools.docs.ReferenceResolver <a href=' /tools/docs/parser.py#L194'>python_link</a>(link_text,ref_full_name,relative_path_to_root,code_ref)</tt>	Resolve a "@{python symbol}" reference to a markdown link.
<tt style='background-color:#E8E8E8;'> tools.docs.ReferenceResolver <a href=' /tools/docs/parser.py#L221'>py_master_name</a>(full_name)</tt>	Return the master name for a python symbol name.
<tt style='background-color:#E8E8E8;'> tools.docs.ReferenceResolver <a href=' /tools/docs/parser.py#L225'>reference_to_url</a>(ref_full_name,relative_path_to_root)</tt>	Resolve a "@{python symbol}" reference to a relative path.
<tt style='background-color:#E8E8E8;'> tools.docs.ReferenceResolver <a href=' /tools/docs/parser.py#L273'>_one_ref</a>(string,relative_path_to_root)</tt>	Return a link for a single "@{symbol}" reference.
<tt style='background-color:#E8E8E8;'> tools.docs.ReferenceResolver <a href=' /tools/docs/parser.py#L309'>_doc_link</a>(string,link_text,manual_link_text,relative_path_to_root)</tt>	Generate a link for a @{$ } reference.
<tt style='background-color:#E8E8E8;'> tools.docs.ReferenceResolver <a href=' /tools/docs/parser.py#L330'>_doc_missing</a>(string,unused_hash_tag,link_text,unused_manual_link_text)</tt>	Generate an error for unrecognized @{$ } references.
<tt style='background-color:#E8E8E8;'> tools.docs.ReferenceResolver <a href=' /tools/docs/parser.py#L336'>_cc_link</a>(string,link_text,unused_manual_link_text,relative_path_to_root)</tt>	Generate a link for a @{tensorflow : } reference.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser.py#L362'>_handle_compatibility</a>(doc)</tt>	Parse and remove compatibility blocks from the main docstring.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser.py#L381'>_gen_pairs</a>(items)</tt>	Given an list of items [a b a b ], generate pairs [ a b a b ].
<tt style='background-color:#E8E8E8;'> tools.docs._FunctionDetail <a href=' /tools/docs/parser.py#L406'>__str__</a>()</tt>	Return the original string that represents the function detail.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser.py#L417'>_parse_function_details</a>(docstring)</tt>	Given a docstring split off the header and parse the function details.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser.py#L489'>_parse_md_docstring</a>(py_object,relative_path_to_root,reference_resolver)</tt>	Parse the object's docstring and return a _docstringinfo.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser.py#L531'>_get_arg_spec</a>(func)</tt>	Extracts signature information from a function or functools partial object.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser.py#L583'>_generate_signature</a>(func,reverse_index)</tt>	Given a function returns a list of strings representing its args.
<tt style='background-color:#E8E8E8;'> tools.docs._FunctionPageInfo <a href=' /tools/docs/parser.py#L788'>set_signature</a>(function,reverse_index)</tt>	Attach the function's signature.
<tt style='background-color:#E8E8E8;'> tools.docs._ClassPageInfo <a href=' /tools/docs/parser.py#L897'>collect_docs_for_class</a>(py_class,parser_config)</tt>	Collect information necessary specifically for a class's doc page.
<tt style='background-color:#E8E8E8;'> tools.docs._ModulePageInfo <a href=' /tools/docs/parser.py#L1079'>collect_docs_for_module</a>(parser_config)</tt>	Collect information necessary specifically for a module's doc page.
<tt style='background-color:#E8E8E8;'> tools.docs.ParserConfig <a href=' /tools/docs/parser.py#L1123'>__init__</a>(reference_resolver,duplicates,duplicate_of,tree)</tt>	Object with the common config for docs_for_object() calls.
<tt style='background-color:#E8E8E8;'> tools.docs.ParserConfig <a href=' /tools/docs/parser.py#L1157'>py_name_to_object</a>(full_name)</tt>	Return the python object for a python symbol name.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser.py#L1162'>docs_for_object</a>(full_name,py_object,parser_config)</tt>	Return a pageinfo object describing a given object from the tf api.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser.py#L1327'>_get_defined_in</a>(py_object,parser_config)</tt>	Returns a description of where the passed in python object was defined.
<tt style='background-color:#E8E8E8;'> tools.docs. <a href=' /tools/docs/parser.py#L1369'>generate_global_index</a>(library_name,index,reference_resolver)</tt>	Given a dict of full names to python objects generate an index page.
<tt style='background-color:#E8E8E8;'> tools.api.lib. <a href=' /tools/api/lib/python_object_to_proto_visitor.py#L35'>_SanitizedArgSpec</a>(obj)</tt>	Get an argspec string that is free of addresses.
<tt style='background-color:#E8E8E8;'> tools.api.lib. <a href=' /tools/api/lib/python_object_to_proto_visitor.py#L72'>_SanitizedMRO</a>(obj)</tt>	Get a list of superclasses with minimal amount of non-tf classes.
<tt style='background-color:#E8E8E8;'> tools.api.lib.PythonObjectToProtoVisitor <a href=' /tools/api/lib/python_object_to_proto_visitor.py#L105'>GetProtos</a>()</tt>	Return the list of protos stored.
<tt style='background-color:#E8E8E8;'> tools.dist_test.python. <a href=' /tools/dist_test/python/census_widendeep.py#L41'>census_model_config</a>()</tt>	Configuration for the census wide & deep model.
<tt style='background-color:#E8E8E8;'> tools.dist_test.python.CensusDataSource <a href=' /tools/dist_test/python/census_widendeep.py#L124'>__init__</a>(data_dir,train_data_url,test_data_url,columns)</tt>	Constructor of censusdatasource.
<tt style='background-color:#E8E8E8;'> tools.dist_test.python.CensusDataSource <a href=' /tools/dist_test/python/census_widendeep.py#L184'>_input_fn</a>(df)</tt>	Input data function.
<tt style='background-color:#E8E8E8;'> tools.dist_test.python. <a href=' /tools/dist_test/python/census_widendeep.py#L214'>_create_experiment_fn</a>(output_dir)</tt>	Experiment creation function.
<tt style='background-color:#E8E8E8;'> tools.dist_test.scripts. <a href=' /tools/dist_test/scripts/k8s_tensorflow_lib.py#L140'>GenerateConfig</a>(num_workers,num_param_servers,port,request_load_balancer)</tt>	Generate configuration strings.
<tt style='background-color:#E8E8E8;'> tools.dist_test.scripts. <a href=' /tools/dist_test/scripts/k8s_tensorflow_lib.py#L232'>WorkerClusterSpecString</a>(num_workers,num_param_servers,port,name_prefix)</tt>	Generates worker cluster spec.
<tt style='background-color:#E8E8E8;'> tools.dist_test.scripts. <a href=' /tools/dist_test/scripts/k8s_tensorflow_lib.py#L240'>ParamServerClusterSpecString</a>(num_workers,num_param_servers,port,name_prefix)</tt>	Generates parameter server spec.
<tt style='background-color:#E8E8E8;'> tools.dist_test.scripts. <a href=' /tools/dist_test/scripts/k8s_tensorflow_lib.py#L249'>ClusterSpecString</a>(num_workers,num_param_servers,port,name_prefix)</tt>	Generates general cluster spec.
<tt style='background-color:#E8E8E8;'> tools.dist_test.scripts. <a href=' /tools/dist_test/scripts/k8s_tensorflow_lib.py#L269'>GetCommonArgs</a>(num_workers,num_param_servers,port,name_prefix)</tt>	Get arguments common to both worker and ps jobs.
<tt style='background-color:#E8E8E8;'> tools.dist_test.scripts. <a href=' /tools/dist_test/scripts/k8s_tensorflow.py#L39'>main</a>()</tt>	Do arg parsing.
<tt style='background-color:#E8E8E8;'> tools.dist_test.server. <a href=' /tools/dist_test/server/grpc_tensorflow_server.py#L45'>parse_cluster_spec</a>(cluster_spec,cluster,verbose)</tt>	Parse content of cluster_spec string and inject info into cluster protobuf.
<tt style='background-color:#E8E8E8;'> contrib.stateless.python.kernel_tests. <a href=' /contrib/stateless/python/kernel_tests/stateless_random_ops_test.py#L34'>invert_philox</a>(key,value)</tt>	Invert the philox bijection.
<tt style='background-color:#E8E8E8;'> contrib.batching.python.ops. <a href=' /contrib/batching/python/ops/batch_ops.py#L35'>_BatchGrad</a>(op)</tt>	Gradient for batch op.
<tt style='background-color:#E8E8E8;'> contrib.batching.python.ops. <a href=' /contrib/batching/python/ops/batch_ops.py#L62'>batch_function</a>(num_batch_threads,max_batch_size,batch_timeout_micros,allowed_batch_sizes)</tt>	Batches the computation done by the decorated function.
<tt style='background-color:#E8E8E8;'> contrib.batching.python.ops. <a href=' /contrib/batching/python/ops/batch_ops_test.py#L32'>delayed_plus1</a>(x)</tt>	Sleeps for 100ms then returns x+1.
<tt style='background-color:#E8E8E8;'> contrib.batching.python.ops.BatchOpsTest <a href=' /contrib/batching/python/ops/batch_ops_test.py#L41'>testBasicBatch</a>()</tt>	Tests that a single batched tensor executes together and only once.
<tt style='background-color:#E8E8E8;'> contrib.batching.python.ops.BatchOpsTest <a href=' /contrib/batching/python/ops/batch_ops_test.py#L81'>testBatchWithPadding</a>()</tt>	Test that batching with padding up to an allowed batch size works.
<tt style='background-color:#E8E8E8;'> contrib.batching.python.ops.BatchOpsTest <a href=' /contrib/batching/python/ops/batch_ops_test.py#L111'>testMultipleBatch</a>()</tt>	Tests that multiple batched tensors execute together.
<tt style='background-color:#E8E8E8;'> contrib.batching.python.ops.BatchOpsTest <a href=' /contrib/batching/python/ops/batch_ops_test.py#L150'>testIllegalBatchDifferentDim0Sizes</a>()</tt>	Tests illegally feeding tensors with different dim0 sizes.
<tt style='background-color:#E8E8E8;'> contrib.batching.python.ops.BatchOpsTest <a href=' /contrib/batching/python/ops/batch_ops_test.py#L164'>testBasicUnbatch</a>()</tt>	Tests that batch and unbatch work together.
<tt style='background-color:#E8E8E8;'> contrib.batching.python.ops.BatchOpsTest <a href=' /contrib/batching/python/ops/batch_ops_test.py#L188'>testBasicUnbatchDecorated</a>()</tt>	Tests that the batch_function decorator works.
<tt style='background-color:#E8E8E8;'> contrib.batching.python.ops.BatchOpsTest <a href=' /contrib/batching/python/ops/batch_ops_test.py#L208'>testUnbatchTimeout</a>()</tt>	Tests that the unbatch timeout works.
<tt style='background-color:#E8E8E8;'> contrib.batching.python.ops.BatchOpsTest <a href=' /contrib/batching/python/ops/batch_ops_test.py#L250'>testUnbatchGrad</a>()</tt>	Tests that batch and unbatch are differentiable.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.kernel_tests. <a href=' /contrib/bayesflow/python/kernel_tests/stochastic_gradient_estimators_test.py#L39'>_vimco</a>(loss)</tt>	Python implementation of vimco.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/monte_carlo_impl.py#L40'>expectation_importance_sampler</a>(f,log_p,sampling_dist_q,z)</tt>	Monte carlo estimate of e_p[f z ] = e_q[f z p z / q z ].
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/monte_carlo_impl.py#L114'>expectation_importance_sampler_logspace</a>(log_f,log_p,sampling_dist_q,z)</tt>	Importance sampling with a positive function in log-space.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/monte_carlo_impl.py#L169'>_logspace_mean</a>(log_values)</tt>	Evaluate log[e[values]] in a stable manner.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/monte_carlo_impl.py#L197'>expectation</a>(f,p,z,n)</tt>	Monte carlo estimate of an expectation e_p[f z ] with sample mean.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/monte_carlo_impl.py#L254'>_sample_mean</a>(values)</tt>	Mean over sample indices in this module this is always [0].
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/monte_carlo_impl.py#L259'>_sample_max</a>(values)</tt>	Max over sample indices in this module this is always [0].
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/monte_carlo_impl.py#L264'>_get_samples</a>(dist,z,n,seed)</tt>	Check args and return samples.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/stochastic_gradient_estimators.py#L69'>score_function</a>(stochastic_tensor,value,loss,baseline)</tt>	Score function estimator.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/stochastic_gradient_estimators.py#L102'>get_score_function_with_advantage</a>(advantage_fn,name)</tt>	Score function estimator with advantage function.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/stochastic_gradient_estimators.py#L126'>get_score_function_with_constant_baseline</a>(baseline,name)</tt>	Score function estimator with constant baseline.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/stochastic_gradient_estimators.py#L145'>get_score_function_with_baseline</a>(baseline_fn,name)</tt>	Score function estimator with baseline function.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/stochastic_gradient_estimators.py#L199'>get_vimco_advantage_fn</a>(have_log_loss)</tt>	Vimco variational inference for monte carlo objectives baseline.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/stochastic_gradient_estimators.py#L304'>_logexpm1</a>(x)</tt>	Stably calculate log(exp x -1).
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/stochastic_graph_impl.py#L35'>_upstream_stochastic_nodes</a>(tensors)</tt>	Map tensors to the stochastic tensors upstream of them.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/stochastic_graph_impl.py#L53'>_stochastic_dependencies_map</a>(fixed_losses,stochastic_tensors)</tt>	Map stochastic tensors to the fixed losses that depend on them.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/stochastic_graph_impl.py#L95'>surrogate_loss</a>(sample_losses,stochastic_tensors,name)</tt>	Surrogate loss for stochastic graphs.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops.BaseStochasticTensor <a href=' /contrib/bayesflow/python/ops/stochastic_tensor_impl.py#L83'>loss</a>(sample_loss)</tt>	Returns the term to add to the surrogate loss.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops._StochasticValueType <a href=' /contrib/bayesflow/python/ops/stochastic_tensor_impl.py#L135'>stop_gradient</a>()</tt>	Whether the value should be wrapped in stop_gradient.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops.SampleValue <a href=' /contrib/bayesflow/python/ops/stochastic_tensor_impl.py#L183'>__init__</a>(shape,stop_gradient)</tt>	Sample according to shape.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/stochastic_tensor_impl.py#L213'>value_type</a>(dist_value_type)</tt>	Creates a value type context for any stochastictensor created within.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops.StochasticTensor <a href=' /contrib/bayesflow/python/ops/stochastic_tensor_impl.py#L272'>__init__</a>(dist,name,dist_value_type,loss_fn)</tt>	Construct a stochastictensor.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops.StochasticTensor <a href=' /contrib/bayesflow/python/ops/stochastic_tensor_impl.py#L347'>_create_value</a>()</tt>	Create the value tensor based on the value type store as self _value.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops.ObservedStochasticTensor <a href=' /contrib/bayesflow/python/ops/stochastic_tensor_impl.py#L421'>__init__</a>(dist,value,name)</tt>	Construct an observedstochastictensor.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/entropy_impl.py#L56'>elbo_ratio</a>(log_p,q,z,n)</tt>	Estimate of the ratio appearing in the elbo and kl divergence.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/entropy_impl.py#L138'>entropy_shannon</a>(p,z,n,seed)</tt>	Monte carlo or deterministic computation of shannon's entropy.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/entropy_impl.py#L204'>renyi_ratio</a>(log_p,q,alpha,z)</tt>	Monte carlo estimate of the ratio appearing in renyi divergence.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/entropy_impl.py#L323'>renyi_alpha</a>(step,decay_time,alpha_min,alpha_max)</tt>	Exponentially decaying tensor appropriate for renyi ratios.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/variational_inference_impl.py#L40'>register_prior</a>(variational,prior)</tt>	Associate a variational stochastictensor with a distribution prior.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/variational_inference_impl.py#L94'>elbo</a>(log_likelihood,variational_with_prior,keep_batch_dim,form)</tt>	Evidence lower bound log p x >= elbo.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/variational_inference_impl.py#L173'>elbo_with_log_joint</a>(log_joint,variational,keep_batch_dim,form)</tt>	Evidence lower bound log p x >= elbo.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/variational_inference_impl.py#L223'>_elbo</a>(form,log_likelihood,log_joint,variational_with_prior)</tt>	Internal implementation of elbo users should use elbo.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/variational_inference_impl.py#L299'>_find_variational_and_priors</a>(model,variational_with_prior,require_prior)</tt>	Find upstream stochastictensors and match with registered priors.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/stochastic_variables.py#L31'>get_stochastic_variable</a>(getter,name,shape,dist_cls)</tt>	Custom variable getter for stochastic variables.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.python.ops. <a href=' /contrib/bayesflow/python/ops/stochastic_variables.py#L141'>make_stochastic_variable_getter</a>(dist_cls,dist_kwargs,param_initializers,prior)</tt>	Get_stochastic_variable with args partially applied.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.examples.reinforce_simple. <a href=' /contrib/bayesflow/examples/reinforce_simple/reinforce_simple_example.py#L29'>split_apply_merge</a>(inp,partitions,fns)</tt>	Split input according to partitions pass results through fns and merge.
<tt style='background-color:#E8E8E8;'> contrib.bayesflow.examples.reinforce_simple. <a href=' /contrib/bayesflow/examples/reinforce_simple/reinforce_simple_example.py#L55'>build_split_apply_merge_model</a>()</tt>	Build the split-apply-merge model.
<tt style='background-color:#E8E8E8;'> contrib.copy_graph.python.util. <a href=' /contrib/copy_graph/python/util/copy_elements.py#L41'>copy_variable_to_graph</a>(org_instance,to_graph,scope)</tt>	Given a variable instance from one graph, initializes and returns a copy of it from another graph, under the specified scope.
<tt style='background-color:#E8E8E8;'> contrib.copy_graph.python.util. <a href=' /contrib/copy_graph/python/util/copy_elements.py#L101'>copy_op_to_graph</a>(org_instance,to_graph,variables,scope)</tt>	Given an operation 'org_instance from one graph, initializes and returns a copy of it from another graph,.
<tt style='background-color:#E8E8E8;'> contrib.copy_graph.python.util. <a href=' /contrib/copy_graph/python/util/copy_elements.py#L237'>get_copied_op</a>(org_instance,graph,scope)</tt>	Given an operation instance from some graph, returns its namesake from graph, under the specified scope.
<tt style='background-color:#E8E8E8;'> contrib.util. <a href=' /contrib/util/loader.py#L30'>load_op_library</a>(path)</tt>	Loads a contrib op library from the given path.
<tt style='background-color:#E8E8E8;'> contrib.nccl.python.ops. <a href=' /contrib/nccl/python/ops/nccl_ops.py#L34'>all_sum</a>(tensors)</tt>	Returns a list of tensors with the all-reduce sum across tensors.
<tt style='background-color:#E8E8E8;'> contrib.nccl.python.ops. <a href=' /contrib/nccl/python/ops/nccl_ops.py#L51'>all_prod</a>(tensors)</tt>	Returns a list of tensors with the all-reduce product across tensors.
<tt style='background-color:#E8E8E8;'> contrib.nccl.python.ops. <a href=' /contrib/nccl/python/ops/nccl_ops.py#L68'>all_min</a>(tensors)</tt>	Returns a list of tensors with the all-reduce min across tensors.
<tt style='background-color:#E8E8E8;'> contrib.nccl.python.ops. <a href=' /contrib/nccl/python/ops/nccl_ops.py#L85'>all_max</a>(tensors)</tt>	Returns a list of tensors with the all-reduce max across tensors.
<tt style='background-color:#E8E8E8;'> contrib.nccl.python.ops. <a href=' /contrib/nccl/python/ops/nccl_ops.py#L102'>broadcast</a>(src_tensor,dst_devices)</tt>	Returns a list of tensors on dst_devices, each with value tensor.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.kernel_tests.MaskedmatmulBenchmark <a href=' /contrib/factorization/python/kernel_tests/masked_matmul_benchmark.py#L40'>_make_sparse_mask</a>(mask_shape,nnz,sort)</tt>	Creates a sparse tensor to be used as a mask in masked_matmul.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.kernel_tests.MaskedmatmulBenchmark <a href=' /contrib/factorization/python/kernel_tests/masked_matmul_benchmark.py#L62'>_run_graph</a>(a_shape,b_shape,nnz,num_iters)</tt>	Run the graph and return its average execution time.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.KMeans <a href=' /contrib/factorization/python/ops/clustering_ops.py#L58'>__init__</a>(inputs,num_clusters,initial_clusters,distance_metric)</tt>	Creates an object for generating kmeans clustering graph.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.KMeans <a href=' /contrib/factorization/python/ops/clustering_ops.py#L126'>_distance_graph</a>(cls,inputs,clusters,distance_metric)</tt>	Computes distance between each input and each cluster center.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.KMeans <a href=' /contrib/factorization/python/ops/clustering_ops.py#L150'>_compute_euclidean_distance</a>(cls,inputs,clusters)</tt>	Computes euclidean distance between each input and each cluster center.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.KMeans <a href=' /contrib/factorization/python/ops/clustering_ops.py#L176'>_compute_cosine_distance</a>(cls,inputs,clusters,inputs_normalized)</tt>	Computes cosine distance between each input and each cluster center.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.KMeans <a href=' /contrib/factorization/python/ops/clustering_ops.py#L202'>_infer_graph</a>(inputs,clusters)</tt>	Maps input to closest cluster and the score.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.KMeans <a href=' /contrib/factorization/python/ops/clustering_ops.py#L240'>_init_clusters_random</a>()</tt>	Does random initialization of clusters.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.KMeans <a href=' /contrib/factorization/python/ops/clustering_ops.py#L262'>_clusters_l2_normalized</a>()</tt>	Returns true if clusters centers are kept normalized.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.KMeans <a href=' /contrib/factorization/python/ops/clustering_ops.py#L268'>_initialize_clusters</a>(cluster_centers,cluster_centers_initialized,cluster_centers_updated)</tt>	Returns an op to initialize the cluster centers.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.KMeans <a href=' /contrib/factorization/python/ops/clustering_ops.py#L365'>_l2_normalize_data</a>(cls,inputs)</tt>	Normalized the input data.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.KMeans <a href=' /contrib/factorization/python/ops/clustering_ops.py#L374'>training_graph</a>()</tt>	Generate a training graph for kmeans algorithm.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.KMeans <a href=' /contrib/factorization/python/ops/clustering_ops.py#L465'>_mini_batch_training_op</a>(inputs,cluster_idx_list,cluster_centers,total_counts)</tt>	Creates an op for training for mini batch case.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.KMeans <a href=' /contrib/factorization/python/ops/clustering_ops.py#L538'>_full_batch_training_op</a>(inputs,cluster_idx_list,cluster_centers)</tt>	Creates an op for training for full batch case.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L182'>__init__</a>(input_rows,input_cols,n_components,unobserved_weight)</tt>	Creates model for wals matrix factorization.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L267'>row_factors</a>()</tt>	Returns a list of tensors corresponding to row factor shards.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L272'>col_factors</a>()</tt>	Returns a list of tensors corresponding to column factor shards.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L277'>row_weights</a>()</tt>	Returns a list of tensors corresponding to row weight shards.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L282'>col_weights</a>()</tt>	Returns a list of tensors corresponding to col weight shards.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L287'>initialize_op</a>()</tt>	Returns an op for initializing tensorflow variables.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L297'>_shard_sizes</a>(cls,dims,num_shards)</tt>	Helper function to split dims values into num_shards.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L303'>_create_factors</a>(cls,rows,cols,num_shards)</tt>	Helper function to create row and column factors.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L337'>_create_weights</a>(cls,wt_init,num_wts,num_shards)</tt>	Helper function to create sharded weight vector.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L396'>_create_gramian</a>(n_components,name)</tt>	Helper function to create the gramian variable.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L413'>_transient_var</a>(name)</tt>	Helper function to create a variable.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L423'>_prepare_gramian</a>(factors,gramian)</tt>	Helper function to create ops to prepare/calculate gramian.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L445'>_cached_copy</a>(var,name,pass_through)</tt>	Helper function to create a worker cached copy of a variable.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L499'>_create_transient_vars</a>()</tt>	Creates local cache of factors weights and gramian for rows and columns.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L557'>worker_init</a>()</tt>	Op to initialize worker state once before starting any updates.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L562'>row_update_prep_gramian_op</a>()</tt>	Op to form the gramian before starting row updates.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L571'>col_update_prep_gramian_op</a>()</tt>	Op to form the gramian before starting col updates.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L580'>initialize_row_update_op</a>()</tt>	Op to initialize worker state before starting row updates.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L585'>initialize_col_update_op</a>()</tt>	Op to initialize worker state before starting column updates.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L590'>_get_sharding_func</a>(size,num_shards)</tt>	Create sharding function for scatter update.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L609'>scatter_update</a>(cls,factor,indices,values)</tt>	Helper function for doing sharded scatter update.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L633'>update_row_factors</a>(sp_input,transpose_input)</tt>	Updates the row factors.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L658'>update_col_factors</a>(sp_input,transpose_input)</tt>	Updates the column factors.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L683'>project_row_factors</a>(sp_input,transpose_input,projection_weights)</tt>	Projects the row factors.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L712'>project_col_factors</a>(sp_input,transpose_input,projection_weights)</tt>	Projects the column factors.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSModel <a href=' /contrib/factorization/python/ops/factorization_ops.py#L743'>_process_input_helper</a>(update_row_factors,sp_input,transpose_input,row_weights)</tt>	Creates the graph for processing a sparse slice of input.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmOpsTest <a href=' /contrib/factorization/python/ops/gmm_ops_test.py#L50'>make_data</a>(num_vectors)</tt>	Generates 2-dimensional data centered on 2 2 -1 -1.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmOpsTest <a href=' /contrib/factorization/python/ops/gmm_ops_test.py#L72'>make_data_from_centers</a>(num_vectors,centers)</tt>	Generates 2-dimensional data with random centers.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmOpsTest <a href=' /contrib/factorization/python/ops/gmm_ops_test.py#L117'>test_simple_cluster</a>()</tt>	Tests that the clusters are correct.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmOpsTest <a href=' /contrib/factorization/python/ops/gmm_ops_test.py#L139'>testParams</a>()</tt>	Tests that the params work as intended.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSMatrixFactorizationTest <a href=' /contrib/factorization/python/ops/wals_test.py#L47'>np_array_to_sparse</a>(np_array)</tt>	Transforms an np array to a tf sparsetensor.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSMatrixFactorizationTest <a href=' /contrib/factorization/python/ops/wals_test.py#L51'>calculate_loss</a>()</tt>	Calculates the loss of the current trained model.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSMatrixFactorizationTest <a href=' /contrib/factorization/python/ops/wals_test.py#L71'>remap_sparse_tensor_rows</a>(sp_x,row_ids,shape)</tt>	Remaps the row ids of a tf sparsetensor.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSMatrixFactorizationTest <a href=' /contrib/factorization/python/ops/wals_test.py#L81'>input_fn</a>(np_matrix,batch_size,project_row,projection_weights)</tt>	Returns an input_fn that selects row and col batches from np_matrix.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops. <a href=' /contrib/factorization/python/ops/factorization_ops_test_utils.py#L40'>np_matrix_to_tf_sparse</a>(np_matrix,row_slices,col_slices,transpose)</tt>	Simple util to slice non-zero np matrix elements as tf sparsetensor.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops. <a href=' /contrib/factorization/python/ops/factorization_ops_test_utils.py#L78'>calculate_loss</a>(input_mat,row_factors,col_factors,regularization)</tt>	Calculates the loss of a given factorization.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops. <a href=' /contrib/factorization/python/ops/gmm.py#L36'>_streaming_sum</a>(scalar_tensor)</tt>	Create a sum metric and update op.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GMM <a href=' /contrib/factorization/python/ops/gmm.py#L49'>__init__</a>(num_clusters,model_dir,random_seed,params)</tt>	Creates a model for running gmm training and inference.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GMM <a href=' /contrib/factorization/python/ops/gmm.py#L80'>predict_assignments</a>(input_fn,batch_size,outputs)</tt>	See baseestimator predict.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GMM <a href=' /contrib/factorization/python/ops/gmm.py#L88'>score</a>(input_fn,batch_size,steps)</tt>	Predict total sum of distances to nearest clusters.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GMM <a href=' /contrib/factorization/python/ops/gmm.py#L106'>weights</a>()</tt>	Returns the cluster weights.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GMM <a href=' /contrib/factorization/python/ops/gmm.py#L111'>clusters</a>()</tt>	Returns cluster centers.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GMM <a href=' /contrib/factorization/python/ops/gmm.py#L117'>covariances</a>()</tt>	Returns the covariances.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GMM <a href=' /contrib/factorization/python/ops/gmm.py#L128'>_model_builder</a>()</tt>	Creates a model function.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops. <a href=' /contrib/factorization/python/ops/gmm_ops.py#L46'>_covariance</a>(x,diag)</tt>	Defines the covariance operation of a matrix.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops. <a href=' /contrib/factorization/python/ops/gmm_ops.py#L67'>_init_clusters_random</a>(data,num_clusters,random_seed)</tt>	Does random initialization of clusters.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L154'>_create_variables</a>(data,initial_means)</tt>	Initializes gmm algorithm.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L199'>training_ops</a>()</tt>	Returns the training operation.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L206'>clusters</a>()</tt>	Returns the clusters with dimensions num_classes x 1 x num_dimensions.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L210'>covariances</a>()</tt>	Returns the covariances matrices.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L214'>assignments</a>()</tt>	Returns a list of tensors with the matrix of assignments per shard.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L221'>scores</a>()</tt>	Returns the distances to each class.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L231'>_define_graph</a>(data)</tt>	Define graph for a single iteration.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L247'>_define_full_covariance_probs</a>(shard_id,shard)</tt>	Defines the full covariance probabilties per example in a class.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L268'>_define_diag_covariance_probs</a>(shard_id,shard)</tt>	Defines the diagonal covariance probabilities per example in a class.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L292'>_define_log_prob_operation</a>(shard_id,shard)</tt>	Probability per example in a class.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L309'>_define_prior_log_prob_operation</a>(shard_id)</tt>	Computes the prior probability of all samples.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L334'>_define_partial_maximization_operation</a>(shard_id,shard)</tt>	Computes the partial statistics of the means and covariances.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L409'>_define_distance_to_clusters</a>(data)</tt>	Defines the mahalanobis distance to the assigned gaussian.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GmmAlgorithm <a href=' /contrib/factorization/python/ops/gmm_ops.py#L447'>_define_loglikelihood_operation</a>()</tt>	Defines the total log-likelihood of current iteration.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops. <a href=' /contrib/factorization/python/ops/gmm_ops.py#L455'>gmm</a>(inp,initial_clusters,num_clusters,random_seed)</tt>	Creates the graph for gaussian mixture model gmm clustering.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops._SweepHook <a href=' /contrib/factorization/python/ops/wals.py#L91'>_create_switch_ops</a>(processed_row_indices,processed_col_indices,train_op)</tt>	Creates ops to update is_row_sweep_var and to increment global_step.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops._SweepHook <a href=' /contrib/factorization/python/ops/wals.py#L201'>before_run</a>(run_context)</tt>	Runs the appropriate prep ops and requests running update ops.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops. <a href=' /contrib/factorization/python/ops/wals.py#L228'>_wals_factorization_model_function</a>(features,labels,mode,params)</tt>	Model function for the walsfactorization estimator.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSMatrixFactorization <a href=' /contrib/factorization/python/ops/wals.py#L416'>__init__</a>(num_rows,num_cols,embedding_dimension,unobserved_weight)</tt>	Creates a model for matrix factorization using the wals method.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSMatrixFactorization <a href=' /contrib/factorization/python/ops/wals.py#L512'>get_row_factors</a>()</tt>	Returns the row factors of the model loading them from checkpoint.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSMatrixFactorization <a href=' /contrib/factorization/python/ops/wals.py#L522'>get_col_factors</a>()</tt>	Returns the column factors of the model loading them from checkpoint.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WALSMatrixFactorization <a href=' /contrib/factorization/python/ops/wals.py#L532'>get_projections</a>(input_fn)</tt>	Computes the projections of the rows or columns given in input_fn.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.WalsModelTest <a href=' /contrib/factorization/python/ops/factorization_ops_test.py#L580'>simple_train</a>(model,inp,num_iterations)</tt>	Helper function to train model on inp for num_iterations.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GMMTest <a href=' /contrib/factorization/python/ops/gmm_test.py#L106'>test_weights</a>()</tt>	Tests the shape of the weights.
<tt style='background-color:#E8E8E8;'> contrib.factorization.python.ops.GMMTest <a href=' /contrib/factorization/python/ops/gmm_test.py#L116'>test_clusters</a>()</tt>	Tests the shape of the clusters.
<tt style='background-color:#E8E8E8;'> contrib.factorization.examples. <a href=' /contrib/factorization/examples/mnist.py#L52'>placeholder_inputs</a>()</tt>	Generate placeholder variables to represent the input tensors.
<tt style='background-color:#E8E8E8;'> contrib.factorization.examples. <a href=' /contrib/factorization/examples/mnist.py#L65'>fill_feed_dict</a>(data_set,images_pl,labels_pl,batch_size)</tt>	Fills the feed_dict for training the given step.
<tt style='background-color:#E8E8E8;'> contrib.factorization.examples. <a href=' /contrib/factorization/examples/mnist.py#L87'>do_eval</a>(sess,eval_correct,images_placeholder,labels_placeholder)</tt>	Runs one evaluation against the full epoch of data.
<tt style='background-color:#E8E8E8;'> contrib.factorization.examples. <a href=' /contrib/factorization/examples/mnist.py#L121'>inference</a>(inp,num_clusters,hidden1_units,hidden2_units)</tt>	Build the mnist model up to where it may be used for inference.
<tt style='background-color:#E8E8E8;'> contrib.factorization.examples. <a href=' /contrib/factorization/examples/mnist.py#L183'>run_training</a>()</tt>	Train mnist for a number of steps.
<tt style='background-color:#E8E8E8;'> contrib.cudnn_rnn.python.kernel_tests.CudnnRNNTest <a href=' /contrib/cudnn_rnn/python/kernel_tests/cudnn_rnn_ops_test.py#L54'>_create_params_savable</a>(params,model)</tt>	Create a rnnparamssaveable for the weight and bias parameters.
<tt style='background-color:#E8E8E8;'> contrib.cudnn_rnn.python.ops.RNNParamsSaveable <a href=' /contrib/cudnn_rnn/python/ops/cudnn_rnn_ops.py#L48'>__init__</a>(params_to_canonical,canonical_to_params,param_variables,name)</tt>	Creates a rnnparamssaveable object.
<tt style='background-color:#E8E8E8;'> contrib.cudnn_rnn.python.ops._CudnnRNN <a href=' /contrib/cudnn_rnn/python/ops/cudnn_rnn_ops.py#L158'>__init__</a>(rnn_mode,num_layers,num_units,input_size)</tt>	Creates a cudnnrnn model from model spec.
<tt style='background-color:#E8E8E8;'> contrib.cudnn_rnn.python.ops._CudnnRNN <a href=' /contrib/cudnn_rnn/python/ops/cudnn_rnn_ops.py#L199'>params_size</a>()</tt>	Calculates the size of the opaque parameter buffer needed for this model.
<tt style='background-color:#E8E8E8;'> contrib.cudnn_rnn.python.ops._CudnnRNN <a href=' /contrib/cudnn_rnn/python/ops/cudnn_rnn_ops.py#L215'>__call__</a>(input_data,input_h,input_c,params)</tt>	Runs the forward step for the rnn model.
<tt style='background-color:#E8E8E8;'> contrib.cudnn_rnn.python.ops._CudnnRNN <a href=' /contrib/cudnn_rnn/python/ops/cudnn_rnn_ops.py#L247'>params_to_canonical</a>(params)</tt>	Converts params from a specific format of cudnn to the canonical format.
<tt style='background-color:#E8E8E8;'> contrib.cudnn_rnn.python.ops._CudnnRNN <a href=' /contrib/cudnn_rnn/python/ops/cudnn_rnn_ops.py#L267'>canonical_to_params</a>(weights,biases)</tt>	Converts params from the canonical format to a specific format of cudnn.
<tt style='background-color:#E8E8E8;'> contrib.cudnn_rnn.python.ops.CudnnLSTM <a href=' /contrib/cudnn_rnn/python/ops/cudnn_rnn_ops.py#L295'>__init__</a>(num_layers,num_units,input_size,input_mode)</tt>	Creates a cudnn lstm model from model spec.
<tt style='background-color:#E8E8E8;'> contrib.cudnn_rnn.python.ops.CudnnLSTM <a href=' /contrib/cudnn_rnn/python/ops/cudnn_rnn_ops.py#L334'>__call__</a>(input_data,input_h,input_c,params)</tt>	Runs the forward step for the cudnn lstm model.
<tt style='background-color:#E8E8E8;'> contrib.cudnn_rnn.python.ops._CudnnRNNNoInputC <a href=' /contrib/cudnn_rnn/python/ops/cudnn_rnn_ops.py#L361'>__init__</a>(num_layers,num_units,input_size,input_mode)</tt>	Creates a cudnn rnn model from model without hidden-state c.
<tt style='background-color:#E8E8E8;'> contrib.cudnn_rnn.python.ops._CudnnRNNNoInputC <a href=' /contrib/cudnn_rnn/python/ops/cudnn_rnn_ops.py#L400'>__call__</a>(input_data,input_h,params,is_training)</tt>	Runs the forward step for the cudnn lstm model.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses.SparseSoftmaxCrossEntropyLossTest <a href=' /contrib/losses/python/losses/loss_ops_test.py#L424'>testInconsistentWeightSizeRaisesException</a>()</tt>	The weight tensor has incorrect number of elements.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses.SparseSoftmaxCrossEntropyLossTest <a href=' /contrib/losses/python/losses/loss_ops_test.py#L437'>testInconsistentLabelSizeRaisesException</a>()</tt>	The label tensor has incorrect number of elements.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses.SparseSoftmaxCrossEntropyLossTest <a href=' /contrib/losses/python/losses/loss_ops_test.py#L450'>testInconsistentWeightShapeRaisesException</a>()</tt>	The weight tensor has incorrect shape.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses.SparseSoftmaxCrossEntropyLossTest <a href=' /contrib/losses/python/losses/loss_ops_test.py#L464'>testInconsistentLabelShapeRaisesException</a>()</tt>	The label tensor has incorrect shape.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L48'>_scale_losses</a>(losses,weights)</tt>	Computes the scaled loss.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L74'>_safe_div</a>(numerator,denominator,name)</tt>	Computes a safe divide which returns 0 if the denominator is zero.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L99'>_safe_mean</a>(losses,num_present)</tt>	Computes a safe mean of the losses.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L114'>compute_weighted_loss</a>(losses,weights,scope)</tt>	Computes the weighted loss.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L155'>_num_present</a>(losses,weights,per_batch)</tt>	Computes the number of elements in the loss function induced by weights.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L204'>add_loss</a>(loss,loss_collection)</tt>	Adds a externally defined loss to the collection of losses.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L217'>get_losses</a>(scope,loss_collection)</tt>	Gets the list of losses from the loss_collection.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L231'>get_regularization_losses</a>(scope)</tt>	Gets the regularization losses.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L244'>get_total_loss</a>(add_regularization_losses,name)</tt>	Returns a tensor whose value represents the total loss.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L267'>absolute_difference</a>(predictions,labels,weights,scope)</tt>	Adds an absolute difference loss to the training procedure.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L302'>sigmoid_cross_entropy</a>(logits,multi_class_labels,weights,label_smoothing)</tt>	Creates a cross-entropy loss using tf nn sigmoid_cross_entropy_with_logits.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L351'>softmax_cross_entropy</a>(logits,onehot_labels,weights,label_smoothing)</tt>	Creates a cross-entropy loss using tf nn softmax_cross_entropy_with_logits.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L401'>sparse_softmax_cross_entropy</a>(logits,labels,weights,scope)</tt>	Cross-entropy loss using tf nn sparse_softmax_cross_entropy_with_logits.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L437'>log_loss</a>(predictions,labels,weights,epsilon)</tt>	Adds a log loss term to the training procedure.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L478'>hinge_loss</a>(logits,labels,scope)</tt>	Method that returns the loss tensor for hinge loss.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L507'>mean_squared_error</a>(predictions,labels,weights,scope)</tt>	Adds a sum-of-squares loss to the training procedure.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L542'>mean_pairwise_squared_error</a>(predictions,labels,weights,scope)</tt>	Adds a pairwise-errors-squared loss to the training procedure.
<tt style='background-color:#E8E8E8;'> contrib.losses.python.losses. <a href=' /contrib/losses/python/losses/loss_ops.py#L624'>cosine_distance</a>(predictions,labels,dim,weights)</tt>	Adds a cosine-distance loss to the training procedure.
<tt style='background-color:#E8E8E8;'> contrib.testing.python.framework. <a href=' /contrib/testing/python/framework/util_test.py#L27'>assert_summary</a>(expected_tags,expected_simple_values,summary_proto)</tt>	Asserts summary contains the specified tags and values.
<tt style='background-color:#E8E8E8;'> contrib.testing.python.framework. <a href=' /contrib/testing/python/framework/util_test.py#L51'>to_summary_proto</a>(summary_str)</tt>	Create summary based on latest stats.
<tt style='background-color:#E8E8E8;'> contrib.testing.python.framework. <a href=' /contrib/testing/python/framework/util_test.py#L67'>latest_event_file</a>(base_dir)</tt>	Find latest event file in base_dir.
<tt style='background-color:#E8E8E8;'> contrib.testing.python.framework. <a href=' /contrib/testing/python/framework/util_test.py#L79'>latest_events</a>(base_dir)</tt>	Parse events from latest event file in base_dir.
<tt style='background-color:#E8E8E8;'> contrib.testing.python.framework. <a href=' /contrib/testing/python/framework/util_test.py#L93'>latest_summaries</a>(base_dir)</tt>	Parse summary events from latest event file in base_dir.
<tt style='background-color:#E8E8E8;'> contrib.testing.python.framework. <a href=' /contrib/testing/python/framework/util_test.py#L106'>simple_values_from_events</a>(events,tags)</tt>	Parse summaries from events with simple_value.
<tt style='background-color:#E8E8E8;'> contrib.testing.python.framework.FakeSummaryWriter <a href=' /contrib/testing/python/framework/fake_summary_writer.py#L59'>assert_summaries</a>(test_case,expected_logdir,expected_graph,expected_summaries)</tt>	Assert expected items have been added to summary writer.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.tools. <a href=' /contrib/rnn/python/tools/checkpoint_convert.py#L141'>_split_sharded_vars</a>(name_shape_map)</tt>	Split shareded variables.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.tools. <a href=' /contrib/rnn/python/tools/checkpoint_convert.py#L164'>convert_names</a>(checkpoint_from_path,checkpoint_to_path,write_v1_checkpoint)</tt>	Migrates the names of variables within a checkpoint.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.kernel_tests.FusedRnnCellTest <a href=' /contrib/rnn/python/kernel_tests/fused_rnn_cell_test.py#L38'>testBasicRNNFusedWrapper</a>()</tt>	This test checks that using a wrapper for basicrnn works as expected.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.kernel_tests. <a href=' /contrib/rnn/python/kernel_tests/gru_ops_test.py#L341'>time_taken_by_op</a>(op,sess,num_runs)</tt>	Time taken by the op.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.kernel_tests. <a href=' /contrib/rnn/python/kernel_tests/gru_ops_test.py#L355'>training_gru_block_vs_gru_cell</a>(batch_size,cell_size,input_size,time_steps)</tt>	Benchmark training speed between grublockcell vs grucell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.kernel_tests. <a href=' /contrib/rnn/python/kernel_tests/gru_ops_test.py#L428'>inference_gru_block_vs_gru_cell</a>(batch_size,cell_size,input_size,time_steps)</tt>	Benchmark inference speed between grublockcell vs grucell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.kernel_tests. <a href=' /contrib/rnn/python/kernel_tests/gru_ops_test.py#L484'>single_bprop_step_gru_block_vs_gru_cell</a>(batch_size,cell_size,input_size,use_gpu)</tt>	Benchmark single bprop step speed between grublockcell vs grucell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.kernel_tests.LSTMBlockCellTest <a href=' /contrib/rnn/python/kernel_tests/lstm_ops_test.py#L395'>testLSTMFusedSequenceLengths</a>()</tt>	Verify proper support for sequence lengths in lstmblockfusedcell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.kernel_tests.DummyMultiDimensionalLSTM <a href=' /contrib/rnn/python/kernel_tests/core_rnn_test.py#L71'>__init__</a>(dims)</tt>	Initialize the multi-dimensional lstm cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.kernel_tests.LSTMTest <a href=' /contrib/rnn/python/kernel_tests/core_rnn_test.py#L715'>_testDoubleInputWithDropoutAndDynamicCalculation</a>(use_gpu)</tt>	Smoke test for using lstm with doubles dropout dynamic calculation.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.BasicRNNCell <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L77'>call</a>(inputs,state)</tt>	Most basic rnn output = new_state = act(w * input + u * state + b).
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.GRUCell <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L101'>call</a>(inputs,state)</tt>	Gated recurrent unit gru with nunits cells.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.BasicLSTMCell <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L148'>__init__</a>(num_units,forget_bias,input_size,state_is_tuple)</tt>	Initialize the basic lstm cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.BasicLSTMCell <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L184'>call</a>(inputs,state)</tt>	Long short-term memory cell lstm.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.LSTMCell <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L230'>__init__</a>(num_units,input_size,use_peepholes,cell_clip)</tt>	Initialize the parameters for an lstm cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.LSTMCell <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L309'>call</a>(inputs,state)</tt>	Run one step of lstm.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.OutputProjectionWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L411'>__init__</a>(cell,output_size,activation,reuse)</tt>	Create a cell with output projection.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.OutputProjectionWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L447'>call</a>(inputs,state)</tt>	Run the cell and output projection on inputs starting from state.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.InputProjectionWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L464'>__init__</a>(cell,num_proj,activation,input_size)</tt>	Create a cell with input projection.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.InputProjectionWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L501'>call</a>(inputs,state)</tt>	Run the input projection and then the cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.DropoutWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L522'>__init__</a>(cell,input_keep_prob,output_keep_prob,state_keep_prob)</tt>	Create a cell with added input state and/or output dropout.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.DropoutWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L638'>_variational_recurrent_dropout_value</a>(index,value,noise,keep_prob)</tt>	Performs dropout given the pre-calculated noise tensor.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.DropoutWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L650'>_dropout</a>(values,salt_prefix,recurrent_noise,keep_prob)</tt>	Decides whether to perform standard dropout or recurrent dropout.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.DropoutWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L662'>__call__</a>(inputs,state,scope)</tt>	Run the cell with the declared dropouts.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.ResidualWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L686'>__init__</a>(cell)</tt>	Constructs a residualwrapper for cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.ResidualWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L706'>__call__</a>(inputs,state,scope)</tt>	Run the cell and add its inputs to its outputs.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.DeviceWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L735'>__init__</a>(cell,device)</tt>	Construct a devicewrapper for cell with device device.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.DeviceWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L760'>__call__</a>(inputs,state,scope)</tt>	Run the cell on specified device.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.EmbeddingWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L775'>__init__</a>(cell,embedding_classes,embedding_size,initializer)</tt>	Create a cell with an added input embedding.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.EmbeddingWrapper <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L816'>call</a>(inputs,state)</tt>	Run the cell on embedded inputs.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.MultiRNNCell <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L846'>__init__</a>(cells,state_is_tuple)</tt>	Create a rnn cell composed sequentially of a number of rnncells.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.MultiRNNCell <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L895'>call</a>(inputs,state)</tt>	Run this multi-layer cell on inputs starting from state.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops._SlimRNNCell <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L924'>__init__</a>(cell_fn)</tt>	Create a slimrnncell from a cell_fn.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/core_rnn_cell_impl.py#L966'>_linear</a>(args,output_size,bias,bias_start)</tt>	Linear map sum_i(args[i] * w[i]), where w[i] is a variable.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/rnn_cell.py#L42'>_get_concat_variable</a>(name,shape,dtype,num_shards)</tt>	Get a sharded variable concatenated into one tensor.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/rnn_cell.py#L60'>_get_sharded_variable</a>(name,shape,dtype,num_shards)</tt>	Get a list of sharded variables with the given dtype.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.CoupledInputForgetGateLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L106'>__init__</a>(num_units,use_peepholes,initializer,num_proj)</tt>	Initialize the parameters for an lstm cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.CoupledInputForgetGateLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L174'>call</a>(inputs,state)</tt>	Run one step of lstm.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.TimeFreqLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L273'>__init__</a>(num_units,use_peepholes,cell_clip,initializer)</tt>	Initialize the parameters for an lstm cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.TimeFreqLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L320'>call</a>(inputs,state)</tt>	Run one step of lstm.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.TimeFreqLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L403'>_make_tf_features</a>(input_feat)</tt>	Make the frequency features.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.GridLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L445'>__init__</a>(num_units,use_peepholes,share_time_frequency_weights,cell_clip)</tt>	Initialize the parameters for an lstm cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.GridLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L548'>call</a>(inputs,state)</tt>	Run one step of lstm.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.GridLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L584'>_compute</a>(freq_inputs,block,state,batch_size)</tt>	Run the actual computation of one step lstm.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.GridLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L804'>_make_tf_features</a>(input_feat,slice_offset)</tt>	Make the frequency features.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.BidirectionalGridLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L901'>__init__</a>(num_units,use_peepholes,share_time_frequency_weights,cell_clip)</tt>	Initialize the parameters for an lstm cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.BidirectionalGridLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L968'>call</a>(inputs,state)</tt>	Run one step of lstm.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.AttentionCellWrapper <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1032'>__init__</a>(cell,attn_length,attn_size,attn_vec_size)</tt>	Create a cell with attention.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.AttentionCellWrapper <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1098'>call</a>(inputs,state)</tt>	Long short-term memory cell with attention lstma.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.HighwayWrapper <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1166'>__init__</a>(cell,couple_carry_transform_gates,carry_bias_init)</tt>	Constructs a highwaywrapper for cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.HighwayWrapper <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1215'>__call__</a>(inputs,state,scope)</tt>	Run the cell and add its inputs to its outputs.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.LayerNormBasicLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1260'>__init__</a>(num_units,forget_bias,input_size,activation)</tt>	Initializes the basic lstm cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.LayerNormBasicLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1329'>call</a>(inputs,state)</tt>	Lstm cell with layer normalization and recurrent dropout.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.NASCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1369'>__init__</a>(num_units,num_proj,use_biases,reuse)</tt>	Initialize the parameters for a nas cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.NASCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1404'>call</a>(inputs,state)</tt>	Run one step of nas cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.UGRNNCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1520'>__init__</a>(num_units,initializer,forget_bias,activation)</tt>	Initialize the parameters for an ugrnn cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.UGRNNCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1551'>call</a>(inputs,state)</tt>	Run one step of ugrnn.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.IntersectionRNNCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1614'>__init__</a>(num_units,num_in_proj,initializer,forget_bias)</tt>	Initialize the parameters for an +rnn cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.IntersectionRNNCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1652'>call</a>(inputs,state)</tt>	Run one step of the intersection rnn.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.CompiledWrapper <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1717'>__init__</a>(cell,compile_stateful)</tt>	Create compiledwrapper cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1754'>_random_exp_initializer</a>(minval,maxval,seed,dtype)</tt>	Returns an exponential distribution initializer.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.PhasedLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1791'>__init__</a>(num_units,use_peepholes,leak,ratio_on)</tt>	Initialize the phased lstm cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.PhasedLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1839'>_mod</a>(x,y)</tt>	Modulo function that propagates x gradients.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.PhasedLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1843'>_get_cycle_ratio</a>(time,phase,period)</tt>	Compute the cycle ratio in the dtype of the time.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.PhasedLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1851'>call</a>(inputs,state)</tt>	Phased lstm cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.GLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1939'>__init__</a>(num_units,initializer,num_proj,number_of_groups)</tt>	Initialize the parameters of g-lstm cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.GLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L1998'>_get_input_for_group</a>(inputs,group_id,group_size)</tt>	Slices inputs into groups to prepare for processing by cell's groups.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.GLSTMCell <a href=' /contrib/rnn/python/ops/rnn_cell.py#L2017'>call</a>(inputs,state)</tt>	Run one step of g-lstm.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/core_rnn.py#L41'>static_rnn</a>(cell,inputs,initial_state,dtype)</tt>	Creates a recurrent neural network specified by rnncell cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/core_rnn.py#L204'>static_state_saving_rnn</a>(cell,inputs,state_saver,state_name)</tt>	Rnn that accepts a state saver for time-truncated rnn calculation.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/core_rnn.py#L278'>static_bidirectional_rnn</a>(cell_fw,cell_bw,inputs,initial_state_fw)</tt>	Creates a bidirectional recurrent neural network.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/gru_ops.py#L35'>_GRUBlockCellGrad</a>(op)</tt>	Gradient for grublockcell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.GRUBlockCell <a href=' /contrib/rnn/python/ops/gru_ops.py#L130'>__init__</a>(cell_size)</tt>	Initialize the block gru cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.FusedRNNCell <a href=' /contrib/rnn/python/ops/fused_rnn_cell.py#L44'>__call__</a>(inputs,initial_state,dtype,sequence_length)</tt>	Run this fused rnn on inputs starting from the given state.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.FusedRNNCellAdaptor <a href=' /contrib/rnn/python/ops/fused_rnn_cell.py#L85'>__init__</a>(cell,use_dynamic_rnn)</tt>	Initialize the adaptor.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.TimeReversedFusedRNN <a href=' /contrib/rnn/python/ops/fused_rnn_cell.py#L149'>_reverse</a>(t,lengths)</tt>	Time reverse the provided tensor or list of tensors.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/lstm_ops.py#L40'>_lstm_block_cell</a>(x,cs_prev,h_prev,w)</tt>	Computes the lstm cell forward propagation for 1 time step.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/lstm_ops.py#L139'>_block_lstm</a>(seq_len_max,x,w,b)</tt>	Todo williamchan : add doc.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/lstm_ops.py#L233'>_LSTMBlockCellGrad</a>(op)</tt>	Gradient for lstmblockcell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/lstm_ops.py#L293'>_BlockLSTMGrad</a>(op)</tt>	Gradient for blocklstm.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.LSTMBlockCell <a href=' /contrib/rnn/python/ops/lstm_ops.py#L341'>__init__</a>(num_units,forget_bias,use_peephole)</tt>	Initialize the basic lstm cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.LSTMBlockCell <a href=' /contrib/rnn/python/ops/lstm_ops.py#L372'>__call__</a>(x,states_prev,scope)</tt>	Long short-term memory cell lstm.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.LSTMBlockWrapper <a href=' /contrib/rnn/python/ops/lstm_ops.py#L416'>num_units</a>()</tt>	Number of units in this cell output dimension.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.LSTMBlockWrapper <a href=' /contrib/rnn/python/ops/lstm_ops.py#L421'>_call_cell</a>(inputs,initial_cell_state,initial_output,dtype)</tt>	Run this lstm on inputs starting from the given state.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.LSTMBlockWrapper <a href=' /contrib/rnn/python/ops/lstm_ops.py#L448'>__call__</a>(inputs,initial_state,dtype,sequence_length)</tt>	Run this lstm on inputs starting from the given state.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.LSTMBlockWrapper <a href=' /contrib/rnn/python/ops/lstm_ops.py#L553'>_gather_states</a>(data,indices,batch_size)</tt>	Produce out, s t out i j = data(indices i i j).
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.LSTMBlockFusedCell <a href=' /contrib/rnn/python/ops/lstm_ops.py#L575'>__init__</a>(num_units,forget_bias,cell_clip,use_peephole)</tt>	Initialize the lstm cell.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.LSTMBlockFusedCell <a href=' /contrib/rnn/python/ops/lstm_ops.py#L593'>num_units</a>()</tt>	Number of units in this cell output dimension.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops.LSTMBlockFusedCell <a href=' /contrib/rnn/python/ops/lstm_ops.py#L598'>_call_cell</a>(inputs,initial_cell_state,initial_output,dtype)</tt>	Run this lstm on inputs starting from the given state.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/rnn.py#L26'>stack_bidirectional_rnn</a>(cells_fw,cells_bw,inputs,initial_states_fw)</tt>	Creates a bidirectional recurrent neural network.
<tt style='background-color:#E8E8E8;'> contrib.rnn.python.ops. <a href=' /contrib/rnn/python/ops/rnn.py#L124'>stack_bidirectional_dynamic_rnn</a>(cells_fw,cells_bw,inputs,initial_states_fw)</tt>	Creates a dynamic bidirectional recurrent neural network.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L51'>select</a>(labeled_tensor,selection,name)</tt>	Slice out a subset of the tensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L144'>concat</a>(labeled_tensors,axis_name,name)</tt>	Concatenate tensors along a dimension.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L213'>pack</a>(labeled_tensors,new_axis,axis_position,name)</tt>	Pack tensors along a new axis.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L259'>unpack</a>(labeled_tensor,axis_name,name)</tt>	Unpack the tensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L295'>reshape</a>(labeled_tensor,existing_axes,new_axes,name)</tt>	Reshape specific axes of a labeledtensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L374'>rename_axis</a>(labeled_tensor,existing_name,new_name,name)</tt>	Rename an axis of labeledtensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L448'>batch</a>(labeled_tensors,batch_size,num_threads,capacity)</tt>	Rebatch a tensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L499'>shuffle_batch</a>(labeled_tensors,batch_size,num_threads,capacity)</tt>	Rebatch a tensor with shuffling.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L557'>random_crop</a>(labeled_tensor,shape_map,seed,name)</tt>	Randomly crops a tensor to a given size.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L607'>map_fn</a>(fn,labeled_tensor,name)</tt>	Map on the list of tensors unpacked from labeled_tensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L661'>foldl</a>(fn,labeled_tensor,initial_value,name)</tt>	Left fold on the list of tensors unpacked from labeled_tensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L700'>squeeze</a>(labeled_tensor,axis_names,name)</tt>	Remove size-1 dimensions.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L760'>matmul</a>(a,b,name)</tt>	Matrix multiply two tensors with rank 1 or 2.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L876'>define_reduce_op</a>(op_name,reduce_fn)</tt>	Define a reduction op for labeled tensors.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L976'>tile</a>(labeled_tensor,multiples,name)</tt>	Constructs a tensor by tiling a given tensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L1027'>pad</a>(labeled_tensor,paddings,mode,name)</tt>	Pads a tensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L1081'>constant</a>(value,dtype,axes,name)</tt>	Creates a constant tensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L1127'>zeros_like</a>(labeled_tensor,dtype,name)</tt>	Creates an identical tensor with all elements set to zero.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L1147'>ones_like</a>(labeled_tensor,dtype,name)</tt>	Creates an identical tensor with all elements set to one.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L1167'>cast</a>(labeled_tensor,dtype,name)</tt>	Casts a labeled tensor to a new type.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L1187'>verify_tensor_all_finite</a>(labeled_tensor,message,name)</tt>	Asserts a tensor doesn't contain nans or infs.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L1210'>boolean_mask</a>(labeled_tensor,mask,name)</tt>	Apply a boolean mask to a labeled tensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/ops.py#L1250'>where</a>(condition,x,y,name)</tt>	Return elements from x or y depending on condition.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops.Axis <a href=' /contrib/labeled_tensor/python/ops/core.py#L72'>__init__</a>(name,value)</tt>	Construct an axis.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops.Axis <a href=' /contrib/labeled_tensor/python/ops/core.py#L152'>value</a>()</tt>	Returns the tf dimension or tuple specifying axis ticks.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops.Axis <a href=' /contrib/labeled_tensor/python/ops/core.py#L161'>labels</a>()</tt>	Returns the tuple containing coordinate labels else none.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops.Axis <a href=' /contrib/labeled_tensor/python/ops/core.py#L167'>index</a>(value)</tt>	Returns the integer position of the given tick label.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L180'>as_axis</a>(axis_data)</tt>	Convert an axislike object into an axis.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops.Axes <a href=' /contrib/labeled_tensor/python/ops/core.py#L205'>__init__</a>(axes)</tt>	Construct an axes.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops.Axes <a href=' /contrib/labeled_tensor/python/ops/core.py#L255'>remove</a>(axis_name)</tt>	Creates a new axes object without the given axis.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops.LabeledTensor <a href=' /contrib/labeled_tensor/python/ops/core.py#L278'>__init__</a>(tensor,axes)</tt>	Construct a labeledtenor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops.LabeledTensor <a href=' /contrib/labeled_tensor/python/ops/core.py#L344'>_as_graph_element</a>()</tt>	Support tf graph as_graph_element on labeledtensor objects.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops.LabeledTensor <a href=' /contrib/labeled_tensor/python/ops/core.py#L368'>get_shape</a>()</tt>	Returns the tensorshape that represents the shape of this tensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L512'>convert_to_labeled_tensor</a>(value,dtype,name)</tt>	Converts the given value to a labeledtensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L550'>concat_axes</a>(axes)</tt>	Concatenate a list of axes.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L590'>identity</a>(labeled_tensor,name)</tt>	The identity op.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L614'>slice_function</a>(labeled_tensor,selection,name)</tt>	Slice out a subset of the tensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L672'>transpose</a>(labeled_tensor,axis_order,name)</tt>	Permute a tensor's axes.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L716'>expand_dims</a>(labeled_tensor,axes,name)</tt>	Insert dimensions of size 1.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L775'>get_axis_order</a>()</tt>	Get the axis_order set by any containing axis_order_scope.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L802'>axis_order_scope</a>(axis_order)</tt>	Set axis order for the result of broadcasting operations within a scope.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L851'>check_axis_order</a>(labeled_tensor,axis_order)</tt>	Verify that the given tensor has a consistent axis order.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L884'>impose_axis_order</a>(labeled_tensor,axis_order,name)</tt>	Impose desired axis order on a labeled tensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L914'>_find_consistent_ordering</a>(a,b)</tt>	Find the left-most consistent ordering between two lists of unique items.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L963'>align</a>(labeled_tensor_0,labeled_tensor_1,name)</tt>	Align the axes of two tensors so they may be broadcast to each other.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L1055'>define_unary_op</a>(op_name,elementwise_function)</tt>	Define a unary operation for labeled tensors.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/core.py#L1124'>define_binary_op</a>(op_name,elementwise_function)</tt>	Define a binary operation that broadcasts labeled tensors.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/io_ops.py#L61'>_labeled_to_unlabeled_features</a>(features)</tt>	Convert a dict of lt fixedlenfeature into a dict of tf fixedlenfeature.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/io_ops.py#L79'>parse_example</a>(serialized,features,name,example_names)</tt>	Parse example protos into a dict of labeled tensors.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/io_ops.py#L117'>parse_single_example</a>(serialized,features,name,example_names)</tt>	Parses a single example proto.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/io_ops.py#L152'>placeholder</a>(dtype,axes,name)</tt>	Create a placeholder for a labeled tensor.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/_typecheck.py#L177'>_replace_forward_references</a>(t,context)</tt>	Replace forward references in the given type.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/_typecheck.py#L187'>register_type_abbreviation</a>(name,alias)</tt>	Register an abbreviation for a type in typecheck tracebacks.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/_typecheck.py#L202'>_type_repr</a>(t)</tt>	A more succinct repr for typecheck tracebacks.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/_typecheck.py#L216'>accepts</a>()</tt>	A decorator which checks the input types of a function.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops. <a href=' /contrib/labeled_tensor/python/ops/_typecheck.py#L267'>returns</a>()</tt>	A decorator which checks the return types of a function.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops.ReshapeCoder <a href=' /contrib/labeled_tensor/python/ops/sugar.py#L63'>encode</a>(labeled_tensor)</tt>	Reshape the input to the target shape.
<tt style='background-color:#E8E8E8;'> contrib.labeled_tensor.python.ops.ReshapeCoder <a href=' /contrib/labeled_tensor/python/ops/sugar.py#L100'>decode</a>(labeled_tensor)</tt>	Reshape the input to the original shape.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops. <a href=' /contrib/seq2seq/python/ops/loss.py#L30'>sequence_loss</a>(logits,targets,weights,average_across_timesteps)</tt>	Weighted cross-entropy loss for a sequence of logits.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops. <a href=' /contrib/seq2seq/python/ops/attention_wrapper.py#L58'>_prepare_memory</a>(memory,memory_sequence_length,check_inner_dims_defined)</tt>	Convert to tensor and possibly mask memory.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops._BaseAttentionMechanism <a href=' /contrib/seq2seq/python/ops/attention_wrapper.py#L124'>__init__</a>(query_layer,memory,memory_sequence_length,memory_layer)</tt>	Construct base attentionmechanism class.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.LuongAttention <a href=' /contrib/seq2seq/python/ops/attention_wrapper.py#L206'>__init__</a>(num_units,memory,memory_sequence_length,scale)</tt>	Construct the attentionmechanism mechanism.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.LuongAttention <a href=' /contrib/seq2seq/python/ops/attention_wrapper.py#L237'>__call__</a>(query)</tt>	Score the query based on the keys and values.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.BahdanauAttention <a href=' /contrib/seq2seq/python/ops/attention_wrapper.py#L309'>__init__</a>(num_units,memory,memory_sequence_length,normalize)</tt>	Construct the attention mechanism.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.BahdanauAttention <a href=' /contrib/seq2seq/python/ops/attention_wrapper.py#L339'>__call__</a>(query)</tt>	Score the query based on the keys and values.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.AttentionWrapperState <a href=' /contrib/seq2seq/python/ops/attention_wrapper.py#L394'>clone</a>()</tt>	Clone this object overriding components provided by kwargs.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops. <a href=' /contrib/seq2seq/python/ops/attention_wrapper.py#L415'>hardmax</a>(logits,name)</tt>	Returns batched one-hot vectors.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.AttentionWrapper <a href=' /contrib/seq2seq/python/ops/attention_wrapper.py#L440'>__init__</a>(cell,attention_mechanism,attention_layer_size,alignment_history)</tt>	Construct the attentionwrapper.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.AttentionWrapper <a href=' /contrib/seq2seq/python/ops/attention_wrapper.py#L591'>call</a>(inputs,state)</tt>	Perform a step of attention-wrapped rnn.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.BasicDecoder <a href=' /contrib/seq2seq/python/ops/basic_decoder.py#L115'>initialize</a>(name)</tt>	Initialize the decoder.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.BasicDecoder <a href=' /contrib/seq2seq/python/ops/basic_decoder.py#L126'>step</a>(time,inputs,state,name)</tt>	Perform a decoding step.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.Decoder <a href=' /contrib/seq2seq/python/ops/decoder.py#L59'>batch_size</a>()</tt>	The batch size of input values.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.Decoder <a href=' /contrib/seq2seq/python/ops/decoder.py#L64'>output_size</a>()</tt>	A possibly nested tuple of integer[s] or tensorshape object[s].
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.Decoder <a href=' /contrib/seq2seq/python/ops/decoder.py#L69'>output_dtype</a>()</tt>	A possibly nested tuple of dtype[s].
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.Decoder <a href=' /contrib/seq2seq/python/ops/decoder.py#L74'>initialize</a>(name)</tt>	Called before any decoding iterations.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.Decoder <a href=' /contrib/seq2seq/python/ops/decoder.py#L89'>step</a>(time,inputs,state,name)</tt>	Called per step of decoding but only once for dynamic decoding.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops. <a href=' /contrib/seq2seq/python/ops/decoder.py#L114'>_create_zero_outputs</a>(size,dtype,batch_size)</tt>	Create a zero outputs tensor structure.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops. <a href=' /contrib/seq2seq/python/ops/decoder.py#L130'>dynamic_decode</a>(decoder,output_time_major,impute_finished,maximum_iterations)</tt>	Perform dynamic decoding with decoder.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.Helper <a href=' /contrib/seq2seq/python/ops/helper.py#L65'>batch_size</a>()</tt>	Batch size of tensor returned by sample.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.Helper <a href=' /contrib/seq2seq/python/ops/helper.py#L73'>initialize</a>(name)</tt>	Returns (initial_finished initial_inputs).
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.Helper <a href=' /contrib/seq2seq/python/ops/helper.py#L83'>next_inputs</a>(time,outputs,state,sample_ids)</tt>	Returns (finished next_inputs next_state).
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.TrainingHelper <a href=' /contrib/seq2seq/python/ops/helper.py#L189'>next_inputs</a>(time,outputs,state,name)</tt>	Next_inputs_fn for traininghelper.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.GreedyEmbeddingHelper <a href=' /contrib/seq2seq/python/ops/helper.py#L493'>sample</a>(time,outputs,state,name)</tt>	Sample for greedyembeddinghelper.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.GreedyEmbeddingHelper <a href=' /contrib/seq2seq/python/ops/helper.py#L504'>next_inputs</a>(time,outputs,state,sample_ids)</tt>	Next_inputs_fn for greedyembeddinghelper.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops. <a href=' /contrib/seq2seq/python/ops/beam_search_decoder.py#L75'>tile_batch</a>(t,multiplier,name)</tt>	Tile the batch dimension of tensor t.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.BeamSearchDecoder <a href=' /contrib/seq2seq/python/ops/beam_search_decoder.py#L223'>initialize</a>(name)</tt>	Initialize the decoder.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.BeamSearchDecoder <a href=' /contrib/seq2seq/python/ops/beam_search_decoder.py#L245'>finalize</a>(outputs,final_state,sequence_lengths)</tt>	Finalize and return the predicted_ids.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.BeamSearchDecoder <a href=' /contrib/seq2seq/python/ops/beam_search_decoder.py#L267'>_merge_batch_beams</a>(t,s)</tt>	Merges the tensor from a batch of beams into a batch by beams.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.BeamSearchDecoder <a href=' /contrib/seq2seq/python/ops/beam_search_decoder.py#L296'>_split_batch_beams</a>(t,s)</tt>	Splits the tensor from a batch by beams into a batch of beams.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.BeamSearchDecoder <a href=' /contrib/seq2seq/python/ops/beam_search_decoder.py#L336'>_maybe_split_batch_beams</a>(t,s)</tt>	Maybe splits the tensor from a batch by beams into a batch of beams.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.BeamSearchDecoder <a href=' /contrib/seq2seq/python/ops/beam_search_decoder.py#L366'>_maybe_merge_batch_beams</a>(t,s)</tt>	Splits the tensor from a batch by beams into a batch of beams.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops.BeamSearchDecoder <a href=' /contrib/seq2seq/python/ops/beam_search_decoder.py#L395'>step</a>(time,inputs,state,name)</tt>	Perform a decoding step.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops. <a href=' /contrib/seq2seq/python/ops/beam_search_decoder.py#L447'>_beam_search_step</a>(time,logits,beam_state,batch_size)</tt>	Performs a single step of beam search decoding.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops. <a href=' /contrib/seq2seq/python/ops/beam_search_decoder.py#L560'>_get_scores</a>(log_probs,sequence_lengths,length_penalty_weight)</tt>	Calculates scores for beam search hypotheses.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops. <a href=' /contrib/seq2seq/python/ops/beam_search_decoder.py#L576'>_length_penalty</a>(sequence_lengths,penalty_factor)</tt>	Calculates the length penalty see https //arxiv org/abs/1609 08144.
<tt style='background-color:#E8E8E8;'> contrib.seq2seq.python.ops. <a href=' /contrib/seq2seq/python/ops/beam_search_decoder.py#L596'>_mask_probs</a>(probs,eos_token,finished)</tt>	Masks log probabilities.
<tt style='background-color:#E8E8E8;'> contrib.saved_model.python.saved_model. <a href=' /contrib/saved_model/python/saved_model/reader.py#L31'>read_saved_model</a>(saved_model_dir)</tt>	Reads the savedmodel pb or savedmodel pbtxt file containing savedmodel.
<tt style='background-color:#E8E8E8;'> contrib.saved_model.python.saved_model. <a href=' /contrib/saved_model/python/saved_model/reader.py#L79'>get_saved_model_tag_sets</a>(saved_model_dir)</tt>	Retrieves all the tag-sets available in the savedmodel.
<tt style='background-color:#E8E8E8;'> contrib.saved_model.python.saved_model. <a href=' /contrib/saved_model/python/saved_model/signature_def_utils.py#L22'>get_signature_def_by_key</a>(meta_graph_def,signature_def_key)</tt>	Utility function to get a signaturedef protocol buffer by its key.
<tt style='background-color:#E8E8E8;'> contrib.opt.python.training.MovingAverageOptimizer <a href=' /contrib/opt/python/training/moving_average_optimizer.py#L66'>__init__</a>(opt,average_decay,num_updates,sequential_update)</tt>	Construct a new movingaverageoptimizer.
<tt style='background-color:#E8E8E8;'> contrib.opt.python.training.MovingAverageOptimizer <a href=' /contrib/opt/python/training/moving_average_optimizer.py#L106'>swapping_saver</a>(var_list,name)</tt>	Create a saver swapping moving averages and variables.
<tt style='background-color:#E8E8E8;'> contrib.opt.python.training.ExternalOptimizerInterface <a href=' /contrib/opt/python/training/external_optimizer.py#L46'>__init__</a>(loss,var_list,equalities,inequalities)</tt>	Initialize a new interface instance.
<tt style='background-color:#E8E8E8;'> contrib.opt.python.training.ExternalOptimizerInterface <a href=' /contrib/opt/python/training/external_optimizer.py#L102'>minimize</a>(session,feed_dict,fetches,step_callback)</tt>	Minimize a scalar tensor.
<tt style='background-color:#E8E8E8;'> contrib.opt.python.training.ExternalOptimizerInterface <a href=' /contrib/opt/python/training/external_optimizer.py#L174'>_minimize</a>(initial_val,loss_grad_func,equality_funcs,equality_grad_funcs)</tt>	Wrapper for a particular optimization algorithm implementation.
<tt style='background-color:#E8E8E8;'> contrib.opt.python.training.ExternalOptimizerInterface <a href=' /contrib/opt/python/training/external_optimizer.py#L205'>_pack</a>(cls,tensors)</tt>	Pack a list of tensors into a single flattened rank-1 tensor.
<tt style='background-color:#E8E8E8;'> contrib.opt.python.training.ExternalOptimizerInterface <a href=' /contrib/opt/python/training/external_optimizer.py#L216'>_make_eval_func</a>(tensors,session,feed_dict,fetches)</tt>	Construct a function that evaluates a tensor or list of tensors.
<tt style='background-color:#E8E8E8;'> contrib.opt.python.training.MockOptimizerInterface <a href=' /contrib/opt/python/training/external_optimizer_test.py#L43'>_minimize</a>(initial_val,loss_grad_func,step_callback,optimizer_kwargs)</tt>	Minimize x - x0 **2 / 2 with respect to x.
<tt style='background-color:#E8E8E8;'> contrib.opt.python.training.VariableClippingOptimizer <a href=' /contrib/opt/python/training/variable_clipping_optimizer.py#L53'>__init__</a>(opt,vars_to_clip_dims,max_norm,use_locking)</tt>	Construct a new clip-norm optimizer.
<tt style='background-color:#E8E8E8;'> contrib.opt.python.training.VariableClippingOptimizer <a href=' /contrib/opt/python/training/variable_clipping_optimizer.py#L138'>_maybe_colocate_with</a>(var)</tt>	Context to colocate with var if colocate_clip_ops_with_vars.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._FeatureColumn <a href=' /contrib/layers/python/layers/feature_column.py#L199'>name</a>()</tt>	Returns the name of column or transformed column.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._FeatureColumn <a href=' /contrib/layers/python/layers/feature_column.py#L207'>config</a>()</tt>	Returns configuration of the base feature for tf parse_example.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._FeatureColumn <a href=' /contrib/layers/python/layers/feature_column.py#L215'>key</a>()</tt>	Returns a string which will be used as a key when we do sorting.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._FeatureColumn <a href=' /contrib/layers/python/layers/feature_column.py#L223'>insert_transformed_feature</a>(columns_to_tensors)</tt>	Apply transformation and inserts it into columns_to_tensors.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._FeatureColumn <a href=' /contrib/layers/python/layers/feature_column.py#L239'>_to_dnn_input_layer</a>(input_tensor,weight_collection,trainable,output_rank)</tt>	Returns a tensor as an input to the first layer of neural network.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._FeatureColumn <a href=' /contrib/layers/python/layers/feature_column.py#L247'>_deep_embedding_lookup_arguments</a>(input_tensor)</tt>	Returns arguments to embedding lookup to build an input layer.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._FeatureColumn <a href=' /contrib/layers/python/layers/feature_column.py#L255'>_wide_embedding_lookup_arguments</a>(input_tensor)</tt>	Returns arguments to look up embeddings for this column.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._FeatureColumn <a href=' /contrib/layers/python/layers/feature_column.py#L261'>_to_dense_tensor</a>(input_tensor)</tt>	Returns a dense tensor representing this column's values.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._FeatureColumn <a href=' /contrib/layers/python/layers/feature_column.py#L266'>_checkpoint_path</a>()</tt>	Returns none or a (path tensor_name) to load a checkpoint from.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._FeatureColumn <a href=' /contrib/layers/python/layers/feature_column.py#L270'>_key_without_properties</a>(properties)</tt>	Helper method for self key() that omits particular properties.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._SparseColumn <a href=' /contrib/layers/python/layers/feature_column.py#L385'>length</a>()</tt>	Returns vocabulary or hash_bucket size.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._SparseColumn <a href=' /contrib/layers/python/layers/feature_column.py#L396'>key</a>()</tt>	Returns a string which will be used as a key when we do sorting.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._SparseColumn <a href=' /contrib/layers/python/layers/feature_column.py#L401'>id_tensor</a>(input_tensor)</tt>	Returns the id tensor from the given transformed input_tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._SparseColumn <a href=' /contrib/layers/python/layers/feature_column.py#L406'>weight_tensor</a>(input_tensor)</tt>	Returns the weight tensor from the given transformed input_tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._SparseColumn <a href=' /contrib/layers/python/layers/feature_column.py#L429'>_get_input_sparse_tensor</a>(columns_to_tensors)</tt>	Looks up the input tensor for transformation and sparsify it if dense.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._SparseColumn <a href=' /contrib/layers/python/layers/feature_column.py#L446'>is_compatible</a>(other_column)</tt>	Check compatability of two sparse columns.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._SparseColumnIntegerized <a href=' /contrib/layers/python/layers/feature_column.py#L462'>insert_transformed_feature</a>(columns_to_tensors)</tt>	Handles sparse column to id conversion.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L472'>sparse_column_with_integerized_feature</a>(column_name,bucket_size,combiner,dtype)</tt>	Creates an integerized _sparsecolumn.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._SparseColumnHashed <a href=' /contrib/layers/python/layers/feature_column.py#L520'>insert_transformed_feature</a>(columns_to_tensors)</tt>	Handles sparse column to id conversion.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L535'>sparse_column_with_hash_bucket</a>(column_name,hash_bucket_size,combiner,dtype)</tt>	Creates a _sparsecolumn with hashed bucket configuration.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._SparseColumnKeys <a href=' /contrib/layers/python/layers/feature_column.py#L575'>insert_transformed_feature</a>(columns_to_tensors)</tt>	Handles sparse column to id conversion.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L587'>sparse_column_with_keys</a>(column_name,keys,default_value,combiner)</tt>	Creates a _sparsecolumn with keys.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._SparseColumnVocabulary <a href=' /contrib/layers/python/layers/feature_column.py#L624'>insert_transformed_feature</a>(columns_to_tensors)</tt>	Handles sparse column to id conversion.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L644'>sparse_column_with_vocabulary_file</a>(column_name,vocabulary_file,num_oov_buckets,vocab_size)</tt>	Creates a _sparsecolumn with vocabulary file configuration.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._WeightedSparseColumn <a href=' /contrib/layers/python/layers/feature_column.py#L711'>length</a>()</tt>	Returns id size.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._WeightedSparseColumn <a href=' /contrib/layers/python/layers/feature_column.py#L723'>key</a>()</tt>	Returns a string which will be used as a key when we do sorting.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._WeightedSparseColumn <a href=' /contrib/layers/python/layers/feature_column.py#L728'>insert_transformed_feature</a>(columns_to_tensors)</tt>	Inserts a tuple with the id and weight tensors.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._WeightedSparseColumn <a href=' /contrib/layers/python/layers/feature_column.py#L744'>id_tensor</a>(input_tensor)</tt>	Returns the id tensor from the given transformed input_tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._WeightedSparseColumn <a href=' /contrib/layers/python/layers/feature_column.py#L748'>weight_tensor</a>(input_tensor)</tt>	Returns the weight tensor from the given transformed input_tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L772'>weighted_sparse_column</a>(sparse_id_column,weight_column_name,dtype)</tt>	Creates a _sparsecolumn by combining sparse_id_column with a weight column.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._OneHotColumn <a href=' /contrib/layers/python/layers/feature_column.py#L832'>length</a>()</tt>	Returns vocabulary or hash_bucket size.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._OneHotColumn <a href=' /contrib/layers/python/layers/feature_column.py#L837'>config</a>()</tt>	Returns the parsing config of the origin column.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._OneHotColumn <a href=' /contrib/layers/python/layers/feature_column.py#L842'>key</a>()</tt>	Returns a string which will be used as a key when we do sorting.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._OneHotColumn <a href=' /contrib/layers/python/layers/feature_column.py#L847'>insert_transformed_feature</a>(columns_to_tensors)</tt>	Used by the transformer to prevent double transformations.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._OneHotColumn <a href=' /contrib/layers/python/layers/feature_column.py#L853'>_to_dnn_input_layer</a>(transformed_input_tensor,unused_weight_collections,unused_trainable,output_rank)</tt>	Returns a tensor as an input to the first layer of neural network.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._EmbeddingColumn <a href=' /contrib/layers/python/layers/feature_column.py#L985'>length</a>()</tt>	Returns id size.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._EmbeddingColumn <a href=' /contrib/layers/python/layers/feature_column.py#L997'>key</a>()</tt>	Returns a string which will be used as a key when we do sorting.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L1031'>one_hot_column</a>(sparse_id_column)</tt>	Creates an _onehotcolumn for a one-hot or multi-hot repr in a dnn.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L1046'>embedding_column</a>(sparse_id_column,dimension,combiner,initializer)</tt>	Creates an _embeddingcolumn for feeding sparse data into a dnn.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L1092'>shared_embedding_columns</a>(sparse_id_columns,dimension,combiner,shared_embedding_name)</tt>	Creates a list of _embeddingcolumn sharing the same embedding.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._ScatteredEmbeddingColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1232'>key</a>()</tt>	Returns a string which will be used as a key when we do sorting.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L1254'>scattered_embedding_column</a>(column_name,size,dimension,hash_key)</tt>	Creates an embedding column of a sparse feature using parameter hashing.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L1327'>_reshape_real_valued_tensor</a>(input_tensor,output_rank,column_name)</tt>	Reshaping logic for dense numeric tensors.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._RealValuedVarLenColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1398'>key</a>()</tt>	Returns a string which will be used as a key when we do sorting.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._RealValuedVarLenColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1403'>normalizer_fn</a>()</tt>	Returns the function used to normalize the column.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._RealValuedVarLenColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1408'>_normalized_input_tensor</a>(input_tensor)</tt>	Returns the input tensor after custom normalization is applied.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._RealValuedVarLenColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1420'>insert_transformed_feature</a>(columns_to_tensors)</tt>	Apply transformation and inserts it into columns_to_tensors.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L1439'>_real_valued_var_len_column</a>(column_name,default_value,dtype,normalizer)</tt>	Creates a _realvaluedvarlencolumn for variable-length numeric data.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._RealValuedColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1536'>key</a>()</tt>	Returns a string which will be used as a key when we do sorting.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._RealValuedColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1541'>normalizer_fn</a>()</tt>	Returns the function used to normalize the column.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._RealValuedColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1546'>_normalized_input_tensor</a>(input_tensor)</tt>	Returns the input tensor after custom normalization is applied.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._RealValuedColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1551'>insert_transformed_feature</a>(columns_to_tensors)</tt>	Apply transformation and inserts it into columns_to_tensors.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L1595'>real_valued_column</a>(column_name,dimension,default_value,dtype)</tt>	Creates a _realvaluedcolumn for dense numeric data.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._BucketizedColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1766'>length</a>()</tt>	Returns total number of buckets.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._BucketizedColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1775'>key</a>()</tt>	Returns a string which will be used as a key when we do sorting.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._BucketizedColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1806'>to_sparse_tensor</a>(input_tensor)</tt>	Creates a sparsetensor from the bucketized tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L1847'>bucketized_column</a>(source_column,boundaries)</tt>	Creates a _bucketizedcolumn for discretizing dense input.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._CrossedColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1973'>length</a>()</tt>	Returns total number of buckets.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._CrossedColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1978'>key</a>()</tt>	Returns a string which will be used as a key when we do sorting.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._CrossedColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1983'>id_tensor</a>(input_tensor)</tt>	Returns the id tensor from the given transformed input_tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._CrossedColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1988'>weight_tensor</a>(input_tensor)</tt>	Returns the weight tensor from the given transformed input_tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._CrossedColumn <a href=' /contrib/layers/python/layers/feature_column.py#L1992'>insert_transformed_feature</a>(columns_to_tensors)</tt>	Handles cross transformation.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L2046'>crossed_column</a>(columns,hash_bucket_size,combiner,ckpt_to_load_from)</tt>	Creates a _crossedcolumn for performing feature crosses.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.DataFrameColumn <a href=' /contrib/layers/python/layers/feature_column.py#L2120'>key</a>()</tt>	Returns a string which will be used as a key when we do sorting.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L2160'>_get_feature_config</a>(feature_column)</tt>	Returns configuration for the base feature defined in feature_column.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L2177'>create_feature_spec_for_parsing</a>(feature_columns)</tt>	Helper that prepares features config from input feature_columns.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L2223'>_create_sequence_feature_spec_for_parsing</a>(sequence_feature_columns,allow_missing_by_default)</tt>	Prepares a feature spec for parsing tf sequenceexamples.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column.py#L2259'>make_place_holder_tensors_for_base_features</a>(feature_columns)</tt>	Returns placeholder tensors for inference.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.PartialFlattenTest <a href=' /contrib/layers/python/layers/layers_test.py#L1406'>testDensePartialFlatten</a>()</tt>	Test _inner_flatten on tensors.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.PartialFlattenTest <a href=' /contrib/layers/python/layers/layers_test.py#L1424'>testSparsePartialFlatten</a>()</tt>	Test _inner_flatten on sparsetensors.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.PartialFlattenTest <a href=' /contrib/layers/python/layers/layers_test.py#L1447'>testIncompleteShape</a>()</tt>	Test _inner_flatten shape inference for incomplete shapes.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.PartialFlattenTest <a href=' /contrib/layers/python/layers/layers_test.py#L1468'>testDenseFlattenRankAssertion</a>()</tt>	Test _inner_flatten rank assertion for dense tensors.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.PartialFlattenTest <a href=' /contrib/layers/python/layers/layers_test.py#L1479'>testSparseFlattenRankAssertion</a>()</tt>	Test _inner_flatten rank assertion for sparse tensors.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L87'>avg_pool2d</a>(inputs,kernel_size,stride,padding)</tt>	Adds a 2d average pooling op.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L135'>_fused_batch_norm</a>(inputs,decay,center,scale)</tt>	Adds a batch normalization layer from http //arxiv org/abs/1502 03167.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L364'>batch_norm</a>(inputs,decay,center,scale)</tt>	Adds a batch normalization layer from http //arxiv org/abs/1502 03167.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L740'>bias_add</a>(inputs,activation_fn,initializer,regularizer)</tt>	Adds a bias to the inputs.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L815'>convolution</a>(inputs,num_outputs,kernel_size,stride)</tt>	Adds an n-d convolution followed by an optional batch_norm layer.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L964'>convolution2d_in_plane</a>(inputs,kernel_size,stride,padding)</tt>	Performs the same in-plane convolution to each channel independently.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1067'>convolution2d_transpose</a>(inputs,num_outputs,kernel_size,stride)</tt>	Adds a convolution2d_transpose with an optional batch normalization layer.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1180'>dropout</a>(inputs,keep_prob,noise_shape,is_training)</tt>	Returns a dropout op applied to the input.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1220'>flatten</a>(inputs,outputs_collections,scope)</tt>	Flattens the input while maintaining the batch_size.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1267'>_sparse_inner_flatten</a>(inputs,new_rank)</tt>	Helper function for inner_flatten.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1284'>_dense_inner_flatten</a>(inputs,new_rank)</tt>	Helper function for inner_flatten.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1311'>_inner_flatten</a>(inputs,new_rank,output_collections,scope)</tt>	Flattens inner dimensions of inputs, returns a tensor with new_rank.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1345'>_model_variable_getter</a>(getter,name,shape,dtype)</tt>	Getter that uses model_variable for compatibility with core layers.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1363'>_build_variable_getter</a>(rename)</tt>	Build a model variable getter that respects scope getter and renames.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1372'>_add_variable_to_collections</a>(variable,collections_set,collections_name)</tt>	Adds variable or all its parts to all collections with that name.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1385'>fully_connected</a>(inputs,num_outputs,activation_fn,normalizer_fn)</tt>	Adds a fully connected layer.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1487'>layer_norm</a>(inputs,center,scale,activation_fn)</tt>	Adds a layer normalization layer from https //arxiv org/abs/1607 06450.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1578'>max_pool2d</a>(inputs,kernel_size,stride,padding)</tt>	Adds a 2d max pooling op.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1627'>pool</a>(inputs,kernel_size,pooling_type,padding)</tt>	Adds a pooling op.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1697'>one_hot_encoding</a>(labels,num_classes,on_value,off_value)</tt>	Transform numeric labels into onehot_labels using tf one_hot.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1736'>repeat</a>(inputs,repetitions,layer)</tt>	Applies the same layer with the same arguments repeatedly.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1782'>_scale_gradient_shape</a>(op)</tt>	Shape helper function for scale_gradient function below.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1787'>_scale_gradient_grad</a>(op,grad)</tt>	Python gradient helper function for scale_gradient function below.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1792'>scale_gradient</a>(inputs,gradient_multiplier)</tt>	Identity operation but with the gradient multiplied by a tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1824'>separable_convolution2d</a>(inputs,num_outputs,kernel_size,depth_multiplier)</tt>	Adds a depth-separable 2d convolution with optional batch_norm layer.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L1987'>softmax</a>(logits,scope)</tt>	Performs softmax on nth dimension of n-dimensional logit tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L2011'>stack</a>(inputs,layer,stack_args)</tt>	Builds a stack of layers by applying layer repeatedly using stack_args.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L2066'>unit_norm</a>(inputs,dim,epsilon,scope)</tt>	Normalizes the given input across the specified dimension to unit length.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/layers.py#L2105'>legacy_fully_connected</a>(x,num_output_units,activation_fn,weight_init)</tt>	Adds the parameters for a fully connected layer and returns the output.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.TransformerTest <a href=' /contrib/layers/python/layers/feature_column_ops_test.py#L150'>testSparseIntColumnWithHashBucket</a>()</tt>	Tests a sparse column with int values.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.TransformerTest <a href=' /contrib/layers/python/layers/feature_column_ops_test.py#L373'>testSparseIntColumnWithVocabulary</a>()</tt>	Tests a sparse integer column with vocabulary.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.TransformerTest <a href=' /contrib/layers/python/layers/feature_column_ops_test.py#L398'>testSparseIntColumnWithVocabularyWithDenseInputTensor</a>()</tt>	Tests a sparse integer column with vocabulary.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.CreateInputLayersForDNNsTest <a href=' /contrib/layers/python/layers/feature_column_ops_test.py#L875'>testEmbeddingColumnWithWeightedSparseColumnSucceedsForDNN</a>()</tt>	Tests dnn input with embedded weighted sparse column.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.CreateInputLayersForDNNsTest <a href=' /contrib/layers/python/layers/feature_column_ops_test.py#L897'>testEmbeddingColumnWithIntegerWeightedSparseColumnSucceedsForDNN</a>()</tt>	Same as the previous test but with integer weights.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.WeightedSumTest <a href=' /contrib/layers/python/layers/feature_column_ops_test.py#L1541'>testSparseIntColumn</a>()</tt>	Tests a sparse column with int values.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/target_column.py#L33'>regression_target</a>(label_name,weight_column_name,label_dimension)</tt>	Creates a _targetcolumn for linear regression.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/target_column.py#L63'>multi_class_target</a>(n_classes,label_name,weight_column_name)</tt>	Creates a _targetcolumn for multi class single label classification.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/target_column.py#L99'>binary_svm_target</a>(label_name,weight_column_name)</tt>	Creates a _targetcolumn for binary classification with svms.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._TargetColumn <a href=' /contrib/layers/python/layers/target_column.py#L167'>get_eval_ops</a>(features,logits,labels,metrics)</tt>	Returns eval op.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._TargetColumn <a href=' /contrib/layers/python/layers/target_column.py#L194'>_weighted_loss</a>(loss,weight_tensor)</tt>	Returns cumulative weighted loss.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._TargetColumn <a href=' /contrib/layers/python/layers/target_column.py#L202'>training_loss</a>(logits,target,features,name)</tt>	Returns training loss tensor for this head.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._TargetColumn <a href=' /contrib/layers/python/layers/target_column.py#L232'>loss</a>(logits,target,features)</tt>	Returns loss tensor for this head.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/target_column.py#L439'>get_default_binary_metrics_for_eval</a>(thresholds)</tt>	Returns a dictionary of basic metrics for logistic regression.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L45'>_is_variable</a>(v)</tt>	Returns true if v is a variable.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L51'>_embeddings_from_arguments</a>(column,args,weight_collections,trainable)</tt>	Returns embeddings for a column based on the computed arguments.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L149'>_maybe_reshape_input_tensor</a>(tensor,column_name,output_rank)</tt>	Reshape the input tensor by the following rule.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L256'>input_from_feature_columns</a>(columns_to_tensors,feature_columns,weight_collections,trainable)</tt>	A tf contrib layers style input layer builder based on featurecolumns.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L321'>sequence_input_from_feature_columns</a>(columns_to_tensors,feature_columns,weight_collections,trainable)</tt>	Builds inputs for sequence models from featurecolumns.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L367'>_create_embedding_lookup</a>(column,columns_to_tensors,embedding_lookup_arguments,num_outputs)</tt>	Creates variables and returns predictions for linear weights in a model.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L419'>_create_joint_embedding_lookup</a>(columns_to_tensors,embedding_lookup_arguments,num_outputs,trainable)</tt>	Creates an embedding lookup for all columns sharing a single weight.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L467'>joint_weighted_sum_from_feature_columns</a>(columns_to_tensors,feature_columns,num_outputs,weight_collections)</tt>	A restricted linear prediction builder based on featurecolumns.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L538'>weighted_sum_from_feature_columns</a>(columns_to_tensors,feature_columns,num_outputs,weight_collections)</tt>	A tf contrib layers style linear prediction builder based on featurecolumn.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L652'>parse_feature_columns_from_examples</a>(serialized,feature_columns,name,example_names)</tt>	Parses tf examples to extract tensors for given feature_columns.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L716'>transform_features</a>(features,feature_columns)</tt>	Returns transformed features based on features columns passed in.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L771'>parse_feature_columns_from_sequence_examples</a>(serialized,context_feature_columns,sequence_feature_columns,name)</tt>	Parses tf sequenceexamples to extract tensors for given featurecolumns.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L838'>_infer_real_valued_column_for_tensor</a>(name,tensor)</tt>	Creates a real_valued_column for given tensor and name.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L869'>check_feature_columns</a>(feature_columns)</tt>	Checks the validity of the set of featurecolumns.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers._Transformer <a href=' /contrib/layers/python/layers/feature_column_ops.py#L936'>transform</a>(feature_column)</tt>	Returns a tensor which represents given feature_column.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L982'>_check_supported_sequence_columns</a>(feature_columns)</tt>	Asserts feature_columns are in _supported_sequence_columns.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L991'>_get_parent_columns</a>(feature_column)</tt>	Returns the tuple of featurecolumns that feature_column depends on.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L1004'>_gather_feature_columns</a>(feature_columns)</tt>	Returns a list of all ancestor featurecolumns of feature_columns.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/feature_column_ops.py#L1016'>_check_forbidden_sequence_columns</a>(feature_columns)</tt>	Recursively cecks feature_columns for _forbidden_sequence_columns.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/regularizers.py#L37'>l1_regularizer</a>(scale,scope)</tt>	Returns a function that can be used to apply l1 regularization to weights.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/regularizers.py#L76'>l2_regularizer</a>(scale,scope)</tt>	Returns a function that can be used to apply l2 regularization to weights.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/regularizers.py#L112'>l1_l2_regularizer</a>(scale_l1,scale_l2,scope)</tt>	Returns a function that can be used to apply l1 l2 regularizations.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/regularizers.py#L133'>sum_regularizer</a>(regularizer_list,scope)</tt>	Returns a function that applies the sum of multiple regularizers.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/regularizers.py#L157'>apply_regularization</a>(regularizer,weights_list)</tt>	Returns the summed penalty by applying regularizer to the weights_list.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/optimizers.py#L57'>optimize_loss</a>(loss,global_step,learning_rate,optimizer)</tt>	Given loss and parameters for optimizer returns a training op.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/optimizers.py#L301'>_clip_gradients_by_norm</a>(grads_and_vars,clip_gradients)</tt>	Clips gradients by global norm.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/optimizers.py#L308'>_adaptive_max_norm</a>(norm,std_factor,decay,global_step)</tt>	Find max_norm given norm and previous average.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/optimizers.py#L338'>adaptive_clipping_fn</a>(std_factor,decay,static_max_norm,global_step)</tt>	Adapt the clipping value using statistics on the norms.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/optimizers.py#L408'>_add_scaled_noise_to_gradients</a>(grads_and_vars,gradient_noise_scale)</tt>	Adds scaled noise from a 0-mean normal distribution to gradients.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/optimizers.py#L425'>_multiply_gradients</a>(grads_and_vars,gradient_multipliers)</tt>	Multiply specified gradients.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/initializers.py#L31'>xavier_initializer</a>(uniform,seed,dtype)</tt>	Returns an initializer performing "xavier" initialization for weights.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/initializers.py#L61'>variance_scaling_initializer</a>(factor,mode,uniform,seed)</tt>	Returns an initializer that generates tensors without scaling variance.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/utils.py#L42'>collect_named_outputs</a>(collections,alias,outputs)</tt>	Add tensor outputs tagged with alias to collections.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/utils.py#L65'>append_tensor_alias</a>(tensor,alias)</tt>	Append an alias to the list of aliases of the tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/utils.py#L85'>gather_tensors_aliases</a>(tensors)</tt>	Given a list of tensors gather their aliases.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/utils.py#L100'>get_tensor_aliases</a>(tensor)</tt>	Get a list with the aliases of the input tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/utils.py#L123'>convert_collection_to_dict</a>(collection)</tt>	Returns an ordereddict of tensors with their aliases as keys.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/utils.py#L137'>constant_value</a>(value_or_tensor_or_var,dtype)</tt>	Returns value if value_or_tensor_or_var has a constant value.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/utils.py#L166'>static_cond</a>(pred,fn1,fn2)</tt>	Return either fn1() or fn2() based on the boolean value of pred.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/utils.py#L192'>smart_cond</a>(pred,fn1,fn2,name)</tt>	Return either fn1() or fn2() based on the boolean predicate/value pred.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/utils.py#L223'>first_dimension</a>(shape,min_rank)</tt>	Returns the first dimension of shape while checking it has min_rank.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/utils.py#L249'>last_dimension</a>(shape,min_rank)</tt>	Returns the last dimension of shape while checking it has min_rank.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/utils.py#L275'>two_element_tuple</a>(int_or_tuple)</tt>	Converts int_or_tuple to height width.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/utils.py#L306'>n_positive_integers</a>(n,value)</tt>	Converts value to a sequence of n positive integers.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/encoders.py#L32'>bow_encoder</a>(ids,vocab_size,embed_dim,sparse_lookup)</tt>	Maps a sequence of symbols to a vector per example by averaging embeddings.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/encoders.py#L91'>embed_sequence</a>(ids,vocab_size,embed_dim,unique)</tt>	Maps a sequence of symbols to a sequence of embeddings.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.FeatureColumnTest <a href=' /contrib/layers/python/layers/feature_column_test.py#L255'>testOneHotReshaping</a>()</tt>	Tests reshaping behavior of onehotcolumn.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.FeatureColumnTest <a href=' /contrib/layers/python/layers/feature_column_test.py#L413'>testRealValuedColumnReshaping</a>()</tt>	Tests reshaping behavior of realvaluedcolumn.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.FeatureColumnTest <a href=' /contrib/layers/python/layers/feature_column_test.py#L436'>testRealValuedColumnDensification</a>()</tt>	Tests densification behavior of realvaluedcolumn.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.FeatureColumnTest <a href=' /contrib/layers/python/layers/feature_column_test.py#L487'>testBucketizedColumnDeepCopy</a>()</tt>	Tests that we can do a deepcopy of a bucketized column.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.FeatureColumnTest <a href=' /contrib/layers/python/layers/feature_column_test.py#L620'>testSparseColumnAcceptsDenseScalar</a>()</tt>	Tests that sparsecolumns accept dense scalar inputs.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.FeatureColumnTest <a href=' /contrib/layers/python/layers/feature_column_test.py#L634'>testSparseColumnIntegerizedDeepCopy</a>()</tt>	Tests deepcopy of sparse_column_with_integerized_feature.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.FeatureColumnTest <a href=' /contrib/layers/python/layers/feature_column_test.py#L643'>testSparseColumnHashBucketDeepCopy</a>()</tt>	Tests deepcopy of sparse_column_with_hash_bucket.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.FeatureColumnTest <a href=' /contrib/layers/python/layers/feature_column_test.py#L652'>testSparseColumnKeysDeepCopy</a>()</tt>	Tests deepcopy of sparse_column_with_keys.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.FeatureColumnTest <a href=' /contrib/layers/python/layers/feature_column_test.py#L667'>testSparseColumnVocabularyDeepCopy</a>()</tt>	Tests deepcopy of sparse_column_with_vocabulary_file.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.SampledScatteredEmbeddingLookupSparseTest <a href=' /contrib/layers/python/layers/embedding_ops_test.py#L468'>test_output_shape</a>()</tt>	Verifies the shape of the output tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.SampledScatteredEmbeddingLookupSparseTest <a href=' /contrib/layers/python/layers/embedding_ops_test.py#L482'>test_output_values</a>()</tt>	Verifies the values in a trivial case.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.SampledScatteredEmbeddingLookupSparseTest <a href=' /contrib/layers/python/layers/embedding_ops_test.py#L496'>test_output_values_with_sampled_candidates</a>()</tt>	Verifies the values for given sampled_candidates.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.SampledScatteredEmbeddingLookupSparseTest <a href=' /contrib/layers/python/layers/embedding_ops_test.py#L521'>test_output_values_with_sign_hash</a>()</tt>	Verifies the values in a trivial case with hash_signs=true.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers.SampledScatteredEmbeddingLookupSparseTest <a href=' /contrib/layers/python/layers/embedding_ops_test.py#L538'>test_distributive_property</a>()</tt>	Verifies the distributive property of matrix multiplication.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/embedding_ops.py#L48'>safe_embedding_lookup_sparse</a>(embedding_weights,sparse_ids,sparse_weights,combiner)</tt>	Lookup embedding results accounting for invalid ids and empty features.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/embedding_ops.py#L186'>_prune_invalid_ids</a>(sparse_ids,sparse_weights)</tt>	Prune invalid ids (< 0) from the input ids and weights.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/embedding_ops.py#L198'>scattered_embedding_lookup</a>(params,values,dimension,name)</tt>	Looks up embeddings using parameter hashing for each value in values.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/embedding_ops.py#L249'>_sampled_scattered_embedding_lookup</a>(params,values,dimension,sampled_candidates)</tt>	Looks up embeddings using parameter hashing for each value in values.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/embedding_ops.py#L366'>scattered_embedding_lookup_sparse</a>(params,sparse_values,dimension,combiner)</tt>	Looks up embeddings of a sparse feature using parameter hashing.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/embedding_ops.py#L448'>embedding_lookup_unique</a>(params,ids,name)</tt>	Version of embedding_lookup that avoids duplicate lookups.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/embedding_ops.py#L485'>_sampled_scattered_embedding_lookup_sparse</a>(params,sp_values,dimension,sampled_candidates)</tt>	Looks up embeddings using parameter hashing for sparse values.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/embedding_ops.py#L566'>embedding_lookup_sparse_with_distributed_aggregation</a>(params,sp_ids,sp_weights,partition_strategy)</tt>	Computes embeddings for the given ids and weights.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/embedding_ops.py#L690'>_do_gather</a>(params,ids,name)</tt>	Deals with doing gather differently for resource variables.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/embedding_ops.py#L697'>_embedding_lookup_with_distributed_aggregation</a>(params,ids,partition_strategy,name)</tt>	Lookup helper for embedding_lookup_sparse_with_distributed_aggregation.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/summaries.py#L43'>_add_scalar_summary</a>(tensor,tag)</tt>	Add a scalar summary operation for the tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/summaries.py#L61'>_add_histogram_summary</a>(tensor,tag)</tt>	Add a summary operation for the histogram of a tensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/summaries.py#L78'>summarize_activation</a>(op)</tt>	Summarize an activation.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/summaries.py#L107'>summarize_tensor</a>(tensor,tag)</tt>	Summarize a tensor using a suitable summary type.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/summaries.py#L135'>summarize_tensors</a>(tensors,summarizer)</tt>	Summarize a set of tensors.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/summaries.py#L140'>summarize_collection</a>(collection,name_filter,summarizer)</tt>	Summarize a graph collection of tensors possibly filtered by name.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.layers. <a href=' /contrib/layers/python/layers/summaries.py#L161'>summarize_activations</a>(name_filter,summarizer)</tt>	Summarize activations using summarize_activation to summarize.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L35'>test_simple</a>()</tt>	Tests a simple scenario.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L51'>test_dense</a>()</tt>	Tests only dense inputs.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L72'>test_integer_mixed_string_sparse</a>()</tt>	Tests mixed type.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L86'>test_integer_mixed_string_dense</a>()</tt>	Tests mixed dense inputs.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L105'>test_sparse_cross_dense</a>()</tt>	Tests sparse and dense inputs.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L123'>test_integer_sparse_input</a>()</tt>	Tests mixed type sparse and dense inputs.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L139'>test_permutation_3x3x3</a>()</tt>	Tests 3x3x3 permutation.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L182'>test_permutation_3x1x2</a>()</tt>	Tests 3x1x2 permutation.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L202'>test_large_batch</a>()</tt>	Tests with large batch size to force multithreding.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L235'>test_one_column_empty</a>()</tt>	Tests when one column is empty.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L248'>test_some_columns_empty</a>()</tt>	Tests when more than one columns are empty.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L267'>test_all_columns_empty</a>()</tt>	Tests when all columns are empty.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L279'>test_hashed_output_zero_bucket</a>()</tt>	Tests a simple scenario.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L294'>test_hashed_output_zero_bucket_v2</a>()</tt>	Tests a simple scenario.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L311'>test_hashed_output</a>()</tt>	Tests a simple scenario.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L327'>test_hashed_output_v2</a>()</tt>	Tests a simple scenario.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L344'>test_hashed_output_v1_has_collision</a>()</tt>	Tests the old version of the fingerprint concatenation has collisions.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L358'>test_hashed_output_v2_has_no_collision</a>()</tt>	Tests the new version of the fingerprint concatenation has no collisions.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L375'>test_hashed_3x1x2</a>()</tt>	Tests 3x1x2 permutation with hashed output.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.kernel_tests.SparseCrossOpTest <a href=' /contrib/layers/python/kernel_tests/sparse_feature_cross_op_test.py#L406'>_sparse_tensor</a>(data,batch_size)</tt>	Generates a sparsetensor.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.ops. <a href=' /contrib/layers/python/ops/bucketization_op.py#L23'>bucketize</a>(input_tensor,boundaries,name)</tt>	Bucketizes input_tensor by given boundaries.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.ops. <a href=' /contrib/layers/python/ops/sparse_feature_cross_op.py#L36'>sparse_feature_cross</a>(inputs,hashed_output,num_buckets,name)</tt>	Crosses a list of tensor or sparsetensor objects.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.ops. <a href=' /contrib/layers/python/ops/sparse_ops.py#L29'>_multiplier_helper</a>(shape)</tt>	Returns moving offset for each dimension given shape.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.ops. <a href=' /contrib/layers/python/ops/sparse_ops.py#L41'>dense_to_sparse_tensor</a>(dense_tensor,ignore_value)</tt>	Converts a dense tensor to a sparsetensor dropping ignore_value cells.
<tt style='background-color:#E8E8E8;'> contrib.layers.python.ops. <a href=' /contrib/layers/python/ops/sparse_ops.py#L87'>sparse_row_envelope</a>(sparse_input,row_axis,col_axis,name)</tt>	Returns the length of each 'row' in a sparsetensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/testing_utils.py#L27'>get_test_data</a>(train_samples,test_samples,input_shape,num_classes)</tt>	Generates test data to train a model on.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/testing_utils.py#L53'>layer_test</a>(layer_cls,kwargs,input_shape,input_dtype)</tt>	Test routine for a layer with a single input and single output.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2717'>softmax</a>(x,axis)</tt>	Softmax activation function.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Optimizer <a href=' /contrib/keras/python/keras/optimizers.py#L72'>set_weights</a>(weights)</tt>	Sets the weights of the optimizer from numpy arrays.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Optimizer <a href=' /contrib/keras/python/keras/optimizers.py#L99'>get_weights</a>()</tt>	Returns the current value of the weights of the optimizer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/optimizers.py#L697'>deserialize</a>(config,custom_objects)</tt>	Inverse of the serialize function.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/optimizers.py#L730'>get</a>(identifier)</tt>	Retrieves a keras optimizer instance.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/initializers.py#L60'>lecun_uniform</a>(seed)</tt>	Lecun uniform initializer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/initializers.py#L81'>glorot_normal</a>(seed)</tt>	Glorot normal initializer also called xavier normal initializer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/initializers.py#L103'>glorot_uniform</a>(seed)</tt>	Glorot uniform initializer also called xavier uniform initializer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/initializers.py#L125'>he_normal</a>(seed)</tt>	He normal initializer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/initializers.py#L145'>he_uniform</a>(seed)</tt>	He uniform variance scaling initializer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L91'>backend</a>()</tt>	Publicly accessible method for determining the current backend.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L102'>epsilon</a>()</tt>	Returns the value of the fuzz factor used in numeric expressions.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L117'>set_epsilon</a>(value)</tt>	Sets the value of the fuzz factor used in numeric expressions.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L137'>floatx</a>()</tt>	Returns the default float type as a string.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L154'>set_floatx</a>(value)</tt>	Sets the default float type.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L179'>cast_to_floatx</a>(x)</tt>	Cast a numpy array to the default keras float type.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L206'>image_data_format</a>()</tt>	Returns the default image data format convention.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L221'>set_image_data_format</a>(data_format)</tt>	Sets the value of the image data format convention.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L246'>get_uid</a>(prefix)</tt>	Associates a string prefix with an integer counter in a tensorflow graph.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L283'>clear_session</a>()</tt>	Destroys the current tf graph and creates a new one.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L298'>manual_variable_initialization</a>(value)</tt>	Sets the manual variable initialization flag.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L314'>learning_phase</a>()</tt>	Returns the learning phase flag.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L331'>set_learning_phase</a>(value)</tt>	Sets the learning phase to a fixed value.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L346'>get_session</a>()</tt>	Returns the tf session to be used by the backend.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L381'>set_session</a>(session)</tt>	Sets the global tensorflow session.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L422'>is_sparse</a>(tensor)</tt>	Returns whether a tensor is a sparse tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L445'>to_dense</a>(tensor)</tt>	Converts a sparse tensor into a dense tensor and returns it.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L474'>variable</a>(value,dtype,name)</tt>	Instantiates a variable and returns it.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L515'>_initialize_variables</a>()</tt>	Utility to initialize uninitialized variables on the fly.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L535'>placeholder</a>(shape,ndim,dtype,sparse)</tt>	Instantiates a placeholder tensor and returns it.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L572'>shape</a>(x)</tt>	Returns the symbolic shape of a tensor or variable.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L603'>int_shape</a>(x)</tt>	Returns the shape tensor or variable as a tuple of int or none entries.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L631'>ndim</a>(x)</tt>	Returns the number of axes in a tensor as an integer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L658'>dtype</a>(x)</tt>	Returns the dtype of a keras tensor or variable as a string.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L688'>eval</a>(x)</tt>	Evaluates the value of a variable.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L709'>zeros</a>(shape,dtype,name)</tt>	Instantiates an all-zeros variable and returns it.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L738'>ones</a>(shape,dtype,name)</tt>	Instantiates an all-ones tensor variable and returns it.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L767'>eye</a>(size,dtype,name)</tt>	Instantiate an identity matrix and returns it.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L792'>zeros_like</a>(x,dtype,name)</tt>	Instantiates an all-zeros variable of the same shape as another tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L817'>ones_like</a>(x,dtype,name)</tt>	Instantiates an all-ones variable of the same shape as another tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L842'>random_uniform_variable</a>(shape,low,high,dtype)</tt>	Instantiates a variable with values drawn from a uniform distribution.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L879'>random_normal_variable</a>(shape,mean,scale,dtype)</tt>	Instantiates a variable with values drawn from a normal distribution.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L917'>count_params</a>(x)</tt>	Returns the number of scalars in a keras variable.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L940'>cast</a>(x,dtype)</tt>	Casts a tensor to a different dtype and returns it.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L995'>dot</a>(x,y)</tt>	Multiplies 2 tensors (and/or variables) and returns a *tensor*.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1066'>batch_dot</a>(x,y,axes)</tt>	Batchwise dot product.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1138'>transpose</a>(x)</tt>	Transposes a tensor and returns it.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1173'>gather</a>(reference,indices)</tt>	Retrieves the elements of indices indices in the tensor reference.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1189'>_normalize_axis</a>(axis,ndim)</tt>	Converts negative axes to positive values.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1211'>max</a>(x,axis,keepdims)</tt>	Maximum value in a tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1229'>min</a>(x,axis,keepdims)</tt>	Minimum value in a tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1247'>sum</a>(x,axis,keepdims)</tt>	Sum of the values in a tensor alongside the specified axis.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1265'>prod</a>(x,axis,keepdims)</tt>	Multiplies the values in a tensor alongside the specified axis.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1283'>cumsum</a>(x,axis)</tt>	Cumulative sum of the values in a tensor alongside the specified axis.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1297'>cumprod</a>(x,axis)</tt>	Cumulative product of the values in a tensor alongside the specified axis.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1311'>var</a>(x,axis,keepdims)</tt>	Variance of a tensor alongside the specified axis.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1334'>std</a>(x,axis,keepdims)</tt>	Standard deviation of a tensor alongside the specified axis.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1351'>mean</a>(x,axis,keepdims)</tt>	Mean of a tensor alongside the specified axis.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1371'>any</a>(x,axis,keepdims)</tt>	Bitwise reduction logical or.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1387'>all</a>(x,axis,keepdims)</tt>	Bitwise reduction logical and.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1403'>argmax</a>(x,axis)</tt>	Returns the index of the maximum value along an axis.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1417'>argmin</a>(x,axis)</tt>	Returns the index of the minimum value along an axis.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1443'>abs</a>(x)</tt>	Element-wise absolute value.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1455'>sqrt</a>(x)</tt>	Element-wise square root.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1494'>round</a>(x)</tt>	Element-wise rounding to the closest integer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1533'>clip</a>(x,min_value,max_value)</tt>	Element-wise value clipping.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1553'>equal</a>(x,y)</tt>	Element-wise equality between two tensors.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1566'>not_equal</a>(x,y)</tt>	Element-wise inequality between two tensors.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1579'>greater</a>(x,y)</tt>	Element-wise truth value of (x > y).
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1592'>greater_equal</a>(x,y)</tt>	Element-wise truth value of (x >= y).
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1605'>less</a>(x,y)</tt>	Element-wise truth value of (x < y).
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1618'>less_equal</a>(x,y)</tt>	Element-wise truth value of (x <= y).
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1631'>maximum</a>(x,y)</tt>	Element-wise maximum of two tensors.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1644'>minimum</a>(x,y)</tt>	Element-wise minimum of two tensors.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1657'>sin</a>(x)</tt>	Computes sin of x element-wise.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1669'>cos</a>(x)</tt>	Computes cos of x element-wise.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1681'>normalize_batch_in_training</a>(x,gamma,beta,reduction_axes)</tt>	Computes mean and std for batch then apply batch_normalization on batch.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1724'>batch_normalization</a>(x,mean,var,beta)</tt>	Applies batch normalization on x given mean var beta and gamma.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1747'>concatenate</a>(tensors,axis)</tt>	Concatenates a list of tensors alongside the specified axis.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1770'>reshape</a>(x,shape)</tt>	Reshapes a tensor to the specified shape.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1783'>permute_dimensions</a>(x,pattern)</tt>	Permutes axes in a tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1797'>resize_images</a>(x,height_factor,width_factor,data_format)</tt>	Resizes the images contained in a 4d tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1841'>resize_volumes</a>(x,depth_factor,height_factor,width_factor)</tt>	Resizes the volume contained in a 5d tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1872'>repeat_elements</a>(x,rep,axis)</tt>	Repeats the elements of a tensor along an axis like np repeat.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1903'>repeat</a>(x,n)</tt>	Repeats a 2d tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1922'>arange</a>(start,stop,step,dtype)</tt>	Creates a 1d tensor containing a sequence of integers.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1951'>tile</a>(x,n)</tt>	Creates a tensor by tiling x by n.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1967'>flatten</a>(x)</tt>	Flatten a tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1979'>batch_flatten</a>(x)</tt>	Turn a nd tensor into a 2d tensor with same 0th dimension.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L1994'>expand_dims</a>(x,axis)</tt>	Adds a 1-sized dimension at index "dim".
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2007'>squeeze</a>(x,axis)</tt>	Removes a 1-dimension from the tensor at index "axis".
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2020'>temporal_padding</a>(x,padding)</tt>	Pads the middle dimension of a 3d tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2036'>spatial_2d_padding</a>(x,padding,data_format)</tt>	Pads the 2nd and 3rd dimensions of a 4d tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2066'>spatial_3d_padding</a>(x,padding,data_format)</tt>	Pads 5d tensor with zeros along the depth height width dimensions.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2109'>stack</a>(x,axis)</tt>	Stacks a list of rank r tensors into a rank r+1 tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2122'>one_hot</a>(indices,num_classes)</tt>	Computes the one-hot representation of an integer tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2140'>reverse</a>(x,axes)</tt>	Reverse a tensor along the specified axes.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2159'>get_value</a>(x)</tt>	Returns the value of a variable.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2171'>batch_get_value</a>(tensors)</tt>	Returns the value of more than one tensor variable.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2186'>set_value</a>(x,value)</tt>	Sets the value of a variable from a numpy array.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2207'>batch_set_value</a>(tuples)</tt>	Sets the values of many tensor variables at once.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2233'>print_tensor</a>(x,message)</tt>	Prints message and the tensor value when evaluated.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2298'>function</a>(inputs,outputs,updates)</tt>	Instantiates a keras function.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2319'>gradients</a>(loss,variables)</tt>	Returns the gradients of variables w r t loss.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2333'>stop_gradient</a>(variables)</tt>	Returns variables but with zero gradient w r t every other variable.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2348'>rnn</a>(step_function,inputs,initial_states,go_backwards)</tt>	Iterates over the time dimension of a tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2576'>switch</a>(condition,then_expression,else_expression)</tt>	Switches between two operations depending on a scalar value.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2608'>in_train_phase</a>(x,alt,training)</tt>	Selects x in train phase and alt otherwise.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2651'>in_test_phase</a>(x,alt,training)</tt>	Selects x in test phase and alt otherwise.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2674'>relu</a>(x,alpha,max_value)</tt>	Rectified linear unit.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2700'>elu</a>(x,alpha)</tt>	Exponential linear unit.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2717'>softmax</a>(x)</tt>	Softmax of a tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2729'>softplus</a>(x)</tt>	Softplus of a tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2741'>softsign</a>(x)</tt>	Softsign of a tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2753'>categorical_crossentropy</a>(output,target,from_logits)</tt>	Categorical crossentropy between an output tensor and a target tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2783'>sparse_categorical_crossentropy</a>(output,target,from_logits)</tt>	Categorical crossentropy with integer targets.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2816'>binary_crossentropy</a>(output,target,from_logits)</tt>	Binary crossentropy between an output tensor and a target tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2851'>hard_sigmoid</a>(x)</tt>	Segment-wise linear approximation of sigmoid.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2883'>dropout</a>(x,level,noise_shape,seed)</tt>	Sets entries in x to zero at random while scaling the entire tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2905'>l2_normalize</a>(x,axis)</tt>	Normalizes a tensor wrt the l2 norm alongside the specified axis.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L2920'>in_top_k</a>(predictions,targets,k)</tt>	Returns whether the targets are in the top k predictions.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L3098'>conv2d_transpose</a>(x,kernel,output_shape,strides)</tt>	2d deconvolution (i e.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L3142'>separable_conv2d</a>(x,depthwise_kernel,pointwise_kernel,strides)</tt>	2d convolution with separable filters.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L3322'>bias_add</a>(x,bias,data_format)</tt>	Adds a bias vector to a tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L3365'>random_normal</a>(shape,mean,stddev,dtype)</tt>	Returns a tensor with normal distribution of values.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L3387'>random_uniform</a>(shape,minval,maxval,dtype)</tt>	Returns a tensor with uniform distribution of values.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L3410'>random_binomial</a>(shape,p,dtype,seed)</tt>	Returns a tensor with random binomial distribution of values.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L3431'>truncated_normal</a>(shape,mean,stddev,dtype)</tt>	Returns a tensor with truncated random normal distribution of values.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L3464'>ctc_label_dense_to_sparse</a>(labels,label_lengths)</tt>	Converts ctc labels from dense to sparse.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L3508'>ctc_batch_cost</a>(y_true,y_pred,input_length,label_length)</tt>	Runs ctc loss algorithm on each batch element.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L3537'>ctc_decode</a>(y_pred,input_length,greedy,beam_width)</tt>	Decodes the output of a softmax.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L3588'>map_fn</a>(fn,elems,name,dtype)</tt>	Map the function fn over the elements elems and return the outputs.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L3603'>foldl</a>(fn,elems,initializer,name)</tt>	Reduce elems using fn to combine them from left to right.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/backend.py#L3619'>foldr</a>(fn,elems,initializer,name)</tt>	Reduce elems using fn to combine them from right to left.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/models.py#L54'>save_model</a>(model,filepath,overwrite,include_optimizer)</tt>	Save a model to a hdf5 file.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/models.py#L192'>load_model</a>(filepath,custom_objects)</tt>	Loads a model saved via save_model.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/models.py#L312'>model_from_config</a>(config,custom_objects)</tt>	Instantiates a keras model from its config.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/models.py#L331'>model_from_yaml</a>(yaml_string,custom_objects)</tt>	Parses a yaml model configuration file and returns a model instance.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras. <a href=' /contrib/keras/python/keras/models.py#L352'>model_from_json</a>(json_string,custom_objects)</tt>	Parses a json model configuration file and returns a model instance.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L437'>add</a>(layer)</tt>	Adds a layer instance on top of the layer stack.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L517'>pop</a>()</tt>	Removes the last layer in the model.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L539'>get_layer</a>(name,index)</tt>	Retrieve a layer that is part of the model.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L670'>get_weights</a>()</tt>	Retrieves the weights of the model.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L681'>set_weights</a>(weights)</tt>	Sets the weights of the model.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L721'>compile</a>(optimizer,loss,metrics,sample_weight_mode)</tt>	Configures the learning process.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L771'>fit</a>(x,y,batch_size,epochs)</tt>	Trains the model for a fixed number of epochs.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L846'>evaluate</a>(x,y,batch_size,verbose)</tt>	Computes the loss on some input data batch by batch.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L875'>predict</a>(x,batch_size,verbose)</tt>	Generates output predictions for the input samples.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L892'>predict_on_batch</a>(x)</tt>	Returns predictions for a single batch of samples.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L906'>train_on_batch</a>(x,y,class_weight,sample_weight)</tt>	Single gradient update over one batch of samples.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L931'>test_on_batch</a>(x,y,sample_weight)</tt>	Evaluates the model over a single batch of samples.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L953'>predict_proba</a>(x,batch_size,verbose)</tt>	Generates class probability predictions for the input samples.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L975'>predict_classes</a>(x,batch_size,verbose)</tt>	Generate class predictions for the input samples.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L995'>fit_generator</a>(generator,steps_per_epoch,epochs,verbose)</tt>	Fits the model on data generated batch-by-batch by a python generator.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L1094'>evaluate_generator</a>(generator,steps,max_q_size,workers)</tt>	Evaluates the model on a data generator.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.Sequential <a href=' /contrib/keras/python/keras/models.py#L1136'>predict_generator</a>(generator,steps,max_q_size,workers)</tt>	Generates predictions for the input samples from a data generator.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.CallbackList <a href=' /contrib/keras/python/keras/callbacks.py#L73'>on_epoch_begin</a>(epoch,logs)</tt>	Called at the start of an epoch.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.CallbackList <a href=' /contrib/keras/python/keras/callbacks.py#L87'>on_epoch_end</a>(epoch,logs)</tt>	Called at the end of an epoch.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.CallbackList <a href=' /contrib/keras/python/keras/callbacks.py#L98'>on_batch_begin</a>(batch,logs)</tt>	Called right before processing a batch.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.CallbackList <a href=' /contrib/keras/python/keras/callbacks.py#L118'>on_batch_end</a>(batch,logs)</tt>	Called at the end of a batch.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.CallbackList <a href=' /contrib/keras/python/keras/callbacks.py#L140'>on_train_begin</a>(logs)</tt>	Called at the beginning of training.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.CallbackList <a href=' /contrib/keras/python/keras/callbacks.py#L150'>on_train_end</a>(logs)</tt>	Called at the end of training.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.ReduceLROnPlateau <a href=' /contrib/keras/python/keras/callbacks.py#L809'>_reset</a>()</tt>	Resets wait counter and cooldown counter.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.applications. <a href=' /contrib/keras/python/keras/applications/imagenet_utils.py#L31'>preprocess_input</a>(x,data_format)</tt>	Preprocesses a tensor encoding a batch of images.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.applications. <a href=' /contrib/keras/python/keras/applications/imagenet_utils.py#L62'>decode_predictions</a>(preds,top)</tt>	Decodes the prediction of an imagenet model.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.applications. <a href=' /contrib/keras/python/keras/applications/imagenet_utils.py#L97'>_obtain_input_shape</a>(input_shape,default_size,min_size,data_format)</tt>	Internal utility to compute/validate an imagenet model's input shape.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.applications. <a href=' /contrib/keras/python/keras/applications/vgg16.py#L51'>VGG16</a>(include_top,weights,input_tensor,input_shape)</tt>	Instantiates the vgg16 architecture.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.applications. <a href=' /contrib/keras/python/keras/applications/resnet50.py#L57'>identity_block</a>(input_tensor,kernel_size,filters,stage)</tt>	The identity block is the block that has no conv layer at shortcut.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.applications. <a href=' /contrib/keras/python/keras/applications/resnet50.py#L95'>conv_block</a>(input_tensor,kernel_size,filters,stage)</tt>	Conv_block is the block that has a conv layer at shortcut.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.applications. <a href=' /contrib/keras/python/keras/applications/resnet50.py#L146'>ResNet50</a>(include_top,weights,input_tensor,input_shape)</tt>	Instantiates the resnet50 architecture.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.applications. <a href=' /contrib/keras/python/keras/applications/inception_v3.py#L57'>conv2d_bn</a>(x,filters,num_row,num_col)</tt>	Utility function to apply conv + bn.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.applications. <a href=' /contrib/keras/python/keras/applications/inception_v3.py#L101'>InceptionV3</a>(include_top,weights,input_tensor,input_shape)</tt>	Instantiates the inception v3 architecture.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.applications. <a href=' /contrib/keras/python/keras/applications/vgg19.py#L51'>VGG19</a>(include_top,weights,input_tensor,input_shape)</tt>	Instantiates the vgg19 architecture.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.applications. <a href=' /contrib/keras/python/keras/applications/xception.py#L63'>Xception</a>(include_top,weights,input_tensor,input_shape)</tt>	Instantiates the xception architecture.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/training.py#L48'>_standardize_input_data</a>(data,names,shapes,check_batch_axis)</tt>	Normalizes inputs and targets provided by users.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/training.py#L152'>_standardize_sample_or_class_weights</a>(x_weight,output_names,weight_type)</tt>	Maps sample_weight or class_weight to model outputs.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/training.py#L206'>_check_array_lengths</a>(inputs,targets,weights)</tt>	Does user input validation for numpy arrays.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/training.py#L247'>_check_loss_and_target_compatibility</a>(targets,loss_fns,output_shapes)</tt>	Does validation on the compatiblity of targets and loss functions.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/training.py#L295'>_collect_metrics</a>(metrics,output_names)</tt>	Maps metric functions to model outputs.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/training.py#L331'>_batch_shuffle</a>(index_array,batch_size)</tt>	Shuffles an array in a batch-wise fashion.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/training.py#L355'>_make_batches</a>(size,batch_size)</tt>	Returns a list of batch indices tuples of indices.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/training.py#L370'>_slice_arrays</a>(arrays,start,stop)</tt>	Slice an array or list of arrays.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/training.py#L407'>_weighted_masked_objective</a>(fn)</tt>	Adds support for masking and sample-weighting to an objective function.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/training.py#L460'>_masked_objective</a>(fn)</tt>	Adds support for masking to an objective function.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/training.py#L501'>_standardize_weights</a>(y,sample_weight,class_weight,sample_weight_mode)</tt>	Performs sample weight validation and standardization.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.GeneratorEnqueuer <a href=' /contrib/keras/python/keras/engine/training.py#L602'>start</a>(workers,max_q_size,wait_time)</tt>	Kicks off threads which add data from the generator into the queue.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.GeneratorEnqueuer <a href=' /contrib/keras/python/keras/engine/training.py#L649'>stop</a>(timeout)</tt>	Stop running threads and wait for them to exit if necessary.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Model <a href=' /contrib/keras/python/keras/engine/training.py#L680'>compile</a>(optimizer,loss,metrics,loss_weights)</tt>	Configures the model for training.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Model <a href=' /contrib/keras/python/keras/engine/training.py#L1029'>_fit_loop</a>(f,ins,out_labels,batch_size)</tt>	Abstract fit function for f ins.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Model <a href=' /contrib/keras/python/keras/engine/training.py#L1164'>_predict_loop</a>(f,ins,batch_size,verbose)</tt>	Abstract method to loop over some data in batches.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Model <a href=' /contrib/keras/python/keras/engine/training.py#L1216'>_test_loop</a>(f,ins,batch_size,verbose)</tt>	Abstract method to loop over some data in batches.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Model <a href=' /contrib/keras/python/keras/engine/training.py#L1328'>fit</a>(x,y,batch_size,epochs)</tt>	Trains the model for a fixed number of epochs iterations on a dataset.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Model <a href=' /contrib/keras/python/keras/engine/training.py#L1497'>evaluate</a>(x,y,batch_size,verbose)</tt>	Returns the loss value & metrics values for the model in test mode.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Model <a href=' /contrib/keras/python/keras/engine/training.py#L1540'>predict</a>(x,batch_size,verbose)</tt>	Generates output predictions for the input samples.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Model <a href=' /contrib/keras/python/keras/engine/training.py#L1584'>train_on_batch</a>(x,y,sample_weight,class_weight)</tt>	Runs a single gradient update on a single batch of data.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Model <a href=' /contrib/keras/python/keras/engine/training.py#L1635'>test_on_batch</a>(x,y,sample_weight)</tt>	Test the model on a single batch of samples.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Model <a href=' /contrib/keras/python/keras/engine/training.py#L1675'>predict_on_batch</a>(x)</tt>	Returns predictions for a single batch of samples.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Model <a href=' /contrib/keras/python/keras/engine/training.py#L1696'>fit_generator</a>(generator,steps_per_epoch,epochs,verbose)</tt>	Fits the model on data yielded batch-by-batch by a python generator.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Model <a href=' /contrib/keras/python/keras/engine/training.py#L1930'>evaluate_generator</a>(generator,steps,max_q_size,workers)</tt>	Evaluates the model on a data generator.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Model <a href=' /contrib/keras/python/keras/engine/training.py#L2027'>predict_generator</a>(generator,steps,max_q_size,workers)</tt>	Generates predictions for the input samples from a data generator.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L351'>add_weight</a>(name,shape,dtype,initializer)</tt>	Adds a weight variable to the layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L384'>assert_input_compatibility</a>(inputs)</tt>	Checks compatibility between the layer and provided inputs.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L487'>__call__</a>(inputs)</tt>	Wrapper around self call(), for handling internal references.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L553'>_add_inbound_node</a>(input_tensors,output_tensors,input_masks,output_masks)</tt>	Internal method to create an inbound node for the layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L610'>_compute_output_shape</a>(input_shape)</tt>	Computes the output shape of the layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L630'>compute_mask</a>(inputs,mask)</tt>	Computes an output mask tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L656'>build</a>(input_shape)</tt>	Creates the layer weights.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L668'>_get_node_attribute_at_index</a>(node_index,attr,attr_name)</tt>	Retrieves an attribute (e g input_tensors) from a node.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L703'>get_input_shape_at</a>(node_index)</tt>	Retrieves the input shape s of a layer at a given node.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L719'>get_output_shape_at</a>(node_index)</tt>	Retrieves the output shape s of a layer at a given node.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L735'>get_input_at</a>(node_index)</tt>	Retrieves the input tensor s of a layer at a given node.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L750'>get_output_at</a>(node_index)</tt>	Retrieves the output tensor s of a layer at a given node.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L765'>get_input_mask_at</a>(node_index)</tt>	Retrieves the input mask tensor s of a layer at a given node.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L781'>get_output_mask_at</a>(node_index)</tt>	Retrieves the output mask tensor s of a layer at a given node.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L797'>input</a>()</tt>	Retrieves the input tensor s of a layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L822'>output</a>()</tt>	Retrieves the output tensor s of a layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L846'>input_mask</a>()</tt>	Retrieves the input mask tensor s of a layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L870'>output_mask</a>()</tt>	Retrieves the output mask tensor s of a layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L894'>input_shape</a>()</tt>	Retrieves the input shape s of a layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L932'>output_shape</a>()</tt>	Retrieves the output shape s of a layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L970'>set_weights</a>(weights)</tt>	Sets the weights of the layer from numpy arrays.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L1003'>get_weights</a>()</tt>	Returns the current weights of the layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L1012'>get_config</a>()</tt>	Returns the config of the layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L1034'>from_config</a>(cls,config)</tt>	Creates a layer from its config.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Layer <a href=' /contrib/keras/python/keras/engine/topology.py#L1052'>count_params</a>()</tt>	Count the total number of scalars composing the weights.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/topology.py#L1171'>Input</a>(shape,batch_shape,name,dtype)</tt>	Input() is used to instantiate a keras tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L1605'>get_layer</a>(name,index)</tt>	Retrieves a layer based on either its name unique or index.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L1641'>updates</a>()</tt>	Retrieve the model's updates.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L1668'>losses</a>()</tt>	Retrieve the model's losses.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L1712'>state_updates</a>()</tt>	Returns the updates from all layers that are stateful.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L1762'>get_weights</a>()</tt>	Retrieves the weights of the model.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L1773'>set_weights</a>(weights)</tt>	Sets the weights of the model.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L1789'>input_spec</a>()</tt>	Gets the model's input specs.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L1812'>call</a>(inputs,mask)</tt>	Call the model on new inputs.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L1964'>run_internal_graph</a>(inputs,masks)</tt>	Computes output tensors for new inputs.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L2191'>from_config</a>(cls,config,custom_objects)</tt>	Instantiates a model from its config (output of get_config()).
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L2275'>save</a>(filepath,overwrite,include_optimizer)</tt>	Save the model to a single hdf5 file.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L2314'>save_weights</a>(filepath,overwrite)</tt>	Dumps all layer weights to a hdf5 file.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L2347'>load_weights</a>(filepath,by_name)</tt>	Loads all layer weights from a hdf5 save file.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L2383'>_updated_config</a>()</tt>	Util hared between different serialization methods.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L2400'>to_json</a>()</tt>	Returns a json string containing the network configuration.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine.Container <a href=' /contrib/keras/python/keras/engine/topology.py#L2428'>to_yaml</a>()</tt>	Returns a yaml string containing the network configuration.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/topology.py#L2456'>get_source_inputs</a>(tensor,layer,node_index)</tt>	Returns the list of input tensors necessary to compute tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/topology.py#L2497'>_to_list</a>(x)</tt>	Normalizes a list/tensor into a list.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/topology.py#L2530'>_collect_previous_mask</a>(input_tensors)</tt>	Retrieves the output mask s of the previous node.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/topology.py#L2564'>_collect_input_shape</a>(input_tensors)</tt>	Collects the output shape s of a list of keras tensors.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/topology.py#L2610'>preprocess_weights_for_loading</a>(layer,weights,original_keras_version,original_backend)</tt>	Converts layers weights from keras 1 format to keras 2.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/topology.py#L2705'>load_weights_from_hdf5_group</a>(f,layers)</tt>	Implements topological order-based weight loading.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.engine. <a href=' /contrib/keras/python/keras/engine/topology.py#L2768'>load_weights_from_hdf5_group_by_name</a>(f,layers)</tt>	Implements name-based weight loading.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.layers.Reshape <a href=' /contrib/keras/python/keras/layers/core.py#L348'>_fix_unknown_dimension</a>(input_shape,output_shape)</tt>	Find and replace a missing dimension in an output shape.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.layers.NoiseLayersTest <a href=' /contrib/keras/python/keras/layers/normalization_test.py#L114'>test_shared_batchnorm</a>()</tt>	Test that a bn layer can be shared across different data streams.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.layers._Merge <a href=' /contrib/keras/python/keras/layers/merge.py#L44'>_compute_elemwise_op_output_shape</a>(shape1,shape2)</tt>	Computes the shape of the resultant of an elementwise operation.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.layers. <a href=' /contrib/keras/python/keras/layers/merge.py#L475'>add</a>(inputs)</tt>	Functional interface to the add layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.layers. <a href=' /contrib/keras/python/keras/layers/merge.py#L488'>multiply</a>(inputs)</tt>	Functional interface to the multiply layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.layers. <a href=' /contrib/keras/python/keras/layers/merge.py#L501'>average</a>(inputs)</tt>	Functional interface to the average layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.layers. <a href=' /contrib/keras/python/keras/layers/merge.py#L514'>maximum</a>(inputs)</tt>	Functional interface to the maximum layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.layers. <a href=' /contrib/keras/python/keras/layers/merge.py#L527'>concatenate</a>(inputs,axis)</tt>	Functional interface to the concatenate layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.layers. <a href=' /contrib/keras/python/keras/layers/merge.py#L541'>dot</a>(inputs,axes,normalize)</tt>	Functional interface to the dot layer.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.layers. <a href=' /contrib/keras/python/keras/layers/recurrent.py#L37'>_time_distributed_dense</a>(x,w,b,dropout)</tt>	Apply y w + b for every temporal slice y of x.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.layers. <a href=' /contrib/keras/python/keras/layers/serialization.py#L44'>deserialize</a>(config,custom_objects)</tt>	Instantiates a layer from a config dictionary.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.datasets. <a href=' /contrib/keras/python/keras/datasets/imdb.py#L29'>load_data</a>()</tt>	Loads cifar10 dataset.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.datasets. <a href=' /contrib/keras/python/keras/datasets/imdb.py#L29'>load_data</a>(label_mode)</tt>	Loads cifar100 dataset.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.datasets. <a href=' /contrib/keras/python/keras/datasets/imdb.py#L29'>load_data</a>(path,num_words,skip_top,maxlen)</tt>	Loads the imdb dataset.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.datasets. <a href=' /contrib/keras/python/keras/datasets/imdb.py#L135'>get_word_index</a>(path)</tt>	Retrieves the dictionary mapping word indices back to words.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.datasets. <a href=' /contrib/keras/python/keras/datasets/cifar.py#L27'>load_batch</a>(fpath,label_key)</tt>	Internal utility for parsing cifar data.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.datasets. <a href=' /contrib/keras/python/keras/datasets/imdb.py#L29'>load_data</a>(path)</tt>	Loads the mnist dataset.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.datasets. <a href=' /contrib/keras/python/keras/datasets/imdb.py#L29'>load_data</a>(path,seed,test_split)</tt>	Loads the boston housing dataset.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/io_utils.py#L114'>ask_to_proceed_with_overwrite</a>(filepath)</tt>	Produces a prompt asking about overwriting a file.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/generic_utils.py#L69'>custom_object_scope</a>()</tt>	Provides a scope that changes to _global_custom_objects cannot escape.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/generic_utils.py#L99'>get_custom_objects</a>()</tt>	Retrieves a live reference to the global dictionary of custom objects.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/generic_utils.py#L189'>func_dump</a>(func)</tt>	Serializes a user defined function.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/generic_utils.py#L207'>func_load</a>(code,defaults,closure,globs)</tt>	Deserializes a user defined function.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils.Progbar <a href=' /contrib/keras/python/keras/utils/generic_utils.py#L250'>update</a>(current,values,force)</tt>	Updates the progress bar.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/conv_utils.py#L27'>normalize_tuple</a>(value,n,name)</tt>	Transforms a single int or iterable of ints into an int tuple.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/conv_utils.py#L86'>convert_kernel</a>(kernel)</tt>	Converts a numpy kernel matrix from theano format to tensorflow format.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/conv_utils.py#L108'>conv_output_length</a>(input_length,filter_size,padding,stride)</tt>	Determines output length of a convolution given input length.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/conv_utils.py#L136'>conv_input_length</a>(output_length,filter_size,padding,stride)</tt>	Determines input length of a convolution given output length.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/layer_utils.py#L27'>print_summary</a>(model,line_length,positions)</tt>	Prints a summary of a model.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/layer_utils.py#L146'>count_total_params</a>(layers,layer_set)</tt>	Counts the number of parameters in a list of layers.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/layer_utils.py#L177'>convert_all_kernels_in_model</a>(model)</tt>	Converts all convolution kernels in a model from theano to tensorflow.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/layer_utils.py#L202'>convert_dense_weights_data_format</a>(dense,previous_feature_map_shape,target_data_format)</tt>	Utility useful when changing a convnet's data_format.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/data_utils.py#L78'>_extract_archive</a>(file_path,path,archive_format)</tt>	Extracts an archive if it matches tar tar gz tar bz or zip formats.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/data_utils.py#L124'>get_file</a>(fname,origin,untar,md5_hash)</tt>	Downloads a file from a url if it not already in the cache.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/data_utils.py#L241'>_hash_file</a>(fpath,algorithm,chunk_size)</tt>	Calculates a file sha256 or md5 hash.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/data_utils.py#L273'>validate_file</a>(fpath,file_hash,algorithm,chunk_size)</tt>	Validates a file against a sha256 or md5 hash.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/np_utils.py#L23'>to_categorical</a>(y,num_classes)</tt>	Converts a class vector integers to binary class matrix.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/np_utils.py#L45'>normalize</a>(x,axis,order)</tt>	Normalizes a numpy array.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.utils. <a href=' /contrib/keras/python/keras/utils/vis_utils.py#L47'>model_to_dot</a>(model,show_shapes,show_layer_names)</tt>	Converts a keras model to dot format.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.wrappers.BaseWrapper <a href=' /contrib/keras/python/keras/wrappers/scikit_learn.py#L77'>check_params</a>(params)</tt>	Checks for user typos in "params".
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.wrappers.BaseWrapper <a href=' /contrib/keras/python/keras/wrappers/scikit_learn.py#L108'>get_params</a>()</tt>	Gets parameters for this estimator.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.wrappers.BaseWrapper <a href=' /contrib/keras/python/keras/wrappers/scikit_learn.py#L121'>set_params</a>()</tt>	Sets the parameters of this estimator.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.wrappers.BaseWrapper <a href=' /contrib/keras/python/keras/wrappers/scikit_learn.py#L134'>fit</a>(x,y)</tt>	Constructs a new model with build_fn & fit the model to x y.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.wrappers.BaseWrapper <a href=' /contrib/keras/python/keras/wrappers/scikit_learn.py#L172'>filter_sk_params</a>(fn,override)</tt>	Filters sk_params and return those in fn's arguments.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.wrappers.KerasClassifier <a href=' /contrib/keras/python/keras/wrappers/scikit_learn.py#L197'>fit</a>(x,y)</tt>	Constructs a new model with build_fn & fit the model to x y.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.wrappers.KerasClassifier <a href=' /contrib/keras/python/keras/wrappers/scikit_learn.py#L227'>predict</a>(x)</tt>	Returns the class predictions for the given test data.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.wrappers.KerasClassifier <a href=' /contrib/keras/python/keras/wrappers/scikit_learn.py#L246'>predict_proba</a>(x)</tt>	Returns class probability estimates for the given test data.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.wrappers.KerasClassifier <a href=' /contrib/keras/python/keras/wrappers/scikit_learn.py#L274'>score</a>(x,y)</tt>	Returns the mean accuracy on the given test data and labels.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.wrappers.KerasRegressor <a href=' /contrib/keras/python/keras/wrappers/scikit_learn.py#L319'>predict</a>(x)</tt>	Returns predictions for the given test data.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.wrappers.KerasRegressor <a href=' /contrib/keras/python/keras/wrappers/scikit_learn.py#L336'>score</a>(x,y)</tt>	Returns the mean loss on the given test data and labels.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing. <a href=' /contrib/keras/python/keras/preprocessing/sequence.py#L27'>pad_sequences</a>(sequences,maxlen,dtype,padding)</tt>	Pads each sequence to the same length length of the longest sequence.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing. <a href=' /contrib/keras/python/keras/preprocessing/sequence.py#L107'>make_sampling_table</a>(size,sampling_factor)</tt>	Generates a word rank-based probabilistic sampling table.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing. <a href=' /contrib/keras/python/keras/preprocessing/sequence.py#L140'>skipgrams</a>(sequence,vocabulary_size,window_size,negative_samples)</tt>	Generates skipgram word pairs.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing. <a href=' /contrib/keras/python/keras/preprocessing/text.py#L38'>text_to_word_sequence</a>(text,filters,lower,split)</tt>	Converts a text to a sequence of word indices.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing.Tokenizer <a href=' /contrib/keras/python/keras/preprocessing/text.py#L120'>fit_on_texts</a>(texts)</tt>	Updates internal vocabulary based on a list of texts.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing.Tokenizer <a href=' /contrib/keras/python/keras/preprocessing/text.py#L156'>fit_on_sequences</a>(sequences)</tt>	Updates internal vocabulary based on a list of sequences.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing.Tokenizer <a href=' /contrib/keras/python/keras/preprocessing/text.py#L176'>texts_to_sequences</a>(texts)</tt>	Transforms each text in texts in a sequence of integers.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing.Tokenizer <a href=' /contrib/keras/python/keras/preprocessing/text.py#L193'>texts_to_sequences_generator</a>(texts)</tt>	Transforms each text in texts in a sequence of integers.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing.Tokenizer <a href=' /contrib/keras/python/keras/preprocessing/text.py#L219'>texts_to_matrix</a>(texts,mode)</tt>	Convert a list of texts to a numpy matrix.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing.Tokenizer <a href=' /contrib/keras/python/keras/preprocessing/text.py#L232'>sequences_to_matrix</a>(sequences,mode)</tt>	Converts a list of sequences into a numpy matrix.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing. <a href=' /contrib/keras/python/keras/preprocessing/image.py#L49'>random_rotation</a>(x,rg,row_axis,col_axis)</tt>	Performs a random rotation of a numpy image tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing. <a href=' /contrib/keras/python/keras/preprocessing/image.py#L83'>random_shift</a>(x,wrg,hrg,row_axis)</tt>	Performs a random spatial shift of a numpy image tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing. <a href=' /contrib/keras/python/keras/preprocessing/image.py#L119'>random_shear</a>(x,intensity,row_axis,col_axis)</tt>	Performs a random spatial shear of a numpy image tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing. <a href=' /contrib/keras/python/keras/preprocessing/image.py#L153'>random_zoom</a>(x,zoom_range,row_axis,col_axis)</tt>	Performs a random spatial zoom of a numpy image tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing. <a href=' /contrib/keras/python/keras/preprocessing/image.py#L217'>apply_transform</a>(x,transform_matrix,channel_axis,fill_mode)</tt>	Apply the image transformation specified by a matrix.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing. <a href=' /contrib/keras/python/keras/preprocessing/image.py#L261'>array_to_img</a>(x,data_format,scale)</tt>	Converts a 3d numpy array to a pil image instance.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing. <a href=' /contrib/keras/python/keras/preprocessing/image.py#L311'>img_to_array</a>(img,data_format)</tt>	Converts a pil image instance to a numpy array.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing. <a href=' /contrib/keras/python/keras/preprocessing/image.py#L345'>load_img</a>(path,grayscale,target_size)</tt>	Loads an image into pil format.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing.ImageDataGenerator <a href=' /contrib/keras/python/keras/preprocessing/image.py#L542'>standardize</a>(x)</tt>	Apply the normalization configuration to a batch of inputs.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing.ImageDataGenerator <a href=' /contrib/keras/python/keras/preprocessing/image.py#L590'>random_transform</a>(x)</tt>	Randomly augment a single image tensor.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing.ImageDataGenerator <a href=' /contrib/keras/python/keras/preprocessing/image.py#L684'>fit</a>(x,augment,rounds,seed)</tt>	Fits internal statistics to some sample data.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing.NumpyArrayIterator <a href=' /contrib/keras/python/keras/preprocessing/image.py#L875'>next</a>()</tt>	For python 2 x.
<tt style='background-color:#E8E8E8;'> contrib.keras.python.keras.preprocessing.DirectoryIterator <a href=' /contrib/keras/python/keras/preprocessing/image.py#L1043'>next</a>()</tt>	For python 2 x.
<tt style='background-color:#E8E8E8;'> contrib.solvers.python.ops. <a href=' /contrib/solvers/python/ops/lanczos.py#L36'>lanczos_bidiag</a>(operator,k,orthogonalize,starting_vector)</tt>	Computes a lanczos bidiagonalization for a linear operator.
<tt style='background-color:#E8E8E8;'> contrib.solvers.python.ops. <a href=' /contrib/solvers/python/ops/lanczos.py#L200'>bidiag_matmul</a>(matrix,alpha,beta,adjoint_b)</tt>	Multiplies a matrix by a bidiagonal matrix.
<tt style='background-color:#E8E8E8;'> contrib.solvers.python.ops. <a href=' /contrib/solvers/python/ops/util.py#L29'>create_operator</a>(matrix)</tt>	Creates a linear operator from a rank-2 tensor.
<tt style='background-color:#E8E8E8;'> contrib.solvers.python.ops. <a href=' /contrib/solvers/python/ops/linear_equations.py#L32'>conjugate_gradient</a>(operator,rhs,tol,max_iter)</tt>	Conjugate gradient solver.
<tt style='background-color:#E8E8E8;'> contrib.solvers.python.ops. <a href=' /contrib/solvers/python/ops/least_squares.py#L32'>cgls</a>(operator,rhs,tol,max_iter)</tt>	Conjugate gradient least squares solver.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeGraph <a href=' /contrib/imperative/imperative_graph.py#L61'>__init__</a>(parent_graph)</tt>	Initializes an imperativegraph.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeGraph <a href=' /contrib/imperative/imperative_graph.py#L109'>op_in_graph</a>(op)</tt>	Checks if op belongs in this graph or its ancestors.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeGraph <a href=' /contrib/imperative/imperative_graph.py#L119'>is_child_graph</a>(child_graph)</tt>	Checks if this graph is an ancestor of child_graph.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeGraph <a href=' /contrib/imperative/imperative_graph.py#L130'>record_variable_inits</a>()</tt>	Context manager to record variable initializations.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeGraph <a href=' /contrib/imperative/imperative_graph.py#L156'>return_as_is</a>()</tt>	Prevents adding the extra logic during create_op.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeGraph <a href=' /contrib/imperative/imperative_graph.py#L164'>replace_outputs</a>(op)</tt>	Replaces the outputs of op with values recorded in _outputs_map.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeGraph <a href=' /contrib/imperative/imperative_graph.py#L174'>add_pending_init</a>(init_op)</tt>	Records assign ops in _init_ops.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeGraph <a href=' /contrib/imperative/imperative_graph.py#L184'>run_pending_inits</a>(session)</tt>	Runs the pending variable initializations using session.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeGraph <a href=' /contrib/imperative/imperative_graph.py#L192'>create_op</a>()</tt>	Creates an operation.
<tt style='background-color:#E8E8E8;'> contrib.imperative.OperationProxy <a href=' /contrib/imperative/imperative_graph.py#L373'>__getattribute__</a>(name)</tt>	Forwards to the methods in the current graph's operation object.
<tt style='background-color:#E8E8E8;'> contrib.imperative. <a href=' /contrib/imperative/imperative_graph.py#L475'>add_session_attr</a>(typename,session)</tt>	Sets the session property on the typename for the duration of a context.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeTest <a href=' /contrib/imperative/imperative_test.py#L46'>testBasic</a>()</tt>	Tests basic functionality.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeTest <a href=' /contrib/imperative/imperative_test.py#L73'>testLoopGrads</a>()</tt>	Tests gradients in the presence of python loops.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeTest <a href=' /contrib/imperative/imperative_test.py#L85'>testVariable</a>()</tt>	Makes sure that variables can be evaluated before running initializer.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeTest <a href=' /contrib/imperative/imperative_test.py#L95'>testNewStep</a>()</tt>	Tests the new_step functionality.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeTest <a href=' /contrib/imperative/imperative_test.py#L121'>testEscape</a>()</tt>	Makes sure that values don't escape a new_step scope.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeTest <a href=' /contrib/imperative/imperative_test.py#L133'>testZeroSized</a>()</tt>	Tests evaluating zero-sized tensors.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeMode <a href=' /contrib/imperative/imperative_mode.py#L78'>__init__</a>(target,parent_graph)</tt>	Initializes an imperativemode.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeMode <a href=' /contrib/imperative/imperative_mode.py#L116'>run</a>()</tt>	Runs the variable init ops before calling the original run method.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeMode <a href=' /contrib/imperative/imperative_mode.py#L122'>__enter__</a>()</tt>	Enters the runtime contexts of the _context_managers.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeMode <a href=' /contrib/imperative/imperative_mode.py#L128'>__exit__</a>(exec_type,exec_value,exec_tb)</tt>	Cleans up resources exits the runtime contexts in reverse order.
<tt style='background-color:#E8E8E8;'> contrib.imperative.ImperativeMode <a href=' /contrib/imperative/imperative_mode.py#L139'>new_step</a>()</tt>	Returns a new 'child' imperativemode.
<tt style='background-color:#E8E8E8;'> contrib.imperative.examples.Model <a href=' /contrib/imperative/examples/mnist.py#L39'>__init__</a>(hidden1_units,hidden2_units)</tt>	Create the model parameters.
<tt style='background-color:#E8E8E8;'> contrib.imperative.examples.Model <a href=' /contrib/imperative/examples/mnist.py#L79'>__call__</a>(images)</tt>	Run the model's forward prop on images.
<tt style='background-color:#E8E8E8;'> contrib.imperative.examples. <a href=' /contrib/imperative/examples/mnist.py#L91'>get_test_accuracy</a>()</tt>	Gets the model's classification accuracy on test data.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests.MatrixDiagTransformTest <a href=' /contrib/distributions/python/kernel_tests/operator_pd_cholesky_test.py#L241'>check_off_diagonal_same</a>(m1,m2)</tt>	Check the lower triangular part not upper or diag.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests.RelaxedBernoulliTest <a href=' /contrib/distributions/python/kernel_tests/relaxed_bernoulli_test.py#L32'>testP</a>()</tt>	Tests that parameter p is set correctly note that dist p != dist pdf.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests.RelaxedBernoulliTest <a href=' /contrib/distributions/python/kernel_tests/relaxed_bernoulli_test.py#L93'>testZeroTemperature</a>()</tt>	If validate_args raises invalidargumenterror when temperature is 0.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests.RelaxedBernoulliTest <a href=' /contrib/distributions/python/kernel_tests/relaxed_bernoulli_test.py#L140'>testSampleN</a>()</tt>	Mean of quantized samples still approximates the bernoulli mean.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests.OperatorPDSqrtVDVTUpdateTest <a href=' /contrib/distributions/python/kernel_tests/operator_pd_vdvt_update_test.py#L81'>_build_operator_and_mat</a>(batch_shape,k,dtype)</tt>	This method is called by base class enabling many standard tests.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests. <a href=' /contrib/distributions/python/kernel_tests/mixture_test.py#L50'>_test_capture_mvndiag_sample_outputs</a>()</tt>	Use monkey-patching to capture the output of an mvndiag _sample_n.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests. <a href=' /contrib/distributions/python/kernel_tests/mixture_test.py#L67'>_test_capture_normal_sample_outputs</a>()</tt>	Use monkey-patching to capture the output of an normal _sample_n.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests.MixtureTest <a href=' /contrib/distributions/python/kernel_tests/mixture_test.py#L528'>testCdfScalarUnivariate</a>()</tt>	Tests cdf against scipy for a mixture of seven gaussians.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests.MixtureTest <a href=' /contrib/distributions/python/kernel_tests/mixture_test.py#L576'>testCdfBatchUnivariate</a>()</tt>	Tests against scipy for a batch of mixture s of seven gaussians.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests. <a href=' /contrib/distributions/python/kernel_tests/wishart_test.py#L34'>make_pd</a>(start,n)</tt>	Deterministically create a positive definite matrix.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests. <a href=' /contrib/distributions/python/kernel_tests/wishart_test.py#L40'>chol</a>(x)</tt>	Compute cholesky factorization.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests. <a href=' /contrib/distributions/python/kernel_tests/wishart_test.py#L45'>wishart_var</a>(df,x)</tt>	Compute wishart variance for numpy scale matrix.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests. <a href=' /contrib/distributions/python/kernel_tests/mvn_tril_test.py#L435'>_compute_non_batch_kl</a>(mu_a,sigma_a,mu_b,sigma_b)</tt>	Non-batch kl for n(mu_a sigma_a), n(mu_b sigma_b).
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests.FillLowerTriangularTest <a href=' /contrib/distributions/python/kernel_tests/distribution_util_test.py#L444'>_fill_lower_triangular</a>(x)</tt>	Numpy implementation of fill_lower_triangular.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests.DistributionShapeTest <a href=' /contrib/distributions/python/kernel_tests/shape_test.py#L527'>_assertNdArrayEqual</a>(expected,actual)</tt>	Helper which properly compares two np ndarray-like objects.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests.bijectors.SoftplusBijectorTest <a href=' /contrib/distributions/python/kernel_tests/bijectors/softplus_test.py#L40'>_softplus_ildj_before_reduction</a>(y)</tt>	Inverse log det jacobian before being reduced.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests.bijectors.AffineBijectorTest <a href=' /contrib/distributions/python/kernel_tests/bijectors/affine_test.py#L659'>_makeScale</a>(x,scale_identity_multiplier,scale_diag,scale_tril)</tt>	Create a scale matrix return none if it can not be created.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.kernel_tests.bijectors.AffineBijectorTest <a href=' /contrib/distributions/python/kernel_tests/bijectors/affine_test.py#L708'>_matrix_diag</a>(d)</tt>	Batch version of np diag.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.NegativeBinomial <a href=' /contrib/distributions/python/ops/negative_binomial.py#L54'>__init__</a>(total_count,logits,probs,validate_args)</tt>	Construct negativebinomial distributions.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.NegativeBinomial <a href=' /contrib/distributions/python/ops/negative_binomial.py#L110'>total_count</a>()</tt>	Number of negative trials.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.NegativeBinomial <a href=' /contrib/distributions/python/ops/negative_binomial.py#L115'>logits</a>()</tt>	Log-odds of a 1 outcome (vs 0).
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.NegativeBinomial <a href=' /contrib/distributions/python/ops/negative_binomial.py#L120'>probs</a>()</tt>	Probability of a 1 outcome (vs 0).
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDDerivedClassTest <a href=' /contrib/distributions/python/ops/operator_test_util.py#L41'>_compare_results</a>(expected,actual,static_shapes,atol)</tt>	Compare expected value array to the actual value tensor.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDDerivedClassTest <a href=' /contrib/distributions/python/ops/operator_test_util.py#L47'>_build_operator_and_mat</a>(batch_shape,k,dtype)</tt>	Build a batch matrix and an operator that should have similar behavior.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDCholesky <a href=' /contrib/distributions/python/ops/operator_pd_cholesky.py#L69'>__init__</a>(chol,verify_pd,name)</tt>	Initialize an operatorpdcholesky.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDCholesky <a href=' /contrib/distributions/python/ops/operator_pd_cholesky.py#L88'>verify_pd</a>()</tt>	Whether to verify that this operator is positive definite.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDCholesky <a href=' /contrib/distributions/python/ops/operator_pd_cholesky.py#L101'>_batch_log_det</a>()</tt>	Log determinant of every batch member.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDCholesky <a href=' /contrib/distributions/python/ops/operator_pd_cholesky.py#L112'>inputs</a>()</tt>	List of tensors that were provided as initialization inputs.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDCholesky <a href=' /contrib/distributions/python/ops/operator_pd_cholesky.py#L153'>get_shape</a>()</tt>	Tensorshape giving static shape.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDCholesky <a href=' /contrib/distributions/python/ops/operator_pd_cholesky.py#L160'>_check_chol</a>(chol)</tt>	Verify that chol is proper.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.MultivariateNormalTriL <a href=' /contrib/distributions/python/ops/mvn_tril.py#L132'>__init__</a>(loc,scale_tril,validate_args,allow_nan_stats)</tt>	Construct multivariate normal distribution on r^k.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OneHotCategorical <a href=' /contrib/distributions/python/ops/onehot_categorical.py#L86'>__init__</a>(logits,probs,dtype,validate_args)</tt>	Initialize onehotcategorical distributions using class log-probabilities.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OneHotCategorical <a href=' /contrib/distributions/python/ops/onehot_categorical.py#L147'>event_size</a>()</tt>	Scalar int32 tensor the number of classes.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OneHotCategorical <a href=' /contrib/distributions/python/ops/onehot_categorical.py#L152'>logits</a>()</tt>	Vector of coordinatewise logits.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OneHotCategorical <a href=' /contrib/distributions/python/ops/onehot_categorical.py#L157'>probs</a>()</tt>	Vector of coordinatewise probabilities.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/onehot_categorical.py#L238'>_kl_categorical_categorical</a>(a,b,name)</tt>	Calculate the batched kl divergence kl(a || b) with a b onehotcategorical.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.MultivariateNormalDiagPlusLowRank <a href=' /contrib/distributions/python/ops/mvn_diag_plus_low_rank.py#L144'>__init__</a>(loc,scale_diag,scale_identity_multiplier,scale_perturb_factor)</tt>	Construct multivariate normal distribution on r^k.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L105'>name</a>()</tt>	String name identifying this operator.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L110'>verify_pd</a>()</tt>	Whether to verify that this operator is positive definite.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L116'>dtype</a>()</tt>	Data type of matrix elements of a.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L121'>add_to_tensor</a>(mat,name)</tt>	Add matrix represented by this operator to mat equiv to a + mat.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L140'>_dispatch_based_on_batch</a>(batch_method,singleton_method)</tt>	Helper to automatically call batch or singleton operation.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L156'>inv_quadratic_form_on_vectors</a>(x,name)</tt>	Compute the quadratic form x^t a^{-1} x where x is a batch vector.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L193'>_iqfov_via_sqrt_solve</a>(x)</tt>	Get the inverse quadratic form on vectors via a sqrt_solve.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L213'>_iqfov_via_solve</a>(x)</tt>	Get the inverse quadratic form on vectors via a solve.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L230'>det</a>(name)</tt>	Determinant for every batch member.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L248'>log_det</a>(name)</tt>	Log of the determinant for every batch member.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L270'>sqrt_log_abs_det</a>(name)</tt>	Log absolute value determinant of the sqrt s for every batch member.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L289'>sqrt_log_det</a>(name)</tt>	Log of the determinant of the sqrt s for every batch member.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L321'>inputs</a>()</tt>	List of tensors that were provided as initialization inputs.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L326'>get_shape</a>()</tt>	Static tensorshape of entire operator.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L339'>get_batch_shape</a>()</tt>	Tensorshape with batch shape statically determined if possible.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L351'>get_vector_shape</a>()</tt>	Tensorshape of vectors this operator will work with.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L364'>shape</a>(name)</tt>	Equivalent to tf shape a equal to [n1 ,nn k k], n >= 0.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L382'>rank</a>(name)</tt>	Tensor rank equivalent to tf rank a will equal n + 2.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L399'>batch_shape</a>(name)</tt>	Shape of batches associated with this operator.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L416'>vector_shape</a>(name)</tt>	Shape of batch vectors that this batch matrix will multiply.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L434'>vector_space_dimension</a>(name)</tt>	Dimension of vector space on which this acts the k in r^k.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L451'>matmul</a>(x,transpose_x,name)</tt>	Left batch matmul x by this matrix ax.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L485'>sqrt_matmul</a>(x,transpose_x,name)</tt>	Left batch matmul x by a sqrt of this matrix sx where a = s s^t.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L520'>solve</a>(rhs,name)</tt>	Solve r batch systems a x = rhs.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L572'>sqrt_solve</a>(rhs,name)</tt>	Solve r batch systems involving sqrt s x = rhs where a = ss^t.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L625'>to_dense</a>(name)</tt>	Return a dense batch matrix representing this operator.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDBase <a href=' /contrib/distributions/python/ops/operator_pd.py#L635'>sqrt_to_dense</a>(name)</tt>	Return a dense batch matrix representing sqrt of this operator.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/operator_pd.py#L646'>flip_matrix_to_vector</a>(mat,batch_shape,static_batch_shape)</tt>	Flip dims to reshape batch matrix mat to a vector with given batch shape.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/operator_pd.py#L688'>_flip_matrix_to_vector_static</a>(mat,static_batch_shape)</tt>	Flip matrix to vector with static shapes.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/operator_pd.py#L702'>_flip_matrix_to_vector_dynamic</a>(mat,batch_shape)</tt>	Flip matrix to vector with dynamic shapes.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/operator_pd.py#L716'>flip_vector_to_matrix</a>(vec,batch_shape,static_batch_shape)</tt>	Flip dims to reshape batch vector x to a matrix with given batch shape.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/operator_pd.py#L763'>_flip_vector_to_matrix_dynamic</a>(vec,batch_shape)</tt>	Flip_vector_to_matrix with dynamic shapes.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/operator_pd.py#L797'>_flip_vector_to_matrix_static</a>(vec,batch_shape)</tt>	Flip_vector_to_matrix with static shapes.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/operator_pd.py#L831'>extract_batch_shape</a>(x,num_event_dims,name)</tt>	Extract the batch shape from x.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/mvn_linear_operator.py#L57'>_broadcast_shape</a>(shape1,shape2)</tt>	Convenience function which statically broadcasts shape when possible.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.MultivariateNormalLinearOperator <a href=' /contrib/distributions/python/ops/mvn_linear_operator.py#L150'>__init__</a>(loc,scale,validate_args,allow_nan_stats)</tt>	Construct multivariate normal distribution on r^k.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.MultivariateNormalLinearOperator <a href=' /contrib/distributions/python/ops/mvn_linear_operator.py#L225'>loc</a>()</tt>	The loc tensor in y = scale @ x + loc.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.MultivariateNormalLinearOperator <a href=' /contrib/distributions/python/ops/mvn_linear_operator.py#L230'>scale</a>()</tt>	The scale linearoperator in y = scale @ x + loc.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.MultivariateNormalLinearOperator <a href=' /contrib/distributions/python/ops/mvn_linear_operator.py#L235'>log_det_covariance</a>(name)</tt>	Log of determinant of covariance matrix.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.MultivariateNormalLinearOperator <a href=' /contrib/distributions/python/ops/mvn_linear_operator.py#L241'>det_covariance</a>(name)</tt>	Determinant of covariance matrix.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/mvn_linear_operator.py#L315'>_kl_brute_force</a>(a,b,name)</tt>	Batched kl divergence kl(a || b) for multivariate normals.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDIdentity <a href=' /contrib/distributions/python/ops/operator_pd_identity.py#L48'>__init__</a>(shape,dtype,scale,verify_pd)</tt>	Initialize an operatorpdidentity.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDIdentity <a href=' /contrib/distributions/python/ops/operator_pd_identity.py#L79'>_check_shape</a>(shape)</tt>	Check that the init arg shape defines a valid operator.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDIdentity <a href=' /contrib/distributions/python/ops/operator_pd_identity.py#L99'>_check_scale</a>(scale,dtype)</tt>	Check that the init arg scale defines a valid operator.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDIdentity <a href=' /contrib/distributions/python/ops/operator_pd_identity.py#L114'>_check_x</a>(x)</tt>	Static check that the argument x is proper shape, dtype.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDIdentity <a href=' /contrib/distributions/python/ops/operator_pd_identity.py#L144'>name</a>()</tt>	String name identifying this operator.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDIdentity <a href=' /contrib/distributions/python/ops/operator_pd_identity.py#L149'>verify_pd</a>()</tt>	Whether to verify that this operator is positive definite.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDIdentity <a href=' /contrib/distributions/python/ops/operator_pd_identity.py#L154'>dtype</a>()</tt>	Data type of matrix elements of a.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDIdentity <a href=' /contrib/distributions/python/ops/operator_pd_identity.py#L169'>inputs</a>()</tt>	List of tensors that were provided as initialization inputs.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDIdentity <a href=' /contrib/distributions/python/ops/operator_pd_identity.py#L174'>get_shape</a>()</tt>	Static tensorshape of entire operator.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L162'>__init__</a>(batch_ndims,event_ndims,validate_args,name)</tt>	Construct distributionshape with fixed batch_ndims, event_ndims.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L212'>name</a>()</tt>	Name given to ops created by this class.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L217'>batch_ndims</a>()</tt>	Returns number of dimensions corresponding to non-identical draws.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L222'>event_ndims</a>()</tt>	Returns number of dimensions needed to index a sample's coordinates.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L227'>validate_args</a>()</tt>	Returns true if graph-runtime tensor checks are enabled.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L232'>get_ndims</a>(x,name)</tt>	Get tensor number of dimensions rank.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L249'>get_sample_ndims</a>(x,name)</tt>	Returns number of dimensions corresponding to iid draws ("sample").
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L282'>get_dims</a>(x,name)</tt>	Returns dimensions indexing sample_shape, batch_shape, event_shape.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L325'>get_shape</a>(x,name)</tt>	Returns tensor's shape partitioned into sample, batch, event.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L361'>make_batch_of_event_sample_matrices</a>(x,expand_batch_dim,name)</tt>	Reshapes/transposes distribution tensor from s+b+e to b_+e_+s_.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L399'>undo_make_batch_of_event_sample_matrices</a>(x,sample_shape,expand_batch_dim,name)</tt>	Reshapes/transposes distribution tensor from b_+e_+s_ to s+b+e.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L453'>_name_scope</a>(name,values)</tt>	Helper function to standardize op scope.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L461'>_is_all_constant_helper</a>()</tt>	Helper which returns true if all inputs are constant_value.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L465'>_assert_non_negative_int32_scalar</a>(x)</tt>	Helper which ensures that input is a non-negative int32 scalar.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._DistributionShape <a href=' /contrib/distributions/python/ops/shape.py#L485'>_introspect_ndims</a>(ndims)</tt>	Helper to establish some properties of input ndims args.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/normal_conjugate_posteriors.py#L25'>normal_conjugates_known_scale_posterior</a>(prior,scale,s,n)</tt>	Posterior normal distribution with conjugate prior on the mean.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/normal_conjugate_posteriors.py#L84'>normal_conjugates_known_scale_predictive</a>(prior,scale,s,n)</tt>	Posterior predictive normal distribution w conjugate prior on the mean.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/vector_student_t.py#L35'>_infer_shapes</a>(scale_oppd,shift)</tt>	Helper which returns batch_shape event_shape from affine properties.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._VectorStudentT <a href=' /contrib/distributions/python/ops/vector_student_t.py#L198'>__init__</a>(df,loc,scale_identity_multiplier,scale_diag)</tt>	Instantiates the vector student's t-distributions on r^k.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._VectorStudentT <a href=' /contrib/distributions/python/ops/vector_student_t.py#L300'>df</a>()</tt>	Degrees of freedom in these student's t distribution s.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._VectorStudentT <a href=' /contrib/distributions/python/ops/vector_student_t.py#L305'>loc</a>()</tt>	Locations of these student's t distribution s.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._VectorStudentT <a href=' /contrib/distributions/python/ops/vector_student_t.py#L310'>scale</a>()</tt>	Dense batch covariance matrix if available.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Poisson <a href=' /contrib/distributions/python/ops/poisson.py#L62'>__init__</a>(rate,validate_args,allow_nan_stats,name)</tt>	Initialize a batch of poisson distributions.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Geometric <a href=' /contrib/distributions/python/ops/geometric.py#L58'>__init__</a>(logits,probs,validate_args,allow_nan_stats)</tt>	Construct geometric distributions.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Geometric <a href=' /contrib/distributions/python/ops/geometric.py#L106'>logits</a>()</tt>	Log-odds of a 1 outcome (vs 0).
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Geometric <a href=' /contrib/distributions/python/ops/geometric.py#L111'>probs</a>()</tt>	Probability of a 1 outcome (vs 0).
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/quantized_distribution.py#L34'>_logsum_expbig_minus_expsmall</a>(big,small)</tt>	Stable evaluation of log[exp{big} - exp{small}].
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.QuantizedDistribution <a href=' /contrib/distributions/python/ops/quantized_distribution.py#L181'>__init__</a>(distribution,low,high,validate_args)</tt>	Construct a quantized distribution representing y = ceiling x.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.QuantizedDistribution <a href=' /contrib/distributions/python/ops/quantized_distribution.py#L310'>_log_prob_with_logsf_and_logcdf</a>(y)</tt>	Compute log_prob y using log survival_function and cdf together.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.QuantizedDistribution <a href=' /contrib/distributions/python/ops/quantized_distribution.py#L506'>distribution</a>()</tt>	Base distribution p x.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/binomial.py#L45'>_bdtr</a>(k,n,p)</tt>	The binomial cumulative distribution function.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Binomial <a href=' /contrib/distributions/python/ops/binomial.py#L133'>__init__</a>(total_count,logits,probs,validate_args)</tt>	Initialize a batch of binomial distributions.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Binomial <a href=' /contrib/distributions/python/ops/binomial.py#L187'>total_count</a>()</tt>	Number of trials.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Binomial <a href=' /contrib/distributions/python/ops/binomial.py#L192'>logits</a>()</tt>	Log-odds of drawing a 1.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Binomial <a href=' /contrib/distributions/python/ops/binomial.py#L197'>probs</a>()</tt>	Probability of of drawing a 1.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Binomial <a href=' /contrib/distributions/python/ops/binomial.py#L275'>_maybe_assert_valid_sample</a>(counts,check_integer)</tt>	Check counts for proper shape values then return tensor version.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.MultivariateNormalDiag <a href=' /contrib/distributions/python/ops/mvn_diag.py#L137'>__init__</a>(loc,scale_diag,scale_identity_multiplier,validate_args)</tt>	Construct multivariate normal distribution on r^k.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._BaseDeterministic <a href=' /contrib/distributions/python/ops/deterministic.py#L46'>__init__</a>(loc,atol,rtol,is_vector)</tt>	Initialize a batch of _basedeterministic distributions.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._BaseDeterministic <a href=' /contrib/distributions/python/ops/deterministic.py#L131'>loc</a>()</tt>	Point or batch of points at which this distribution is supported.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._BaseDeterministic <a href=' /contrib/distributions/python/ops/deterministic.py#L136'>atol</a>()</tt>	Absolute tolerance for comparing points to self loc.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._BaseDeterministic <a href=' /contrib/distributions/python/ops/deterministic.py#L141'>rtol</a>()</tt>	Relative tolerance for comparing points to self loc.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Deterministic <a href=' /contrib/distributions/python/ops/deterministic.py#L206'>__init__</a>(loc,atol,rtol,validate_args)</tt>	Initialize a scalar deterministic distribution.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.VectorDeterministic <a href=' /contrib/distributions/python/ops/deterministic.py#L309'>__init__</a>(loc,atol,rtol,validate_args)</tt>	Initialize a vectordeterministic distribution on r^k, for k >= 0.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.ExpRelaxedOneHotCategorical <a href=' /contrib/distributions/python/ops/relaxed_onehot_categorical.py#L128'>__init__</a>(temperature,logits,probs,dtype)</tt>	Initialize exprelaxedonehotcategorical using class log-probabilities.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.ExpRelaxedOneHotCategorical <a href=' /contrib/distributions/python/ops/relaxed_onehot_categorical.py#L199'>event_size</a>()</tt>	Scalar int32 tensor the number of classes.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.ExpRelaxedOneHotCategorical <a href=' /contrib/distributions/python/ops/relaxed_onehot_categorical.py#L204'>temperature</a>()</tt>	Batchwise temperature tensor of a relaxedcategorical.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.ExpRelaxedOneHotCategorical <a href=' /contrib/distributions/python/ops/relaxed_onehot_categorical.py#L209'>logits</a>()</tt>	Vector of coordinatewise logits.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.ExpRelaxedOneHotCategorical <a href=' /contrib/distributions/python/ops/relaxed_onehot_categorical.py#L214'>probs</a>()</tt>	Vector of probabilities summing to one.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.RelaxedOneHotCategorical <a href=' /contrib/distributions/python/ops/relaxed_onehot_categorical.py#L366'>__init__</a>(temperature,logits,probs,dtype)</tt>	Initialize relaxedonehotcategorical using class log-probabilities.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Mixture <a href=' /contrib/distributions/python/ops/mixture.py#L47'>__init__</a>(cat,components,validate_args,allow_nan_stats)</tt>	Initialize a mixture distribution.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Mixture <a href=' /contrib/distributions/python/ops/mixture.py#L357'>entropy_lower_bound</a>(name)</tt>	A lower bound on the entropy of this mixture model.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Mixture <a href=' /contrib/distributions/python/ops/mixture.py#L406'>_cat_probs</a>(log_probs)</tt>	Get a list of num_components batchwise probabilities.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/distribution_util.py#L32'>make_diag_scale</a>(loc,scale_diag,scale_identity_multiplier,validate_args)</tt>	Creates a linop from scale_diag, scale_identity_multiplier kwargs.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.InverseGamma <a href=' /contrib/distributions/python/ops/inverse_gamma.py#L97'>__init__</a>(concentration,rate,validate_args,allow_nan_stats)</tt>	Construct inversegamma with concentration and rate parameters.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDSqrtVDVTUpdate <a href=' /contrib/distributions/python/ops/operator_pd_vdvt_update.py#L79'>__init__</a>(operator,v,diag,verify_pd)</tt>	Initialize an operatorpdsqrtvdvtupdate.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDSqrtVDVTUpdate <a href=' /contrib/distributions/python/ops/operator_pd_vdvt_update.py#L137'>_get_identity_operator</a>(v)</tt>	Get an operatorpdidentity to play the role of d in vdv^t.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDSqrtVDVTUpdate <a href=' /contrib/distributions/python/ops/operator_pd_vdvt_update.py#L167'>_check_shapes_static</a>(operator,v,diag)</tt>	True if they are compatible raise if not false if could not check.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDSqrtVDVTUpdate <a href=' /contrib/distributions/python/ops/operator_pd_vdvt_update.py#L214'>_check_shapes_dynamic</a>(operator,v,diag)</tt>	Return v diag with assert dependencies which check shape.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDSqrtVDVTUpdate <a href=' /contrib/distributions/python/ops/operator_pd_vdvt_update.py#L256'>name</a>()</tt>	String name identifying this operator.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDSqrtVDVTUpdate <a href=' /contrib/distributions/python/ops/operator_pd_vdvt_update.py#L261'>verify_pd</a>()</tt>	Whether to verify that this operator is positive definite.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDSqrtVDVTUpdate <a href=' /contrib/distributions/python/ops/operator_pd_vdvt_update.py#L266'>dtype</a>()</tt>	Data type of matrix elements of a.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDSqrtVDVTUpdate <a href=' /contrib/distributions/python/ops/operator_pd_vdvt_update.py#L274'>inputs</a>()</tt>	List of tensors that were provided as initialization inputs.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDSqrtVDVTUpdate <a href=' /contrib/distributions/python/ops/operator_pd_vdvt_update.py#L279'>get_shape</a>()</tt>	Static tensorshape of entire operator.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDSqrtVDVTUpdate <a href=' /contrib/distributions/python/ops/operator_pd_vdvt_update.py#L319'>_chol_capacitance</a>(batch_mode)</tt>	Cholesky factorization of the capacitance term.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDSqrtVDVTUpdate <a href=' /contrib/distributions/python/ops/operator_pd_vdvt_update.py#L340'>_sqrt_log_det_core</a>(diag_chol_c)</tt>	Finish computation of sqrt[log[det]].
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDDiagBase <a href=' /contrib/distributions/python/ops/operator_pd_diag.py#L48'>_check_diag</a>(diag)</tt>	Verify that diag is positive.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDDiagBase <a href=' /contrib/distributions/python/ops/operator_pd_diag.py#L56'>name</a>()</tt>	String name identifying this operator.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDDiagBase <a href=' /contrib/distributions/python/ops/operator_pd_diag.py#L61'>verify_pd</a>()</tt>	Whether to verify that this operator is positive definite.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDDiagBase <a href=' /contrib/distributions/python/ops/operator_pd_diag.py#L66'>dtype</a>()</tt>	Data type of matrix elements of a.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDDiagBase <a href=' /contrib/distributions/python/ops/operator_pd_diag.py#L76'>get_shape</a>()</tt>	Tensorshape giving static shape.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDDiag <a href=' /contrib/distributions/python/ops/operator_pd_diag.py#L166'>__init__</a>(diag,verify_pd,name)</tt>	Initialize an operatorpddiag.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDSqrtDiag <a href=' /contrib/distributions/python/ops/operator_pd_diag.py#L257'>__init__</a>(diag,verify_pd,name)</tt>	Initialize an operatorpdsqrtdiag.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._WishartOperatorPD <a href=' /contrib/distributions/python/ops/wishart.py#L76'>__init__</a>(df,scale_operator_pd,cholesky_input_output_matrices,validate_args)</tt>	Construct wishart distributions.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._WishartOperatorPD <a href=' /contrib/distributions/python/ops/wishart.py#L164'>df</a>()</tt>	Wishart distribution degree s of freedom.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._WishartOperatorPD <a href=' /contrib/distributions/python/ops/wishart.py#L169'>scale</a>()</tt>	Wishart distribution scale matrix.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._WishartOperatorPD <a href=' /contrib/distributions/python/ops/wishart.py#L176'>scale_operator_pd</a>()</tt>	Wishart distribution scale matrix as an operatorpd.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._WishartOperatorPD <a href=' /contrib/distributions/python/ops/wishart.py#L181'>cholesky_input_output_matrices</a>()</tt>	Boolean indicating if tensor input/outputs are cholesky factorized.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._WishartOperatorPD <a href=' /contrib/distributions/python/ops/wishart.py#L186'>dimension</a>()</tt>	Dimension of underlying vector space the p in r^(p*p).
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._WishartOperatorPD <a href=' /contrib/distributions/python/ops/wishart.py#L391'>mean_log_det</a>(name)</tt>	Computes e[log(det x )] under this wishart distribution.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._WishartOperatorPD <a href=' /contrib/distributions/python/ops/wishart.py#L398'>log_normalization</a>(name)</tt>	Computes the log normalizing constant log z.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._WishartOperatorPD <a href=' /contrib/distributions/python/ops/wishart.py#L405'>_multi_gamma_sequence</a>(a,p,name)</tt>	Creates sequence used in multivariate di gamma shape = shape a +[p].
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._WishartOperatorPD <a href=' /contrib/distributions/python/ops/wishart.py#L415'>_multi_lgamma</a>(a,p,name)</tt>	Computes the log multivariate gamma function log(gamma_p a.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._WishartOperatorPD <a href=' /contrib/distributions/python/ops/wishart.py#L423'>_multi_digamma</a>(a,p,name)</tt>	Computes the multivariate digamma function psi_p a.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.WishartCholesky <a href=' /contrib/distributions/python/ops/wishart.py#L493'>__init__</a>(df,scale,cholesky_input_output_matrices,validate_args)</tt>	Construct wishart distributions.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.WishartFull <a href=' /contrib/distributions/python/ops/wishart.py#L593'>__init__</a>(df,scale,cholesky_input_output_matrices,validate_args)</tt>	Construct wishart distributions.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Logistic <a href=' /contrib/distributions/python/ops/logistic.py#L95'>__init__</a>(loc,scale,validate_args,allow_nan_stats)</tt>	Construct logistic distributions with mean and scale loc and scale.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Logistic <a href=' /contrib/distributions/python/ops/logistic.py#L145'>loc</a>()</tt>	Distribution parameter for the location.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Logistic <a href=' /contrib/distributions/python/ops/logistic.py#L150'>scale</a>()</tt>	Distribution parameter for scale.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Logistic <a href=' /contrib/distributions/python/ops/logistic.py#L225'>_z</a>(x)</tt>	Standardize input x to a unit logistic.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.OperatorPDFull <a href=' /contrib/distributions/python/ops/operator_pd_full.py#L70'>__init__</a>(matrix,verify_pd,name)</tt>	Initialize an operatorpdfull.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._Gumbel <a href=' /contrib/distributions/python/ops/gumbel.py#L97'>__init__</a>(loc,scale,validate_args,allow_nan_stats)</tt>	Construct gumbel distributions with location and scale loc and scale.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._Gumbel <a href=' /contrib/distributions/python/ops/gumbel.py#L147'>loc</a>()</tt>	Distribution parameter for the location.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._Gumbel <a href=' /contrib/distributions/python/ops/gumbel.py#L152'>scale</a>()</tt>	Distribution parameter for scale.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops._Gumbel <a href=' /contrib/distributions/python/ops/gumbel.py#L221'>_z</a>(x)</tt>	Standardize input x to a unit logistic.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.RelaxedBernoulli <a href=' /contrib/distributions/python/ops/relaxed_bernoulli.py#L134'>__init__</a>(temperature,logits,probs,validate_args)</tt>	Construct relaxedbernoulli distributions.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.RelaxedBernoulli <a href=' /contrib/distributions/python/ops/relaxed_bernoulli.py#L191'>temperature</a>()</tt>	Distribution parameter for the location.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.RelaxedBernoulli <a href=' /contrib/distributions/python/ops/relaxed_bernoulli.py#L196'>logits</a>()</tt>	Log-odds of 1.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.RelaxedBernoulli <a href=' /contrib/distributions/python/ops/relaxed_bernoulli.py#L201'>probs</a>()</tt>	Probability of 1.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.Chi2 <a href=' /contrib/distributions/python/ops/chi2.py#L64'>__init__</a>(df,validate_args,allow_nan_stats,name)</tt>	Construct chi2 distributions with parameter df.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/sample_stats.py#L40'>percentile</a>(x,q,axis,interpolation)</tt>	Compute the q-th percentile of x.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/sample_stats.py#L186'>_get_static_ndims</a>(x,expect_static,expect_ndims,expect_ndims_no_more_than)</tt>	Get static number of dimensions and assert that some expectations are met.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/sample_stats.py#L250'>_get_best_effort_ndims</a>(x,expect_ndims,expect_ndims_at_least,expect_ndims_no_more_than)</tt>	Get static ndims if possible fallback on tf rank x.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/sample_stats.py#L265'>_insert_back_keep_dims</a>(x,axis)</tt>	Insert the dims in axis back as singletons after being removed.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/sample_stats.py#L280'>_make_static_axis_non_negative</a>(axis,ndims)</tt>	Convert possibly negatively indexed axis to non-negative.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/sample_stats.py#L308'>_move_dims_to_flat_end</a>(x,axis,x_ndims)</tt>	Move dims corresponding to axis in x to the end then flatten.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops. <a href=' /contrib/distributions/python/ops/sample_stats.py#L341'>_sort_tensor</a>(tensor)</tt>	Use top_k to sort a tensor along the last dimension.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors. <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L42'>_as_tensor</a>(x,name)</tt>	Convenience to convert to tensor or leave as none.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors._TriLPlusVDVTLightweightOperatorPD <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L52'>__init__</a>(tril,v,diag,validate_args)</tt>	Creates an instance of _trilplusvdvtlightweightoperatorpd.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors._TriLPlusVDVTLightweightOperatorPD <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L97'>rank</a>()</tt>	Returns rank self.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors._TriLPlusVDVTLightweightOperatorPD <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L101'>sqrt_matmul</a>(x)</tt>	Computes matmul self x.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors._TriLPlusVDVTLightweightOperatorPD <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L118'>sqrt_solve</a>(x)</tt>	Computes solve self x.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors._TriLPlusVDVTLightweightOperatorPD <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L144'>sqrt_log_abs_det</a>()</tt>	Computes log o abs o det x for matrix x.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors._TriLPlusVDVTLightweightOperatorPD <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L166'>_woodbury_sandwiched_term</a>()</tt>	Computes the sandwiched term in the woodbury identity.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.Affine <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L240'>__init__</a>(shift,scale_identity_multiplier,scale_diag,scale_tril)</tt>	Instantiates the affine bijector.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.Affine <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L370'>_create_scale_operator</a>(identity_multiplier,diag,tril,perturb_diag)</tt>	Construct scale from various components.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.Affine <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L462'>_maybe_validate_identity_multiplier</a>(identity_multiplier,validate_args)</tt>	Check that the init arg identity_multiplier is valid.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.Affine <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L473'>_preprocess_tril</a>(identity_multiplier,diag,tril,event_ndims)</tt>	Helper to preprocess a lower triangular matrix.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.Affine <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L486'>_preprocess_diag</a>(identity_multiplier,diag,event_ndims)</tt>	Helper to preprocess a diagonal matrix.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.Affine <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L492'>_process_matrix</a>(matrix,min_rank,event_ndims)</tt>	Helper to __init__ which gets matrix in batch-ready form.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.Affine <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L519'>shift</a>()</tt>	The shift tensor in y = scale @ x + shift.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.Affine <a href=' /contrib/distributions/python/ops/bijectors/affine_impl.py#L524'>scale</a>()</tt>	The scale linearoperator in y = scale @ x + shift.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.Inline <a href=' /contrib/distributions/python/ops/bijectors/inline_impl.py#L46'>__init__</a>(forward_fn,inverse_fn,inverse_log_det_jacobian_fn,forward_log_det_jacobian_fn)</tt>	Creates a bijector from callables.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.Exp <a href=' /contrib/distributions/python/ops/bijectors/exp_impl.py#L50'>__init__</a>(event_ndims,validate_args,name)</tt>	Instantiates the exp bijector.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.CholeskyOuterProduct <a href=' /contrib/distributions/python/ops/bijectors/cholesky_outer_product_impl.py#L58'>__init__</a>(event_ndims,validate_args,name)</tt>	Instantiates the choleskyouterproduct bijector.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.CholeskyOuterProduct <a href=' /contrib/distributions/python/ops/bijectors/cholesky_outer_product_impl.py#L190'>_make_columnar</a>(x)</tt>	Ensures non-scalar input has at least one column.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.Invert <a href=' /contrib/distributions/python/ops/bijectors/invert_impl.py#L43'>__init__</a>(bijector,validate_args,name)</tt>	Creates a bijector which swaps the meaning of inverse and forward.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.Chain <a href=' /contrib/distributions/python/ops/bijectors/chain_impl.py#L67'>__init__</a>(bijectors,validate_args,name)</tt>	Instantiates chain bijector.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.AffineLinearOperator <a href=' /contrib/distributions/python/ops/bijectors/affine_linear_operator_impl.py#L94'>__init__</a>(shift,scale,event_ndims,validate_args)</tt>	Instantiates the affinelinearoperator bijector.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.AffineLinearOperator <a href=' /contrib/distributions/python/ops/bijectors/affine_linear_operator_impl.py#L179'>shift</a>()</tt>	The shift tensor in y = scale @ x + shift.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.AffineLinearOperator <a href=' /contrib/distributions/python/ops/bijectors/affine_linear_operator_impl.py#L184'>scale</a>()</tt>	The scale linearoperator in y = scale @ x + shift.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.PowerTransform <a href=' /contrib/distributions/python/ops/bijectors/power_transform_impl.py#L44'>__init__</a>(power,event_ndims,validate_args,name)</tt>	Instantiates the powertransform bijector.
<tt style='background-color:#E8E8E8;'> contrib.distributions.python.ops.bijectors.PowerTransform <a href=' /contrib/distributions/python/ops/bijectors/power_transform_impl.py#L77'>power</a>()</tt>	The c in y = g x = (1 + x * c)**(1 / c).
<tt style='background-color:#E8E8E8;'> contrib.tfprof.python.tools.tfprof. <a href=' /contrib/tfprof/python/tools/tfprof/model_analyzer.py#L118'>print_model_analysis</a>(graph,run_meta,op_log,tfprof_cmd)</tt>	Print model statistics.
<tt style='background-color:#E8E8E8;'> contrib.tfprof.python.tools.tfprof. <a href=' /contrib/tfprof/python/tools/tfprof/tfprof_logger.py#L36'>_fill_missing_graph_shape</a>(graph,run_meta)</tt>	Fill tensor shapes in 'graph' with run time shape from 'run_meta'.
<tt style='background-color:#E8E8E8;'> contrib.tfprof.python.tools.tfprof. <a href=' /contrib/tfprof/python/tools/tfprof/tfprof_logger.py#L65'>_get_logged_ops</a>(graph,run_meta)</tt>	Extract trainable model parameters and flops for ops from a graph.
<tt style='background-color:#E8E8E8;'> contrib.tfprof.python.tools.tfprof. <a href=' /contrib/tfprof/python/tools/tfprof/tfprof_logger.py#L111'>_merge_default_with_oplog</a>(graph,op_log,run_meta)</tt>	Merge the tfprof default extra info with caller's op_log.
<tt style='background-color:#E8E8E8;'> contrib.tfprof.python.tools.tfprof. <a href=' /contrib/tfprof/python/tools/tfprof/tfprof_logger.py#L140'>write_op_log</a>(graph,log_dir,op_log,run_meta)</tt>	Log provided 'op_log', and add additional model information below.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCAOptimizer <a href=' /contrib/linear_optimizer/python/sdca_optimizer.py#L102'>get_train_step</a>(columns_to_variables,weight_column_name,loss_type,features)</tt>	Returns the training operation of an sdcamodel optimizer.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALogisticClassifierTest <a href=' /contrib/linear_optimizer/python/sdca_estimator_test.py#L32'>testRealValuedFeatures</a>()</tt>	Tests sdcalogisticclassifier works with real valued features.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALogisticClassifierTest <a href=' /contrib/linear_optimizer/python/sdca_estimator_test.py#L53'>testRealValuedFeatureWithHigherDimension</a>()</tt>	Tests sdcalogisticclassifier with high-dimension real valued features.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALogisticClassifierTest <a href=' /contrib/linear_optimizer/python/sdca_estimator_test.py#L74'>testBucketizedFeatures</a>()</tt>	Tests sdcalogisticclassifier with bucketized features.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALogisticClassifierTest <a href=' /contrib/linear_optimizer/python/sdca_estimator_test.py#L99'>testSparseFeatures</a>()</tt>	Tests sdcalogisticclassifier with sparse features.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALogisticClassifierTest <a href=' /contrib/linear_optimizer/python/sdca_estimator_test.py#L128'>testWeightedSparseFeatures</a>()</tt>	Tests sdcalogisticclassifier with weighted sparse features.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALogisticClassifierTest <a href=' /contrib/linear_optimizer/python/sdca_estimator_test.py#L158'>testCrossedFeatures</a>()</tt>	Tests sdcalogisticclassifier with crossed features.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALogisticClassifierTest <a href=' /contrib/linear_optimizer/python/sdca_estimator_test.py#L189'>testMixedFeatures</a>()</tt>	Tests sdcalogisticclassifier with a mix of features.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALinearRegressorTest <a href=' /contrib/linear_optimizer/python/sdca_estimator_test.py#L228'>testRealValuedLinearFeatures</a>()</tt>	Tests sdcalinearregressor works with real valued features.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALinearRegressorTest <a href=' /contrib/linear_optimizer/python/sdca_estimator_test.py#L254'>testMixedFeaturesArbitraryWeights</a>()</tt>	Tests sdcalinearregressor works with a mix of features.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALinearRegressorTest <a href=' /contrib/linear_optimizer/python/sdca_estimator_test.py#L291'>testSdcaOptimizerSparseFeaturesWithL1Reg</a>()</tt>	Sdcalinearregressor works with sparse features and l1 regularization.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALinearRegressorTest <a href=' /contrib/linear_optimizer/python/sdca_estimator_test.py#L360'>testBiasOnly</a>()</tt>	Tests sdcalinearregressor has a valid bias weight.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALinearRegressorTest <a href=' /contrib/linear_optimizer/python/sdca_estimator_test.py#L390'>testBiasAndOtherColumns</a>()</tt>	Sdcalinearregressor has valid bias weight with other columns present.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALinearRegressorTest <a href=' /contrib/linear_optimizer/python/sdca_estimator_test.py#L450'>testBiasAndOtherColumnsFabricatedCentered</a>()</tt>	Sdcalinearregressor has valid bias weight when instances are centered.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python. <a href=' /contrib/linear_optimizer/python/sdca_estimator.py#L38'>_head_is_valid_for_sdca</a>(head)</tt>	Returns true if the provided head is supported by sdcaoptimizer.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python. <a href=' /contrib/linear_optimizer/python/sdca_estimator.py#L47'>_add_bias_column</a>(feature_columns,columns_to_tensors,bias_variable,columns_to_variables)</tt>	Adds a fake bias feature column filled with all 1s.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python. <a href=' /contrib/linear_optimizer/python/sdca_estimator.py#L79'>_get_sdca_train_step</a>(optimizer,columns_to_variables,weight_column_name,loss_type)</tt>	Returns the training operation of an sdcamodel optimizer.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python. <a href=' /contrib/linear_optimizer/python/sdca_estimator.py#L204'>sdca_model_fn</a>(features,labels,mode,params)</tt>	A model_fn for linear models that use the sdca optimizer.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python._SdcaUpdateWeightsHook <a href=' /contrib/linear_optimizer/python/sdca_estimator.py#L315'>begin</a>()</tt>	Construct the update_weights op.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python._SdcaUpdateWeightsHook <a href=' /contrib/linear_optimizer/python/sdca_estimator.py#L322'>before_run</a>(run_context)</tt>	Return the update_weights op so that it is executed during this run.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python._SDCAEstimator <a href=' /contrib/linear_optimizer/python/sdca_estimator.py#L334'>__init__</a>(example_id_column,feature_columns,weight_column_name,model_dir)</tt>	Construct a _sdcaestimator estimator object.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALogisticClassifier <a href=' /contrib/linear_optimizer/python/sdca_estimator.py#L458'>__init__</a>(example_id_column,feature_columns,weight_column_name,model_dir)</tt>	Construct a sdcalogisticclassifier object.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALogisticClassifier <a href=' /contrib/linear_optimizer/python/sdca_estimator.py#L509'>predict_classes</a>(input_fn)</tt>	Runs inference to determine the predicted class.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALogisticClassifier <a href=' /contrib/linear_optimizer/python/sdca_estimator.py#L523'>predict_proba</a>(input_fn)</tt>	Runs inference to determine the class probability predictions.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALinearRegressor <a href=' /contrib/linear_optimizer/python/sdca_estimator.py#L585'>__init__</a>(example_id_column,feature_columns,weight_column_name,model_dir)</tt>	Construct a sdcalinearregressor estimator object.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.SDCALinearRegressor <a href=' /contrib/linear_optimizer/python/sdca_estimator.py#L636'>predict_scores</a>(input_fn)</tt>	Returns predicted scores for given features.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.kernel_tests. <a href=' /contrib/linear_optimizer/python/kernel_tests/sdca_ops_test.py#L119'>make_dense_examples_and_variables_dicts</a>(dense_features_values,weights,labels)</tt>	Creates examples and variables dictionaries for dense features.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.ShardedMutableDenseHashTable <a href=' /contrib/linear_optimizer/python/ops/sharded_mutable_dense_hashtable.py#L151'>export_sharded</a>(name)</tt>	Returns lists of the keys and values tensors in the sharded table.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SparseFeatureColumn <a href=' /contrib/linear_optimizer/python/ops/sparse_feature_column.py#L71'>__init__</a>(example_indices,feature_indices,feature_values)</tt>	Creates a sparsefeaturecolumn representation.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SparseFeatureColumn <a href=' /contrib/linear_optimizer/python/ops/sparse_feature_column.py#L97'>example_indices</a>()</tt>	The example indices represented as a dense tensor.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SparseFeatureColumn <a href=' /contrib/linear_optimizer/python/ops/sparse_feature_column.py#L106'>feature_indices</a>()</tt>	The feature indices represented as a dense tensor.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SparseFeatureColumn <a href=' /contrib/linear_optimizer/python/ops/sparse_feature_column.py#L115'>feature_values</a>()</tt>	The feature values represented as a dense tensor.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SdcaModel <a href=' /contrib/linear_optimizer/python/ops/sdca_ops.py#L109'>__init__</a>(examples,variables,options)</tt>	Create a new sdca optimizer.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SdcaModel <a href=' /contrib/linear_optimizer/python/ops/sdca_ops.py#L204'>_l1_loss</a>()</tt>	Computes the un-normalized l1 loss of the model.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SdcaModel <a href=' /contrib/linear_optimizer/python/ops/sdca_ops.py#L218'>_l2_loss</a>(l2)</tt>	Computes the un-normalized l2 loss of the model.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SdcaModel <a href=' /contrib/linear_optimizer/python/ops/sdca_ops.py#L232'>_convert_n_to_tensor</a>(input_list,as_ref)</tt>	Converts input list to a set of tensors.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SdcaModel <a href=' /contrib/linear_optimizer/python/ops/sdca_ops.py#L236'>_linear_predictions</a>(examples)</tt>	Returns predictions of the form w*x.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SdcaModel <a href=' /contrib/linear_optimizer/python/ops/sdca_ops.py#L259'>predictions</a>(examples)</tt>	Add operations to compute predictions by the model.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SdcaModel <a href=' /contrib/linear_optimizer/python/ops/sdca_ops.py#L285'>minimize</a>(global_step,name)</tt>	Add operations to train a linear model by minimizing the loss function.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SdcaModel <a href=' /contrib/linear_optimizer/python/ops/sdca_ops.py#L364'>update_weights</a>(train_op)</tt>	Updates the model weights.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SdcaModel <a href=' /contrib/linear_optimizer/python/ops/sdca_ops.py#L400'>approximate_duality_gap</a>()</tt>	Add operations to compute the approximate duality gap.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SdcaModel <a href=' /contrib/linear_optimizer/python/ops/sdca_ops.py#L431'>unregularized_loss</a>(examples)</tt>	Add operations to compute the loss without the regularization loss.
<tt style='background-color:#E8E8E8;'> contrib.linear_optimizer.python.ops.SdcaModel <a href=' /contrib/linear_optimizer/python/ops/sdca_ops.py#L486'>regularized_loss</a>(examples)</tt>	Add operations to compute the loss with regularization loss included.
<tt style='background-color:#E8E8E8;'> contrib.ffmpeg.EncodeAudioOpTest <a href=' /contrib/ffmpeg/encode_audio_op_test.py#L30'>_compareWavFiles</a>(original,encoded)</tt>	Compares the important bits of two wav files.
<tt style='background-color:#E8E8E8;'> contrib.ffmpeg.EncodeAudioOpTest <a href=' /contrib/ffmpeg/encode_audio_op_test.py#L51'>testRoundTrip</a>()</tt>	Reads a wav file writes it and compares them.
<tt style='background-color:#E8E8E8;'> contrib.ffmpeg.DecodeAudioOpTest <a href=' /contrib/ffmpeg/decode_audio_op_test.py#L30'>_loadFileAndTest</a>(filename,file_format,duration_sec,samples_per_second)</tt>	Loads an audio file and validates the output tensor.
<tt style='background-color:#E8E8E8;'> contrib.ffmpeg. <a href=' /contrib/ffmpeg/ffmpeg_ops.py#L31'>decode_audio</a>(contents,file_format,samples_per_second,channel_count)</tt>	Create an op that decodes the contents of an audio file.
<tt style='background-color:#E8E8E8;'> contrib.ffmpeg. <a href=' /contrib/ffmpeg/ffmpeg_ops.py#L65'>encode_audio</a>(audio,file_format,samples_per_second)</tt>	Creates an op that encodes an audio file using sampled audio from a tensor.
<tt style='background-color:#E8E8E8;'> contrib.memory_stats.python.ops. <a href=' /contrib/memory_stats/python/ops/memory_stats_ops.py#L29'>BytesLimit</a>()</tt>	Generates an op that measures the total memory in bytes of a device.
<tt style='background-color:#E8E8E8;'> contrib.memory_stats.python.ops. <a href=' /contrib/memory_stats/python/ops/memory_stats_ops.py#L34'>MaxBytesInUse</a>()</tt>	Generates an op that computes the peak memory of a device.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.ForestHParams <a href=' /contrib/tensor_forest/python/tensor_forest.py#L90'>fill</a>()</tt>	Intelligently sets any non-specific parameters.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python. <a href=' /contrib/tensor_forest/python/tensor_forest.py#L139'>get_epoch_variable</a>()</tt>	Returns the epoch variable or [0] if not defined.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.ForestStats <a href=' /contrib/tensor_forest/python/tensor_forest.py#L250'>__init__</a>(tree_stats,params)</tt>	A simple container for stats about a forest.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.RandomForestGraphs <a href=' /contrib/tensor_forest/python/tensor_forest.py#L333'>training_graph</a>(input_data,input_labels,num_trainers,trainer_id)</tt>	Constructs a tf graph for training a random forest.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.RandomForestGraphs <a href=' /contrib/tensor_forest/python/tensor_forest.py#L413'>inference_graph</a>(input_data)</tt>	Constructs a tf graph for evaluating a random forest.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.RandomForestGraphs <a href=' /contrib/tensor_forest/python/tensor_forest.py#L450'>average_size</a>()</tt>	Constructs a tf graph for evaluating the average size of a forest.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.RandomForestGraphs <a href=' /contrib/tensor_forest/python/tensor_forest.py#L470'>average_impurity</a>()</tt>	Constructs a tf graph for evaluating the leaf impurity of a forest.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python. <a href=' /contrib/tensor_forest/python/tensor_forest.py#L496'>one_hot_wrapper</a>(num_classes,loss_fn)</tt>	Some loss functions take one-hot labels.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.TrainingLossForest <a href=' /contrib/tensor_forest/python/tensor_forest.py#L528'>_get_loss</a>(features,labels)</tt>	Constructs caches and returns the inference-based loss.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.RandomTreeGraphs <a href=' /contrib/tensor_forest/python/tensor_forest.py#L575'>_gini</a>(class_counts)</tt>	Calculate the gini impurity.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.RandomTreeGraphs <a href=' /contrib/tensor_forest/python/tensor_forest.py#L594'>_weighted_gini</a>(class_counts)</tt>	Our split score is the gini impurity times the number of examples.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.RandomTreeGraphs <a href=' /contrib/tensor_forest/python/tensor_forest.py#L613'>_variance</a>(sums,squares)</tt>	Calculate the variance for each row of the input tensors.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.RandomTreeGraphs <a href=' /contrib/tensor_forest/python/tensor_forest.py#L633'>training_graph</a>(input_data,input_labels,random_seed,data_spec)</tt>	Constructs a tf graph for training a random tree.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.RandomTreeGraphs <a href=' /contrib/tensor_forest/python/tensor_forest.py#L905'>finish_iteration</a>()</tt>	Perform any operations that should be done at the end of an iteration.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.RandomTreeGraphs <a href=' /contrib/tensor_forest/python/tensor_forest.py#L916'>inference_graph</a>(input_data,data_spec,sparse_features)</tt>	Constructs a tf graph for evaluating a random tree.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.RandomTreeGraphs <a href=' /contrib/tensor_forest/python/tensor_forest.py#L950'>average_impurity</a>()</tt>	Constructs a tf graph for evaluating the average leaf impurity of a tree.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.RandomTreeGraphs <a href=' /contrib/tensor_forest/python/tensor_forest.py#L976'>size</a>()</tt>	Constructs a tf graph for evaluating the current number of nodes.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.ops. <a href=' /contrib/tensor_forest/python/ops/data_ops.py#L100'>ParseDataTensorOrDict</a>(data)</tt>	Return a tensor to use for input data.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.python.ops. <a href=' /contrib/tensor_forest/python/ops/data_ops.py#L177'>ParseLabelTensorOrDict</a>(labels)</tt>	Return a tensor to use for input labels to tensor_forest.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.hybrid.python.HybridLayer <a href=' /contrib/tensor_forest/hybrid/python/hybrid_layer.py#L26'>_define_vars</a>(params)</tt>	Override to define the tensorflow variables for the layer.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.hybrid.python.HybridModel <a href=' /contrib/tensor_forest/hybrid/python/hybrid_model.py#L75'>_base_inference</a>(data,data_spec)</tt>	Returns an op that performs inference without a softmax.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.hybrid.python.HybridModel <a href=' /contrib/tensor_forest/hybrid/python/hybrid_model.py#L88'>inference_graph</a>(data,data_spec)</tt>	Returns the op that performs inference on a batch of data.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.hybrid.python.HybridModel <a href=' /contrib/tensor_forest/hybrid/python/hybrid_model.py#L93'>training_inference_graph</a>(data,data_spec)</tt>	Returns an inference-without-softmax op for training purposes.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.hybrid.python.HybridModel <a href=' /contrib/tensor_forest/hybrid/python/hybrid_model.py#L105'>training_graph</a>(data,labels,data_spec,epoch)</tt>	Returns the op that trains the hybrid model.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.hybrid.python.HybridModel <a href=' /contrib/tensor_forest/hybrid/python/hybrid_model.py#L109'>loss</a>(data,labels)</tt>	The loss to minimize while training.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.hybrid.python.models.DecisionsToDataThenNNTest <a href=' /contrib/tensor_forest/hybrid/python/models/decisions_to_data_then_nn_test.py#L72'>testConstructionPollution</a>()</tt>	Ensure that graph building doesn't modify the params in a bad way.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.hybrid.python.models.HardDecisionsToDataThenNN <a href=' /contrib/tensor_forest/hybrid/python/models/hard_decisions_to_data_then_nn.py#L62'>inference_graph</a>(data,data_spec)</tt>	Returns the op that performs inference on a batch of data.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.hybrid.python.ops. <a href=' /contrib/tensor_forest/hybrid/python/ops/training_ops.py#L45'>_RoutingFunctionGradient</a>(op,grad)</tt>	The gradient of routingfunction.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.hybrid.python.ops. <a href=' /contrib/tensor_forest/hybrid/python/ops/training_ops.py#L122'>_StochasticHardRoutingFunctionGradient</a>(op,routing_grad,unused_path_grad)</tt>	The gradient of routingfunction.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.hybrid.python.ops. <a href=' /contrib/tensor_forest/hybrid/python/ops/training_ops.py#L201'>_KFeatureRoutingFunctionGradient</a>(op,grad)</tt>	The gradient of routingfunction.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.hybrid.python.ops. <a href=' /contrib/tensor_forest/hybrid/python/ops/training_ops.py#L284'>Load</a>()</tt>	Load training ops library and return the loaded module.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.client. <a href=' /contrib/tensor_forest/client/eval_metrics.py#L149'>get_metric</a>(metric_name)</tt>	Given a metric name return the corresponding metric function.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.client. <a href=' /contrib/tensor_forest/client/random_forest.py#L43'>_assert_float32</a>(tensors)</tt>	Assert all tensors are float32.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.client.EveryCheckpointPreSaveListener <a href=' /contrib/tensor_forest/client/random_forest.py#L104'>__init__</a>(op)</tt>	Initializes the object.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.client. <a href=' /contrib/tensor_forest/client/random_forest.py#L116'>get_model_fn</a>(params,graph_builder_class,device_assigner,weights_name)</tt>	Return a model function given a way to construct a graph builder.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.client.TensorForestEstimator <a href=' /contrib/tensor_forest/client/random_forest.py#L237'>__init__</a>(params,device_assigner,model_dir,graph_builder_class)</tt>	Initializes a tensorforestestimator instance.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.client.TensorForestTrainerTests <a href=' /contrib/tensor_forest/client/random_forest_test.py#L31'>testClassification</a>()</tt>	Tests multi-class classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.client.TensorForestTrainerTests <a href=' /contrib/tensor_forest/client/random_forest_test.py#L48'>testClassificationTrainingLoss</a>()</tt>	Tests multi-class classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.tensor_forest.client.TensorForestTrainerTests <a href=' /contrib/tensor_forest/client/random_forest_test.py#L63'>testRegression</a>()</tt>	Tests multi-class classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim. <a href=' /contrib/slim/python/slim/learning.py#L281'>clip_gradient_norms</a>(gradients_to_variables,max_norm)</tt>	Clips the gradients by the given value.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim. <a href=' /contrib/slim/python/slim/learning.py#L303'>multiply_gradients</a>(grads_and_vars,gradient_multipliers)</tt>	Multiply specified gradients.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim. <a href=' /contrib/slim/python/slim/learning.py#L345'>add_gradients_summaries</a>(grads_and_vars)</tt>	Add summaries to gradients.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim. <a href=' /contrib/slim/python/slim/learning.py#L375'>create_train_op</a>(total_loss,optimizer,global_step,update_ops)</tt>	Creates an operation that evaluates the gradients and returns the loss.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim. <a href=' /contrib/slim/python/slim/learning.py#L443'>_wait_for_step</a>(sess,global_step,step)</tt>	Wait till the global step has reached at least 'step'.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim. <a href=' /contrib/slim/python/slim/learning.py#L457'>train_step</a>(sess,train_op,global_step,train_step_kwargs)</tt>	Function that takes a gradient step and specifies whether to stop.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim. <a href=' /contrib/slim/python/slim/learning.py#L532'>train</a>(train_op,logdir,train_step_fn,train_step_kwargs)</tt>	Runs a training loop using a tensorflow supervisor.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim. <a href=' /contrib/slim/python/slim/model_analyzer.py#L34'>tensor_description</a>(var)</tt>	Returns a compact and informative string about a tensor.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim. <a href=' /contrib/slim/python/slim/model_analyzer.py#L53'>analyze_ops</a>(graph,print_info)</tt>	Compute the estimated size of the ops outputs in the graph.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim. <a href=' /contrib/slim/python/slim/model_analyzer.py#L83'>analyze_vars</a>(variables,print_info)</tt>	Prints the names and shapes of the variables.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.EvaluationTest <a href=' /contrib/slim/python/slim/evaluation_test.py#L144'>_verify_summaries</a>(output_dir,names_to_values)</tt>	Verifies that the given names_to_values are found in the summaries.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim. <a href=' /contrib/slim/python/slim/evaluation.py#L143'>evaluate_once</a>(master,checkpoint_path,logdir,num_evals)</tt>	Evaluates the model at the given checkpoint path.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim. <a href=' /contrib/slim/python/slim/evaluation.py#L210'>evaluation_loop</a>(master,checkpoint_dir,logdir,num_evals)</tt>	Runs tf-slim's evaluation loop.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim. <a href=' /contrib/slim/python/slim/queues.py#L43'>QueueRunners</a>(session)</tt>	Creates a context manager that handles starting and stopping queue runners.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v1_test.py#L39'>create_test_input</a>(batch_size,height,width,channels)</tt>	Create test input tensor.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets.ResnetUtilsTest <a href=' /contrib/slim/python/slim/nets/resnet_v1_test.py#L158'>_resnet_plain</a>(inputs,blocks,output_stride,scope)</tt>	A plain resnet without extra layers before or after the resnet blocks.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets.ResnetUtilsTest <a href=' /contrib/slim/python/slim/nets/resnet_v2_test.py#L169'>testEndPointsV2</a>()</tt>	Test the end points of a tiny v2 bottleneck network.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets.ResnetUtilsTest <a href=' /contrib/slim/python/slim/nets/resnet_v1_test.py#L194'>_stack_blocks_nondense</a>(net,blocks)</tt>	A simplified resnet block stacker without output stride control.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets.ResnetUtilsTest <a href=' /contrib/slim/python/slim/nets/resnet_v1_test.py#L203'>testAtrousValuesBottleneck</a>()</tt>	Verify the values of dense feature extraction by atrous convolution.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets.ResnetCompleteNetworkTest <a href=' /contrib/slim/python/slim/nets/resnet_v1_test.py#L250'>_resnet_small</a>(inputs,num_classes,is_training,global_pool)</tt>	A shallow and thin resnet v1 for faster tests.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets.ResnetCompleteNetworkTest <a href=' /contrib/slim/python/slim/nets/resnet_v1_test.py#L361'>testAtrousFullyConvolutionalValues</a>()</tt>	Verify dense feature extraction with atrous convolution.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v1.py#L74'>bottleneck</a>(inputs,depth,depth_bottleneck,stride)</tt>	Bottleneck residual unit variant with bn after convolutions.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v2.py#L132'>resnet_v2</a>(inputs,blocks,num_classes,is_training)</tt>	Generator for v2 preactivation resnet models.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v2.py#L247'>resnet_v2_block</a>(scope,base_depth,num_units,stride)</tt>	Helper function for creating a resnet_v2 bottleneck block.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v2.py#L271'>resnet_v2_50</a>(inputs,num_classes,is_training,global_pool)</tt>	Resnet-50 model of [1] see resnet_v2() for arg and return description.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v2.py#L297'>resnet_v2_101</a>(inputs,num_classes,global_pool,is_training)</tt>	Resnet-101 model of [1] see resnet_v2() for arg and return description.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v2.py#L323'>resnet_v2_152</a>(inputs,num_classes,is_training,global_pool)</tt>	Resnet-152 model of [1] see resnet_v2() for arg and return description.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v2.py#L349'>resnet_v2_200</a>(inputs,num_classes,is_training,global_pool)</tt>	Resnet-200 model of [2] see resnet_v2() for arg and return description.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_utils.py#L70'>subsample</a>(inputs,factor,scope)</tt>	Subsamples the input along the spatial dimensions.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_utils.py#L88'>conv2d_same</a>(inputs,num_outputs,kernel_size,stride)</tt>	Strided 2-d convolution with 'same' padding.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_utils.py#L150'>stack_blocks_dense</a>(net,blocks,output_stride,outputs_collections)</tt>	Stacks resnet blocks and controls output feature density.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_utils.py#L226'>resnet_arg_scope</a>(is_training,weight_decay,batch_norm_decay,batch_norm_epsilon)</tt>	Defines the default resnet arg scope.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/inception_v2.py#L35'>inception_v2_base</a>(inputs,final_endpoint,min_depth,depth_multiplier)</tt>	Inception v2 6a2.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/inception_v2.py#L483'>inception_v2</a>(inputs,num_classes,is_training,dropout_keep_prob)</tt>	Inception v2 model for classification.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/inception_v3.py#L644'>_reduced_kernel_size_for_small_input</a>(input_tensor,kernel_size)</tt>	Define kernel size which is automatically reduced for small input.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/inception_v2.py#L600'>inception_v2_arg_scope</a>(weight_decay,batch_norm_var_collection)</tt>	Defines the default inceptionv2 arg scope.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/vgg.py#L56'>vgg_arg_scope</a>(weight_decay)</tt>	Defines the vgg arg scope.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/vgg.py#L74'>vgg_a</a>(inputs,num_classes,is_training,dropout_keep_prob)</tt>	Oxford net vgg 11-layers version a example.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/vgg.py#L139'>vgg_16</a>(inputs,num_classes,is_training,dropout_keep_prob)</tt>	Oxford net vgg 16-layers version d example.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/vgg.py#L204'>vgg_19</a>(inputs,num_classes,is_training,dropout_keep_prob)</tt>	Oxford net vgg 19-layers version e example.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v1_test.py#L39'>create_test_input</a>(batch,height,width,channels)</tt>	Create test input tensor.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/overfeat.py#L59'>overfeat</a>(inputs,num_classes,is_training,dropout_keep_prob)</tt>	Contains the model definition for the overfeat network.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets.ResnetUtilsTest <a href=' /contrib/slim/python/slim/nets/resnet_v1_test.py#L166'>testEndPointsV1</a>()</tt>	Test the end points of a tiny v1 bottleneck network.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v1.py#L128'>resnet_v1</a>(inputs,blocks,num_classes,is_training)</tt>	Generator for v1 resnet models.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v1.py#L232'>resnet_v1_block</a>(scope,base_depth,num_units,stride)</tt>	Helper function for creating a resnet_v1 bottleneck block.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v1.py#L256'>resnet_v1_50</a>(inputs,num_classes,is_training,global_pool)</tt>	Resnet-50 model of [1] see resnet_v1() for arg and return description.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v1.py#L282'>resnet_v1_101</a>(inputs,num_classes,is_training,global_pool)</tt>	Resnet-101 model of [1] see resnet_v1() for arg and return description.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v1.py#L308'>resnet_v1_152</a>(inputs,num_classes,is_training,global_pool)</tt>	Resnet-152 model of [1] see resnet_v1() for arg and return description.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/resnet_v1.py#L334'>resnet_v1_200</a>(inputs,num_classes,is_training,global_pool)</tt>	Resnet-200 model of [2] see resnet_v1() for arg and return description.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/inception_v3.py#L34'>inception_v3_base</a>(inputs,final_endpoint,min_depth,depth_multiplier)</tt>	Inception model from http //arxiv org/abs/1512 00567.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/inception_v3.py#L512'>inception_v3</a>(inputs,num_classes,is_training,dropout_keep_prob)</tt>	Inception model from http //arxiv org/abs/1512 00567.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/inception_v3.py#L677'>inception_v3_arg_scope</a>(weight_decay,stddev,batch_norm_var_collection)</tt>	Defines the default inceptionv3 arg scope.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/alexnet.py#L63'>alexnet_v2</a>(inputs,num_classes,is_training,dropout_keep_prob)</tt>	Alexnet version 2.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/inception_v1.py#L35'>inception_v1_base</a>(inputs,final_endpoint,scope)</tt>	Defines the inception v1 base architecture.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/inception_v1.py#L304'>inception_v1</a>(inputs,num_classes,is_training,dropout_keep_prob)</tt>	Defines the inception v1 architecture.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.nets. <a href=' /contrib/slim/python/slim/nets/inception_v1.py#L368'>inception_v1_arg_scope</a>(weight_decay,use_batch_norm,batch_norm_var_collection)</tt>	Defines the default inceptionv1 arg scope.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.Dataset <a href=' /contrib/slim/python/slim/data/dataset.py#L41'>__init__</a>(data_sources,reader,decoder,num_samples)</tt>	Initializes the dataset.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.TFExampleDecoderTest <a href=' /contrib/slim/python/slim/data/tfexample_decoder_test.py#L76'>GenerateImage</a>(image_format,image_shape)</tt>	Generates an image and an example containing the encoded image.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.TFExampleDecoderTest <a href=' /contrib/slim/python/slim/data/tfexample_decoder_test.py#L100'>DecodeExample</a>(serialized_example,item_handler,image_format)</tt>	Decodes the given serialized example with the specified item handler.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.DataDecoder <a href=' /contrib/slim/python/slim/data/data_decoder.py#L48'>decode</a>(data,items)</tt>	Decodes the data to returns the tensors specified by the list of items.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.DataDecoder <a href=' /contrib/slim/python/slim/data/data_decoder.py#L65'>list_items</a>()</tt>	Lists the names of the items that the decoder can decode.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data. <a href=' /contrib/slim/python/slim/data/test_utils.py#L62'>generate_image</a>(image_shape,image_format,label)</tt>	Generates an image and an example containing the encoded image.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data. <a href=' /contrib/slim/python/slim/data/test_utils.py#L89'>create_tfrecord_files</a>(output_dir,num_files,num_records_per_file)</tt>	Creates tfrecords files.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.DataProvider <a href=' /contrib/slim/python/slim/data/data_provider.py#L51'>__init__</a>(items_to_tensors,num_samples)</tt>	Constructs the data provider.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.DataProvider <a href=' /contrib/slim/python/slim/data/data_provider.py#L61'>get</a>(items)</tt>	Returns a list of tensors specified by the given list of items.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.DataProvider <a href=' /contrib/slim/python/slim/data/data_provider.py#L82'>list_items</a>()</tt>	Returns the list of item names that can be provided by the data provider.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.DataProvider <a href=' /contrib/slim/python/slim/data/data_provider.py#L90'>num_samples</a>()</tt>	Returns the number of data samples in the dataset.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.DataProvider <a href=' /contrib/slim/python/slim/data/data_provider.py#L98'>_validate_items</a>(items)</tt>	Verifies that each given item is a member of the list from listitems().
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.ParallelReader <a href=' /contrib/slim/python/slim/data/parallel_reader.py#L38'>__init__</a>(reader_class,common_queue,num_readers,reader_kwargs)</tt>	Parallelreader creates num_readers instances of the reader_class.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.ParallelReader <a href=' /contrib/slim/python/slim/data/parallel_reader.py#L105'>read</a>(queue,name)</tt>	Returns the next record key value pair produced by the reader.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.ParallelReader <a href=' /contrib/slim/python/slim/data/parallel_reader.py#L139'>num_records_produced</a>(name)</tt>	Returns the number of records this reader has produced.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.ParallelReader <a href=' /contrib/slim/python/slim/data/parallel_reader.py#L152'>num_work_units_completed</a>(name)</tt>	Returns the number of work units this reader has finished processing.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data. <a href=' /contrib/slim/python/slim/data/parallel_reader.py#L165'>parallel_read</a>(data_sources,reader_class,num_epochs,num_readers)</tt>	Reads multiple records in parallel from data_sources using n readers.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data. <a href=' /contrib/slim/python/slim/data/parallel_reader.py#L237'>single_pass_read</a>(data_sources,reader_class,reader_kwargs,scope)</tt>	Reads sequentially the data_sources using the reader doing a single pass.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data. <a href=' /contrib/slim/python/slim/data/parallel_reader.py#L259'>get_data_files</a>(data_sources)</tt>	Get data_files from data_sources.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.ItemHandler <a href=' /contrib/slim/python/slim/data/tfexample_decoder.py#L50'>__init__</a>(keys)</tt>	Constructs the handler with the name of the tf feature keys to use.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.ItemHandler <a href=' /contrib/slim/python/slim/data/tfexample_decoder.py#L66'>tensors_to_item</a>(keys_to_tensors)</tt>	Maps the given dictionary of tensors to the requested item.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.ItemHandlerCallback <a href=' /contrib/slim/python/slim/data/tfexample_decoder.py#L86'>__init__</a>(keys,func)</tt>	Initializes the itemhandler.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.BoundingBox <a href=' /contrib/slim/python/slim/data/tfexample_decoder.py#L105'>__init__</a>(keys,prefix)</tt>	Initialize the bounding box handler.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.BoundingBox <a href=' /contrib/slim/python/slim/data/tfexample_decoder.py#L126'>tensors_to_item</a>(keys_to_tensors)</tt>	Maps the given dictionary of tensors to a contatenated list of bboxes.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.Tensor <a href=' /contrib/slim/python/slim/data/tfexample_decoder.py#L148'>__init__</a>(tensor_key,shape_keys,shape,default_value)</tt>	Initializes the tensor handler.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.SparseTensor <a href=' /contrib/slim/python/slim/data/tfexample_decoder.py#L210'>__init__</a>(indices_key,values_key,shape_key,shape)</tt>	Initializes the tensor handler.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.Image <a href=' /contrib/slim/python/slim/data/tfexample_decoder.py#L273'>__init__</a>(image_key,format_key,shape,channels)</tt>	Initializes the image.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.Image <a href=' /contrib/slim/python/slim/data/tfexample_decoder.py#L313'>tensors_to_item</a>(keys_to_tensors)</tt>	See base class.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.Image <a href=' /contrib/slim/python/slim/data/tfexample_decoder.py#L324'>_decode</a>(image_buffer,image_format)</tt>	Decodes the image buffer.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.TFExampleDecoder <a href=' /contrib/slim/python/slim/data/tfexample_decoder.py#L397'>__init__</a>(keys_to_features,items_to_handlers)</tt>	Constructs the decoder.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.TFExampleDecoder <a href=' /contrib/slim/python/slim/data/tfexample_decoder.py#L411'>list_items</a>()</tt>	See base class.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.TFExampleDecoder <a href=' /contrib/slim/python/slim/data/tfexample_decoder.py#L415'>decode</a>(serialized_example,items)</tt>	Decodes the given serialized tf-example.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data.DatasetDataProvider <a href=' /contrib/slim/python/slim/data/dataset_data_provider.py#L53'>__init__</a>(dataset,num_readers,reader_kwargs,shuffle)</tt>	Creates a datasetdataprovider.
<tt style='background-color:#E8E8E8;'> contrib.slim.python.slim.data. <a href=' /contrib/slim/python/slim/data/prefetch_queue.py#L28'>prefetch_queue</a>(tensors,capacity,num_threads,shared_name)</tt>	Creates a queue to prefetech tensors from tensors.
<tt style='background-color:#E8E8E8;'> contrib.compiler.JITTest <a href=' /contrib/compiler/jit_test.py#L57'>testJITCreateOpsLambda</a>()</tt>	Test several ways of customizing the compilation attribute.
<tt style='background-color:#E8E8E8;'> contrib.compiler.JITTest <a href=' /contrib/compiler/jit_test.py#L117'>testJITVariableSeed</a>()</tt>	Test that the stateful initializer is not marked for compilation.
<tt style='background-color:#E8E8E8;'> contrib.compiler. <a href=' /contrib/compiler/jit.py#L38'>experimental_jit_scope</a>(compile_ops,separate_compiled_gradients)</tt>	Enable or disable jit compilation of operators within the scope.
<tt style='background-color:#E8E8E8;'> contrib.input_pipeline.python.ops. <a href=' /contrib/input_pipeline/python/ops/input_pipeline_ops.py#L35'>obtain_next</a>(string_list_tensor,counter)</tt>	Basic wrapper for the obtainnextop.
<tt style='background-color:#E8E8E8;'> contrib.input_pipeline.python.ops. <a href=' /contrib/input_pipeline/python/ops/input_pipeline_ops.py#L65'>seek_next</a>(string_list,shuffle,seed,num_epochs)</tt>	Returns an op that seeks the next element in a list of strings.
<tt style='background-color:#E8E8E8;'> contrib.image.python.ops. <a href=' /contrib/image/python/ops/single_image_random_dot_stereograms.py#L28'>single_image_random_dot_stereograms</a>(depth_values,hidden_surface_removal,convergence_dots_size,dots_per_inch)</tt>	Output a randomdotstereogram tensor for export via encode_png/jpg op.
<tt style='background-color:#E8E8E8;'> contrib.image.python.ops. <a href=' /contrib/image/python/ops/image_ops.py#L40'>rotate</a>(images,angles)</tt>	Rotate image s by the passed angle s in radians.
<tt style='background-color:#E8E8E8;'> contrib.image.python.ops. <a href=' /contrib/image/python/ops/image_ops.py#L82'>angles_to_projective_transforms</a>(angles,image_height,image_width)</tt>	Returns projective transform s for the given angle s.
<tt style='background-color:#E8E8E8;'> contrib.image.python.ops. <a href=' /contrib/image/python/ops/image_ops.py#L123'>transform</a>(images,transforms)</tt>	Applies the given transform s to the image s.
<tt style='background-color:#E8E8E8;'> contrib.image.python.ops. <a href=' /contrib/image/python/ops/image_ops.py#L176'>compose_transforms</a>()</tt>	Composes the transforms tensors.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/tensor_util.py#L52'>reduce_sum_n</a>(tensors,name)</tt>	Reduce tensors to a scalar sum.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/tensor_util.py#L78'>remove_squeezable_dimensions</a>(predictions,labels,name)</tt>	Squeeze last dim if ranks of predictions and labels differ by 1.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/tensor_util.py#L132'>_is_rank</a>(expected_rank,actual_tensor)</tt>	Returns whether actual_tensor's rank is expected_rank.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/tensor_util.py#L147'>_is_shape</a>(expected_shape,actual_tensor,actual_shape)</tt>	Returns whether actual_tensor's shape is expected_shape.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/tensor_util.py#L167'>_assert_shape_op</a>(expected_shape,actual_tensor)</tt>	Asserts actual_tensor's shape is expected_shape.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/tensor_util.py#L188'>with_same_shape</a>(expected_tensor,tensor)</tt>	Assert tensors are the same shape from the same graph.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/tensor_util.py#L205'>with_shape</a>(expected_shape,tensor)</tt>	Asserts tensor has expected shape.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/tensor_util.py#L275'>assert_scalar_int</a>(tensor,name)</tt>	Assert tensor is 0-d of type tf int32 or tf int64.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/checkpoint_utils.py#L40'>_get_checkpoint_filename</a>(filepattern)</tt>	Returns checkpoint filename given directory or specific filepattern.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/checkpoint_utils.py#L47'>load_checkpoint</a>(filepattern)</tt>	Returns checkpointreader for latest checkpoint.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/checkpoint_utils.py#L66'>load_variable</a>(checkpoint_dir,name)</tt>	Returns a tensor with the contents of the given variable in the checkpoint.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/checkpoint_utils.py#L83'>list_variables</a>(checkpoint_dir)</tt>	Returns list of all variables in the latest checkpoint.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/checkpoint_utils.py#L107'>_set_checkpoint_initializer</a>(variable,file_pattern,tensor_name,slice_spec)</tt>	Sets variable initializer to assign op form value in checkpoint's tensor.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/checkpoint_utils.py#L152'>init_from_checkpoint</a>(checkpoint_dir,assignment_map)</tt>	Using assignment map initializes current variables with loaded tensors.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/experimental.py#L27'>_add_experimental_function_notice_to_docstring</a>(doc)</tt>	Adds an experimental notice to a docstring for experimental functions.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.framework. <a href=' /contrib/framework/python/framework/experimental.py#L36'>experimental</a>(func)</tt>	Decorator for marking functions or methods experimental.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L69'>zero_initializer</a>(ref,use_locking,name)</tt>	Initialize 'ref' with all zeros ref tensor should be uninitialized.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L90'>assert_or_get_global_step</a>(graph,global_step_tensor)</tt>	Verifies that a global step tensor is valid or gets one if none is given.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L118'>create_global_step</a>(graph)</tt>	Create global step tensor in graph.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L136'>get_or_create_global_step</a>(graph)</tt>	Returns and create if necessary the global step tensor.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L149'>local_variable</a>(initial_value,validate_shape,name)</tt>	Create variable and add it to graphkeys local_variables collection.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L165'>variable</a>(name,shape,dtype,initializer)</tt>	Gets an existing variable with these parameters or creates a new one.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L219'>model_variable</a>(name,shape,dtype,initializer)</tt>	Gets an existing model variable with these parameters or creates a new one.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L265'>add_model_variable</a>(var)</tt>	Adds a variable to the graphkeys model_variables collection.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L275'>get_variables</a>(scope,suffix,collection)</tt>	Gets the list of variables filtered by scope and/or suffix.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L298'>get_model_variables</a>(scope,suffix)</tt>	Gets the list of model variables filtered by scope and/or suffix.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L311'>get_local_variables</a>(scope,suffix)</tt>	Gets the list of local variables filtered by scope and/or suffix.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L324'>get_trainable_variables</a>(scope,suffix)</tt>	Gets the list of trainable variables filtered by scope and/or suffix.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L337'>get_variables_to_restore</a>(include,exclude)</tt>	Gets the list of the variables to restore.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L373'>get_variables_by_suffix</a>(suffix,scope)</tt>	Gets the list of variables that end with the given suffix.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L386'>get_variables_by_name</a>(given_name,scope)</tt>	Gets the list of variables that were given that name.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L400'>get_unique_variable</a>(var_op_name)</tt>	Gets the variable uniquely identified by that var_op_name.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L423'>assign_from_values</a>(var_names_to_values)</tt>	Creates an assignment operation from a given mapping.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L478'>assign_from_values_fn</a>(var_names_to_values)</tt>	Returns a function that assigns specific variables from the given values.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L503'>get_variable_full_name</a>(var)</tt>	Returns the full name of a variable.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L528'>assign_from_checkpoint</a>(model_path,var_list)</tt>	Creates an operation to assign specific variables from a checkpoint.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L608'>assign_from_checkpoint_fn</a>(model_path,var_list,ignore_missing_vars,reshape_variables)</tt>	Returns a function that assigns specific variables from a checkpoint.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/variables.py#L707'>filter_variables</a>(var_list,include_patterns,exclude_patterns,reg_search)</tt>	Filter a list of variables using regular expressions.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/arg_scope_test.py#L36'>func3</a>(args,a,b,c)</tt>	Some cool doc string.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/ops.py#L28'>get_graph_from_inputs</a>(op_input_list,graph)</tt>	Returns the appropriate graph to use for the given inputs.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/ops.py#L58'>get_name_scope</a>()</tt>	Returns the current name scope of the default graph.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/arg_scope.py#L110'>arg_scope</a>(list_ops_or_scope)</tt>	Stores the default arguments for the given set of list_ops.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/arg_scope.py#L165'>add_arg_scope</a>(func)</tt>	Decorates a function with args so it can be used within an arg_scope.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/arg_scope.py#L187'>has_arg_scope</a>(func)</tt>	Checks whether a func has been decorated with @add_arg_scope or not.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/arg_scope.py#L199'>arg_scoped_arguments</a>(func)</tt>	Returns the list kwargs that arg_scope can set for a func.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops.AssignFromCheckpointTest <a href=' /contrib/framework/python/ops/variables_test.py#L829'>create_checkpoint_from_values</a>(var_names_to_values,checkpoint_dir,global_step)</tt>	Creates a checkpoint from a mapping of name to values in model_dir.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops.AssignFromCheckpointFnTest <a href=' /contrib/framework/python/ops/variables_test.py#L980'>create_checkpoint_from_values</a>(var_names_to_values,checkpoint_dir,global_step)</tt>	Creates a checkpoint from a mapping of name to values in model_dir.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/prettyprint_ops.py#L35'>_get_tensor_repr</a>(t,print_tensor_name,print_tensor_type,print_shape)</tt>	Return a list of tensors that summarize the given tensor t.
<tt style='background-color:#E8E8E8;'> contrib.framework.python.ops. <a href=' /contrib/framework/python/ops/prettyprint_ops.py#L91'>print_op</a>(input_,data,message,first_n)</tt>	Creates a print op that will print when a tensor is accessed.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.kernel_tests.Seq2SeqTest <a href=' /contrib/legacy_seq2seq/python/kernel_tests/seq2seq_test.py#L844'>testModelWithBuckets</a>()</tt>	Larger tests that does full sequence-to-sequence model training.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.kernel_tests.Seq2SeqTest <a href=' /contrib/legacy_seq2seq/python/kernel_tests/seq2seq_test.py#L948'>testModelWithBooleanFeedPrevious</a>()</tt>	Test the model behavior when feed_previous is true.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L82'>_extract_argmax_and_embed</a>(embedding,output_projection,update_embedding)</tt>	Get a loop_function that extracts the previous symbol and embeds it.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L112'>rnn_decoder</a>(decoder_inputs,initial_state,cell,loop_function)</tt>	Rnn decoder for the sequence-to-sequence model.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L159'>basic_rnn_seq2seq</a>(encoder_inputs,decoder_inputs,cell,dtype)</tt>	Basic rnn sequence-to-sequence model.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L190'>tied_rnn_seq2seq</a>(encoder_inputs,decoder_inputs,cell,loop_function)</tt>	Rnn sequence-to-sequence model with tied encoder and decoder parameters.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L233'>embedding_rnn_decoder</a>(decoder_inputs,initial_state,cell,num_symbols)</tt>	Rnn decoder with embedding and a pure-decoding option.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L301'>embedding_rnn_seq2seq</a>(encoder_inputs,decoder_inputs,cell,num_encoder_symbols)</tt>	Embedding rnn sequence-to-sequence model.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L411'>embedding_tied_rnn_seq2seq</a>(encoder_inputs,decoder_inputs,cell,num_symbols)</tt>	Embedding rnn sequence-to-sequence model with tied shared parameters.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L540'>attention_decoder</a>(decoder_inputs,initial_state,attention_states,cell)</tt>	Rnn decoder with attention for the sequence-to-sequence model.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L703'>embedding_attention_decoder</a>(decoder_inputs,initial_state,attention_states,cell)</tt>	Rnn decoder with embedding and attention and a pure-decoding option.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L789'>embedding_attention_seq2seq</a>(encoder_inputs,decoder_inputs,cell,num_encoder_symbols)</tt>	Embedding sequence-to-sequence model with attention.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L918'>one2many_rnn_seq2seq</a>(encoder_inputs,decoder_inputs_dict,enc_cell,dec_cells_dict)</tt>	One-to-many rnn sequence-to-sequence model multi-task.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L1049'>sequence_loss_by_example</a>(logits,targets,weights,average_across_timesteps)</tt>	Weighted cross-entropy loss for a sequence of logits per example.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L1100'>sequence_loss</a>(logits,targets,weights,average_across_timesteps)</tt>	Weighted cross-entropy loss for a sequence of logits batch-collapsed.
<tt style='background-color:#E8E8E8;'> contrib.legacy_seq2seq.python.ops. <a href=' /contrib/legacy_seq2seq/python/ops/seq2seq.py#L1143'>model_with_buckets</a>(encoder_inputs,decoder_inputs,targets,weights)</tt>	Create a sequence-to-sequence model with support for bucketing.
<tt style='background-color:#E8E8E8;'> contrib.tensorboard.plugins.trace. <a href=' /contrib/tensorboard/plugins/trace/trace.py#L40'>store_trace_info</a>(output_file_path,graph,ignore_regex_fpaths)</tt>	Collects and stores trace information for a tensorflow model.
<tt style='background-color:#E8E8E8;'> contrib.tensorboard.plugins.trace. <a href=' /contrib/tensorboard/plugins/trace/trace.py#L103'>find_multiline_statements</a>(source)</tt>	Parses the python source and finds multiline statements.
<tt style='background-color:#E8E8E8;'> contrib.tensorboard.plugins.projector. <a href=' /contrib/tensorboard/plugins/projector/__init__.py#L39'>visualize_embeddings</a>(summary_writer,config)</tt>	Stores a config file used by the embedding projector.
<tt style='background-color:#E8E8E8;'> contrib.cloud.python.ops. <a href=' /contrib/cloud/python/ops/bigquery_reader_ops_test.py#L77'>_ConvertRowToExampleProto</a>(row)</tt>	Converts the input row to an example proto.
<tt style='background-color:#E8E8E8;'> contrib.cloud.python.ops.FakeBigQueryServer <a href=' /contrib/cloud/python/ops/bigquery_reader_ops_test.py#L104'>__init__</a>(address,port)</tt>	Creates a fakebigqueryserver.
<tt style='background-color:#E8E8E8;'> contrib.cloud.python.ops. <a href=' /contrib/cloud/python/ops/bigquery_reader_ops_test.py#L172'>_SetUpQueue</a>(reader)</tt>	Sets up a queue for a reader.
<tt style='background-color:#E8E8E8;'> contrib.cloud.python.ops.BigQueryReader <a href=' /contrib/cloud/python/ops/bigquery_reader_ops.py#L67'>__init__</a>(project_id,dataset_id,table_id,timestamp_millis)</tt>	Creates a bigqueryreader.
<tt style='background-color:#E8E8E8;'> contrib.cloud.python.ops.BigQueryReader <a href=' /contrib/cloud/python/ops/bigquery_reader_ops.py#L127'>partitions</a>(name)</tt>	Returns serialized bigquerytablepartition messages.
<tt style='background-color:#E8E8E8;'> contrib.hooks.python.training.ProfilerHook <a href=' /contrib/hooks/python/training/profiler_hook.py#L45'>__init__</a>(save_steps,save_secs,output_dir,show_dataflow)</tt>	Initializes a hook that takes periodic profiling snapshots.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorTriL <a href=' /contrib/linalg/python/ops/linear_operator_tril.py#L104'>__init__</a>(tril,is_non_singular,is_self_adjoint,is_positive_definite)</tt>	Initialize a linearoperatortril.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorTriL <a href=' /contrib/linalg/python/ops/linear_operator_tril.py#L158'>_check_tril</a>(tril)</tt>	Static check of the tril argument.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorUDVHUpdate <a href=' /contrib/linalg/python/ops/linear_operator_udvh_update.py#L127'>__init__</a>(base_operator,u,diag_update,v)</tt>	Initialize a linearoperatorudvhupdate.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorUDVHUpdate <a href=' /contrib/linalg/python/ops/linear_operator_udvh_update.py#L275'>_check_shapes</a>()</tt>	Static check that shapes are compatible.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorUDVHUpdate <a href=' /contrib/linalg/python/ops/linear_operator_udvh_update.py#L292'>_set_diag_operators</a>(diag_update,is_diag_update_positive)</tt>	Set attributes self _diag_update and self _diag_operator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorUDVHUpdate <a href=' /contrib/linalg/python/ops/linear_operator_udvh_update.py#L308'>u</a>()</tt>	If this operator is a = l + u d v^h, this is the u.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorUDVHUpdate <a href=' /contrib/linalg/python/ops/linear_operator_udvh_update.py#L313'>v</a>()</tt>	If this operator is a = l + u d v^h, this is the v.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorUDVHUpdate <a href=' /contrib/linalg/python/ops/linear_operator_udvh_update.py#L318'>is_diag_update_positive</a>()</tt>	If this operator is a = l + u d v^h, this hints d > 0 elementwise.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorUDVHUpdate <a href=' /contrib/linalg/python/ops/linear_operator_udvh_update.py#L323'>diag_update</a>()</tt>	If this operator is a = l + u d v^h, this is the diagonal of d.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorUDVHUpdate <a href=' /contrib/linalg/python/ops/linear_operator_udvh_update.py#L328'>diag_operator</a>()</tt>	If this operator is a = l + u d v^h, this is d.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorUDVHUpdate <a href=' /contrib/linalg/python/ops/linear_operator_udvh_update.py#L333'>base_operator</a>()</tt>	If this operator is a = l + u d v^h, this is the l.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_util.py#L29'>assert_no_entries_with_modulus_zero</a>(x,message,name)</tt>	Returns op that asserts tensor x has no entries with modulus zero.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_util.py#L49'>assert_zero_imag_part</a>(x,message,name)</tt>	Returns op that asserts tensor x has no non-zero imaginary parts.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_util.py#L71'>assert_compatible_matrix_dimensions</a>(operator,x)</tt>	Assert that an argument to solve/apply has proper domain dimension.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_util.py#L96'>assert_is_batch_matrix</a>(tensor)</tt>	Static assert that tensor has rank 2 or higher.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_util.py#L105'>broadcast_matrix_batch_dims</a>(batch_matrices,name)</tt>	Broadcast leading dimensions of zero or more [batch] matrices.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_util.py#L198'>matmul_with_broadcast</a>(a,b,transpose_a,transpose_b)</tt>	Multiplies matrix a by matrix b, producing a @ b.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_util.py#L292'>matrix_adjoint</a>(a,name)</tt>	Transposes last two dimensions of tensor a, and takes complex conjugate.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_util.py#L339'>shape_tensor</a>(shape,name)</tt>	Convert tensor using default type unless empty list or tuple.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.BaseLinearOperatorIdentity <a href=' /contrib/linalg/python/ops/linear_operator_identity.py#L43'>_check_num_rows_possibly_add_asserts</a>()</tt>	Static check of init arg num_rows, possibly add asserts.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.BaseLinearOperatorIdentity <a href=' /contrib/linalg/python/ops/linear_operator_identity.py#L77'>_ones_diag</a>()</tt>	Returns the diagonal of this operator as all ones.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorIdentity <a href=' /contrib/linalg/python/ops/linear_operator_identity.py#L194'>__init__</a>(num_rows,batch_shape,dtype,is_non_singular)</tt>	Initialize a linearoperatoridentity.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorIdentity <a href=' /contrib/linalg/python/ops/linear_operator_identity.py#L304'>_possibly_broadcast_batch_shape</a>(x)</tt>	Return 'x', possibly after broadcasting the leading dimensions.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorIdentity <a href=' /contrib/linalg/python/ops/linear_operator_identity.py#L358'>add_to_tensor</a>(mat,name)</tt>	Add matrix represented by this operator to mat equiv to i + mat.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorIdentity <a href=' /contrib/linalg/python/ops/linear_operator_identity.py#L374'>_check_num_rows_possibly_add_asserts</a>()</tt>	Static check of init arg num_rows, possibly add asserts.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorIdentity <a href=' /contrib/linalg/python/ops/linear_operator_identity.py#L408'>_check_batch_shape_possibly_add_asserts</a>()</tt>	Static check of init arg batch_shape, possibly add asserts.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorScaledIdentity <a href=' /contrib/linalg/python/ops/linear_operator_identity.py#L529'>__init__</a>(num_rows,multiplier,is_non_singular,is_self_adjoint)</tt>	Initialize a linearoperatorscaledidentity.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorScaledIdentity <a href=' /contrib/linalg/python/ops/linear_operator_identity.py#L665'>add_to_tensor</a>(mat,name)</tt>	Add matrix represented by this operator to mat equiv to i + mat.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorScaledIdentity <a href=' /contrib/linalg/python/ops/linear_operator_identity.py#L690'>multiplier</a>()</tt>	The [batch] scalar tensor, c in ci.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorComposition <a href=' /contrib/linalg/python/ops/linear_operator_composition.py#L110'>__init__</a>(operators,is_non_singular,is_self_adjoint,is_positive_definite)</tt>	Initialize a linearoperatorcomposition.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorDerivedClassTest <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L62'>assertAC</a>(x,y)</tt>	Derived classes can set _atol _rtol to get different tolerance.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorDerivedClassTest <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L74'>_shapes_to_test</a>()</tt>	Returns list of tuples each is one shape that will be tested.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorDerivedClassTest <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L79'>_operator_and_mat_and_feed_dict</a>(shape,dtype,use_placeholder)</tt>	Build a batch matrix and an operator that should have similar behavior.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorDerivedClassTest <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L103'>_make_rhs</a>(operator,adjoint)</tt>	Make a rhs appropriate for calling operator solve rhs.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorDerivedClassTest <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L117'>_make_x</a>(operator,adjoint)</tt>	Make an 'x' appropriate for calling operator apply x.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorDerivedClassTest <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L131'>_tests_to_skip</a>()</tt>	List of test names to skip.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorDerivedClassTest <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L138'>_skip_if_tests_to_skip_contains</a>(test_name)</tt>	If self _tests_to_skip contains test_name raise skiptest exception.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.SquareLinearOperatorDerivedClassTest <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L343'>_get_num_systems</a>(operator)</tt>	Get some number either 1 or 2 depending on operator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.NonSquareLinearOperatorDerivedClassTest <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L363'>_tests_to_skip</a>()</tt>	List of test names to skip.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.NonSquareLinearOperatorDerivedClassTest <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L400'>_get_num_systems</a>(operator)</tt>	Get some number either 1 or 2 depending on operator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L408'>random_positive_definite_matrix</a>(shape,dtype,force_well_conditioned)</tt>	[batch] positive definite matrix.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L433'>random_tril_matrix</a>(shape,dtype,force_well_conditioned,remove_upper)</tt>	[batch] lower triangular matrix.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L469'>random_normal</a>(shape,mean,stddev,dtype)</tt>	Tensor with possibly complex gaussian entries.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L503'>random_uniform</a>(shape,minval,maxval,dtype)</tt>	Tensor with possibly complex uniform entries.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L545'>random_sign_uniform</a>(shape,minval,maxval,dtype)</tt>	Tensor with possibly complex random entries from a "sign uniform".
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_test_util.py#L583'>random_normal_correlated_columns</a>(shape,mean,stddev,dtype)</tt>	Batch matrix with possibly complex gaussian entries and correlated cols.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_addition.py#L37'>add_operators</a>(operators,operator_name,addition_tiers,name)</tt>	Efficiently add one or more linear operators.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_addition.py#L151'>_infer_hints_allowing_override</a>(op1,op2,hints)</tt>	Infer hints from op1 and op2 hints argument is an override.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_addition.py#L192'>_static_check_for_same_dimensions</a>(operators)</tt>	Valueerror if operators determined to have different dimensions.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_addition.py#L210'>_static_check_for_broadcastable_batch_shape</a>(operators)</tt>	Valueerror if operators determined to have non-broadcastable shapes.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops._Adder <a href=' /contrib/linalg/python/ops/linear_operator_addition.py#L250'>can_add</a>(op1,op2)</tt>	Returns true if this adder can add op1 and op2 else false.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops._Adder <a href=' /contrib/linalg/python/ops/linear_operator_addition.py#L261'>add</a>(op1,op2,operator_name,hints)</tt>	Return new linearoperator acting like op1 + op2.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops. <a href=' /contrib/linalg/python/ops/linear_operator_addition.py#L396'>_type</a>(operator)</tt>	Returns the type name constant (e g _tril) for operator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L136'>__init__</a>(dtype,graph_parents,is_non_singular,is_self_adjoint)</tt>	Initialize the linearoperator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L209'>_name_scope</a>(name,values)</tt>	Helper function to standardize op scope.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L217'>dtype</a>()</tt>	The dtype of tensors handled by this linearoperator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L222'>name</a>()</tt>	Name prepended to all ops created by this linearoperator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L227'>graph_parents</a>()</tt>	List of graph dependencies of this linearoperator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L244'>is_square</a>()</tt>	Return true/false depending on if this operator is square.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L263'>shape</a>()</tt>	Tensorshape of this linearoperator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L280'>shape_tensor</a>(name)</tt>	Shape of this linearoperator, determined at runtime.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L304'>batch_shape</a>()</tt>	Tensorshape of batch dimensions of this linearoperator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L318'>batch_shape_tensor</a>(name)</tt>	Shape of batch dimensions of this operator determined at runtime.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L342'>tensor_rank</a>(name)</tt>	Rank in the sense of tensors of matrix corresponding to this operator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L359'>tensor_rank_tensor</a>(name)</tt>	Rank in the sense of tensors of matrix corresponding to this operator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L382'>domain_dimension</a>()</tt>	Dimension in the sense of vector spaces of the domain of this operator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L395'>domain_dimension_tensor</a>(name)</tt>	Dimension in the sense of vector spaces of the domain of this operator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L420'>range_dimension</a>()</tt>	Dimension in the sense of vector spaces of the range of this operator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L433'>range_dimension_tensor</a>(name)</tt>	Dimension in the sense of vector spaces of the range of this operator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L461'>assert_non_singular</a>(name)</tt>	Returns an op that asserts this operator is non singular.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L469'>assert_positive_definite</a>(name)</tt>	Returns an op that asserts this operator is positive definite.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L488'>assert_self_adjoint</a>(name)</tt>	Returns an op that asserts this operator is self-adjoint.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L493'>_check_input_dtype</a>(arg)</tt>	Check that arg dtype == self dtype.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L504'>apply</a>(x,adjoint,adjoint_arg,name)</tt>	Transform x with left multiplication x --> ax.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L533'>determinant</a>(name)</tt>	Determinant for every batch member.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L559'>log_abs_determinant</a>(name)</tt>	Log absolute value of determinant for every batch member.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L588'>solve</a>(rhs,adjoint,adjoint_arg,name)</tt>	Solve r batch systems of equations with best effort a x = rhs.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L644'>_to_dense</a>()</tt>	Generic and often inefficient implementation override often.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L659'>to_dense</a>(name)</tt>	Return a dense batch matrix representing this operator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L664'>_diag_part</a>()</tt>	Generic and often inefficient implementation override often.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L668'>diag_part</a>(name)</tt>	Efficiently get the [batch] diagonal part of this operator.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperator <a href=' /contrib/linalg/python/ops/linear_operator.py#L700'>add_to_tensor</a>(x,name)</tt>	Add matrix represented by this operator to x equivalent to a + x.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorFullMatrix <a href=' /contrib/linalg/python/ops/linear_operator_full_matrix.py#L105'>__init__</a>(matrix,is_non_singular,is_self_adjoint,is_positive_definite)</tt>	Initialize a linearoperatorfullmatrix.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorFullMatrix <a href=' /contrib/linalg/python/ops/linear_operator_full_matrix.py#L146'>_check_matrix</a>(matrix)</tt>	Static check of the matrix argument.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorDiag <a href=' /contrib/linalg/python/ops/linear_operator_diag.py#L111'>__init__</a>(diag,is_non_singular,is_self_adjoint,is_positive_definite)</tt>	Initialize a linearoperatordiag.
<tt style='background-color:#E8E8E8;'> contrib.linalg.python.ops.LinearOperatorDiag <a href=' /contrib/linalg/python/ops/linear_operator_diag.py#L165'>_check_diag</a>(diag)</tt>	Static check of diag.
<tt style='background-color:#E8E8E8;'> contrib.crf.python.ops. <a href=' /contrib/crf/python/ops/crf.py#L57'>_lengths_to_masks</a>(lengths,max_length)</tt>	Creates a binary matrix that can be used to mask away padding.
<tt style='background-color:#E8E8E8;'> contrib.crf.python.ops. <a href=' /contrib/crf/python/ops/crf.py#L76'>crf_sequence_score</a>(inputs,tag_indices,sequence_lengths,transition_params)</tt>	Computes the unnormalized score for a tag sequence.
<tt style='background-color:#E8E8E8;'> contrib.crf.python.ops. <a href=' /contrib/crf/python/ops/crf.py#L98'>crf_log_norm</a>(inputs,sequence_lengths,transition_params)</tt>	Computes the normalization for a crf.
<tt style='background-color:#E8E8E8;'> contrib.crf.python.ops. <a href=' /contrib/crf/python/ops/crf.py#L128'>crf_log_likelihood</a>(inputs,tag_indices,sequence_lengths,transition_params)</tt>	Computes the log-likelihood of tag sequences in a crf.
<tt style='background-color:#E8E8E8;'> contrib.crf.python.ops. <a href=' /contrib/crf/python/ops/crf.py#L163'>crf_unary_score</a>(tag_indices,sequence_lengths,inputs)</tt>	Computes the unary scores of tag sequences.
<tt style='background-color:#E8E8E8;'> contrib.crf.python.ops. <a href=' /contrib/crf/python/ops/crf.py#L194'>crf_binary_score</a>(tag_indices,sequence_lengths,transition_params)</tt>	Computes the binary scores of tag sequences.
<tt style='background-color:#E8E8E8;'> contrib.crf.python.ops.CrfForwardRnnCell <a href=' /contrib/crf/python/ops/crf.py#L234'>__init__</a>(transition_params)</tt>	Initialize the crfforwardrnncell.
<tt style='background-color:#E8E8E8;'> contrib.crf.python.ops.CrfForwardRnnCell <a href=' /contrib/crf/python/ops/crf.py#L253'>__call__</a>(inputs,state,scope)</tt>	Build the crfforwardrnncell.
<tt style='background-color:#E8E8E8;'> contrib.crf.python.ops. <a href=' /contrib/crf/python/ops/crf.py#L283'>viterbi_decode</a>(score,transition_params)</tt>	Decode the highest scoring sequence of tags outside of tensorflow.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Trainable <a href=' /contrib/learn/python/learn/trainable.py#L30'>fit</a>(x,y,input_fn,steps)</tt>	Trains a model given training data x predictions and y labels.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ExportStrategy <a href=' /contrib/learn/python/learn/export_strategy.py#L53'>export</a>(estimator,export_path,checkpoint_path,eval_result)</tt>	Exports the given estimator to a specific format.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.BaseMonitor <a href=' /contrib/learn/python/learn/monitors.py#L82'>set_estimator</a>(estimator)</tt>	A setter called automatically by the target estimator.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.BaseMonitor <a href=' /contrib/learn/python/learn/monitors.py#L98'>begin</a>(max_steps)</tt>	Called at the beginning of training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.BaseMonitor <a href=' /contrib/learn/python/learn/monitors.py#L114'>end</a>(session)</tt>	Callback at the end of training/evaluation.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.BaseMonitor <a href=' /contrib/learn/python/learn/monitors.py#L158'>step_begin</a>(step)</tt>	Callback before training step begins.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.BaseMonitor <a href=' /contrib/learn/python/learn/monitors.py#L180'>step_end</a>(step,output)</tt>	Callback after training step finished.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.BaseMonitor <a href=' /contrib/learn/python/learn/monitors.py#L211'>post_step</a>(step,session)</tt>	Callback after the step is finished.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.EveryN <a href=' /contrib/learn/python/learn/monitors.py#L258'>__init__</a>(every_n_steps,first_n_steps)</tt>	Initializes an everyn monitor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.EveryN <a href=' /contrib/learn/python/learn/monitors.py#L276'>every_n_step_begin</a>(step)</tt>	Callback before every n'th step begins.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.EveryN <a href=' /contrib/learn/python/learn/monitors.py#L287'>every_n_step_end</a>(step,outputs)</tt>	Callback after every n'th step finished.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.EveryN <a href=' /contrib/learn/python/learn/monitors.py#L308'>every_n_post_step</a>(step,session)</tt>	Callback after a step is finished or end() is called.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.EveryN <a href=' /contrib/learn/python/learn/monitors.py#L317'>step_begin</a>(step)</tt>	Overrides basemonitor step_begin.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.EveryN <a href=' /contrib/learn/python/learn/monitors.py#L340'>step_end</a>(step,output)</tt>	Overrides basemonitor step_end.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.StopAtStep <a href=' /contrib/learn/python/learn/monitors.py#L375'>__init__</a>(num_steps,last_step)</tt>	Create a stopatstep monitor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.PrintTensor <a href=' /contrib/learn/python/learn/monitors.py#L427'>__init__</a>(tensor_names,every_n,first_n)</tt>	Initializes a printtensor monitor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.LoggingTrainable <a href=' /contrib/learn/python/learn/monitors.py#L463'>__init__</a>(scope,every_n,first_n)</tt>	Initializes loggingtrainable monitor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.SummarySaver <a href=' /contrib/learn/python/learn/monitors.py#L498'>__init__</a>(summary_op,save_steps,output_dir,summary_writer)</tt>	Initializes a summarysaver monitor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ValidationMonitor <a href=' /contrib/learn/python/learn/monitors.py#L564'>__init__</a>(x,y,input_fn,batch_size)</tt>	Initializes a validationmonitor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ValidationMonitor <a href=' /contrib/learn/python/learn/monitors.py#L622'>early_stopped</a>()</tt>	Returns true if this monitor caused an early stop.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ValidationMonitor <a href=' /contrib/learn/python/learn/monitors.py#L627'>best_step</a>()</tt>	Returns the step at which the best early stopping metric was found.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ValidationMonitor <a href=' /contrib/learn/python/learn/monitors.py#L632'>best_value</a>()</tt>	Returns the best early stopping metric value found so far.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.CaptureVariable <a href=' /contrib/learn/python/learn/monitors.py#L702'>__init__</a>(var_name,every_n,first_n)</tt>	Initializes a capturevariable monitor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.CaptureVariable <a href=' /contrib/learn/python/learn/monitors.py#L714'>values</a>()</tt>	Returns the values captured so far.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/monitors.py#L733'>get_default_monitors</a>(loss_op,summary_op,save_summary_steps,output_dir)</tt>	Returns a default set of typically-used monitors.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.GraphDump <a href=' /contrib/learn/python/learn/monitors.py#L767'>__init__</a>(ignore_ops)</tt>	Initializes graphdump monitor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.GraphDump <a href=' /contrib/learn/python/learn/monitors.py#L805'>compare</a>(other_dump,step,atol)</tt>	Compares two graphdump monitors and returns differences.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ExportMonitor <a href=' /contrib/learn/python/learn/monitors.py#L907'>last_export_dir</a>()</tt>	Returns the directory containing the last completed export.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.CheckpointSaver <a href=' /contrib/learn/python/learn/monitors.py#L965'>__init__</a>(checkpoint_dir,save_secs,save_steps,saver)</tt>	Initialize checkpointsaver monitor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.CheckpointSaver <a href=' /contrib/learn/python/learn/monitors.py#L1030'>_save</a>(step,session)</tt>	Saves the latest checkpoint.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.NanLoss <a href=' /contrib/learn/python/learn/monitors.py#L1091'>__init__</a>(loss_tensor,every_n_steps,fail_on_nan_loss)</tt>	Initializes nanloss monitor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/monitors.py#L1173'>replace_monitors_with_hooks</a>(monitors_or_hooks,estimator)</tt>	Wraps monitors with a hook.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/monitors.py#L1215'>_as_graph_element</a>(obj)</tt>	Retrieves graph element.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Experiment <a href=' /contrib/learn/python/learn/experiment.py#L57'>__init__</a>(estimator,train_input_fn,eval_input_fn,eval_metrics)</tt>	Constructor for experiment.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Experiment <a href=' /contrib/learn/python/learn/experiment.py#L211'>extend_train_hooks</a>(additional_hooks)</tt>	Extends the hooks for training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Experiment <a href=' /contrib/learn/python/learn/experiment.py#L215'>reset_export_strategies</a>(new_export_strategies)</tt>	Resets the export strategies with the new_export_strategies.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Experiment <a href=' /contrib/learn/python/learn/experiment.py#L229'>train</a>(delay_secs)</tt>	Fit the estimator using the training data.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Experiment <a href=' /contrib/learn/python/learn/experiment.py#L277'>evaluate</a>(delay_secs)</tt>	Evaluate on the evaluation data.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Experiment <a href=' /contrib/learn/python/learn/experiment.py#L318'>_continuous_eval</a>(input_fn,name,delay_secs,throttle_delay_secs)</tt>	Run continuous eval.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Experiment <a href=' /contrib/learn/python/learn/experiment.py#L422'>_has_training_stopped</a>(eval_result)</tt>	Determines whether the training has stopped.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Experiment <a href=' /contrib/learn/python/learn/experiment.py#L455'>train_and_evaluate</a>()</tt>	Interleaves training and evaluation.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Experiment <a href=' /contrib/learn/python/learn/experiment.py#L505'>continuous_train_and_eval</a>(continuous_eval_predicate_fn)</tt>	Interleaves training and evaluation.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Experiment <a href=' /contrib/learn/python/learn/experiment.py#L580'>_maybe_export</a>(eval_result,checkpoint_path)</tt>	Export the estimator using export_fn if defined.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Experiment <a href=' /contrib/learn/python/learn/experiment.py#L599'>run_std_server</a>()</tt>	Starts a tensorflow server and joins the serving thread.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Experiment <a href=' /contrib/learn/python/learn/experiment.py#L610'>test</a>()</tt>	Tests training evaluating and exporting the estimator for a single step.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Experiment <a href=' /contrib/learn/python/learn/experiment.py#L628'>_start_server</a>()</tt>	Creates starts and returns a server_lib server.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/experiment.py#L689'>_new_attr_context</a>(obj,attr)</tt>	Creates a new context in which an object's attribute can be changed.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/learn_runner.py#L29'>_execute_schedule</a>(experiment,schedule)</tt>	Execute the method named schedule of experiment.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/learn_runner.py#L50'>_wrapped_experiment_fn_with_uid_check</a>(experiment_fn,require_hparams)</tt>	Wraps the runconfig uid check with experiment_fn.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/learn_runner.py#L93'>run</a>(experiment_fn,output_dir,schedule,run_config)</tt>	Make and run an experiment.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/learn_runner.py#L198'>tune</a>(experiment_fn,tuner)</tt>	Tune an experiment with hyper-parameters.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/learn_runner.py#L235'>_is_distributed</a>(config)</tt>	Returns true if this is a distributed job.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/learn_runner.py#L250'>_get_default_schedule</a>(config)</tt>	Returns the default schedule for the provided runconfig.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Evaluable <a href=' /contrib/learn/python/learn/evaluable.py#L30'>model_dir</a>()</tt>	Returns a path in which the eval process will look for checkpoints.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.Evaluable <a href=' /contrib/learn/python/learn/evaluable.py#L35'>evaluate</a>(x,y,input_fn,feed_fn)</tt>	Evaluates given model with provided evaluation data.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.GraphActionsTest <a href=' /contrib/learn/python/learn/graph_actions_test.py#L155'>_build_inference_graph</a>()</tt>	Build simple inference graph.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.GraphActionsTrainTest <a href=' /contrib/learn/python/learn/graph_actions_test.py#L449'>_build_inference_graph</a>()</tt>	Build simple inference graph.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/metric_spec.py#L34'>_args</a>(fn)</tt>	Get argument names for function-like object.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/metric_spec.py#L62'>_matching_arg</a>(fn_name,fn_args,candidate_args,canonical_arg)</tt>	Find single argument in args from candidate_args.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/metric_spec.py#L108'>_adapt_metric_fn</a>(metric_fn,metric_fn_name,is_labels_required,is_weights_required)</tt>	Adapt metric_fn to take only named args.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.MetricSpec <a href=' /contrib/learn/python/learn/metric_spec.py#L360'>create_metric_ops</a>(inputs,labels,predictions)</tt>	Connect our metric_fn to the specified members of the given dicts.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/graph_actions.py#L65'>clear_summary_writers</a>()</tt>	Clear cached summary writers currently only used for unit tests.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/graph_actions.py#L71'>get_summary_writer</a>(logdir)</tt>	Returns single summarywriter per logdir in current run.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/graph_actions.py#L104'>_run_with_monitors</a>(session,step,tensors,feed_dict)</tt>	Runs session for given tensors with monitor callbacks.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/graph_actions.py#L122'>train</a>(graph,output_dir,train_op,loss_op)</tt>	Train a model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/graph_actions.py#L414'>_get_saver</a>()</tt>	Lazy init and return saver.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/graph_actions.py#L431'>_get_local_init_op</a>()</tt>	Returns the local init ops to initialize tables and local variables.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/graph_actions.py#L450'>_write_summary_results</a>(output_dir,eval_results,current_global_step)</tt>	Writes eval results into summary file in given dir.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/graph_actions.py#L471'>evaluate</a>(graph,output_dir,checkpoint_path,eval_dict)</tt>	Evaluate a model loaded from a checkpoint.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/graph_actions.py#L625'>run_n</a>(output_dict,feed_dict,restore_checkpoint_path,n)</tt>	Run output_dict tensors n times with the same feed_dict each run.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/graph_actions.py#L647'>run_feeds_iter</a>(output_dict,feed_dicts,restore_checkpoint_path)</tt>	Run output_dict tensors with each input in feed_dicts.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/graph_actions.py#L699'>run_feeds</a>()</tt>	See run_feeds_iter() returns a list instead of an iterator.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/graph_actions.py#L705'>infer</a>(restore_checkpoint_path,output_dict,feed_dict)</tt>	Restore graph from restore_checkpoint_path and run output_dict tensors.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/models.py#L33'>linear_regression_zero_init</a>(x,y)</tt>	Linear regression subgraph with zero-value initial weights and bias.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/models.py#L46'>logistic_regression_zero_init</a>(x,y)</tt>	Logistic regression subgraph with zero-value initial weights and bias.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/models.py#L59'>linear_regression</a>(x,y,init_mean,init_stddev)</tt>	Creates linear regression tensorflow subgraph.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/models.py#L110'>logistic_regression</a>(x,y,class_weight,init_mean)</tt>	Creates logistic regression tensorflow subgraph.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/models.py#L178'>_reverse_seq</a>(input_seq,lengths)</tt>	Reverse a list of tensors up to specified lengths.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/models.py#L206'>bidirectional_rnn</a>(cell_fw,cell_bw,inputs,initial_state_fw)</tt>	Creates a bidirectional recurrent neural network.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn. <a href=' /contrib/learn/python/learn/models.py#L286'>get_rnn_model</a>(rnn_size,cell_type,num_layers,input_op_fn)</tt>	Returns a function that creates a rnn tensorflow subgraph.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L42'>_get_in_out_shape</a>(x_shape,y_shape,n_classes,batch_size)</tt>	Returns shape for input and output of the data feeder.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L87'>_data_type_filter</a>(x,y)</tt>	Filter data types into acceptable format.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L104'>setup_train_data_feeder</a>(x,y,n_classes,batch_size)</tt>	Create data feeder to sample inputs from dataset.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L191'>setup_predict_data_feeder</a>(x,batch_size)</tt>	Returns an iterable for feeding into predict step.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L222'>setup_processor_data_feeder</a>(x)</tt>	Sets up processor iterable.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L236'>check_array</a>(array,dtype)</tt>	Checks array on dtype and converts it if different.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L253'>_access</a>(data,iloc)</tt>	Accesses an element from collection using integer location based indexing.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io.DataFeeder <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L280'>__init__</a>(x,y,n_classes,batch_size)</tt>	Initializes a datafeeder instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io.DataFeeder <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L398'>make_epoch_variable</a>()</tt>	Adds a placeholder variable for the epoch to the graph.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io.DataFeeder <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L408'>input_builder</a>()</tt>	Builds inputs in the graph.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io.DataFeeder <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L435'>set_placeholders</a>(input_placeholder,output_placeholder)</tt>	Sets placeholders for this data feeder.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io.DataFeeder <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L447'>get_feed_params</a>()</tt>	Function returns a dict with data feed params while training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io.DataFeeder <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L459'>get_feed_dict_fn</a>()</tt>	Returns a function that samples data into given placeholders.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io.StreamingDataFeeder <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L557'>__init__</a>(x,y,n_classes,batch_size)</tt>	Initializes a streamingdatafeeder instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io.StreamingDataFeeder <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L647'>get_feed_params</a>()</tt>	Function returns a dict with data feed params while training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io.StreamingDataFeeder <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L655'>get_feed_dict_fn</a>()</tt>	Returns a function that will sample data and provide it to placeholders.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io.DaskDataFeeder <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L764'>__init__</a>(x,y,n_classes,batch_size)</tt>	Initializes a daskdatafeeder instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io.DaskDataFeeder <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L838'>get_feed_params</a>()</tt>	Function returns a dict with data feed params while training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io.DaskDataFeeder <a href=' /contrib/learn/python/learn/learn_io/data_feeder.py#L846'>get_feed_dict_fn</a>(input_placeholder,output_placeholder)</tt>	Returns a function that will sample data and provide it to placeholders.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/generator_io.py#L28'>generator_input_fn</a>(x,target_key,batch_size,num_epochs)</tt>	Returns input function that would dicts of numpy arrays yielded from a generator.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/pandas_io.py#L50'>pandas_input_fn</a>(x,y,batch_size,num_epochs)</tt>	This input_fn diffs from the core version with default shuffle.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/pandas_io.py#L69'>extract_pandas_data</a>(data)</tt>	Extract data from pandas dataframe for predictors.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/pandas_io.py#L99'>extract_pandas_matrix</a>(data)</tt>	Extracts numpy matrix from pandas dataframe.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/pandas_io.py#L114'>extract_pandas_labels</a>(labels)</tt>	Extract data from pandas dataframe for labels.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/graph_io.py#L41'>read_batch_examples</a>(file_pattern,batch_size,reader,randomize_input)</tt>	Adds operations to read queue batch example protos.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/graph_io.py#L108'>read_keyed_batch_examples</a>(file_pattern,batch_size,reader,randomize_input)</tt>	Adds operations to read queue batch example protos.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/graph_io.py#L177'>read_keyed_batch_examples_shared_queue</a>(file_pattern,batch_size,reader,randomize_input)</tt>	Adds operations to read queue batch example protos.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/graph_io.py#L249'>_get_file_names</a>(file_pattern,randomize_input)</tt>	Parse list of file names from pattern optionally shuffled.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/graph_io.py#L309'>_read_keyed_batch_examples_helper</a>(file_pattern,batch_size,reader,randomize_input)</tt>	Adds operations to read queue batch example protos.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/graph_io.py#L434'>read_keyed_batch_features</a>(file_pattern,batch_size,features,reader)</tt>	Adds operations to read queue batch and parse example protos.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/graph_io.py#L515'>read_keyed_batch_features_shared_queue</a>(file_pattern,batch_size,features,reader)</tt>	Adds operations to read queue batch and parse example protos.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/graph_io.py#L595'>queue_parsed_features</a>(parsed_features,keys,feature_queue_capacity,num_enqueue_threads)</tt>	Speeds up parsing by using queues to do it asynchronously.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/graph_io.py#L715'>read_batch_features</a>(file_pattern,batch_size,features,reader)</tt>	Adds operations to read queue batch and parse example protos.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/graph_io.py#L782'>read_batch_record_features</a>(file_pattern,batch_size,features,randomize_input)</tt>	Reads tfrecord queues batches and parses example proto.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/dask_io.py#L33'>_add_to_index</a>(df,start)</tt>	New dask dataframe with values added to index of each subdataframe.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/dask_io.py#L40'>_get_divisions</a>(df)</tt>	Number of rows in each sub-dataframe.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/dask_io.py#L48'>_construct_dask_df_with_divisions</a>(df)</tt>	Construct the new task graph and make a new dask dataframe around it.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/dask_io.py#L63'>extract_dask_data</a>(data)</tt>	Extract data from dask series or dask dataframe for predictors.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/dask_io.py#L84'>extract_dask_labels</a>(labels)</tt>	Extract data from dask series or dask dataframe for labels.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.learn_io. <a href=' /contrib/learn/python/learn/learn_io/numpy_io.py#L24'>numpy_input_fn</a>(x,y,batch_size,num_epochs)</tt>	This input_fn diffs from the core version with default shuffle.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.SVM <a href=' /contrib/learn/python/learn/estimators/svm.py#L85'>__init__</a>(example_id_column,feature_columns,weight_column_name,model_dir)</tt>	Constructs an svm estimator object.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.SVM <a href=' /contrib/learn/python/learn/estimators/svm.py#L152'>predict_classes</a>(x,input_fn,batch_size,as_iterable)</tt>	Runs inference to determine the predicted class.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.SVM <a href=' /contrib/learn/python/learn/estimators/svm.py#L169'>predict_proba</a>(x,input_fn,batch_size,outputs)</tt>	Runs inference to determine the class probability predictions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.SVM <a href=' /contrib/learn/python/learn/estimators/svm.py#L187'>export</a>(export_dir,signature_fn,input_fn,default_batch_size)</tt>	See baseestimator export.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.SVM <a href=' /contrib/learn/python/learn/estimators/svm.py#L199'>export_with_defaults</a>(export_dir,signature_fn,input_fn,default_batch_size)</tt>	Same as baseestimator export but uses some defaults.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._BaseEstimator <a href=' /contrib/learn/python/learn/estimators/_sklearn.py#L40'>get_params</a>(deep)</tt>	Get parameters for this estimator.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._BaseEstimator <a href=' /contrib/learn/python/learn/estimators/_sklearn.py#L68'>set_params</a>()</tt>	Set the parameters of this estimator.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dnn.py#L63'>_dnn_model_fn</a>(features,labels,mode,params)</tt>	Deep neural net model_fn.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifier <a href=' /contrib/learn/python/learn/estimators/dnn.py#L261'>__init__</a>(hidden_units,feature_columns,model_dir,n_classes)</tt>	Initializes a dnnclassifier instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifier <a href=' /contrib/learn/python/learn/estimators/dnn.py#L349'>predict</a>(x,input_fn,batch_size,outputs)</tt>	Returns predictions for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifier <a href=' /contrib/learn/python/learn/estimators/dnn.py#L394'>predict_classes</a>(x,input_fn,batch_size,as_iterable)</tt>	Returns predicted classes for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifier <a href=' /contrib/learn/python/learn/estimators/dnn.py#L427'>predict_proba</a>(x,input_fn,batch_size,as_iterable)</tt>	Returns predicted probabilities for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifier <a href=' /contrib/learn/python/learn/estimators/dnn.py#L462'>export</a>(export_dir,input_fn,input_feature_key,use_deprecated_input_fn)</tt>	See baseestimator export.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressor <a href=' /contrib/learn/python/learn/estimators/dnn.py#L545'>__init__</a>(hidden_units,feature_columns,model_dir,weight_column_name)</tt>	Initializes a dnnregressor instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressor <a href=' /contrib/learn/python/learn/estimators/dnn.py#L626'>evaluate</a>(x,y,input_fn,feed_fn)</tt>	See evaluable evaluable.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressor <a href=' /contrib/learn/python/learn/estimators/dnn.py#L660'>predict</a>(x,input_fn,batch_size,outputs)</tt>	Returns predictions for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressor <a href=' /contrib/learn/python/learn/estimators/dnn.py#L705'>predict_scores</a>(x,input_fn,batch_size,as_iterable)</tt>	Returns predicted scores for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressor <a href=' /contrib/learn/python/learn/estimators/dnn.py#L738'>export</a>(export_dir,input_fn,input_feature_key,use_deprecated_input_fn)</tt>	See baseestimator export.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNEstimator <a href=' /contrib/learn/python/learn/estimators/dnn.py#L820'>__init__</a>(head,hidden_units,feature_columns,model_dir)</tt>	Initializes a dnnestimator instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/kmeans.py#L95'>_parse_tensor_or_dict</a>(features)</tt>	Helper function to parse features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/kmeans.py#L104'>_kmeans_clustering_model_fn</a>(features,labels,mode,params)</tt>	Model function for kmeansclustering estimator.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.KMeansClustering <a href=' /contrib/learn/python/learn/estimators/kmeans.py#L155'>__init__</a>(num_clusters,model_dir,initial_clusters,distance_metric)</tt>	Creates a model for running kmeans training and inference.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.KMeansClustering <a href=' /contrib/learn/python/learn/estimators/kmeans.py#L206'>predict_cluster_idx</a>(input_fn)</tt>	Yields predicted cluster indices.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.KMeansClustering <a href=' /contrib/learn/python/learn/estimators/kmeans.py#L214'>score</a>(input_fn,steps)</tt>	Predict total sum of distances to nearest clusters.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.KMeansClustering <a href=' /contrib/learn/python/learn/estimators/kmeans.py#L231'>transform</a>(input_fn,as_iterable)</tt>	Transforms each element to distances to cluster centers.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.KMeansClustering <a href=' /contrib/learn/python/learn/estimators/kmeans.py#L257'>clusters</a>()</tt>	Returns cluster centers.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/logistic_regressor.py#L33'>_get_model_fn_with_logistic_metrics</a>(model_fn)</tt>	Returns a model_fn with additional logistic metrics.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/logistic_regressor.py#L73'>LogisticRegressor</a>(model_fn,thresholds,model_dir,config)</tt>	Builds a logistic regression estimator for binary classification.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/logistic_regressor.py#L124'>_make_logistic_eval_metric_ops</a>(labels,predictions,thresholds)</tt>	Returns a dictionary of evaluation metric ops for logistic regression.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.ComposableModelTest <a href=' /contrib/learn/python/learn/estimators/composable_model_test.py#L119'>testLinearModel</a>()</tt>	Tests that loss goes down with training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.ComposableModelTest <a href=' /contrib/learn/python/learn/estimators/composable_model_test.py#L144'>testJointLinearModel</a>()</tt>	Tests that loss goes down with training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.ComposableModelTest <a href=' /contrib/learn/python/learn/estimators/composable_model_test.py#L170'>testDNNModel</a>()</tt>	Tests multi-class classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DynamicRnnEstimatorTest <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator_test.py#L126'>GetColumnsToTensors</a>()</tt>	Get columns_to_tensors matching setup(), in the current default graph.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DynamicRnnEstimatorTest <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator_test.py#L148'>GetClassificationTargetsOrNone</a>(mode)</tt>	Get targets matching setup() and mode in the current default graph.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DynamicRnnEstimatorTest <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator_test.py#L248'>_GetModelFnOpsForMode</a>(mode)</tt>	Helper for testgetdynamicrnnmodelfn{train eval infer}().
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DynamicRnnEstimatorTest <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator_test.py#L309'>testStateTupleDictConversion</a>()</tt>	Test state_tuple_to_dict and dict_to_state_tuple.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DynamicRnnEstimatorTest <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator_test.py#L355'>testMultiRNNState</a>()</tt>	Test that state flattening/reconstruction works for multirnncell.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DynamicRnnEstimatorTest <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator_test.py#L413'>testMultipleRuns</a>()</tt>	Tests resuming training by feeding state.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DynamicRNNEstimatorLearningTest <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator_test.py#L506'>testLearnSineFunction</a>()</tt>	Tests learning a sine function.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DynamicRNNEstimatorLearningTest <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator_test.py#L564'>testLearnShiftByOne</a>()</tt>	Tests that learning a 'shift-by-one' example.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DynamicRNNEstimatorLearningTest <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator_test.py#L641'>testLearnMean</a>()</tt>	Test learning to calculate a mean.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DynamicRNNEstimatorLearningTest <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator_test.py#L703'>testLearnMajority</a>()</tt>	Test learning the 'majority' function.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/estimator_input_test.py#L136'>linear_model_fn_with_model_fn_ops</a>(features,labels,mode)</tt>	Same as linear_model_fn but returns modelfnops.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.EstimatorTest <a href=' /contrib/learn/python/learn/estimators/estimator_test.py#L792'>testWithModelFnOps</a>()</tt>	Test for model_fn that returns modelfnops.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/state_saving_rnn_estimator.py#L41'>construct_state_saving_rnn</a>(cell,inputs,num_label_columns,state_saver)</tt>	Build a state saving rnn and apply a fully connected layer.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator.py#L303'>_multi_value_loss</a>(activations,labels,sequence_length,target_column)</tt>	Maps activations from the rnn to loss for multi value models.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/state_saving_rnn_estimator.py#L111'>_get_name_or_parent_names</a>(column)</tt>	Gets the name of a column or its parent columns' names.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/state_saving_rnn_estimator.py#L128'>_prepare_features_for_sqss</a>(features,labels,mode,sequence_feature_columns)</tt>	Prepares features for batching by the sqss.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/state_saving_rnn_estimator.py#L188'>_get_state_names</a>(cell)</tt>	Gets the state names for an rnncell.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/state_saving_rnn_estimator.py#L221'>_get_initial_states</a>(cell)</tt>	Gets the initial state of the rnncell used in the rnn.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/state_saving_rnn_estimator.py#L236'>_read_batch</a>(cell,features,labels,mode)</tt>	Reads a batch from a state saving sequence queue.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator.py#L46'>_get_state_name</a>(i)</tt>	Constructs the name string for state component i.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator.py#L51'>state_tuple_to_dict</a>(state)</tt>	Returns a dict containing flattened state.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/state_saving_rnn_estimator.py#L329'>_prepare_inputs_for_rnn</a>(sequence_features,context_features,sequence_feature_columns,num_unroll)</tt>	Prepares features batched by the sqss for input to a state-saving rnn.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/state_saving_rnn_estimator.py#L382'>_get_rnn_model_fn</a>(cell_type,target_column,problem_type,optimizer)</tt>	Creates a state saving rnn model function for an estimator.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.StateSavingRnnEstimator <a href=' /contrib/learn/python/learn/estimators/state_saving_rnn_estimator.py#L533'>__init__</a>(problem_type,num_unroll,batch_size,sequence_feature_columns)</tt>	Initializes a statesavingrnnestimator.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L78'>testTrain</a>()</tt>	Tests that loss goes down with training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L102'>testJointTrain</a>()</tt>	Tests that loss goes down with training with joint weights.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L128'>testMultiClass_MatrixData</a>()</tt>	Tests multi-class classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L141'>testMultiClass_MatrixData_Labels1D</a>()</tt>	Same as the last test but labels shape is [150] instead of [150 1].
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L162'>testMultiClass_NpMatrixData</a>()</tt>	Tests multi-class classification using numpy matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L175'>testMultiClassLabelKeys</a>()</tt>	Tests n_classes > 2 with label_keys vocabulary for labels.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L218'>testLogisticRegression_MatrixData</a>()</tt>	Tests binary classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L238'>testLogisticRegression_MatrixData_Labels1D</a>()</tt>	Same as the last test but labels shape is [100] instead of [100 1].
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L258'>testLogisticRegression_NpMatrixData</a>()</tt>	Tests binary classification using numpy matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L270'>testWeightAndBiasNames</a>()</tt>	Tests that weight and bias names haven't changed.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L288'>testCustomOptimizerByObject</a>()</tt>	Tests multi-class classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L303'>testCustomOptimizerByString</a>()</tt>	Tests multi-class classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L319'>testCustomOptimizerByFunction</a>()</tt>	Tests multi-class classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L332'>testCustomMetrics</a>()</tt>	Tests custom evaluation metrics.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L415'>testLogisticFractionalLabels</a>()</tt>	Tests logistic training with fractional labels.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L439'>testTrainWithPartitionedVariables</a>()</tt>	Tests training with partitioned variables.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L479'>testTrainSaveLoad</a>()</tt>	Tests that insures you can save and reload a trained model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L520'>testWeightColumn</a>()</tt>	Tests training with given weight column.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L571'>testWeightColumnLoss</a>()</tt>	Test ensures that you can specify per-example weights for loss.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L595'>testExport</a>()</tt>	Tests that export model for servo works.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L617'>testDisableCenteredBias</a>()</tt>	Tests that we can disable centered bias.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L638'>testEnableCenteredBias</a>()</tt>	Tests that we can enable centered bias.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L660'>testTrainOptimizerWithL1Reg</a>()</tt>	Tests l1 regularized model has higher loss.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L685'>testTrainWithMissingFeature</a>()</tt>	Tests that training works with missing features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L704'>testSdcaOptimizerRealValuedFeatures</a>()</tt>	Tests linearclasssifier with sdcaoptimizer and real valued features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L727'>testSdcaOptimizerRealValuedFeatureWithHigherDimension</a>()</tt>	Tests sdcaoptimizer with real valued features of higher dimension.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L751'>testSdcaOptimizerBucketizedFeatures</a>()</tt>	Tests linearclasssifier with sdcaoptimizer and bucketized features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L777'>testSdcaOptimizerSparseFeatures</a>()</tt>	Tests linearclasssifier with sdcaoptimizer and sparse features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L808'>testSdcaOptimizerWeightedSparseFeatures</a>()</tt>	Linearclasssifier with sdcaoptimizer and weighted sparse features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L839'>testSdcaOptimizerCrossedFeatures</a>()</tt>	Tests linearclasssifier with sdcaoptimizer and crossed features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L872'>testSdcaOptimizerMixedFeatures</a>()</tt>	Tests linearclasssifier with sdcaoptimizer and a mix of features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifierTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L910'>testEval</a>()</tt>	Tests that eval produces correct metrics.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L956'>testRegression</a>()</tt>	Tests that loss goes down with training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L981'>testRegression_MatrixData</a>()</tt>	Tests regression using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L997'>testRegression_TensorData</a>()</tt>	Tests regression using tensor data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1030'>testLoss</a>()</tt>	Tests loss calculation.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1049'>testLossWithWeights</a>()</tt>	Tests loss calculation with weights.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1083'>testTrainWithWeights</a>()</tt>	Tests training with given weight column.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1119'>testPredict_AsIterableFalse</a>()</tt>	Tests predict method with as_iterable=false.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1157'>testPredict_AsIterable</a>()</tt>	Tests predict method with as_iterable=true.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1199'>testCustomMetrics</a>()</tt>	Tests custom evaluation metrics.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1276'>testTrainSaveLoad</a>()</tt>	Tests that insures you can save and reload a trained model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1316'>testTrainWithPartitionedVariables</a>()</tt>	Tests training with partitioned variables.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1363'>testDisableCenteredBias</a>()</tt>	Tests that we can disable centered bias.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1418'>testSdcaOptimizerRealValuedLinearFeatures</a>()</tt>	Tests linearregressor with sdcaoptimizer and real valued features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1446'>testSdcaOptimizerMixedFeaturesArbitraryWeights</a>()</tt>	Tests linearregressor with sdcaoptimizer and a mix of features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1484'>testSdcaOptimizerSparseFeaturesWithL1Reg</a>()</tt>	Tests linearclasssifier with sdcaoptimizer and sparse features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1556'>testSdcaOptimizerBiasOnly</a>()</tt>	Tests linearclasssifier with sdcaoptimizer and validates bias weight.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1589'>testSdcaOptimizerBiasAndOtherColumns</a>()</tt>	Tests linearclasssifier with sdcaoptimizer and validates bias weight.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1651'>testSdcaOptimizerBiasAndOtherColumnsFabricatedCentered</a>()</tt>	Tests linearclasssifier with sdcaoptimizer and validates bias weight.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearEstimatorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1721'>testLinearRegression</a>()</tt>	Tests that loss goes down with training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearEstimatorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1747'>testPoissonRegression</a>()</tt>	Tests that loss goes down with training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearEstimatorTest <a href=' /contrib/learn/python/learn/estimators/linear_test.py#L1775'>testSDCANotSupported</a>()</tt>	Tests that we detect error for sdca.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L85'>_linear_learning_rate</a>(num_linear_feature_columns)</tt>	Returns the default learning rate of the linear model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L116'>_extract_embedding_lr_multipliers</a>(embedding_lr_multipliers,collection_key,input_layer_scope)</tt>	Converts embedding lr multipliers to variable based gradient multiplier.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L136'>_dnn_linear_combined_model_fn</a>(features,labels,mode,params)</tt>	Deep neural net and linear combined model_fn.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedEstimator <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L372'>__init__</a>(head,model_dir,linear_feature_columns,linear_optimizer)</tt>	Initializes a dnnlinearcombinedestimator instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifier <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L553'>__init__</a>(model_dir,n_classes,weight_column_name,linear_feature_columns)</tt>	Constructs a dnnlinearcombinedclassifier instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifier <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L680'>predict</a>(x,input_fn,batch_size,outputs)</tt>	Returns predictions for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifier <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L724'>predict_classes</a>(x,input_fn,batch_size,as_iterable)</tt>	Returns predicted classes for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifier <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L756'>predict_proba</a>(x,input_fn,batch_size,as_iterable)</tt>	Returns prediction probabilities for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifier <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L787'>export</a>(export_dir,input_fn,input_feature_key,use_deprecated_input_fn)</tt>	See basestimator export.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressor <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L875'>__init__</a>(model_dir,weight_column_name,linear_feature_columns,linear_optimizer)</tt>	Initializes a dnnlinearcombinedregressor instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressor <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L996'>evaluate</a>(x,y,input_fn,feed_fn)</tt>	See evaluable evaluable.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressor <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L1030'>predict</a>(x,input_fn,batch_size,outputs)</tt>	Returns predictions for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressor <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L1074'>predict_scores</a>(x,input_fn,batch_size,as_iterable)</tt>	Returns predicted scores for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressor <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined.py#L1106'>export</a>(export_dir,input_fn,input_feature_key,use_deprecated_input_fn)</tt>	See baseestimator export.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.TensorSignature <a href=' /contrib/learn/python/learn/estimators/tensor_signature.py#L61'>is_compatible_with</a>(other)</tt>	Returns true if signatures are compatible.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/tensor_signature.py#L103'>tensors_compatible</a>(tensors,signatures)</tt>	Check that tensors are compatible with signatures.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/tensor_signature.py#L134'>create_signatures</a>(tensors)</tt>	Creates tensorsignature objects for given tensors.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/tensor_signature.py#L151'>create_placeholders_from_signatures</a>(signatures)</tt>	Creates placeholders from given signatures.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/tensor_signature.py#L170'>create_example_parser_from_signatures</a>(signatures,examples_batch,single_feature_name)</tt>	Creates example parser from given signatures.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator.py#L74'>dict_to_state_tuple</a>(input_dict,cell)</tt>	Reconstructs nested state from a dict containing state tensors.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator.py#L118'>_concatenate_context_input</a>(sequence_input,context_input)</tt>	Replicates context_input accross all timesteps of sequence_input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator.py#L167'>build_sequence_input</a>(features,sequence_feature_columns,context_feature_columns,weight_collections)</tt>	Combine sequence and context features into input for an rnn.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator.py#L209'>construct_rnn</a>(initial_state,sequence_input,cell,num_label_columns)</tt>	Build an rnn and apply a fully connected layer to get the desired output.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator.py#L256'>_single_value_predictions</a>(activations,sequence_length,target_column,problem_type)</tt>	Maps activations from the rnn to predictions for single value models.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator.py#L326'>_single_value_loss</a>(activations,labels,sequence_length,target_column)</tt>	Maps activations from the rnn to loss for multi value models.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator.py#L350'>_get_output_alternatives</a>(prediction_type,problem_type,prediction_dict)</tt>	Constructs output alternatives dict for modelfnops.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator.py#L380'>_get_dynamic_rnn_model_fn</a>(cell_type,num_units,target_column,problem_type)</tt>	Creates an rnn model function for an estimator.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DynamicRnnEstimator <a href=' /contrib/learn/python/learn/estimators/dynamic_rnn_estimator.py#L545'>__init__</a>(problem_type,prediction_type,sequence_feature_columns,context_feature_columns)</tt>	Initializes a dynamicrnnestimator.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/linear.py#L70'>_add_bias_column</a>(feature_columns,columns_to_tensors,bias_variable,columns_to_variables)</tt>	Adds a fake bias feature column filled with all 1s.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/linear.py#L102'>_linear_model_fn</a>(features,labels,mode,params)</tt>	A model_fn for linear models that use a gradient-based optimizer.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/linear.py#L180'>sdca_model_fn</a>(features,labels,mode,params)</tt>	A model_fn for linear models that use the sdca optimizer.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._SdcaUpdateWeightsHook <a href=' /contrib/learn/python/learn/estimators/linear.py#L284'>begin</a>()</tt>	Construct the update_weights op.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._SdcaUpdateWeightsHook <a href=' /contrib/learn/python/learn/estimators/linear.py#L291'>before_run</a>(run_context)</tt>	Return the update_weights op so that it is executed during this run.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifier <a href=' /contrib/learn/python/learn/estimators/linear.py#L381'>__init__</a>(feature_columns,model_dir,n_classes,weight_column_name)</tt>	Construct a linearclassifier estimator object.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifier <a href=' /contrib/learn/python/learn/estimators/linear.py#L485'>predict</a>(x,input_fn,batch_size,outputs)</tt>	Returns predictions for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifier <a href=' /contrib/learn/python/learn/estimators/linear.py#L529'>predict_classes</a>(x,input_fn,batch_size,as_iterable)</tt>	Returns predicted classes for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifier <a href=' /contrib/learn/python/learn/estimators/linear.py#L561'>predict_proba</a>(x,input_fn,batch_size,as_iterable)</tt>	Returns predicted probabilities for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearClassifier <a href=' /contrib/learn/python/learn/estimators/linear.py#L592'>export</a>(export_dir,input_fn,input_feature_key,use_deprecated_input_fn)</tt>	See baseestimator export.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressor <a href=' /contrib/learn/python/learn/estimators/linear.py#L660'>__init__</a>(feature_columns,model_dir,weight_column_name,optimizer)</tt>	Construct a linearregressor estimator object.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressor <a href=' /contrib/learn/python/learn/estimators/linear.py#L752'>predict</a>(x,input_fn,batch_size,outputs)</tt>	Returns predictions for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressor <a href=' /contrib/learn/python/learn/estimators/linear.py#L796'>predict_scores</a>(x,input_fn,batch_size,as_iterable)</tt>	Returns predicted scores for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearRegressor <a href=' /contrib/learn/python/learn/estimators/linear.py#L828'>export</a>(export_dir,input_fn,input_feature_key,use_deprecated_input_fn)</tt>	See baseestimator export.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearEstimator <a href=' /contrib/learn/python/learn/estimators/linear.py#L897'>__init__</a>(feature_columns,head,model_dir,weight_column_name)</tt>	Construct a linearestimator object.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.SVMTest <a href=' /contrib/learn/python/learn/estimators/svm_test.py#L30'>testRealValuedFeaturesPerfectlySeparable</a>()</tt>	Tests svm classifier with real valued features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.SVMTest <a href=' /contrib/learn/python/learn/estimators/svm_test.py#L56'>testRealValuedFeaturesWithL2Regularization</a>()</tt>	Tests svm classifier with real valued features and l2 regularization.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.SVMTest <a href=' /contrib/learn/python/learn/estimators/svm_test.py#L84'>testMultiDimensionalRealValuedFeaturesWithL2Regularization</a>()</tt>	Tests svm with multi-dimensional real features and l2 regularization.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.SVMTest <a href=' /contrib/learn/python/learn/estimators/svm_test.py#L111'>testRealValuedFeaturesWithMildL1Regularization</a>()</tt>	Tests svm classifier with real valued features and l2 regularization.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.SVMTest <a href=' /contrib/learn/python/learn/estimators/svm_test.py#L139'>testRealValuedFeaturesWithBigL1Regularization</a>()</tt>	Tests svm classifier with real valued features and l2 regularization.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.SVMTest <a href=' /contrib/learn/python/learn/estimators/svm_test.py#L167'>testSparseFeatures</a>()</tt>	Tests svm classifier with hashed sparse features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.SVMTest <a href=' /contrib/learn/python/learn/estimators/svm_test.py#L194'>testBucketizedFeatures</a>()</tt>	Tests svm classifier with bucketized features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.SVMTest <a href=' /contrib/learn/python/learn/estimators/svm_test.py#L218'>testMixedFeatures</a>()</tt>	Tests svm classifier with a mix of features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierBenchmark <a href=' /contrib/learn/python/learn/estimators/dnn_benchmark_test.py#L235'>benchmarkMultiClassMatrixData</a>()</tt>	Tests multi-class classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNEstimatorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L150'>testTrainWithWeights</a>()</tt>	Tests training with given weight column.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L263'>testLogisticRegression_MatrixData</a>()</tt>	Tests binary classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L278'>testLogisticRegression_MatrixData_Labels1D</a>()</tt>	Same as the last test but label shape is [100] instead of [100 1].
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L300'>testLogisticRegression_NpMatrixData</a>()</tt>	Tests binary classification using numpy matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L328'>testLogisticRegression_TensorData</a>()</tt>	Tests binary classification using tensor data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L374'>testLogisticRegression_FloatLabel</a>()</tt>	Tests binary classification with float labels.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L423'>testMultiClass_MatrixData</a>()</tt>	Tests multi-class classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L439'>testMultiClass_MatrixData_Labels1D</a>()</tt>	Same as the last test but label shape is [150] instead of [150 1].
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L462'>testMultiClass_NpMatrixData</a>()</tt>	Tests multi-class classification using numpy matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L478'>testMultiClassLabelKeys</a>()</tt>	Tests n_classes > 2 with label_keys vocabulary for labels.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L532'>testLoss</a>()</tt>	Tests loss calculation.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L552'>testLossWithWeights</a>()</tt>	Tests loss calculation with weights.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L587'>testTrainWithWeights</a>()</tt>	Tests training with given weight column.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L622'>testPredict_AsIterableFalse</a>()</tt>	Tests predict and predict_prob methods with as_iterable=false.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L668'>testPredict_AsIterable</a>()</tt>	Tests predict and predict_prob methods with as_iterable=true.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L720'>testCustomMetrics</a>()</tt>	Tests custom evaluation metrics.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L789'>testTrainSaveLoad</a>()</tt>	Tests that insures you can save and reload a trained model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L836'>testTrainWithPartitionedVariables</a>()</tt>	Tests training with partitioned variables.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L887'>testExport</a>()</tt>	Tests export model for servo.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L913'>testEnableCenteredBias</a>()</tt>	Tests that we can enable centered bias.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L932'>testDisableCenteredBias</a>()</tt>	Tests that we can disable centered bias.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L968'>testRegression_MatrixData</a>()</tt>	Tests regression using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L982'>testRegression_MatrixData_Labels1D</a>()</tt>	Same as the last test but label shape is [100] instead of [100 1].
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L1004'>testRegression_NpMatrixData</a>()</tt>	Tests binary classification using numpy matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L1019'>testRegression_TensorData</a>()</tt>	Tests regression using tensor data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L1055'>testLoss</a>()</tt>	Tests loss calculation.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L1074'>testLossWithWeights</a>()</tt>	Tests loss calculation with weights.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L1108'>testTrainWithWeights</a>()</tt>	Tests training with given weight column.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L1143'>testPredict_AsIterableFalse</a>()</tt>	Tests predict method with as_iterable=false.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L1185'>testPredict_AsIterable</a>()</tt>	Tests predict method with as_iterable=true.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L1230'>testCustomMetrics</a>()</tt>	Tests custom evaluation metrics.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L1291'>testCustomMetricsWithMetricSpec</a>()</tt>	Tests custom evaluation metrics that use metricspec.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L1349'>testTrainSaveLoad</a>()</tt>	Tests that insures you can save and reload a trained model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L1395'>testTrainWithPartitionedVariables</a>()</tt>	Tests training with partitioned variables.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L1444'>testEnableCenteredBias</a>()</tt>	Tests that we can enable centered bias.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_test.py#L1483'>testDisableCenteredBias</a>()</tt>	Tests that we can disable centered bias.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedEstimatorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L205'>testCheckCallsHead</a>()</tt>	Tests binary classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L354'>testLogisticRegression_MatrixData</a>()</tt>	Tests binary classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L374'>testLogisticRegression_TensorData</a>()</tt>	Tests binary classification using tensor data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L423'>testTrainWithPartitionedVariables</a>()</tt>	Tests training with partitioned variables.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L471'>testMultiClass</a>()</tt>	Tests multi-class classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L496'>testMultiClassLabelKeys</a>()</tt>	Tests n_classes > 2 with label_keys vocabulary for labels.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L549'>testLoss</a>()</tt>	Tests loss calculation.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L571'>testLossWithWeights</a>()</tt>	Tests loss calculation with weights.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L607'>testTrainWithWeights</a>()</tt>	Tests training with given weight column.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L642'>testCustomOptimizerByObject</a>()</tt>	Tests binary classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L664'>testCustomOptimizerByString</a>()</tt>	Tests binary classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L686'>testCustomOptimizerByFunction</a>()</tt>	Tests binary classification using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L717'>testPredict</a>()</tt>	Tests weight column in evaluation.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L745'>testCustomMetrics</a>()</tt>	Tests custom evaluation metrics.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L831'>testVariableQuery</a>()</tt>	Tests get_variable_names and get_variable_value.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L851'>testExport</a>()</tt>	Tests export model for servo.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L891'>testCenteredBias</a>()</tt>	Tests bias is centered or not.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L916'>testDisableCenteredBias</a>()</tt>	Tests bias is centered or not.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L934'>testGlobalStepLinearOnly</a>()</tt>	Tests global step update for linear-only model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L955'>testGlobalStepDNNOnly</a>()</tt>	Tests global step update for dnn-only model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L976'>testGlobalStepDNNLinearCombinedBug</a>()</tt>	Tests global step update for dnn-linear combined model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1002'>testGlobalStepDNNLinearCombinedBugFixed</a>()</tt>	Tests global step update for dnn-linear combined model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1027'>testLinearOnly</a>()</tt>	Tests that linear-only instantiation works.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1061'>testLinearOnlyOneFeature</a>()</tt>	Tests that linear-only instantiation works for one feature only.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1091'>testDNNOnly</a>()</tt>	Tests that dnn-only instantiation works.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedClassifierTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1111'>testDNNWeightsBiasesNames</a>()</tt>	Tests the names of dnn weights and biases in the checkpoints.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1153'>testRegression_MatrixData</a>()</tt>	Tests regression using matrix data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1168'>testRegression_TensorData</a>()</tt>	Tests regression using tensor data as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1186'>testLoss</a>()</tt>	Tests loss calculation.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1207'>testLossWithWeights</a>()</tt>	Tests loss calculation with weights.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1243'>testTrainWithWeights</a>()</tt>	Tests training with given weight column.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1281'>testPredict_AsIterableFalse</a>()</tt>	Tests predict method with as_iterable=false.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1320'>testPredict_AsIterable</a>()</tt>	Tests predict method with as_iterable=true.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1360'>testCustomMetrics</a>()</tt>	Tests custom evaluation metrics.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1422'>testCustomMetricsWithMetricSpec</a>()</tt>	Tests custom evaluation metrics.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1481'>testExport</a>()</tt>	Tests export model for servo.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1529'>testTrainSaveLoad</a>()</tt>	Tests regression with restarting training / evaluate.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1562'>testTrainWithPartitionedVariables</a>()</tt>	Tests training with partitioned variables.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1614'>testDisableCenteredBias</a>()</tt>	Tests that we can disable centered bias.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1652'>testLinearOnly</a>()</tt>	Tests linear-only instantiation and training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNLinearCombinedRegressorTest <a href=' /contrib/learn/python/learn/estimators/dnn_linear_combined_test.py#L1683'>testDNNOnly</a>()</tt>	Tests dnn-only instantiation and training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/estimator_test_utils.py#L24'>assert_estimator_contract</a>(tester,estimator_class)</tt>	Asserts whether given estimator satisfies the expected contract.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.Head <a href=' /contrib/learn/python/learn/estimators/head.py#L129'>logits_dimension</a>()</tt>	Size of the last dimension of the logits tensor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.Head <a href=' /contrib/learn/python/learn/estimators/head.py#L140'>create_model_fn_ops</a>(features,mode,labels,train_op_fn)</tt>	Returns modelfnops that a model_fn can return.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L182'>regression_head</a>(label_name,weight_column_name,label_dimension,enable_centered_bias)</tt>	Creates a head for linear regression.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L218'>poisson_regression_head</a>(label_name,weight_column_name,label_dimension,enable_centered_bias)</tt>	Creates a head for poisson regression.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L256'>multi_class_head</a>(n_classes,label_name,weight_column_name,enable_centered_bias)</tt>	Creates a head for multi class single label classification.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L337'>binary_svm_head</a>(label_name,weight_column_name,enable_centered_bias,head_name)</tt>	Creates a head for binary classification with svms.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L372'>multi_label_head</a>(n_classes,label_name,weight_column_name,enable_centered_bias)</tt>	Creates a head for multi label classification.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L432'>multi_head</a>(heads,loss_weights)</tt>	Creates a multihead stemming from same logits/hidden layer.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._SingleHead <a href=' /contrib/learn/python/learn/estimators/head.py#L502'>_create_output_alternatives</a>(predictions)</tt>	Creates output alternative for the head.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L539'>_poisson_loss</a>(labels,logits,weights)</tt>	Computes poisson loss from logits.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L556'>_logits</a>(logits_input,logits,logits_dimension)</tt>	Validate logits args and create logits if necessary.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L594'>_create_model_fn_ops</a>(features,mode,loss_fn,logits_to_predictions_fn)</tt>	Returns a modelfnops object.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._RegressionHead <a href=' /contrib/learn/python/learn/estimators/head.py#L647'>__init__</a>(label_dimension,loss_fn,link_fn,label_name)</tt>	Head for regression.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._RegressionHead <a href=' /contrib/learn/python/learn/estimators/head.py#L717'>_transform_labels</a>(mode,labels)</tt>	Applies transformations to labels tensor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._RegressionHead <a href=' /contrib/learn/python/learn/estimators/head.py#L725'>_logits_to_predictions</a>(logits)</tt>	Returns a dict of predictions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._RegressionHead <a href=' /contrib/learn/python/learn/estimators/head.py#L740'>_metrics</a>(eval_loss,predictions,labels,weights)</tt>	Returns a dict of metrics keyed by name.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._BinaryLogisticHead <a href=' /contrib/learn/python/learn/estimators/head.py#L770'>__init__</a>(label_name,weight_column_name,enable_centered_bias,head_name)</tt>	Head for binary classification with logistic regression.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._BinaryLogisticHead <a href=' /contrib/learn/python/learn/estimators/head.py#L839'>_transform_labels</a>(mode,labels)</tt>	Applies transformations to labels tensor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._BinaryLogisticHead <a href=' /contrib/learn/python/learn/estimators/head.py#L847'>_logits_to_predictions</a>(logits)</tt>	Returns a dict of predictions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._BinaryLogisticHead <a href=' /contrib/learn/python/learn/estimators/head.py#L875'>_metrics</a>(eval_loss,predictions,labels,weights)</tt>	Returns a dict of metrics keyed by name.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiClassHead <a href=' /contrib/learn/python/learn/estimators/head.py#L950'>__init__</a>(n_classes,label_name,weight_column_name,enable_centered_bias)</tt>	'head' for multi class classification.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiClassHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1044'>_transform_labels</a>(mode,labels)</tt>	Returns a dict that contains both the original labels and label ids.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiClassHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1063'>_labels</a>(labels_dict)</tt>	Returns labels tensor of the same type as classes.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiClassHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1067'>_label_ids</a>(labels_dict)</tt>	Returns integer label id tensor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiClassHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1074'>_logits_to_predictions</a>(logits)</tt>	Returns a dict of predictions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiClassHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1101'>_metrics</a>(eval_loss,predictions,labels,weights)</tt>	Returns a dict of metrics keyed by name.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L1140'>_to_labels_tensor</a>(labels,label_name)</tt>	Returns label as a tensor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L1154'>_check_no_sparse_tensor</a>(x)</tt>	Raises valueerror if the given tensor is sparsetensor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L1160'>_sparse_labels_to_indicator</a>(labels,num_classes)</tt>	If labels is sparsetensor, converts it to indicator tensor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._BinarySvmHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1243'>_transform_labels</a>(mode,labels)</tt>	Applies transformations to labels tensor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiLabelHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1343'>_transform_labels</a>(mode,labels)</tt>	Applies transformations to labels tensor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiLabelHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1367'>_metrics</a>(eval_loss,predictions,labels,weights)</tt>	Returns a dict of metrics keyed by name.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1449'>__init__</a>(heads,loss_merger)</tt>	_head to merges multiple _head objects.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1473'>create_model_fn_ops</a>(features,mode,labels,train_op_fn)</tt>	See _head create_model_fn_ops.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1553'>_split_logits</a>(logits)</tt>	Splits logits for heads.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1572'>_merge_train</a>(all_model_fn_ops,train_op_fn)</tt>	Merges list of modelfnops for training.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1597'>_merge_infer</a>(all_model_fn_ops)</tt>	Merges list of modelfnops for inference.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._MultiHead <a href=' /contrib/learn/python/learn/estimators/head.py#L1619'>_merge_eval</a>(all_model_fn_ops)</tt>	Merges list of modelfnops for eval.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L1648'>_weight_tensor</a>(features,weight_column_name)</tt>	Returns weights as 1d tensor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L1659'>_compute_weighted_loss</a>(loss_unweighted,weight,name)</tt>	Returns a tuple of (loss_train loss_report).
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L1708'>_check_mode_valid</a>(mode)</tt>	Raises valueerror if the given mode is invalid.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L1715'>_get_arguments</a>(func)</tt>	Returns a spec of given func.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L1736'>_centered_bias</a>(logits_dimension,head_name)</tt>	Returns centered_bias variable.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L1767'>_centered_bias_step</a>(centered_bias,batch_size,labels,loss_fn)</tt>	Creates and returns training op for centered bias.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L1787'>_train_op</a>(loss,labels,train_op_fn,centered_bias)</tt>	Returns op for the training step.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L1895'>_assert_class_id</a>(class_id,num_classes)</tt>	Average label value for class class_id.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/head.py#L1927'>_classification_output_alternatives</a>(head_name,problem_type,label_keys)</tt>	Creates a func to generate output alternatives for classification.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LogisticRegressorTest <a href=' /contrib/learn/python/learn/estimators/logistic_regressor_test.py#L66'>test_fit_and_evaluate_metrics</a>()</tt>	Tests basic fit and evaluate and checks the evaluation metrics.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/rnn_common.py#L56'>_get_single_cell</a>(cell_type,num_units)</tt>	Constructs and return a single rnncell.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/rnn_common.py#L76'>construct_rnn_cell</a>(num_units,cell_type,dropout_keep_probabilities)</tt>	Constructs cells applies dropout and assembles a multirnncell.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/rnn_common.py#L105'>apply_dropout</a>(cells,dropout_keep_probabilities,random_seed)</tt>	Applies dropout to the outputs and inputs of cell.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/rnn_common.py#L135'>get_eval_metric_ops</a>(problem_type,prediction_type,sequence_length,prediction_dict)</tt>	Returns eval metric ops for given problem_type and prediction_type.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/rnn_common.py#L177'>select_last_activations</a>(activations,sequence_lengths)</tt>	Selects the nth set of activations for each n in sequence_length.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/rnn_common.py#L207'>mask_activations_and_labels</a>(activations,labels,sequence_lengths)</tt>	Remove entries outside sequence_lengths and returned flattened results.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/rnn_common.py#L243'>multi_value_predictions</a>(activations,target_column,problem_type,predict_probabilities)</tt>	Maps activations from the rnn to predictions for multi value models.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.ModelFnOps <a href=' /contrib/learn/python/learn/estimators/model_fn.py#L70'>__new__</a>(cls,mode,predictions,loss)</tt>	Creates a validated modelfnops instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.ModelFnOps <a href=' /contrib/learn/python/learn/estimators/model_fn.py#L196'>estimator_spec</a>(default_serving_output_alternative_key)</tt>	Creates an equivalent estimatorspec.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/estimator.py#L91'>_verify_input_args</a>(x,y,input_fn,feed_fn)</tt>	Verifies validity of co-existance of input arguments.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/estimator.py#L110'>_get_input_fn</a>(x,y,input_fn,feed_fn)</tt>	Make inputs into input and feed functions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/estimator.py#L141'>infer_real_valued_columns_from_input_fn</a>(input_fn)</tt>	Creates featurecolumn objects for inputs defined by input_fn.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/estimator.py#L161'>infer_real_valued_columns_from_input</a>(x)</tt>	Creates featurecolumn objects for inputs defined by input x.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/estimator.py#L178'>_model_fn_args</a>(fn)</tt>	Get argument names for function-like object.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/estimator.py#L201'>_get_replica_device_setter</a>(config)</tt>	Creates a replica device setter if required.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/estimator.py#L228'>_make_metrics_ops</a>(metrics,features,labels,predictions)</tt>	Add metrics based on features, labels, and predictions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/estimator.py#L305'>_dict_to_str</a>(dictionary)</tt>	Get a str representation of a dict.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/estimator.py#L317'>_write_dict_to_summary</a>(output_dir,dictionary,current_global_step)</tt>	Writes a dict into summary file in given output directory.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.BaseEstimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L359'>__init__</a>(model_dir,config)</tt>	Initializes a baseestimator instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.BaseEstimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L453'>partial_fit</a>(x,y,input_fn,steps)</tt>	Incremental fit on a batch of samples.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.BaseEstimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L543'>predict</a>(x,input_fn,batch_size,outputs)</tt>	Returns predictions for given features.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.BaseEstimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L586'>get_variable_value</a>(name)</tt>	Returns value of the variable given by name.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.BaseEstimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L597'>get_variable_names</a>()</tt>	Returns list of all variable names in this model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.BaseEstimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L609'>export</a>(export_dir,input_fn,input_feature_key,use_deprecated_input_fn)</tt>	Exports inference graph into given dir.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.BaseEstimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L669'>_get_train_ops</a>(features,labels)</tt>	Method that builds model graph and returns trainer ops.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.BaseEstimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L684'>_get_predict_ops</a>(features)</tt>	Method that builds model graph and returns prediction ops.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.BaseEstimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L696'>_get_eval_ops</a>(features,labels,metrics)</tt>	Method that builds model graph and returns evaluation ops.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.BaseEstimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L718'>_get_feature_ops_from_example</a>(examples_batch)</tt>	Returns feature parser for given example batch using features info.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.BaseEstimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L767'>_extract_metric_update_ops</a>(eval_dict)</tt>	Separate update operations from metric value operations.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.Estimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L1014'>__init__</a>(model_fn,model_dir,config,params)</tt>	Constructs an estimator instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.Estimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L1100'>_call_model_fn</a>(features,labels,mode)</tt>	Calls model function with support of 2 3 or 4 arguments.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.Estimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L1141'>_get_train_ops</a>(features,labels)</tt>	Method that builds model graph and returns trainer ops.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.Estimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L1157'>_get_eval_ops</a>(features,labels,metrics)</tt>	Method that builds model graph and returns evaluation ops.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.Estimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L1196'>_get_predict_ops</a>(features)</tt>	Method that builds model graph and returns prediction ops.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.Estimator <a href=' /contrib/learn/python/learn/estimators/estimator.py#L1213'>export_savedmodel</a>(export_dir_base,serving_input_fn,default_output_alternative_key,assets_extra)</tt>	Exports inference graph as a savedmodel into given dir.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._ComposableModel <a href=' /contrib/learn/python/learn/estimators/composable_model.py#L49'>__init__</a>(num_label_columns,optimizer,gradient_clip_norm,num_ps_replicas)</tt>	Common initialization for all _composablemodel objects.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._ComposableModel <a href=' /contrib/learn/python/learn/estimators/composable_model.py#L79'>get_scope_name</a>()</tt>	Returns the scope name used by this model for variables.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._ComposableModel <a href=' /contrib/learn/python/learn/estimators/composable_model.py#L83'>build_model</a>(features,feature_columns,is_training)</tt>	Builds the model that can calculate the logits.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators._ComposableModel <a href=' /contrib/learn/python/learn/estimators/composable_model.py#L98'>get_train_step</a>(loss)</tt>	Returns the ops to run to perform a training step on this estimator.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearComposableModel <a href=' /contrib/learn/python/learn/estimators/composable_model.py#L148'>__init__</a>(num_label_columns,optimizer,_joint_weights,gradient_clip_norm)</tt>	Initializes linearcomposablemodel objects.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearComposableModel <a href=' /contrib/learn/python/learn/estimators/composable_model.py#L185'>get_weights</a>(model_dir)</tt>	Returns weights per feature of the linear part.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearComposableModel <a href=' /contrib/learn/python/learn/estimators/composable_model.py#L206'>get_bias</a>(model_dir)</tt>	Returns bias of the model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.LinearComposableModel <a href=' /contrib/learn/python/learn/estimators/composable_model.py#L217'>build_model</a>(features,feature_columns,is_training)</tt>	See base class.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNComposableModel <a href=' /contrib/learn/python/learn/estimators/composable_model.py#L259'>__init__</a>(num_label_columns,hidden_units,optimizer,activation_fn)</tt>	Initializes dnncomposablemodel objects.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNComposableModel <a href=' /contrib/learn/python/learn/estimators/composable_model.py#L303'>get_weights</a>(model_dir)</tt>	Returns the weights of the model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNComposableModel <a href=' /contrib/learn/python/learn/estimators/composable_model.py#L319'>get_bias</a>(model_dir)</tt>	Returns the bias of the model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.DNNComposableModel <a href=' /contrib/learn/python/learn/estimators/composable_model.py#L340'>build_model</a>(features,feature_columns,is_training)</tt>	See base class.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.ClusterConfig <a href=' /contrib/learn/python/learn/estimators/run_config.py#L191'>get_task_id</a>()</tt>	Returns task index from tf_config environmental variable.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.RunConfig <a href=' /contrib/learn/python/learn/estimators/run_config.py#L299'>replace</a>()</tt>	Returns a new instance of runconfig replacing specified properties.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.RunConfig <a href=' /contrib/learn/python/learn/estimators/run_config.py#L328'>uid</a>(whitelist)</tt>	Generates a 'unique identifier' based on all internal fields.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/run_config.py#L398'>_count_ps</a>(cluster_spec)</tt>	Counts the number of parameter servers in cluster_spec.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/run_config.py#L403'>_count_worker</a>(cluster_spec)</tt>	Counts the number of workers in cluster_spec.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/run_config.py#L408'>_get_master</a>(cluster_spec,task_type,task_id)</tt>	Returns the appropriate string for the tensorflow master.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators. <a href=' /contrib/learn/python/learn/estimators/run_config.py#L442'>_get_model_dir</a>(model_dir)</tt>	Returns model_dir based user provided model_dir or tf_config.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.StateSavingRnnEstimatorTest <a href=' /contrib/learn/python/learn/estimators/state_saving_rnn_estimator_test.py#L325'>_getModelFnOpsForMode</a>(mode)</tt>	Helper for testgetrnnmodelfn{train eval infer}().
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.StateSavingRNNEstimatorLearningTest <a href=' /contrib/learn/python/learn/estimators/state_saving_rnn_estimator_test.py#L462'>testLearnSineFunction</a>()</tt>	Tests learning a sine function.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.StateSavingRNNEstimatorLearningTest <a href=' /contrib/learn/python/learn/estimators/state_saving_rnn_estimator_test.py#L517'>testLearnShiftByOne</a>()</tt>	Tests that learning a 'shift-by-one' example.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.estimators.KMeansTestBase <a href=' /contrib/learn/python/learn/estimators/kmeans_test.py#L73'>input_fn</a>(batch_size,points,randomize,num_epochs)</tt>	Returns an input_fn that randomly selects batches from given points.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets.SyntheticTest <a href=' /contrib/learn/python/learn/datasets/synthetic_test.py#L30'>test_make_dataset</a>()</tt>	Test if the synthetic routine wrapper complains about the name.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets.SyntheticTest <a href=' /contrib/learn/python/learn/datasets/synthetic_test.py#L34'>test_all_datasets_callable</a>()</tt>	Test if all methods inside the synthetic are callable.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets.SyntheticTest <a href=' /contrib/learn/python/learn/datasets/synthetic_test.py#L41'>test_circles</a>()</tt>	Test if the circles are generated correctly.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets.SyntheticTest <a href=' /contrib/learn/python/learn/datasets/synthetic_test.py#L61'>test_circles_replicable</a>()</tt>	Test if the data generation is replicable with a specified seed.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets.SyntheticTest <a href=' /contrib/learn/python/learn/datasets/synthetic_test.py#L82'>test_spirals</a>()</tt>	Test if the circles are generated correctly.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets.SyntheticTest <a href=' /contrib/learn/python/learn/datasets/synthetic_test.py#L102'>test_spirals_replicable</a>()</tt>	Test if the data generation is replicable with a specified seed.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/synthetic.py#L26'>circles</a>(n_samples,noise,seed,factor)</tt>	Create circles separated by some value args.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/synthetic.py#L88'>spirals</a>(n_samples,noise,seed,mode)</tt>	Create spirals currently only binary classification is supported for spiral generation.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/synthetic.py#L158'>_archimedes_spiral</a>(theta,theta_offset)</tt>	Return archimedes spiral.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/synthetic.py#L172'>_bernoulli_spiral</a>(theta,theta_offset)</tt>	Return equiangular (bernoulli's) spiral.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/synthetic.py#L191'>_fermat_spiral</a>(theta,theta_offset)</tt>	Return parabolic (fermat's) spiral.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/text_datasets.py#L33'>maybe_download_dbpedia</a>(data_dir)</tt>	Download if dbpedia data is not present.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/text_datasets.py#L44'>load_dbpedia</a>(size,test_with_fake_data)</tt>	Get dbpedia datasets from csv files.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/base.py#L40'>load_csv_with_header</a>(filename,target_dtype,features_dtype,target_column)</tt>	Load dataset from csv file with a header row.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/base.py#L59'>load_csv_without_header</a>(filename,target_dtype,features_dtype,target_column)</tt>	Load dataset from csv file without a header row.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/base.py#L76'>shrink_csv</a>(filename,ratio)</tt>	Create a smaller dataset of only 1/ratio of original data.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/base.py#L90'>load_iris</a>(data_path)</tt>	Load iris dataset.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/base.py#L108'>load_boston</a>(data_path)</tt>	Load boston housing dataset.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/base.py#L126'>retry</a>(initial_delay,max_delay,factor,jitter)</tt>	Simple decorator for wrapping retriable functions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/base.py#L193'>maybe_download</a>(filename,work_directory,source_url)</tt>	Download the data from source url unless it's already here.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/mnist.py#L40'>extract_images</a>(f)</tt>	Extract the images into a 4d uint8 numpy array [index y x depth].
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/mnist.py#L68'>dense_to_one_hot</a>(labels_dense,num_classes)</tt>	Convert class labels from scalars to one-hot vectors.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/mnist.py#L77'>extract_labels</a>(f,one_hot,num_classes)</tt>	Extract the labels into a 1d uint8 numpy array [index].
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets.DataSet <a href=' /contrib/learn/python/learn/datasets/mnist.py#L107'>__init__</a>(images,labels,fake_data,one_hot)</tt>	Construct a dataset.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets.DataSet <a href=' /contrib/learn/python/learn/datasets/mnist.py#L166'>next_batch</a>(batch_size,fake_data,shuffle)</tt>	Return the next batch_size examples from this data set.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/__init__.py#L54'>load_dataset</a>(name,size,test_with_fake_data)</tt>	Loads dataset by name.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.datasets. <a href=' /contrib/learn/python/learn/datasets/__init__.py#L76'>make_dataset</a>(name,n_samples,noise,seed)</tt>	Creates binary synthetic datasets args.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/input_fn_utils.py#L59'>build_parsing_serving_input_fn</a>(feature_spec,default_batch_size)</tt>	Build an input_fn appropriate for serving expecting fed tf examples.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/input_fn_utils.py#L87'>build_default_serving_input_fn</a>(features,default_batch_size)</tt>	Build an input_fn appropriate for serving expecting feature tensors.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils.SavedModelExportUtilsTest <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils_test.py#L76'>test_build_standardized_signature_def_classification</a>()</tt>	Tests classification with one output tensor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils.SavedModelExportUtilsTest <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils_test.py#L111'>test_build_standardized_signature_def_classification2</a>()</tt>	Tests multiple output tensors that include classes and probabilites.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils.SavedModelExportUtilsTest <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils_test.py#L158'>test_build_standardized_signature_def_classification3</a>()</tt>	Tests multiple output tensors that include classes and scores.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils.SavedModelExportUtilsTest <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils_test.py#L204'>test_build_standardized_signature_def_classification4</a>()</tt>	Tests classification without classes tensor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils.SavedModelExportUtilsTest <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils_test.py#L241'>test_build_standardized_signature_def_classification5</a>()</tt>	Tests multiple output tensors that include integer classes and scores.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils.SavedModelExportUtilsTest <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils_test.py#L285'>test_build_standardized_signature_def_classification6</a>()</tt>	Tests multiple output tensors that with integer classes and no scores.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils.SavedModelExportUtilsTest <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils_test.py#L535'>test_build_all_signature_defs_legacy_input_fn_not_supported</a>()</tt>	Tests that legacy input_fn returning features labels raises error.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils.SavedModelExportUtilsTest <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils_test.py#L634'>test_make_export_strategy</a>()</tt>	Only tests that an exportstrategy instance is created.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils.SavedModelExportUtilsTest <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils_test.py#L647'>test_make_parsing_export_strategy</a>()</tt>	Only tests that an exportstrategy instance is created.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils.py#L76'>build_standardized_signature_def</a>(input_tensors,output_tensors,problem_type)</tt>	Build a signaturedef using problem type and input and output tensors.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils.py#L153'>get_input_alternatives</a>(input_ops)</tt>	Obtain all input alternatives using the input_fn output and heuristics.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils.py#L178'>get_output_alternatives</a>(model_fn_ops,default_output_alternative_key)</tt>	Obtain all output alternatives using the model_fn output and heuristics.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils.py#L243'>build_all_signature_defs</a>(input_alternatives,output_alternatives,actual_default_output_alternative_key)</tt>	Build signaturedefs from all pairs of input and output alternatives.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils.py#L270'>get_timestamped_export_dir</a>(export_dir_base)</tt>	Builds a path to a new subdirectory within the base directory.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils.py#L300'>get_most_recent_export</a>(export_dir_base)</tt>	Locate the most recent savedmodel export in a directory of many exports.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils.py#L319'>garbage_collect_exports</a>(export_dir_base,exports_to_keep)</tt>	Deletes older exports retaining only a given number of the most recent.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils.py#L343'>make_export_strategy</a>(serving_input_fn,default_output_alternative_key,assets_extra,as_text)</tt>	Create an exportstrategy for use with experiment.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/saved_model_export_utils.py#L402'>make_parsing_export_strategy</a>(feature_columns,exports_to_keep)</tt>	Create an exportstrategy for use with experiment using featurecolumns.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/gc.py#L78'>largest_export_versions</a>(n)</tt>	Creates a filter that keeps the largest n export versions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/gc.py#L98'>one_of_every_n_export_versions</a>(n)</tt>	Creates a filter that keeps one of every n export versions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/gc.py#L129'>mod_export_version</a>(n)</tt>	Creates a filter that keeps every export that is a multiple of n.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/gc.py#L147'>union</a>(lf,rf)</tt>	Creates a filter that keeps the union of two filters.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/gc.py#L164'>negation</a>(f)</tt>	Negate a filter.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/gc.py#L180'>get_paths</a>(base_dir,parser)</tt>	Gets a list of paths in a given directory.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/export.py#L37'>_get_first_op_from_collection</a>(collection_name)</tt>	Get first element from the collection.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/export.py#L47'>_get_saver</a>()</tt>	Lazy init and return saver.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/export.py#L62'>_export_graph</a>(graph,saver,checkpoint_path,export_dir)</tt>	Exports graph via session_bundle by creating a session.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/export.py#L85'>generic_signature_fn</a>(examples,unused_features,predictions)</tt>	Creates generic signature from given examples and predictions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/export.py#L117'>classification_signature_fn</a>(examples,unused_features,predictions)</tt>	Creates classification signature from given examples and predictions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/export.py#L148'>classification_signature_fn_with_prob</a>(examples,unused_features,predictions)</tt>	Classification signature from given examples and predicted probabilities.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/export.py#L180'>regression_signature_fn</a>(examples,unused_features,predictions)</tt>	Creates regression signature from given examples and predictions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/export.py#L206'>logistic_regression_signature_fn</a>(examples,unused_features,predictions)</tt>	Creates logistic regression signature from given examples and predictions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/export.py#L256'>_default_input_fn</a>(estimator,examples)</tt>	Creates default input parsing using estimator's feature signatures.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/export.py#L262'>export_estimator</a>(estimator,export_dir,signature_fn,input_fn)</tt>	Deprecated please use estimator export_savedmodel().
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils.ExportTest <a href=' /contrib/learn/python/learn/utils/export_test.py#L53'>_get_default_signature</a>(export_meta_filename)</tt>	Gets the default signature from the export meta file.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.utils. <a href=' /contrib/learn/python/learn/utils/inspect_checkpoint.py#L30'>print_tensors_in_checkpoint_file</a>(file_name,tensor_name)</tt>	Prints tensors in a checkpoint file.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ops. <a href=' /contrib/learn/python/learn/ops/seq2seq_ops.py#L31'>sequence_classifier</a>(decoding,labels,sampling_decoding,name)</tt>	Returns predictions and loss for sequence of predictions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ops. <a href=' /contrib/learn/python/learn/ops/seq2seq_ops.py#L60'>seq2seq_inputs</a>(x,y,input_length,output_length)</tt>	Processes inputs for sequence to sequence models.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ops. <a href=' /contrib/learn/python/learn/ops/seq2seq_ops.py#L90'>rnn_decoder</a>(decoder_inputs,initial_state,cell,scope)</tt>	Rnn decoder that creates training and sampling sub-graphs.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ops. <a href=' /contrib/learn/python/learn/ops/seq2seq_ops.py#L126'>rnn_seq2seq</a>(encoder_inputs,decoder_inputs,encoder_cell,decoder_cell)</tt>	Rnn sequence to sequence model.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ops. <a href=' /contrib/learn/python/learn/ops/losses_ops.py#L30'>mean_squared_error_regressor</a>(tensor_in,labels,weights,biases)</tt>	Returns prediction and loss for mean squared error regression.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ops. <a href=' /contrib/learn/python/learn/ops/losses_ops.py#L42'>softmax_classifier</a>(tensor_in,labels,weights,biases)</tt>	Returns prediction and loss for softmax classifier.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ops. <a href=' /contrib/learn/python/learn/ops/embeddings_ops.py#L34'>embedding_lookup</a>(params,ids,name)</tt>	Provides a n dimensional version of tf embedding_lookup.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.ops. <a href=' /contrib/learn/python/learn/ops/embeddings_ops.py#L68'>categorical_variable</a>(tensor_in,n_classes,embedding_size,name)</tt>	Creates an embedding for categorical variable with given number of classes.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe. <a href=' /contrib/learn/python/learn/dataframe/transform.py#L34'>_make_list_of_series</a>(x)</tt>	Converts x into a list of series if possible.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe. <a href=' /contrib/learn/python/learn/dataframe/transform.py#L62'>_make_tuple_of_string</a>(x)</tt>	Converts x into a list of str if possible.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe. <a href=' /contrib/learn/python/learn/dataframe/transform.py#L90'>parameter</a>(func)</tt>	Tag functions annotated with @parameter for later retrieval.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.Transform <a href=' /contrib/learn/python/learn/dataframe/transform.py#L116'>name</a>()</tt>	Name of the transform.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.Transform <a href=' /contrib/learn/python/learn/dataframe/transform.py#L121'>parameters</a>()</tt>	A dict of names to values of properties marked with @parameter.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.Transform <a href=' /contrib/learn/python/learn/dataframe/transform.py#L129'>input_valency</a>()</tt>	The number of series that the transform should expect as input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.Transform <a href=' /contrib/learn/python/learn/dataframe/transform.py#L153'>_output_names</a>()</tt>	The names of series output by the transform.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.Transform <a href=' /contrib/learn/python/learn/dataframe/transform.py#L164'>return_type</a>()</tt>	Provides a namedtuple type which will be used for output.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.Transform <a href=' /contrib/learn/python/learn/dataframe/transform.py#L199'>__call__</a>(input_series)</tt>	Apply this transform to the provided series, producing 'series'.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.Transform <a href=' /contrib/learn/python/learn/dataframe/transform.py#L221'>_produce_output_series</a>(input_series)</tt>	Applies the transformation to the transform_input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowTransform <a href=' /contrib/learn/python/learn/dataframe/transform.py#L244'>_check_output_tensors</a>(output_tensors)</tt>	Helper for build ; verifies the output of _build_transform.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowTransform <a href=' /contrib/learn/python/learn/dataframe/transform.py#L259'>_produce_output_series</a>(input_series)</tt>	Apply this transform to the provided series, producing series.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowTransform <a href=' /contrib/learn/python/learn/dataframe/transform.py#L272'>build_transitive</a>(input_series,cache)</tt>	Apply this transform to the provided series, producing 'tensor's.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowTransform <a href=' /contrib/learn/python/learn/dataframe/transform.py#L313'>_apply_transform</a>(input_tensors)</tt>	Applies the transformation to the transform_input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.DataFrame <a href=' /contrib/learn/python/learn/dataframe/dataframe.py#L34'>columns</a>()</tt>	Set of the column names.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.DataFrame <a href=' /contrib/learn/python/learn/dataframe/dataframe.py#L38'>__len__</a>()</tt>	The number of columns in the dataframe.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.DataFrame <a href=' /contrib/learn/python/learn/dataframe/dataframe.py#L42'>assign</a>()</tt>	Adds columns to dataframe.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.DataFrame <a href=' /contrib/learn/python/learn/dataframe/dataframe.py#L73'>select_columns</a>(keys)</tt>	Returns a new dataframe with a subset of columns.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.DataFrame <a href=' /contrib/learn/python/learn/dataframe/dataframe.py#L87'>exclude_columns</a>(exclude_keys)</tt>	Returns a new dataframe with all columns not excluded via exclude_keys.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.DataFrame <a href=' /contrib/learn/python/learn/dataframe/dataframe.py#L102'>__getitem__</a>(key)</tt>	Indexing functionality for dataframes.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe. <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L47'>_expand_file_names</a>(filepatterns)</tt>	Takes a list of file patterns and returns a list of resolved file names.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L82'>run</a>(num_batches,graph,session,start_queues)</tt>	Builds and runs the columns of the dataframe and yields batches.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L136'>select_rows</a>(boolean_series)</tt>	Returns a dataframe with only the rows indicated by boolean_series.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L163'>split</a>(index_series,proportion,batch_size)</tt>	Deterministically split a dataframe into two dataframes.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L205'>split_fast</a>(index_series,proportion,batch_size,base_batch_size)</tt>	Deterministically split a dataframe into two dataframes.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L256'>run_one_batch</a>()</tt>	Creates a new 'graph and session and runs a single batch.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L265'>run_one_epoch</a>()</tt>	Creates a new 'graph and session and runs a single epoch.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L305'>batch</a>(batch_size,shuffle,num_threads,queue_capacity)</tt>	Resize the batches in the dataframe to the given batch_size.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L345'>_from_csv_base</a>(cls,filepatterns,get_default_values,has_header)</tt>	Create a dataframe from csv files.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L416'>from_csv</a>(cls,filepatterns,default_values,has_header)</tt>	Create a dataframe from csv files.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L467'>from_csv_with_feature_spec</a>(cls,filepatterns,feature_spec,has_header)</tt>	Create a dataframe from csv files given a feature_spec.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L527'>from_examples</a>(cls,filepatterns,features,reader_cls)</tt>	Create a dataframe from tensorflow examples.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L592'>from_pandas</a>(cls,pandas_dataframe,num_threads,enqueue_size)</tt>	Create a tf learn dataframe from a pandas dataframe.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L635'>from_numpy</a>(cls,numpy_array,num_threads,enqueue_size)</tt>	Creates a tf learn dataframe from a numpy ndarray.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TensorFlowDataFrame <a href=' /contrib/learn/python/learn/dataframe/tensorflow_dataframe.py#L682'>from_ordereddict</a>(cls,ordered_dict_of_arrays,num_threads,enqueue_size)</tt>	Creates a tf learn dataframe from an ordereddict of numpy ndarray.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe. <a href=' /contrib/learn/python/learn/dataframe/estimator_utils.py#L47'>_build_alternate_universe</a>(dataframe,base_input_keys_with_defaults,feature_keys)</tt>	Create an alternate universe assuming that the base series are defined.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe. <a href=' /contrib/learn/python/learn/dataframe/estimator_utils.py#L92'>to_feature_columns_and_input_fn</a>(dataframe,base_input_keys_with_defaults,feature_keys,label_keys)</tt>	Build a list of featurecolumns and an input_fn for use with estimator.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.Series <a href=' /contrib/learn/python/learn/dataframe/series.py#L35'>register_unary_op</a>(cls,series_method_name)</tt>	A decorator that registers transforms as series member functions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.Series <a href=' /contrib/learn/python/learn/dataframe/series.py#L68'>register_binary_op</a>(cls,series_method_name)</tt>	A decorator that registers transforms as series member functions.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.Series <a href=' /contrib/learn/python/learn/dataframe/series.py#L101'>build</a>(cache)</tt>	Returns a tensor.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.TransformedSeries <a href=' /contrib/learn/python/learn/dataframe/series.py#L187'>make_repr</a>(input_series,transform,output_name)</tt>	Generate a key for caching tensors produced for a transformedseries.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.transforms.Densify <a href=' /contrib/learn/python/learn/dataframe/transforms/densify.py#L50'>_apply_transform</a>(input_tensors)</tt>	Applies the transformation to the transform_input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.transforms.HashFast <a href=' /contrib/learn/python/learn/dataframe/transforms/hashes.py#L51'>_apply_transform</a>(input_tensors)</tt>	Applies the transformation to the transform_input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.transforms. <a href=' /contrib/learn/python/learn/dataframe/transforms/binary_transforms.py#L104'>register_binary_op</a>(method_name,operation)</tt>	Registers series member functions for binary operations.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.transforms. <a href=' /contrib/learn/python/learn/dataframe/transforms/boolean_mask.py#L33'>sparse_boolean_mask</a>(sparse_tensor,mask,name)</tt>	Boolean mask for sparsetensors.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.transforms.BooleanMask <a href=' /contrib/learn/python/learn/dataframe/transforms/boolean_mask.py#L81'>_apply_transform</a>(input_tensors)</tt>	Applies the transformation to the transform_input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.transforms.ReaderSource <a href=' /contrib/learn/python/learn/dataframe/transforms/reader_source.py#L29'>__init__</a>(reader_cls,work_units,reader_kwargs,enqueue_size)</tt>	Initializes a readersource.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.transforms. <a href=' /contrib/learn/python/learn/dataframe/transforms/unary_transforms.py#L56'>register_unary_op</a>(registered_name,operation,ignore_dtype)</tt>	Creates a transform that wraps a unary tensorflow operation.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.transforms.Sparsify <a href=' /contrib/learn/python/learn/dataframe/transforms/sparsify.py#L55'>_apply_transform</a>(input_tensors)</tt>	Applies the transformation to the transform_input.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.dataframe.transforms.SplitMask <a href=' /contrib/learn/python/learn/dataframe/transforms/split_mask.py#L53'>_produce_output_series</a>(input_series)</tt>	Deterministically generate a boolean series for partitioning rows.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.CategoricalProcessor <a href=' /contrib/learn/python/learn/preprocessing/categorical.py#L38'>__init__</a>(min_frequency,share,vocabularies)</tt>	Initializes a categoricalprocessor instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.CategoricalProcessor <a href=' /contrib/learn/python/learn/preprocessing/categorical.py#L54'>freeze</a>(freeze)</tt>	Freeze or unfreeze all vocabularies.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.CategoricalProcessor <a href=' /contrib/learn/python/learn/preprocessing/categorical.py#L63'>fit</a>(x,unused_y)</tt>	Learn a vocabulary dictionary of all categories in x.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.CategoricalProcessor <a href=' /contrib/learn/python/learn/preprocessing/categorical.py#L96'>fit_transform</a>(x,unused_y)</tt>	Learn the vocabulary dictionary and return indexies of categories.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.CategoricalProcessor <a href=' /contrib/learn/python/learn/preprocessing/categorical.py#L109'>transform</a>(x)</tt>	Transform documents to category-id matrix.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.ByteProcessor <a href=' /contrib/learn/python/learn/preprocessing/text.py#L60'>fit</a>(x)</tt>	Does nothing no fitting required.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.ByteProcessor <a href=' /contrib/learn/python/learn/preprocessing/text.py#L69'>reverse</a>(x)</tt>	Reverses output of transform back to text.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.ByteProcessor <a href=' /contrib/learn/python/learn/preprocessing/text.py#L85'>transform</a>(x)</tt>	Transforms input documents into sequence of ids.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.VocabularyProcessor <a href=' /contrib/learn/python/learn/preprocessing/text.py#L113'>__init__</a>(max_document_length,min_frequency,vocabulary,tokenizer_fn)</tt>	Initializes a vocabularyprocessor instance.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.VocabularyProcessor <a href=' /contrib/learn/python/learn/preprocessing/text.py#L140'>fit</a>(raw_documents,unused_y)</tt>	Learn a vocabulary dictionary of all tokens in the raw documents.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.VocabularyProcessor <a href=' /contrib/learn/python/learn/preprocessing/text.py#L158'>fit_transform</a>(raw_documents,unused_y)</tt>	Learn the vocabulary dictionary and return indexies of words.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.VocabularyProcessor <a href=' /contrib/learn/python/learn/preprocessing/text.py#L171'>transform</a>(raw_documents)</tt>	Transform documents to word-id matrix.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.VocabularyProcessor <a href=' /contrib/learn/python/learn/preprocessing/text.py#L191'>reverse</a>(documents)</tt>	Reverses output of vocabulary mapping to words.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.VocabularyProcessor <a href=' /contrib/learn/python/learn/preprocessing/text.py#L206'>save</a>(filename)</tt>	Saves vocabulary processor into given file.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.VocabularyProcessor <a href=' /contrib/learn/python/learn/preprocessing/text.py#L215'>restore</a>(cls,filename)</tt>	Restores vocabulary processor from given file.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.CategoricalVocabulary <a href=' /contrib/learn/python/learn/preprocessing/categorical_vocabulary.py#L45'>__len__</a>()</tt>	Returns total count of mappings including unknown token.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.CategoricalVocabulary <a href=' /contrib/learn/python/learn/preprocessing/categorical_vocabulary.py#L49'>freeze</a>(freeze)</tt>	Freezes the vocabulary after which new words return unknown token id.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.CategoricalVocabulary <a href=' /contrib/learn/python/learn/preprocessing/categorical_vocabulary.py#L57'>get</a>(category)</tt>	Returns word's id in the vocabulary.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.CategoricalVocabulary <a href=' /contrib/learn/python/learn/preprocessing/categorical_vocabulary.py#L76'>add</a>(category,count)</tt>	Adds count of the category to the frequency table.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.CategoricalVocabulary <a href=' /contrib/learn/python/learn/preprocessing/categorical_vocabulary.py#L88'>trim</a>(min_frequency,max_frequency)</tt>	Trims vocabulary for minimum frequency.
<tt style='background-color:#E8E8E8;'> contrib.learn.python.learn.preprocessing.CategoricalVocabulary <a href=' /contrib/learn/python/learn/preprocessing/categorical_vocabulary.py#L121'>reverse</a>(class_id)</tt>	Given class id reverse to original class name.
<tt style='background-color:#E8E8E8;'> contrib.integrate.python.ops. <a href=' /contrib/integrate/python/ops/odes.py#L62'>_scaled_dot_product</a>(scale,xs,ys,name)</tt>	Calculate a scaled vector inner product between lists of tensors.
<tt style='background-color:#E8E8E8;'> contrib.integrate.python.ops. <a href=' /contrib/integrate/python/ops/odes.py#L72'>_dot_product</a>(xs,ys,name)</tt>	Calculate the vector inner product between two lists of tensors.
<tt style='background-color:#E8E8E8;'> contrib.integrate.python.ops. <a href=' /contrib/integrate/python/ops/odes.py#L78'>_runge_kutta_step</a>(func,y0,f0,t0)</tt>	Take an arbitrary runge-kutta step and estimate error.
<tt style='background-color:#E8E8E8;'> contrib.integrate.python.ops. <a href=' /contrib/integrate/python/ops/odes.py#L123'>_interp_fit</a>(y0,y1,y_mid,f0)</tt>	Fit coefficients for 4th order polynomial interpolation.
<tt style='background-color:#E8E8E8;'> contrib.integrate.python.ops. <a href=' /contrib/integrate/python/ops/odes.py#L161'>_interp_fit_rk</a>(y0,y1,k,dt)</tt>	Fit an interpolating polynomial to the results of a runge-kutta step.
<tt style='background-color:#E8E8E8;'> contrib.integrate.python.ops. <a href=' /contrib/integrate/python/ops/odes.py#L171'>_interp_evaluate</a>(coefficients,t0,t1,t)</tt>	Evaluate polynomial interpolation at the given time point.
<tt style='background-color:#E8E8E8;'> contrib.integrate.python.ops. <a href=' /contrib/integrate/python/ops/odes.py#L203'>_optimal_step_size</a>(last_step,error_ratio,safety,ifactor)</tt>	Calculate the optimal size for the next runge-kutta step.
<tt style='background-color:#E8E8E8;'> contrib.integrate.python.ops. <a href=' /contrib/integrate/python/ops/odes.py#L230'>_ta_append</a>(tensor_array,value)</tt>	Append a value to the end of a tf tensorarray.
<tt style='background-color:#E8E8E8;'> contrib.integrate.python.ops. <a href=' /contrib/integrate/python/ops/odes.py#L261'>_dopri5</a>(func,y0,t,rtol)</tt>	Solve an ode for odeint using method='dopri5'.
<tt style='background-color:#E8E8E8;'> contrib.integrate.python.ops. <a href=' /contrib/integrate/python/ops/odes.py#L382'>odeint</a>(func,y0,t,rtol)</tt>	Integrate a system of ordinary differential equations.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/lstm1d.py#L37'>ndlstm_base_unrolled</a>(inputs,noutput,scope,reverse)</tt>	Run an lstm either forward or backward.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/lstm1d.py#L72'>ndlstm_base_dynamic</a>(inputs,noutput,scope,reverse)</tt>	Run an lstm either forward or backward.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/lstm1d.py#L105'>ndlstm_base</a>(inputs,noutput,scope,reverse)</tt>	Implements a 1d lstm either forward or backward.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/lstm1d.py#L133'>sequence_to_final</a>(inputs,noutput,scope,name)</tt>	Run an lstm across all steps and returns only the final state.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/lstm1d.py#L161'>sequence_softmax</a>(inputs,noutput,scope,name)</tt>	Run a softmax layer over all the time steps of an input sequence.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/misc.py#L34'>_shape</a>(tensor)</tt>	Get the shape of a tensor as an int list.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/lstm2d.py#L34'>images_to_sequence</a>(tensor)</tt>	Convert a batch of images into a batch of sequences.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/lstm2d.py#L50'>sequence_to_images</a>(tensor,num_image_batches)</tt>	Convert a batch of sequences into a batch of images.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/lstm2d.py#L68'>horizontal_lstm</a>(images,num_filters_out,scope)</tt>	Run an lstm bidirectionally over all the rows of each image.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/lstm2d.py#L94'>separable_lstm</a>(images,num_filters_out,nhidden,scope)</tt>	Run bidirectional lstms first horizontally then vertically.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/lstm2d.py#L117'>reduce_to_sequence</a>(images,num_filters_out,scope)</tt>	Reduce an image to a sequence by scanning an lstm vertically.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/lstm2d.py#L138'>reduce_to_final</a>(images,num_filters_out,nhidden,scope)</tt>	Reduce an image to a final state by running two lstms.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/misc.py#L39'>pixels_as_vector</a>(images,scope)</tt>	Reduce images to vectors by combining all pixels.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/misc.py#L46'>pool_as_vector</a>(images,scope)</tt>	Reduce images to vectors by averaging all pixels.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/misc.py#L52'>one_hot_planes</a>(labels,num_classes,scope)</tt>	Compute 1-hot encodings for planes.
<tt style='background-color:#E8E8E8;'> contrib.ndlstm.python. <a href=' /contrib/ndlstm/python/misc.py#L73'>one_hot_mask</a>(labels,num_classes,scope)</tt>	Compute 1-hot encodings for masks.
<tt style='background-color:#E8E8E8;'> contrib.signal.python.ops. <a href=' /contrib/signal/python/ops/shape_ops.py#L26'>frames</a>(signal,frame_length,frame_step,name)</tt>	Frame a signal into overlapping frames.
<tt style='background-color:#E8E8E8;'> contrib.cmake.tools. <a href=' /contrib/cmake/tools/create_def_file.py#L79'>get_args</a>()</tt>	Parse command line.
<tt style='background-color:#E8E8E8;'> contrib.grid_rnn.python.kernel_tests.GridRNNCellTest <a href=' /contrib/grid_rnn/python/kernel_tests/grid_rnn_test.py#L673'>testGrid2LSTMCellWithRNNAndDynamicBatchSize</a>()</tt>	Test for #4296.
<tt style='background-color:#E8E8E8;'> contrib.grid_rnn.python.kernel_tests.GridRNNCellTest <a href=' /contrib/grid_rnn/python/kernel_tests/grid_rnn_test.py#L714'>testGrid2LSTMCellLegacy</a>()</tt>	Test for legacy case (when state_is_tuple=false).
<tt style='background-color:#E8E8E8;'> contrib.grid_rnn.python.ops.GridRNNCell <a href=' /contrib/grid_rnn/python/ops/grid_rnn_cell.py#L49'>__init__</a>(num_units,num_dims,input_dims,output_dims)</tt>	Initialize the parameters of a grid rnn cell args.
<tt style='background-color:#E8E8E8;'> contrib.grid_rnn.python.ops.GridRNNCell <a href=' /contrib/grid_rnn/python/ops/grid_rnn_cell.py#L163'>__call__</a>(inputs,state,scope)</tt>	Run one step of gridrnn.
<tt style='background-color:#E8E8E8;'> contrib.grid_rnn.python.ops.GridRNNCell <a href=' /contrib/grid_rnn/python/ops/grid_rnn_cell.py#L222'>_extract_states</a>(state)</tt>	Extract the cell and previous output tensors from the given state.
<tt style='background-color:#E8E8E8;'> contrib.grid_rnn.python.ops.GridRNNCell <a href=' /contrib/grid_rnn/python/ops/grid_rnn_cell.py#L262'>_project_input</a>(inputs,c_prev,m_prev,with_c)</tt>	Fills in c_prev and m_prev with projected input for input dimensions.
<tt style='background-color:#E8E8E8;'> contrib.grid_rnn.python.ops.GridRNNCell <a href=' /contrib/grid_rnn/python/ops/grid_rnn_cell.py#L291'>_cell_state_size</a>()</tt>	Total size of the state of the inner cell used in this grid.
<tt style='background-color:#E8E8E8;'> contrib.grid_rnn.python.ops. <a href=' /contrib/grid_rnn/python/ops/grid_rnn_cell.py#L524'>_propagate</a>(dim_indices,conf,cells,c_prev)</tt>	Propagates through all the cells in dim_indices dimensions.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.GreedyLoadBalancingStrategy <a href=' /contrib/training/python/training/device_setter.py#L48'>__init__</a>(num_tasks,load_fn)</tt>	Create a new loadbalancingstrategy.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.GreedyLoadBalancingStrategy <a href=' /contrib/training/python/training/device_setter.py#L60'>__call__</a>(op)</tt>	Choose a ps task index for the given operation.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/device_setter.py#L76'>byte_size_load_fn</a>(op)</tt>	Load function that computes the byte size of a single-output operation.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/bucket_ops.py#L63'>bucket</a>(tensors,which_bucket,batch_size,num_buckets)</tt>	Lazy bucketing of input tensors according to which_bucket.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/bucket_ops.py#L297'>bucket_by_sequence_length</a>(input_length,tensors,batch_size,bucket_boundaries)</tt>	Lazy bucketing of inputs according to their length.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.EvaluateOnceTest <a href=' /contrib/training/python/training/evaluation_test.py#L157'>_train_model</a>(checkpoint_dir,num_steps)</tt>	Trains a simple classification model.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.EvaluateRepeatedlyTest <a href=' /contrib/training/python/training/evaluation_test.py#L275'>_train_model</a>(checkpoint_dir,num_steps)</tt>	Trains a simple classification model.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.EvaluateRepeatedlyTest <a href=' /contrib/training/python/training/evaluation_test.py#L428'>_verify_summaries</a>(output_dir,names_to_values)</tt>	Verifies that the given names_to_values are found in the summaries.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sampling_ops.py#L37'>rejection_sample</a>(tensors,accept_prob_fn,batch_size,queue_threads)</tt>	Stochastically creates batches by rejection sampling.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sampling_ops.py#L134'>stratified_sample</a>(tensors,labels,target_probs,batch_size)</tt>	Stochastically creates batches based on per-class probabilities.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sampling_ops.py#L259'>_estimate_data_distribution</a>(labels,num_classes,smoothing_constant)</tt>	Estimate data distribution as labels are seen.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sampling_ops.py#L298'>_verify_data_inputs</a>(tensor_list)</tt>	Verify that batched data inputs are well-formed.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sampling_ops.py#L310'>_verify_input</a>(tensor_list,labels,probs_list)</tt>	Verify that batched inputs are well-formed.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sampling_ops.py#L370'>_calculate_acceptance_probabilities</a>(init_probs,target_probs)</tt>	Calculate the per-class acceptance rates.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/hparam.py#L31'>parse_values</a>(values,type_map)</tt>	Parses hyperparameter values from a string into a python map.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.HParams <a href=' /contrib/training/python/training/hparam.py#L190'>__init__</a>(hparam_def,model_structure)</tt>	Create an instance of hparams from keyword arguments.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.HParams <a href=' /contrib/training/python/training/hparam.py#L246'>_init_from_proto</a>(hparam_def)</tt>	Creates a new hparams from hparamdef protocol buffer.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.HParams <a href=' /contrib/training/python/training/hparam.py#L281'>add_hparam</a>(name,value)</tt>	Adds {name value} pair to hyperparameters.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.HParams <a href=' /contrib/training/python/training/hparam.py#L306'>parse</a>(values)</tt>	Override hyperparameter values parsing new values from a string.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.HParams <a href=' /contrib/training/python/training/hparam.py#L329'>_set_from_map</a>(values_map)</tt>	Override hyperparameter values parsing new values from a dictionary.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.HParams <a href=' /contrib/training/python/training/hparam.py#L361'>to_json</a>()</tt>	Serializes the hyperparameters into json.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.HParams <a href=' /contrib/training/python/training/hparam.py#L369'>parse_json</a>(values_json)</tt>	Override hyperparameter values parsing new values from a json object.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.HParams <a href=' /contrib/training/python/training/hparam.py#L384'>values</a>()</tt>	Return the hyperparameter values as a python dictionary.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.HParams <a href=' /contrib/training/python/training/hparam.py#L396'>_get_kind_name</a>(param_type,is_list)</tt>	Returns the field name given parameter type and is_list.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.HParams <a href=' /contrib/training/python/training/hparam.py#L430'>to_proto</a>(export_scope)</tt>	Converts a hparams object to a hparamdef protocol buffer.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/bucket_ops_test.py#L37'>_which_bucket</a>(bucket_edges,v)</tt>	Identify which bucket v falls into.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L110'>_check_multiple_of</a>(value,multiple_of)</tt>	Checks that value value is a non-zero multiple of multiple_of.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L139'>_check_rank</a>(value,expected_rank)</tt>	Check the rank of tensor value, via shape inference and assertions.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L178'>_check_shape</a>(value,expected_shape)</tt>	Check the shape of tensor value, via shape inference and assertions.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L226'>_check_dimensions</a>(value,dimensions,expected_sizes,debug_prefix)</tt>	Check the dimensions of tensor value, via shape inference and assertions.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L298'>_prepare_sequence_inputs</a>(inputs,states)</tt>	Convert input to tensors and validate shape information.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.NextQueuedSequenceBatch <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L368'>total_length</a>()</tt>	The lengths of the original non-truncated unrolled examples.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.NextQueuedSequenceBatch <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L377'>length</a>()</tt>	The lengths of the given truncated unrolled examples.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.NextQueuedSequenceBatch <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L390'>batch_size</a>()</tt>	The batch_size of the given batch.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.NextQueuedSequenceBatch <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L403'>insertion_index</a>()</tt>	The insertion indices of the examples when they were first added.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.NextQueuedSequenceBatch <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L418'>key</a>()</tt>	The key names of the given truncated unrolled examples.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.NextQueuedSequenceBatch <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L435'>next_key</a>()</tt>	The key names of the next in iteration truncated unrolled examples.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.NextQueuedSequenceBatch <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L458'>sequence</a>()</tt>	An int32 vector length batch_size: the sequence index of each entry.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.NextQueuedSequenceBatch <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L473'>sequence_count</a>()</tt>	An int32 vector length batch_size: the sequence count of each entry.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.NextQueuedSequenceBatch <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L485'>context</a>()</tt>	A dict mapping keys of input_context to batched context.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.NextQueuedSequenceBatch <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L506'>sequences</a>()</tt>	A dict mapping keys of input_sequences to split and rebatched data.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.NextQueuedSequenceBatch <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L527'>state</a>(state_name)</tt>	Returns batched state tensors.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.NextQueuedSequenceBatch <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L556'>save_state</a>(state_name,value,name)</tt>	Returns an op to save the current batch of state state_name.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.SequenceQueueingStateSaver <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L728'>__init__</a>(batch_size,num_unroll,input_length,input_key)</tt>	Creates the sequencequeueingstatesaver.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.SequenceQueueingStateSaver <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L903'>prefetch_op</a>()</tt>	The op used to prefetch new data into the state saver.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.SequenceQueueingStateSaver <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L922'>next_batch</a>()</tt>	The nextqueuedsequencebatch providing access to batched output data.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.SequenceQueueingStateSaver <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L953'>close</a>(cancel_pending_enqueues,name)</tt>	Closes the barrier and the fifoqueue.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.SequenceQueueingStateSaver <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L978'>_store_index_maps</a>(sequences,context,states)</tt>	Prepares the internal dictionaries _name_to_index and _index_to_name.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.SequenceQueueingStateSaver <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L1027'>_create_barrier</a>()</tt>	Create the barrier.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.SequenceQueueingStateSaver <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L1067'>_create_prefetch_op</a>()</tt>	Group insert_many ops and create prefetch_op.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.SequenceQueueingStateSaver <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L1216'>_prepare_barrier_reads</a>()</tt>	Creates ops for reading the barrier as used by properties like length.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L1267'>batch_sequences_with_states</a>(input_key,input_sequences,input_context,input_length)</tt>	Creates batches of segments of sequential input.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L1547'>_padding</a>(sequences,num_unroll)</tt>	For a dictionary of sequences pads tensors to a multiple of num_unroll.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L1631'>_move_sparse_tensor_out_context</a>(input_context,input_sequences,num_unroll)</tt>	Moves sparsetensors from input_context into input_sequences as seq.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L1735'>_deconstruct_sparse_tensor_seq</a>(input_sequence,shared_name)</tt>	Converts sparsetensor values into tensors of ids and meta data.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/sequence_queueing_state_saver.py#L1773'>_reconstruct_sparse_tensor_seq</a>(sequence,sparse_tensor_keys,tensor_op_list,batch_size)</tt>	Inverse of _deconstruct_sparse_tensor_seq.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/python_input.py#L31'>_process_yielded_dict</a>(feature_values,keys,features,dtypes)</tt>	Read feature_values from the generator and emit a proper output dict.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/python_input.py#L61'>python_input</a>(generator,features,name)</tt>	Easily feed data from a python generator into tensorflow queues.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.Feeder <a href=' /contrib/training/python/training/feeder.py#L113'>get_fed_tensors</a>()</tt>	Returns fed tensor values.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.Feeder <a href=' /contrib/training/python/training/feeder.py#L117'>get_many_fed_tensors</a>(batch_size)</tt>	Returns a batch of fed tensor values.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.Feeder <a href=' /contrib/training/python/training/feeder.py#L121'>set_fed_tensors</a>(tensors)</tt>	Sets fed tensors.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.Feeder <a href=' /contrib/training/python/training/feeder.py#L127'>set_many_fed_tensors</a>(tensors)</tt>	Sets batches fed tensors.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.Feeder <a href=' /contrib/training/python/training/feeder.py#L133'>add_remote_device</a>(remote_device)</tt>	Requests that fed values are sent to remote_device.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.Feeder <a href=' /contrib/training/python/training/feeder.py#L155'>add_remote_replicas</a>(job_name,replica_count,feeder_task_num,replicas_per_feeder)</tt>	Adds feeding for a range of replicas from job_name.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.Feeder <a href=' /contrib/training/python/training/feeder.py#L195'>run_feeding_forever</a>(sess_callback,outer_coordinator,tolerator,start_queue_runners)</tt>	Runs feeding forever.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.Feeder <a href=' /contrib/training/python/training/feeder.py#L254'>wait_until_feeding</a>(timeout)</tt>	Waits until run_feeding_forever() is entered.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.Feeder <a href=' /contrib/training/python/training/feeder.py#L327'>_add_remote_queue_runner</a>(queue,enq_ops)</tt>	Adds a remote queue runner to the graph.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/feeder.py#L350'>_link_coordinators</a>(inner_coord,outer_coord,start,wait_time)</tt>	Returns a thread which stops inner_coord whenever outer_coord stops.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/feeder_test.py#L37'>_pick_unused_port</a>()</tt>	For some reason portpicker returns the same port sometimes.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.FeederTest <a href=' /contrib/training/python/training/feeder_test.py#L107'>_create_local_cluster</a>()</tt>	Creates a local cluster.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/evaluation.py#L174'>wait_for_new_checkpoint</a>(checkpoint_dir,last_checkpoint,seconds_to_sleep,timeout)</tt>	Waits until a new checkpoint file is found.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/evaluation.py#L205'>checkpoints_iterator</a>(checkpoint_dir,min_interval_secs,timeout,timeout_fn)</tt>	Continuously yield new checkpoint files as they appear.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.SummaryAtEndHook <a href=' /contrib/training/python/training/evaluation.py#L273'>__init__</a>(log_dir,summary_writer,summary_op,feed_dict)</tt>	Constructs the summary hook.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/evaluation.py#L317'>_scaffold_with_init</a>(scaffold,saver,checkpoint_path)</tt>	Creates a scaffold that loads the given checkpoint using an init_fn.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/evaluation.py#L345'>evaluate_repeatedly</a>(checkpoint_dir,master,scaffold,eval_ops)</tt>	Repeatedly searches for a checkpoint in checkpoint_dir and evaluates it.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/training.py#L270'>add_gradients_summaries</a>(grads_and_vars)</tt>	Add summaries to gradients.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/training.py#L297'>clip_gradient_norms</a>(gradients_to_variables,max_norm)</tt>	Clips the gradients by the given value.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/training.py#L319'>multiply_gradients</a>(grads_and_vars,gradient_multipliers)</tt>	Multiply specified gradients.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/training.py#L362'>create_train_op</a>(total_loss,optimizer,global_step,update_ops)</tt>	Creates an operation that evaluates the gradients and returns the loss.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/training.py#L469'>train</a>(train_op,logdir,master,is_chief)</tt>	Runs the training loop.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.ResampleTest <a href=' /contrib/training/python/training/resample_test.py#L53'>testRoundtrip</a>(rate,count,n)</tt>	Tests resample x weights and resample(resample x rate 1/rate).
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.ResampleTest <a href=' /contrib/training/python/training/resample_test.py#L96'>testCorrectRates</a>(rate,count,n,rtol)</tt>	Tests that the rates returned by weighted_resample are correct.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.ResampleTest <a href=' /contrib/training/python/training/resample_test.py#L142'>testZeroRateUnknownShapes</a>(count)</tt>	Tests that resampling runs with completely runtime shapes.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.ResampleTest <a href=' /contrib/training/python/training/resample_test.py#L158'>testDtypes</a>(count)</tt>	Test that we can define the ops with float64 weights.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.ResampleTest <a href=' /contrib/training/python/training/resample_test.py#L169'>get_weights</a>(n,mean,stddev)</tt>	Returns random positive weight values.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.Tuner <a href=' /contrib/training/python/training/tuner.py#L47'>next_trial</a>()</tt>	Switch to the next trial.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.Tuner <a href=' /contrib/training/python/training/tuner.py#L62'>run_experiment</a>(experiment_fn)</tt>	Creates an experiment by calling experiment_fn and executes it.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.FailureTolerator <a href=' /contrib/training/python/training/failure_tolerator.py#L64'>__init__</a>(limit,init_delay,backoff_factor,forgive_after_seconds)</tt>	Creates a failuretolerator.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training.FailureTolerator <a href=' /contrib/training/python/training/failure_tolerator.py#L93'>_adjusted_now</a>()</tt>	Returns what the current time would be if no delays had occurred.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/resample.py#L32'>_repeat_range</a>(counts,name)</tt>	Repeat integers given by range(len counts each the given number of times.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/resample.py#L68'>resample_at_rate</a>(inputs,rates,scope,seed)</tt>	Given inputs tensors stochastically resamples each at a given rate.
<tt style='background-color:#E8E8E8;'> contrib.training.python.training. <a href=' /contrib/training/python/training/resample.py#L103'>weighted_resample</a>(inputs,weights,overall_rate,scope)</tt>	Performs an approximate weighted resampling of inputs.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.kernel_tests.AUCUsingHistogramTest <a href=' /contrib/metrics/python/kernel_tests/histogram_ops_test.py#L130'>_check_auc</a>(nbins,desired_auc,score_range,num_records)</tt>	Check auc accuracy against synthetic data.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.kernel_tests. <a href=' /contrib/metrics/python/kernel_tests/histogram_ops_test.py#L185'>synthetic_data</a>(desired_auc,score_range,num_records,rng)</tt>	Create synthetic boolean_labels and scores with adjustable auc.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/confusion_matrix_ops.py#L25'>confusion_matrix</a>(labels,predictions,num_classes,dtype)</tt>	Deprecated use tf confusion_matrix instead.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L40'>_safe_div</a>(numerator,denominator,name)</tt>	Divides two values returning 0 if the denominator is <= 0.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L58'>_create_local</a>(name,shape,collections,validate_shape)</tt>	Creates a new local variable.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L84'>_assert_weights_rank</a>(weights,values)</tt>	Weights rank must be either 0, or the same as 'values'.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L89'>_count_condition</a>(values,weights,metrics_collections,updates_collections)</tt>	Sums the weights of cases where the given values are true.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L136'>streaming_true_positives</a>(predictions,labels,weights,metrics_collections)</tt>	Sum the weights of true_positives.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L175'>streaming_true_negatives</a>(predictions,labels,weights,metrics_collections)</tt>	Sum the weights of true_negatives.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L220'>streaming_false_positives</a>(predictions,labels,weights,metrics_collections)</tt>	Sum the weights of false positives.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L259'>streaming_false_negatives</a>(predictions,labels,weights,metrics_collections)</tt>	Computes the total number of false negatives.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L298'>_broadcast_weights</a>(weights,values)</tt>	Broadcast weights to the same shape as values.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L327'>streaming_mean</a>(values,weights,metrics_collections,updates_collections)</tt>	Computes the weighted mean of the given values.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L370'>streaming_mean_tensor</a>(values,weights,metrics_collections,updates_collections)</tt>	Computes the element-wise weighted mean of the given tensors.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L417'>streaming_accuracy</a>(predictions,labels,weights,metrics_collections)</tt>	Calculates how often predictions matches labels.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L468'>streaming_precision</a>(predictions,labels,weights,metrics_collections)</tt>	Computes the precision of the predictions with respect to the labels.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L518'>streaming_recall</a>(predictions,labels,weights,metrics_collections)</tt>	Computes the recall of the predictions with respect to the labels.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L566'>_streaming_confusion_matrix_at_thresholds</a>(predictions,labels,thresholds,weights)</tt>	Computes true_positives false_negatives true_negatives false_positives.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L736'>streaming_auc</a>(predictions,labels,weights,num_thresholds)</tt>	Computes the approximate auc via a riemann sum.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L800'>streaming_specificity_at_sensitivity</a>(predictions,labels,sensitivity,weights)</tt>	Computes the specificity at a given sensitivity.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L858'>streaming_sensitivity_at_specificity</a>(predictions,labels,specificity,weights)</tt>	Computes the specificity at a given sensitivity.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L916'>streaming_precision_at_thresholds</a>(predictions,labels,thresholds,weights)</tt>	Computes precision values for different thresholds on predictions.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L969'>streaming_recall_at_thresholds</a>(predictions,labels,thresholds,weights)</tt>	Computes various recall values for different thresholds on predictions.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1029'>streaming_recall_at_k</a>(predictions,labels,k,weights)</tt>	Computes the recall@k of the predictions with respect to dense labels.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1086'>streaming_sparse_recall_at_k</a>(predictions,labels,k,class_id)</tt>	Computes recall@k of the predictions with respect to sparse labels.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1168'>streaming_sparse_precision_at_k</a>(predictions,labels,k,class_id)</tt>	Computes precision@k of the predictions with respect to sparse labels.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1253'>streaming_sparse_precision_at_top_k</a>(top_k_predictions,labels,class_id,weights)</tt>	Computes precision@k of top-k predictions with respect to sparse labels.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1341'>sparse_recall_at_top_k</a>(labels,top_k_predictions,class_id,weights)</tt>	Computes recall@k of top-k predictions with respect to sparse labels.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1422'>streaming_sparse_average_precision_at_k</a>(predictions,labels,k,weights)</tt>	Computes average precision@k of predictions with respect to sparse labels.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1486'>streaming_sparse_average_precision_at_top_k</a>(top_k_predictions,labels,weights,metrics_collections)</tt>	Computes average precision@k of predictions with respect to sparse labels.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1549'>streaming_mean_absolute_error</a>(predictions,labels,weights,metrics_collections)</tt>	Computes the mean absolute error between the labels and predictions.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1602'>streaming_mean_relative_error</a>(predictions,labels,normalizer,weights)</tt>	Computes the mean relative error by normalizing with the given values.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1656'>streaming_mean_squared_error</a>(predictions,labels,weights,metrics_collections)</tt>	Computes the mean squared error between the labels and predictions.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1709'>streaming_root_mean_squared_error</a>(predictions,labels,weights,metrics_collections)</tt>	Computes the root mean squared error between the labels and predictions.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1762'>streaming_covariance</a>(predictions,labels,weights,metrics_collections)</tt>	Computes the unbiased sample covariance between predictions and labels.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1891'>streaming_pearson_correlation</a>(predictions,labels,weights,metrics_collections)</tt>	Computes pearson correlation coefficient between predictions, labels.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L1979'>streaming_mean_cosine_distance</a>(predictions,labels,dim,weights)</tt>	Computes the cosine distance between the labels and predictions.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L2044'>streaming_percentage_less</a>(values,threshold,weights,metrics_collections)</tt>	Computes the percentage of values less than the given threshold.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L2089'>streaming_mean_iou</a>(predictions,labels,num_classes,weights)</tt>	Calculate per-step mean intersection-over-union miou.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L2143'>_next_array_size</a>(required_size,growth_factor)</tt>	Calculate the next size for reallocating a dynamic array.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L2160'>streaming_concat</a>(values,axis,max_size,metrics_collections)</tt>	Concatenate values along an axis across batches.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L2273'>aggregate_metrics</a>()</tt>	Aggregates the metric value tensors and update ops into two lists.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L2292'>aggregate_metric_map</a>(names_to_tuples)</tt>	Aggregates the metric names to tuple dictionary.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops.py#L2324'>_remove_squeezable_dimensions</a>(predictions,labels,weights)</tt>	Squeeze last dim if needed.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops_test.py#L53'>_binary_2d_label_to_sparse_value</a>(labels)</tt>	Convert dense 2d binary indicator tensor to sparse tensor.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops_test.py#L86'>_binary_2d_label_to_sparse</a>(labels)</tt>	Convert dense 2d binary indicator tensor to sparse tensor.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops_test.py#L102'>_binary_3d_label_to_sparse_value</a>(labels)</tt>	Convert dense 3d binary indicator tensor to sparse tensor.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/metric_ops_test.py#L132'>_binary_3d_label_to_sparse</a>(labels)</tt>	Convert dense 3d binary indicator tensor to sparse tensor.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops.StreamingAUCTest <a href=' /contrib/metrics/python/ops/metric_ops_test.py#L1509'>np_auc</a>(predictions,labels,weights)</tt>	Computes the auc explicitely using numpy.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops.StreamingSparsePrecisionTest <a href=' /contrib/metrics/python/ops/metric_ops_test.py#L2482'>test_average_precision_some_labels_out_of_range</a>()</tt>	Tests that labels outside the [0 n_classes) range are ignored.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops.StreamingSparsePrecisionTest <a href=' /contrib/metrics/python/ops/metric_ops_test.py#L2631'>test_three_labels_at_k5_some_out_of_range</a>()</tt>	Tests that labels outside the [0 n_classes) range are ignored.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops.StreamingSparseRecallTest <a href=' /contrib/metrics/python/ops/metric_ops_test.py#L3307'>test_three_labels_at_k5_some_out_of_range</a>()</tt>	Tests that labels outside the [0 n_classes) count in denominator.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/histogram_ops.py#L39'>auc_using_histogram</a>(boolean_labels,scores,score_range,nbins)</tt>	Auc computed by maintaining histograms.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/histogram_ops.py#L97'>_check_labels_and_scores</a>(boolean_labels,scores,check_shape)</tt>	Check the rank of labels/scores return tensor versions.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/histogram_ops.py#L127'>_make_auc_histograms</a>(boolean_labels,scores,score_range,nbins)</tt>	Create histogram tensors from one batch of labels/scores.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/histogram_ops.py#L149'>_auc_hist_accumulate</a>(hist_true,hist_false,nbins,collections)</tt>	Accumulate histograms in new variables.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/histogram_ops.py#L178'>_auc_convert_hist_to_auc</a>(hist_true_acc,hist_false_acc,nbins)</tt>	Convert histograms to auc.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/histogram_ops.py#L223'>_strict_1d_cumsum</a>(tensor,len_tensor)</tt>	Cumsum of a 1d tensor with defined shape by padding and convolving.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.ops. <a href=' /contrib/metrics/python/ops/histogram_ops.py#L237'>_strict_conv1d</a>(x,h)</tt>	Return x * h for rank 1 tensors x and h.
<tt style='background-color:#E8E8E8;'> contrib.metrics.python.metrics. <a href=' /contrib/metrics/python/metrics/classification.py#L29'>accuracy</a>(predictions,labels,weights,name)</tt>	Computes the percentage of times that predictions matches labels.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxLossTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_loss_test.py#L99'>_test_sparsemax_loss_against_numpy</a>(dtype,random,use_gpu)</tt>	Check sparsemax-loss kernel against numpy.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxLossTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_loss_test.py#L112'>_test_constant_add</a>(dtype,random,use_gpu)</tt>	Check sparsemax-loss proposition 3.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxLossTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_loss_test.py#L131'>_test_sparsemax_loss_positive</a>(dtype,random,use_gpu)</tt>	Check sparsemax-loss proposition 4.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxLossTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_loss_test.py#L142'>_test_sparsemax_loss_zero</a>(dtype,random,use_gpu)</tt>	Check sparsemax-loss proposition 5.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxLossTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_loss_test.py#L161'>_test_gradient_against_estimate</a>(dtype,random,use_gpu)</tt>	Check sparsemax-loss rop aginst estimated-loss rop.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxLossTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_loss_test.py#L180'>_test_gradient_against_numpy</a>(dtype,random,use_gpu)</tt>	Check sparsemax-loss rop aginst numpy rop.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_test.py#L79'>_test_sparsemax_against_numpy</a>(dtype,random,use_gpu)</tt>	Check sparsemax kernel against numpy.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_test.py#L90'>_test_sparsemax_of_zero</a>(dtype,random,use_gpu)</tt>	Check sparsemax proposition 1 part 1.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_test.py#L100'>_test_sparsemax_of_inf</a>(dtype,random,use_gpu)</tt>	Check sparsemax proposition 1 part 2.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_test.py#L121'>_test_constant_add</a>(dtype,random,use_gpu)</tt>	Check sparsemax proposition 2.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_test.py#L137'>_test_permutation</a>(dtype,random,use_gpu)</tt>	Check sparsemax proposition 3.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_test.py#L154'>_test_diffrence</a>(dtype,random,use_gpu)</tt>	Check sparsemax proposition 4.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_test.py#L175'>_test_two_dimentional</a>(dtype,random,use_gpu)</tt>	Check two dimentation sparsemax case.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_test.py#L190'>_test_gradient_against_estimate</a>(dtype,random,use_gpu)</tt>	Check sparsemax rop aginst estimated rop.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.kernel_tests.SparsemaxTest <a href=' /contrib/sparsemax/python/kernel_tests/sparsemax_test.py#L206'>_test_gradient_against_numpy</a>(dtype,random,use_gpu)</tt>	Check sparsemax rop aginst numpy rop.
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.ops. <a href=' /contrib/sparsemax/python/ops/sparsemax_loss.py#L30'>sparsemax_loss</a>(logits,sparsemax,labels,name)</tt>	Computes sparsemax loss function [1].
<tt style='background-color:#E8E8E8;'> contrib.sparsemax.python.ops. <a href=' /contrib/sparsemax/python/ops/sparsemax.py#L31'>sparsemax</a>(logits,name)</tt>	Computes sparsemax activations [1].
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python. <a href=' /contrib/kernel_methods/python/kernel_estimators_test.py#L33'>_linearly_separable_binary_input_fn</a>()</tt>	Returns linearly-separable data points binary classification.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python. <a href=' /contrib/kernel_methods/python/kernel_estimators_test.py#L41'>_linearly_inseparable_binary_input_fn</a>()</tt>	Returns non-linearly-separable data points binary classification.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.KernelLinearClassifierTest <a href=' /contrib/kernel_methods/python/kernel_estimators_test.py#L52'>testNoFeatureColumnsOrKernelMappers</a>()</tt>	Tests that at least one of feature columns or kernels is provided.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.KernelLinearClassifierTest <a href=' /contrib/kernel_methods/python/kernel_estimators_test.py#L57'>testInvalidKernelMapper</a>()</tt>	Valueerror raised when the kernel mappers provided have invalid type.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.KernelLinearClassifierTest <a href=' /contrib/kernel_methods/python/kernel_estimators_test.py#L71'>testInvalidNumberOfClasses</a>()</tt>	Valueerror raised when the kernel mappers provided have invalid type.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.KernelLinearClassifierTest <a href=' /contrib/kernel_methods/python/kernel_estimators_test.py#L79'>testLinearlySeparableBinaryDataNoKernels</a>()</tt>	Tests classifier w/o kernels log regression for lin-separable data.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.KernelLinearClassifierTest <a href=' /contrib/kernel_methods/python/kernel_estimators_test.py#L106'>testLinearlyInseparableBinaryDataWithAndWithoutKernels</a>()</tt>	Tests classifier w/ and w/o kernels on non-linearly-separable data.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.KernelLinearClassifierTest <a href=' /contrib/kernel_methods/python/kernel_estimators_test.py#L149'>testVariablesWithAndWithoutKernels</a>()</tt>	Tests variables w/ and w/o kernel.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.KernelLinearClassifierTest <a href=' /contrib/kernel_methods/python/kernel_estimators_test.py#L191'>testClassifierWithAndWithoutKernelsNoRealValuedColumns</a>()</tt>	Tests kernels have no effect for non-real valued columns.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.KernelLinearClassifierTest <a href=' /contrib/kernel_methods/python/kernel_estimators_test.py#L235'>testMulticlassDataWithAndWithoutKernels</a>()</tt>	Tests classifier w/ and w/o kernels on multiclass data.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python. <a href=' /contrib/kernel_methods/python/kernel_estimators.py#L37'>_check_valid_kernel_mappers</a>(kernel_mappers)</tt>	Checks that the input kernel_mappers are valid.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python. <a href=' /contrib/kernel_methods/python/kernel_estimators.py#L48'>_check_valid_head</a>(head)</tt>	Returns true if the provided head is supported.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python. <a href=' /contrib/kernel_methods/python/kernel_estimators.py#L58'>_update_features_and_columns</a>(features,feature_columns,kernel_mappers_dict)</tt>	Updates features and feature_columns based on provided kernel mappers.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python. <a href=' /contrib/kernel_methods/python/kernel_estimators.py#L115'>_kernel_model_fn</a>(features,labels,mode,params)</tt>	Model_fn for the estimator using kernel methods.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python._KernelEstimator <a href=' /contrib/kernel_methods/python/kernel_estimators.py#L155'>__init__</a>(feature_columns,model_dir,weight_column_name,head)</tt>	Constructs a _kernelestimator object.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.KernelLinearClassifier <a href=' /contrib/kernel_methods/python/kernel_estimators.py#L257'>__init__</a>(feature_columns,model_dir,n_classes,weight_column_name)</tt>	Construct a kernellinearclassifier estimator object.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.KernelLinearClassifier <a href=' /contrib/kernel_methods/python/kernel_estimators.py#L310'>predict_classes</a>(input_fn)</tt>	Runs inference to determine the predicted class per instance.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.KernelLinearClassifier <a href=' /contrib/kernel_methods/python/kernel_estimators.py#L326'>predict_proba</a>(input_fn)</tt>	Runs inference to determine the class probability predictions.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.mappers. <a href=' /contrib/kernel_methods/python/mappers/random_fourier_features_test.py#L33'>_inner_product</a>(x,y)</tt>	Inner product between tensors x and y.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.mappers. <a href=' /contrib/kernel_methods/python/mappers/random_fourier_features_test.py#L49'>_compute_exact_rbf_kernel</a>(x,y,stddev)</tt>	Computes exact rbf kernel given input tensors x and y and stddev.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.mappers.RandomFourierFeatureMapper <a href=' /contrib/kernel_methods/python/mappers/random_fourier_features.py#L62'>__init__</a>(input_dim,output_dim,stddev,seed)</tt>	Constructs a randomfourierfeaturemapper instance.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.mappers.RandomFourierFeatureMapper <a href=' /contrib/kernel_methods/python/mappers/random_fourier_features.py#L89'>name</a>()</tt>	Returns a name for the randomfourierfeaturemapper instance.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.mappers.RandomFourierFeatureMapper <a href=' /contrib/kernel_methods/python/mappers/random_fourier_features.py#L109'>map</a>(input_tensor)</tt>	Maps each row of input_tensor using random fourier features.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.mappers.DenseKernelMapper <a href=' /contrib/kernel_methods/python/mappers/dense_kernel_mapper.py#L40'>map</a>(input_tensor)</tt>	Main dense-tensor-in-dense-tensor-out dtidto map method.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.mappers.DenseKernelMapper <a href=' /contrib/kernel_methods/python/mappers/dense_kernel_mapper.py#L51'>name</a>()</tt>	Returns the name of the kernel mapper.
<tt style='background-color:#E8E8E8;'> contrib.kernel_methods.python.mappers.DenseKernelMapper <a href=' /contrib/kernel_methods/python/mappers/dense_kernel_mapper.py#L56'>output_dim</a>()</tt>	Returns the output dimension of the mapping.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/params_ops.py#L61'>Uf</a>(lo,hi)</tt>	Uniformly distributed floating number.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/params_ops.py#L66'>Ui</a>(lo,hi)</tt>	Uniformly distributed integer inclusive limits.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/params_ops.py#L71'>Lf</a>(lo,hi)</tt>	Log-uniform distributed floatint point number.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/params_ops.py#L76'>Li</a>(lo,hi)</tt>	Log-uniform distributed integer inclusive limits.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/params_ops.py#L82'>Nt</a>(mu,sigma,limit)</tt>	Normally distributed floating point number with truncation.
<tt style='background-color:#E8E8E8;'> contrib.specs.python.Conc <a href=' /contrib/specs/python/specs_ops.py#L53'>__init__</a>(dim)</tt>	Concatenates tensors along the given dimension.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/specs_ops.py#L132'>Clstm2</a>(n)</tt>	2d lstm with 3x3 pre-convolution.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/specs_ops.py#L137'>Dws</a>(n)</tt>	Depth-wise convolution + sigmoid used after lstm.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/specs_ops.py#L142'>Dwm</a>(n)</tt>	Depth-wise convolution + softmax used after lstm.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/specs_ops.py#L156'>Var</a>(name)</tt>	Implements an operator that generates a variable.
<tt style='background-color:#E8E8E8;'> contrib.specs.python.Shared <a href=' /contrib/specs/python/specs_ops.py#L191'>__init__</a>(subnet,name,scope)</tt>	Create the shared operator.
<tt style='background-color:#E8E8E8;'> contrib.specs.python.Shared <a href=' /contrib/specs/python/specs_ops.py#L226'>funcall</a>(x)</tt>	Apply the shared operator to an input.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/specs_lib.py#L37'>check_keywords</a>(spec)</tt>	Check for common python keywords in spec.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/specs_lib.py#L56'>get_positional</a>(args,kw,kw_overrides)</tt>	Interpolates keyword arguments into argument lists.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/specs_lib.py#L189'>External</a>(module_name,function_name)</tt>	Import a function from an external module.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/specs_lib.py#L207'>Import</a>(statements)</tt>	Import a function by exec.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/specs_lib.py#L228'>debug</a>(mode)</tt>	Turn on/off debugging mode.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/summaries.py#L53'>_truncate_structure</a>(x)</tt>	A helper function that disables recursion in tf_structure.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/summaries.py#L75'>tf_structure</a>(x,include_shapes,finished)</tt>	A postfix expression summarizing the tf graph.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/summaries.py#L114'>tf_print</a>(x,depth,finished,printer)</tt>	A simple print function for a tensorflow graph.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/summaries.py#L147'>tf_num_params</a>(x)</tt>	Number of parameters in a tensorflow subgraph.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/summaries.py#L167'>tf_left_split</a>(op)</tt>	Split the parameters of op for left recursion.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/summaries.py#L185'>tf_parameter_iter</a>(x)</tt>	Iterate over the left branches of a graph and yield sizes.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/summaries.py#L210'>_combine_filter</a>(x)</tt>	A filter for combining successive layers with similar names.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/summaries.py#L229'>tf_parameter_summary</a>(x,printer,combine)</tt>	Summarize parameters by depth.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/summaries.py#L245'>tf_spec_structure</a>(spec,inputs,input_shape,input_type)</tt>	Return a postfix representation of the specification.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/summaries.py#L273'>tf_spec_summary</a>(spec,inputs,input_shape,input_type)</tt>	Output a summary of the specification.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/summaries.py#L297'>tf_spec_print</a>(spec,inputs,input_shape,input_type)</tt>	Print a tree representing the spec.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/specs.py#L29'>eval_params</a>(params,environment)</tt>	Evaluates a parameter specification and returns the environment.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/specs.py#L51'>eval_spec</a>(spec,environment)</tt>	Evaluates a spec and returns the environment.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/specs.py#L79'>create_net_fun</a>(spec,environment)</tt>	Evaluates a spec and returns the binding of net.
<tt style='background-color:#E8E8E8;'> contrib.specs.python. <a href=' /contrib/specs/python/specs.py#L106'>create_net</a>(spec,inputs,environment)</tt>	Evaluates a spec and creates a network instance given the inputs.
<tt style='background-color:#E8E8E8;'> contrib.specs.python.LocalImport <a href=' /contrib/specs/python/specs.py#L133'>__init__</a>(names)</tt>	Create a context manager that binds the names in values.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/bundle_shim.py#L36'>_add_input_to_signature_def</a>(tensor_name,map_key,signature_def)</tt>	Add input tensor to signature_def.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/bundle_shim.py#L52'>_add_output_to_signature_def</a>(tensor_name,map_key,signature_def)</tt>	Add output tensor to signature_def.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/bundle_shim.py#L69'>_convert_default_signature_to_signature_def</a>(signatures)</tt>	Convert default signature to object of type signaturedef.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/bundle_shim.py#L114'>_convert_named_signatures_to_signature_def</a>(signatures)</tt>	Convert named signatures to object of type signaturedef.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/bundle_shim.py#L151'>_convert_signatures_to_signature_defs</a>(metagraph_def)</tt>	Produce default and named upconverted signaturedef objects from signatures.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/bundle_shim.py#L181'>_load_saved_model_from_session_bundle_path</a>(export_dir,target,config)</tt>	Load legacy tf exporter/sessionbundle checkpoint.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/bundle_shim.py#L235'>load_session_bundle_or_saved_model_bundle_from_path</a>(export_dir,tags,target,config)</tt>	Load session bundle from the given path.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/session_bundle.py#L37'>maybe_session_bundle_dir</a>(export_dir)</tt>	Checks if the model path contains session bundle model.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/session_bundle.py#L53'>load_session_bundle_from_path</a>(export_dir,target,config,meta_graph_def)</tt>	Load session bundle from the given path.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/gc.py#L80'>largest_export_versions</a>(n)</tt>	Creates a filter that keeps the largest n export versions.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/gc.py#L101'>one_of_every_n_export_versions</a>(n)</tt>	Creates a filter that keeps one of every n export versions.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/gc.py#L131'>mod_export_version</a>(n)</tt>	Creates a filter that keeps every export that is a multiple of n.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/gc.py#L150'>union</a>(lf,rf)</tt>	Creates a filter that keeps the union of two filters.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/gc.py#L168'>negation</a>(f)</tt>	Negate a filter.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/gc.py#L185'>get_paths</a>(base_dir,parser)</tt>	Gets a list of paths in a given directory.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/exporter.py#L44'>gfile_copy_callback</a>(files_to_copy,export_dir_path)</tt>	Callback to copy files using gfile copy to an export directory.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/exporter.py#L74'>regression_signature</a>(input_tensor,output_tensor)</tt>	Creates a regression signature.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/exporter.py#L91'>classification_signature</a>(input_tensor,classes_tensor,scores_tensor)</tt>	Creates a classification signature.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle. <a href=' /contrib/session_bundle/exporter.py#L114'>generic_signature</a>(name_tensor_map)</tt>	Creates a generic signature of name to tensor name.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle.Exporter <a href=' /contrib/session_bundle/exporter.py#L230'>export</a>(export_dir_base,global_step_tensor,sess,exports_to_keep)</tt>	Exports the model.
<tt style='background-color:#E8E8E8;'> contrib.session_bundle.Exporter <a href=' /contrib/session_bundle/exporter.py#L309'>_file_path_value</a>(path_tensor)</tt>	Returns the filepath value stored in constant path_tensor.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/transform.py#L50'>replace_t_with_placeholder_handler</a>(info,t)</tt>	Transform a tensor into a placeholder tensor.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/transform.py#L67'>keep_t_if_possible_handler</a>(info,t)</tt>	Transform a tensor into itself identity if possible.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/transform.py#L86'>assign_renamed_collections_handler</a>(info,elem,elem_)</tt>	Add the transformed elem to the renamed collections of elem.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/transform.py#L109'>transform_op_if_inside_handler</a>(info,op,keep_if_possible)</tt>	Transform an optional op only if it is inside the subgraph.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/transform.py#L132'>copy_op_handler</a>(info,op,copy_shape)</tt>	Copy a tf operation.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.TransformerInfo <a href=' /contrib/graph_editor/transform.py#L200'>_get_transformed_map</a>(top)</tt>	Return the correct container depending on the type of top.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.TransformerInfo <a href=' /contrib/graph_editor/transform.py#L211'>_transformed_elem</a>(original_top,missing_fn)</tt>	Return the transformed op/tensor corresponding to the original one.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.TransformerInfo <a href=' /contrib/graph_editor/transform.py#L232'>_original_elem</a>(transformed_top,missing_fn)</tt>	Return the original op/tensor corresponding to the transformed one.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.TransformerInfo <a href=' /contrib/graph_editor/transform.py#L252'>transformed</a>(original,missing_fn)</tt>	Return the transformed op/tensor corresponding to the original one.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.TransformerInfo <a href=' /contrib/graph_editor/transform.py#L270'>original</a>(transformed,missing_fn)</tt>	Return the original op/tensor corresponding to the transformed one.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor._TmpInfo <a href=' /contrib/graph_editor/transform.py#L333'>new_name</a>(name)</tt>	Compute a destination name from a source name.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.Transformer <a href=' /contrib/graph_editor/transform.py#L391'>__call__</a>(sgv,dst_graph,dst_scope,src_scope)</tt>	Execute the transformation.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.Transformer <a href=' /contrib/graph_editor/transform.py#L442'>_copy_ops</a>(info)</tt>	Copy ops without connecting them.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.Transformer <a href=' /contrib/graph_editor/transform.py#L460'>_connect_ops</a>(info)</tt>	Connect the previously copied ops.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.Transformer <a href=' /contrib/graph_editor/transform.py#L480'>_transform_sgv</a>(info,sgv)</tt>	Transform a subgraph view.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.Transformer <a href=' /contrib/graph_editor/transform.py#L521'>_transformed_t</a>(info,t)</tt>	Return tre transformed tensor of t.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/transform.py#L536'>copy</a>(sgv,dst_graph,dst_scope,src_scope)</tt>	Copy a subgraph.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/transform.py#L571'>copy_with_input_replacements</a>(sgv,replacement_ts,dst_graph,dst_scope)</tt>	Copy a subgraph replacing some of its inputs.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/transform.py#L620'>graph_replace</a>(target_ts,replacement_ts,dst_scope,src_scope)</tt>	Create a new graph which compute the targets from the replaced tensors.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L41'>concatenate_unique</a>(la,lb)</tt>	Add all the elements of lb to la if they are not there already.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L94'>is_iterable</a>(obj)</tt>	Return true if the object is iterable.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L103'>flatten_tree</a>(tree,leaves)</tt>	Flatten a tree into a list.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L126'>transform_tree</a>(tree,fn,iterable_type)</tt>	Transform all the nodes of a tree.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L163'>check_graphs</a>()</tt>	Check that all the element in args belong to the same graph.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L179'>get_unique_graph</a>(tops,check_types,none_if_empty)</tt>	Return the unique graph used by the all the elements in tops.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L217'>make_list_of_op</a>(ops,check_graph,allow_graph,ignore_ts)</tt>	Convert ops to a list of tf operation.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L250'>get_tensors</a>(graph)</tt>	Get all the tensors which are input or output of an op in the graph.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L268'>make_list_of_t</a>(ts,check_graph,allow_graph,ignore_ops)</tt>	Convert ts to a list of tf tensor.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L298'>get_generating_ops</a>(ts)</tt>	Return all the generating ops of the tensors in ts.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L312'>get_consuming_ops</a>(ts)</tt>	Return all the consuming ops of the tensors in ts.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.ControlOutputs <a href=' /contrib/graph_editor/util.py#L334'>__init__</a>(graph)</tt>	Create a dictionary of control-output dependencies.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.ControlOutputs <a href=' /contrib/graph_editor/util.py#L353'>update</a>()</tt>	Update the control outputs if the graph has changed.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.ControlOutputs <a href=' /contrib/graph_editor/util.py#L359'>_build</a>()</tt>	Build the control outputs dictionary.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.ControlOutputs <a href=' /contrib/graph_editor/util.py#L374'>get</a>(op)</tt>	Return the control outputs of op.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L406'>placeholder_name</a>(t,scope)</tt>	Create placeholder name for the graph editor.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L443'>make_placeholder_from_tensor</a>(t,scope)</tt>	Create a tf placeholder for the graph editor.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L463'>make_placeholder_from_dtype_and_shape</a>(dtype,shape,scope)</tt>	Create a tf placeholder for the graph editor.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L485'>get_predefined_collection_names</a>()</tt>	Return all the predefined collection names.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L491'>find_corresponding_elem</a>(target,dst_graph,dst_scope,src_scope)</tt>	Find corresponding op/tensor in a different graph.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/util.py#L527'>find_corresponding</a>(targets,dst_graph,dst_scope,src_scope)</tt>	Find corresponding ops/tensors in a different graph.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L41'>_check_ts_compatibility</a>(ts0,ts1)</tt>	Make sure the shape and dtype of the two tensor's lists are compatible.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor._RerouteMode <a href=' /contrib/graph_editor/reroute.py#L80'>check</a>(cls,mode)</tt>	Check swap mode.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L101'>_reroute_t</a>(t0,t1,consumers1,can_modify)</tt>	Reroute the end of the tensors t0 t1.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L135'>_reroute_ts</a>(ts0,ts1,mode,can_modify)</tt>	Reroute the end of the tensors in each pair t0 t1 in ts0 x ts1.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L208'>swap_ts</a>(ts0,ts1,can_modify,cannot_modify)</tt>	For each tensor's pair swap the end of t0 t1.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L233'>reroute_ts</a>(ts0,ts1,can_modify,cannot_modify)</tt>	For each tensor's pair replace the end of t1 by the end of t0.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L259'>_reroute_sgv_remap</a>(sgv0,sgv1,mode)</tt>	Remap in place the inputs of two subgraph views to mimic the reroute.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L314'>_reroute_sgv_inputs</a>(sgv0,sgv1,mode)</tt>	Re-route all the inputs of two subgraphs.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L344'>_reroute_sgv_outputs</a>(sgv0,sgv1,mode)</tt>	Re-route all the outputs of two operations.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L370'>_reroute_sgv</a>(sgv0,sgv1,mode)</tt>	Re-route both the inputs and the outputs of the two subgraph views.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L394'>swap_inputs</a>(sgv0,sgv1)</tt>	Swap all the inputs of sgv0 and sgv1 (see reroute_inputs).
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L399'>reroute_inputs</a>(sgv0,sgv1)</tt>	Re-route all the inputs of sgv0 to sgv1 (see reroute_inputs).
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L404'>swap_outputs</a>(sgv0,sgv1)</tt>	Swap all the outputs of sgv0 and sgv1 (see _reroute_outputs).
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L409'>reroute_outputs</a>(sgv0,sgv1)</tt>	Re-route all the outputs of sgv0 to sgv1 (see _reroute_outputs).
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L414'>swap_ios</a>(sgv0,sgv1)</tt>	Swap the inputs and outputs of sgv1 to sgv0 (see _reroute).
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L419'>reroute_ios</a>(sgv0,sgv1)</tt>	Re-route the inputs and outputs of sgv0 to sgv1 (see _reroute).
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L424'>remove_control_inputs</a>(op,cops)</tt>	Remove the control inputs cops from co.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/reroute.py#L450'>add_control_inputs</a>(op,cops)</tt>	Add the control inputs cops to op.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/edit.py#L38'>detach_control_inputs</a>(sgv)</tt>	Detach all the external control inputs of the subgraph sgv.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/edit.py#L51'>detach_control_outputs</a>(sgv,control_outputs)</tt>	Detach all the external control outputs of the subgraph sgv.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/edit.py#L70'>detach_inputs</a>(sgv,control_inputs)</tt>	Detach the inputs of a subgraph view.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/edit.py#L101'>detach_outputs</a>(sgv,control_outputs)</tt>	Detach the output of a subgraph view.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/edit.py#L141'>detach</a>(sgv,control_inputs,control_outputs,control_ios)</tt>	Detach both the inputs and the outputs of a subgraph view.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/edit.py#L172'>connect</a>(sgv0,sgv1,disconnect_first)</tt>	Connect the outputs of sgv0 to the inputs of sgv1.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/edit.py#L201'>bypass</a>(sgv)</tt>	Bypass the given subgraph by connecting its inputs to its outputs.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/subgraph.py#L39'>_finalize_index</a>(index_or_t,ts)</tt>	Returns index as is or return index of tensor in ts.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/subgraph.py#L47'>_finalize_indices</a>(list_of_index_or_t,ts)</tt>	Returns index in indices as is or replace with tensor's index.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/subgraph.py#L52'>_check_within_range</a>(mapping,n,repetition)</tt>	Check is the mapping is valid.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L176'>__init__</a>(inside_ops,passthrough_ts)</tt>	Create a subgraph containing the given ops and the "passthrough" tensors.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L254'>copy</a>()</tt>	Return a copy of itself.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L234'>_assign_from</a>(other)</tt>	Assign other to itself.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L282'>remap_default</a>(remove_input_map,remove_output_map)</tt>	Remap the inputs and/or outputs to the default mapping.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L363'>remap_inputs</a>(new_input_indices)</tt>	Remap the inputs of the subgraph.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L386'>remap_outputs</a>(new_output_indices)</tt>	Remap the output of the subgraph.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L324'>remap_outputs_make_unique</a>()</tt>	Remap the outputs so that all the tensors appears only once.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L330'>remap_outputs_to_consumers</a>()</tt>	Remap the outputs to match the number of consumers.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L351'>remove_unused_ops</a>(control_inputs)</tt>	Remove unused ops.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L409'>remap</a>(new_input_indices,new_output_indices)</tt>	Remap the inputs and outputs of the subgraph.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L437'>find_op_by_name</a>(op_name)</tt>	Return the op named op_name.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L483'>graph</a>()</tt>	The underlying tf graph.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L488'>ops</a>()</tt>	The operations in this subgraph view.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L493'>inputs</a>()</tt>	The input tensors of this subgraph view.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L498'>connected_inputs</a>()</tt>	The connected input tensors of this subgraph view.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L503'>outputs</a>()</tt>	The output tensors of this subgraph view.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L508'>connected_outputs</a>()</tt>	The connected output tensors of this subgraph view.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L513'>passthroughs</a>()</tt>	The passthrough tensors going straight from input to output.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L518'>__bool__</a>()</tt>	Allows for implicit boolean conversion.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L525'>op</a>(op_id)</tt>	Get an op by its index.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L529'>is_passthrough</a>(t)</tt>	Check whether a tensor is passthrough.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L533'>__enter__</a>()</tt>	Allow python context to minimize the life time of a subgraph view.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L553'>input_index</a>(t)</tt>	Find the input index corresponding to the given input tensor t.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L570'>output_index</a>(t)</tt>	Find the output index corresponding to given output tensor t.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor.SubGraphView <a href=' /contrib/graph_editor/subgraph.py#L587'>consumers</a>()</tt>	Return a python set of all the consumers of this subgraph view.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/subgraph.py#L604'>_check_graph</a>(sgv,graph)</tt>	Check if sgv belongs to the given graph.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/subgraph.py#L629'>make_view</a>()</tt>	Create a subgraphview from selected operations and passthrough tensors.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/subgraph.py#L658'>make_view_from_scope</a>(scope,graph)</tt>	Make a subgraph from a name scope.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L53'>can_be_regex</a>(obj)</tt>	Return true if obj can be turned into a regular expression.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L58'>make_regex</a>(obj)</tt>	Return a compiled regular expression.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L77'>_get_input_ts</a>(ops)</tt>	Compute the list of unique input tensors of all the op in ops.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L98'>_get_output_ts</a>(ops)</tt>	Compute the list of unique output tensors of all the op in ops.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L115'>filter_ts</a>(ops,positive_filter)</tt>	Get all the tensors which are input or output of an op in ops.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L135'>filter_ts_from_regex</a>(ops,regex)</tt>	Get all the tensors linked to ops that match the given regex.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L153'>filter_ops</a>(ops,positive_filter)</tt>	Get the ops passing the given filter.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L171'>filter_ops_from_regex</a>(ops,regex)</tt>	Get all the operations that match the given regex.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L189'>get_name_scope_ops</a>(ops,scope)</tt>	Get all the operations under the given scope path.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L205'>check_cios</a>(control_inputs,control_outputs,control_ios)</tt>	Do various check on control_inputs and control_outputs.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L243'>get_ops_ios</a>(ops,control_inputs,control_outputs,control_ios)</tt>	Return all the tf operation which are connected to an op in ops.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L276'>compute_boundary_ts</a>(ops)</tt>	Compute the tensors at the boundary of a set of ops.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L328'>get_within_boundary_ops</a>(ops,seed_ops,boundary_ops,inclusive)</tt>	Return all the tf operation within the given boundary.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L383'>get_forward_walk_ops</a>(seed_ops,inclusive,within_ops,stop_at_ts)</tt>	Do a forward graph walk and return all the visited ops.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L450'>get_backward_walk_ops</a>(seed_ops,inclusive,within_ops,stop_at_ts)</tt>	Do a backward graph walk and return all the visited ops.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L514'>get_walks_intersection_ops</a>(forward_seed_ops,backward_seed_ops,forward_inclusive,backward_inclusive)</tt>	Return the intersection of a forward and a backward walk.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L567'>get_walks_union_ops</a>(forward_seed_ops,backward_seed_ops,forward_inclusive,backward_inclusive)</tt>	Return the union of a forward and a backward walk.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L619'>select_ops</a>()</tt>	Helper to select operations.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L685'>select_ts</a>()</tt>	Helper to select tensors.
<tt style='background-color:#E8E8E8;'> contrib.graph_editor. <a href=' /contrib/graph_editor/select.py#L751'>select_ops_and_ts</a>()</tt>	Helper to select operations and tensors.
<tt style='background-color:#E8E8E8;'> contrib.nn.python.ops. <a href=' /contrib/nn/python/ops/cross_entropy.py#L28'>deprecated_flipped_softmax_cross_entropy_with_logits</a>(logits,labels,dim,name)</tt>	Computes softmax cross entropy between logits and labels.
<tt style='background-color:#E8E8E8;'> contrib.nn.python.ops. <a href=' /contrib/nn/python/ops/cross_entropy.py#L75'>deprecated_flipped_sparse_softmax_cross_entropy_with_logits</a>(logits,labels,name)</tt>	Computes sparse softmax cross entropy between logits and labels.
<tt style='background-color:#E8E8E8;'> contrib.nn.python.ops. <a href=' /contrib/nn/python/ops/cross_entropy.py#L129'>deprecated_flipped_sigmoid_cross_entropy_with_logits</a>(logits,targets,name)</tt>	Computes sigmoid cross entropy given logits.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_decorator_test.py#L58'>test_decorated_function</a>(x)</tt>	Test decorated function docstring.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect_test.py#L50'>test_decorated_function_with_defaults</a>(a,b,c)</tt>	Test decorated function with defaults docstring.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/keyword_args.py#L27'>keyword_args_only</a>(func)</tt>	Decorator for marking specific function accepting keyword args only.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/example_parser_configuration.py#L26'>extract_example_parser_configuration</a>(parse_example_op,sess)</tt>	Returns an exampleparserconfig proto.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_decorator_test.py#L36'>test_decorator_increment_first_int_arg</a>(target)</tt>	This test decorator skips past self as args[0] in the bound case.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_decorator_test.py#L53'>test_function</a>(x)</tt>	Test function docstring.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/all_util.py#L30'>make_all</a>(module_name,doc_string_modules)</tt>	Generates __all__ from the docstring of one or more modules.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/all_util.py#L66'>reveal_undocumented</a>(symbol_name,target_module)</tt>	Reveals a symbol that was previously removed by remove_undocumented.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/all_util.py#L86'>remove_undocumented</a>(module_name,allowed_exception_list,doc_string_modules)</tt>	Removes symbols in a module that are not referenced by a docstring.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/deprecation.py#L31'>_add_deprecated_function_notice_to_docstring</a>(doc,date,instructions)</tt>	Adds a deprecation notice to a docstring for deprecated functions.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/deprecation.py#L42'>_add_deprecated_arg_notice_to_docstring</a>(doc,date,instructions)</tt>	Adds a deprecation notice to a docstring for deprecated arguments.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/deprecation.py#L61'>_call_location</a>()</tt>	Returns call location given level up from current call.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/deprecation.py#L78'>deprecated</a>(date,instructions)</tt>	Decorator for marking functions or methods deprecated.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/deprecation.py#L134'>deprecated_args</a>(date,instructions)</tt>	Decorator for marking specific function arguments as deprecated.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/deprecation.py#L296'>deprecated_arg_values</a>(date,instructions)</tt>	Decorator for marking specific function argument values as deprecated.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/deprecation.py#L354'>deprecated_argument_lookup</a>(new_name,new_value,old_name,old_value)</tt>	Looks up deprecated argument name and ensures both are not used.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_contextlib.py#L25'>contextmanager</a>(target)</tt>	A tf_decorator-aware wrapper for contextlib contextmanager.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/nest.py#L47'>_sequence_like</a>(instance,args)</tt>	Converts the sequence args to the same type as instance.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/nest.py#L77'>is_sequence</a>(seq)</tt>	Returns a true if its input is a collections sequence except strings.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/nest.py#L90'>flatten</a>(nest)</tt>	Returns a flat sequence from a given nested structure.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/nest.py#L125'>assert_same_structure</a>(nest1,nest2,check_types)</tt>	Asserts that two structures are nested in the same way.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/nest.py#L150'>flatten_dict_items</a>(dictionary)</tt>	Returns a dictionary with flattened keys and values.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/nest.py#L206'>_packed_nest_with_indices</a>(structure,flat,index)</tt>	Helper function for pack_nest_as.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/nest.py#L237'>pack_sequence_as</a>(structure,flat_sequence)</tt>	Returns a given flattened sequence packed into a nest.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/nest.py#L275'>map_structure</a>(func)</tt>	Applies func to each entry in structure and returns a new structure.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/nest.py#L328'>_yield_flat_up_to</a>(shallow_tree,input_tree)</tt>	Yields elements input_tree partially flattened up to shallow_tree.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/nest.py#L338'>assert_shallow_structure</a>(shallow_tree,input_tree,check_types)</tt>	Asserts that shallow_tree is a shallow structure of input_tree.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/nest.py#L397'>flatten_up_to</a>(shallow_tree,input_tree)</tt>	Flattens input_tree up to shallow_tree.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/nest.py#L470'>map_structure_up_to</a>(shallow_tree,func)</tt>	Applies a function or op to a number of partially flattened inputs.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_should_use.py#L28'>_add_should_use_warning</a>(x,fatal_error)</tt>	Wraps object x so that if it is never used a warning is logged.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_should_use.py#L109'>should_use_result</a>(fn)</tt>	Function wrapper that ensures the function's output is used.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_should_use.py#L143'>must_use_result_or_fatal</a>(fn)</tt>	Function wrapper that ensures the function's output is used.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/compat.py#L46'>as_bytes</a>(bytes_or_text,encoding)</tt>	Converts either bytes or unicode to bytes, using utf-8 encoding for text.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/compat.py#L68'>as_text</a>(bytes_or_text,encoding)</tt>	Returns the given argument as a unicode string.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/compat.py#L96'>as_str_any</a>(value)</tt>	Converts to str as str value , but use as_str for bytes.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L27'>currentframe</a>()</tt>	Tfdecorator-aware replacement for inspect currentframe.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L32'>getargspec</a>(object)</tt>	Tfdecorator-aware replacement for inspect getargspec.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L48'>getcallargs</a>(func)</tt>	Tfdecorator-aware replacement for inspect getcallargs.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L79'>getdoc</a>(object)</tt>	Tfdecorator-aware replacement for inspect getdoc.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L94'>getfile</a>(object)</tt>	Tfdecorator-aware replacement for inspect getfile.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L99'>getmembers</a>(object,predicate)</tt>	Tfdecorator-aware replacement for inspect getmembers.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L104'>getmro</a>(cls)</tt>	Tfdecorator-aware replacement for inspect getmro.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L109'>getsource</a>(object)</tt>	Tfdecorator-aware replacement for inspect getsource.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L114'>isclass</a>(object)</tt>	Tfdecorator-aware replacement for inspect isclass.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L119'>isfunction</a>(object)</tt>	Tfdecorator-aware replacement for inspect isfunction.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L124'>ismethod</a>(object)</tt>	Tfdecorator-aware replacement for inspect ismethod.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L129'>ismodule</a>(object)</tt>	Tfdecorator-aware replacement for inspect ismodule.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L134'>isroutine</a>(object)</tt>	Tfdecorator-aware replacement for inspect isroutine.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_inspect.py#L139'>stack</a>(context)</tt>	Tfdecorator-aware replacement for inspect stack.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_should_use_test.py#L31'>reroute_error</a>(captured)</tt>	Temporarily reroute errors written to tf_logging error into captured.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/decorator_utils.py#L35'>_normalize_docstring</a>(docstring)</tt>	Normalizes the docstring.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/decorator_utils.py#L76'>add_notice_to_docstring</a>(doc,instructions,no_doc_str,suffix_str)</tt>	Adds a deprecation notice to a docstring.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_decorator.py#L66'>make_decorator</a>(target,decorator_func,decorator_name,decorator_doc)</tt>	Make a decorator from a wrapper and a target.
<tt style='background-color:#E8E8E8;'> python.util. <a href=' /python/util/tf_decorator.py#L96'>unwrap</a>(maybe_tf_decorator)</tt>	Unwraps an object into a list of tfdecorators and a final target.
<tt style='background-color:#E8E8E8;'> python.util.protobuf. <a href=' /python/util/protobuf/compare.py#L75'>assertProtoEqual</a>(a,b,check_initialized,normalize_numbers)</tt>	Fails with a useful error if a and b aren't equal.
<tt style='background-color:#E8E8E8;'> python.util.protobuf. <a href=' /python/util/protobuf/compare.py#L110'>NormalizeNumberFields</a>(pb)</tt>	Normalizes types and precisions of number fields in a protocol buffer.
<tt style='background-color:#E8E8E8;'> python.util.protobuf. <a href=' /python/util/protobuf/compare.py#L192'>ProtoEq</a>(a,b)</tt>	Compares two proto2 objects for equality.
<tt style='background-color:#E8E8E8;'> python.util.protobuf. <a href=' /python/util/protobuf/compare_test.py#L34'>LargePbs</a>()</tt>	Converts ascii string large pbs to messages.
<tt style='background-color:#E8E8E8;'> python.util.protobuf.ProtoEqTest <a href=' /python/util/protobuf/compare_test.py#L47'>assertNotEquals</a>(a,b)</tt>	Asserts that protoeq says a != b.
<tt style='background-color:#E8E8E8;'> python.util.protobuf.ProtoEqTest <a href=' /python/util/protobuf/compare_test.py#L52'>assertEquals</a>(a,b)</tt>	Asserts that protoeq says a == b.
<tt style='background-color:#E8E8E8;'> python.util.protobuf.ProtoEqTest <a href=' /python/util/protobuf/compare_test.py#L158'>testTagOrder</a>()</tt>	Tests that different fields are ordered by tag number.
<tt style='background-color:#E8E8E8;'> python.util.protobuf.AssertTest <a href=' /python/util/protobuf/compare_test.py#L278'>assertAll</a>(a)</tt>	Checks that all possible asserts pass.
<tt style='background-color:#E8E8E8;'> python.util.protobuf.AssertTest <a href=' /python/util/protobuf/compare_test.py#L282'>assertSameNotEqual</a>(a,b)</tt>	Checks that assertprotoequal() fails.
<tt style='background-color:#E8E8E8;'> python.util.protobuf.AssertTest <a href=' /python/util/protobuf/compare_test.py#L286'>assertNone</a>(a,b,message)</tt>	Checks that all possible asserts fail with the given message.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/optimize_for_inference_lib.py#L70'>optimize_for_inference</a>(input_graph_def,input_node_names,output_node_names,placeholder_type_enum)</tt>	Applies a series of inference optimizations on the input graph.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/optimize_for_inference_lib.py#L100'>ensure_graph_is_valid</a>(graph_def)</tt>	Makes sure that the graph is internally consistent.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/optimize_for_inference_lib.py#L125'>node_name_from_input</a>(node_name)</tt>	Strips off ports and other decorations to get the underlying node name.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/optimize_for_inference_lib.py#L135'>node_from_map</a>(node_map,name)</tt>	Pulls a node def from a dictionary for a given name.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/optimize_for_inference_lib.py#L154'>values_from_const</a>(node_def)</tt>	Extracts the values from a const nodedef as a numpy ndarray.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/optimize_for_inference_lib.py#L175'>fold_batch_norms</a>(input_graph_def)</tt>	Removes batch normalization ops by folding them into convolutions.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/optimize_for_inference_lib.py#L338'>fuse_resize_and_conv</a>(input_graph_def,output_node_names)</tt>	Merges preceding resize and mirror pad ops into a specialized convolution.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/optimize_for_inference.py#L102'>parse_args</a>()</tt>	Parses command line arguments.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/freeze_graph.py#L58'>freeze_graph</a>(input_graph,input_saver,input_binary,input_checkpoint)</tt>	Converts all variables in a graph and checkpoint into constants.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/import_pb_to_tensorboard.py#L23'>import_to_tensorboard</a>(model_dir,log_dir)</tt>	View an imported protobuf model ( pb file) as a graph in tensorboard.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L44'>_show_tag_sets</a>(saved_model_dir)</tt>	Prints the tag-sets stored in savedmodel directory.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L58'>_show_signature_def_map_keys</a>(saved_model_dir,tag_set)</tt>	Prints the keys for each signaturedef in the signaturedef map.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L77'>_get_inputs_tensor_info_from_meta_graph_def</a>(meta_graph_def,signature_def_key)</tt>	Gets tensorinfo for all inputs of the signaturedef.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L96'>_get_outputs_tensor_info_from_meta_graph_def</a>(meta_graph_def,signature_def_key)</tt>	Gets tensorinfos for all outputs of the signaturedef.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L115'>_show_inputs_outputs</a>(saved_model_dir,tag_set,signature_def_key)</tt>	Prints input and output tensorinfos.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L147'>_print_tensor_info</a>(tensor_info)</tt>	Prints details of the given tensor_info.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L165'>_show_all</a>(saved_model_dir)</tt>	Prints tag-set signaturedef and inputs/outputs information in savedmodel.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L186'>get_meta_graph_def</a>(saved_model_dir,tag_set)</tt>	Gets metagraphdef from savedmodel.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L214'>get_signature_def_map</a>(saved_model_dir,tag_set)</tt>	Gets signaturedef map from a metagraphdef in a savedmodel.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L233'>run_saved_model_with_feed_dict</a>(saved_model_dir,tag_set,signature_def_key,input_tensor_key_feed_dict)</tt>	Runs savedmodel and fetch all outputs.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L312'>preprocess_inputs_arg_string</a>(inputs_str)</tt>	Parses input arg into dictionary that maps input to file/variable tuple.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L359'>preprocess_input_exprs_arg_string</a>(input_exprs_str)</tt>	Parses input arg into dictionary that maps input key to python expression.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L388'>load_inputs_from_input_arg_string</a>(inputs_str,input_exprs_str)</tt>	Parses input arg strings and create inputs feed_dict.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L480'>show</a>(args)</tt>	Function triggered by show command.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L502'>run</a>(args)</tt>	Function triggered by run command.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/saved_model_cli.py#L515'>create_parser</a>()</tt>	Creates a parser that parse the command line arguments.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/selective_registration_header_lib.py#L36'>get_ops_and_kernels</a>(proto_fileformat,proto_files,default_ops_str)</tt>	Gets the ops and kernels needed from the model files.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/selective_registration_header_lib.py#L75'>get_header_from_ops_and_kernels</a>(ops_and_kernels,include_all_ops_and_kernels)</tt>	Returns a header for use with tensorflow selective_registration.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/selective_registration_header_lib.py#L157'>get_header</a>(graphs,proto_fileformat,default_ops)</tt>	Computes a header for use with tensorflow selective_registration.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/inspect_checkpoint.py#L32'>print_tensors_in_checkpoint_file</a>(file_name,tensor_name,all_tensors)</tt>	Prints tensors in a checkpoint file.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/inspect_checkpoint.py#L72'>parse_numpy_printoption</a>(kv_str)</tt>	Sets a single numpy printoption from a string of the form 'x=y'.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/strip_unused_lib.py#L32'>strip_unused</a>(input_graph_def,input_node_names,output_node_names,placeholder_type_enum)</tt>	Removes unused nodes from a graphdef.
<tt style='background-color:#E8E8E8;'> python.tools. <a href=' /python/tools/strip_unused_lib.py#L75'>strip_unused_from_files</a>(input_graph,input_binary,output_graph,output_binary)</tt>	Removes unused nodes from a graph file.
<tt style='background-color:#E8E8E8;'> python.saved_model. <a href=' /python/saved_model/utils_impl.py#L28'>build_tensor_info</a>(tensor)</tt>	Utility function to build tensorinfo proto.
<tt style='background-color:#E8E8E8;'> python.saved_model.SavedModelBuilder <a href=' /python/saved_model/builder_impl.py#L99'>_asset_path_from_tensor</a>(path_tensor)</tt>	Returns the filepath value stored in constant path_tensor.
<tt style='background-color:#E8E8E8;'> python.saved_model.SavedModelBuilder <a href=' /python/saved_model/builder_impl.py#L122'>_add_asset_to_collection</a>(asset_filename,asset_tensor)</tt>	Builds an asset proto and adds it to the asset collection of the graph.
<tt style='background-color:#E8E8E8;'> python.saved_model.SavedModelBuilder <a href=' /python/saved_model/builder_impl.py#L138'>_save_and_write_assets</a>(assets_collection_to_add)</tt>	Saves asset to the meta graph and writes asset files to disk.
<tt style='background-color:#E8E8E8;'> python.saved_model.SavedModelBuilder <a href=' /python/saved_model/builder_impl.py#L175'>_maybe_add_legacy_init_op</a>(legacy_init_op)</tt>	Add legacy init op to the savedmodel.
<tt style='background-color:#E8E8E8;'> python.saved_model.SavedModelBuilder <a href=' /python/saved_model/builder_impl.py#L190'>_add_main_op</a>(main_op)</tt>	Add main op to the savedmodel.
<tt style='background-color:#E8E8E8;'> python.saved_model.SavedModelBuilder <a href=' /python/saved_model/builder_impl.py#L204'>_maybe_save_assets</a>(assets_collection_to_add)</tt>	Saves assets to the meta graph.
<tt style='background-color:#E8E8E8;'> python.saved_model.SavedModelBuilder <a href=' /python/saved_model/builder_impl.py#L240'>_tag_and_add_meta_graph</a>(meta_graph_def,tags,signature_def_map)</tt>	Tags the meta graph def and adds it to the savedmodel.
<tt style='background-color:#E8E8E8;'> python.saved_model.SavedModelBuilder <a href=' /python/saved_model/builder_impl.py#L262'>_validate_tensor_info</a>(tensor_info)</tt>	Validates the tensorinfo proto.
<tt style='background-color:#E8E8E8;'> python.saved_model.SavedModelBuilder <a href=' /python/saved_model/builder_impl.py#L287'>_validate_signature_def_map</a>(signature_def_map)</tt>	Validates the signaturedef entries in the signature def map.
<tt style='background-color:#E8E8E8;'> python.saved_model.SavedModelBuilder <a href=' /python/saved_model/builder_impl.py#L307'>add_meta_graph</a>(tags,signature_def_map,assets_collection,legacy_init_op)</tt>	Adds the current meta graph to the savedmodel.
<tt style='background-color:#E8E8E8;'> python.saved_model.SavedModelBuilder <a href=' /python/saved_model/builder_impl.py#L368'>add_meta_graph_and_variables</a>(sess,tags,signature_def_map,assets_collection)</tt>	Adds the current meta graph to the savedmodel and saves variables.
<tt style='background-color:#E8E8E8;'> python.saved_model.SavedModelBuilder <a href=' /python/saved_model/builder_impl.py#L450'>save</a>(as_text)</tt>	Writes a savedmodel protocol buffer to disk.
<tt style='background-color:#E8E8E8;'> python.saved_model. <a href=' /python/saved_model/loader_impl.py#L37'>_parse_saved_model</a>(export_dir)</tt>	Reads the savedmodel pb or savedmodel pbtxt file containing savedmodel.
<tt style='background-color:#E8E8E8;'> python.saved_model. <a href=' /python/saved_model/loader_impl.py#L81'>_get_asset_tensors</a>(export_dir,meta_graph_def_to_load)</tt>	Gets the asset tensors if defined in the meta graph def to load.
<tt style='background-color:#E8E8E8;'> python.saved_model. <a href=' /python/saved_model/loader_impl.py#L112'>_get_main_op_tensor</a>(meta_graph_def_to_load)</tt>	Gets the main op tensor if one exists.
<tt style='background-color:#E8E8E8;'> python.saved_model. <a href=' /python/saved_model/loader_impl.py#L135'>_get_legacy_init_op_tensor</a>(meta_graph_def_to_load)</tt>	Gets the legacy init op tensor if one exists.
<tt style='background-color:#E8E8E8;'> python.saved_model. <a href=' /python/saved_model/loader_impl.py#L159'>maybe_saved_model_directory</a>(export_dir)</tt>	Checks whether the provided export directory could contain a savedmodel.
<tt style='background-color:#E8E8E8;'> python.saved_model. <a href=' /python/saved_model/loader_impl.py#L179'>load</a>(sess,tags,export_dir)</tt>	Loads the model from a savedmodel as specified by tags.
<tt style='background-color:#E8E8E8;'> python.saved_model. <a href=' /python/saved_model/signature_def_utils_impl.py#L26'>build_signature_def</a>(inputs,outputs,method_name)</tt>	Utility function to build a signaturedef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.saved_model. <a href=' /python/saved_model/signature_def_utils_impl.py#L51'>regression_signature_def</a>(examples,predictions)</tt>	Creates regression signature from given examples and predictions.
<tt style='background-color:#E8E8E8;'> python.saved_model. <a href=' /python/saved_model/signature_def_utils_impl.py#L81'>classification_signature_def</a>(examples,classes,scores)</tt>	Creates classification signature from given examples and predictions.
<tt style='background-color:#E8E8E8;'> python.saved_model. <a href=' /python/saved_model/signature_def_utils_impl.py#L121'>predict_signature_def</a>(inputs,outputs)</tt>	Creates prediction signature from given inputs and outputs.
<tt style='background-color:#E8E8E8;'> python.saved_model. <a href=' /python/saved_model/main_op_impl.py#L27'>main_op</a>()</tt>	Returns a main op to init variables and tables.
<tt style='background-color:#E8E8E8;'> python.saved_model. <a href=' /python/saved_model/main_op_impl.py#L43'>main_op_with_restore</a>(restore_op_name)</tt>	Returns a main op to init variables tables and restore the graph.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/core.py#L163'>dense</a>(inputs,units,activation,use_bias)</tt>	Functional interface for the densely-connected layer.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/core.py#L266'>dropout</a>(inputs,rate,noise_shape,seed)</tt>	Applies dropout to the input.
<tt style='background-color:#E8E8E8;'> python.layers.BatchNormalization <a href=' /python/layers/normalization.py#L206'>_renorm_correction_and_moments</a>(mean,variance,training)</tt>	Returns the correction and update values for renorm.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/normalization.py#L337'>batch_normalization</a>(inputs,axis,momentum,epsilon)</tt>	Functional interface for the batch normalization layer.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/normalization.py#L459'>_smart_select</a>(pred,fn_then,fn_else)</tt>	Selects fn_then() or fn_else() based on the value of pred.
<tt style='background-color:#E8E8E8;'> python.layers.Layer <a href=' /python/layers/base.py#L142'>weights</a>()</tt>	Returns the list of all layer variables/weights.
<tt style='background-color:#E8E8E8;'> python.layers.Layer <a href=' /python/layers/base.py#L151'>variables</a>()</tt>	Returns the list of all layer variables/weights.
<tt style='background-color:#E8E8E8;'> python.layers.Layer <a href=' /python/layers/base.py#L164'>add_update</a>(updates,inputs)</tt>	Add update op s potentially dependent on layer inputs.
<tt style='background-color:#E8E8E8;'> python.layers.Layer <a href=' /python/layers/base.py#L202'>get_updates_for</a>(inputs)</tt>	Retrieves updates relevant to a specific set of inputs.
<tt style='background-color:#E8E8E8;'> python.layers.Layer <a href=' /python/layers/base.py#L228'>add_loss</a>(losses,inputs)</tt>	Add loss tensor s potentially dependent on layer inputs.
<tt style='background-color:#E8E8E8;'> python.layers.Layer <a href=' /python/layers/base.py#L266'>get_losses_for</a>(inputs)</tt>	Retrieves losses relevant to a specific set of inputs.
<tt style='background-color:#E8E8E8;'> python.layers.Layer <a href=' /python/layers/base.py#L289'>build</a>(_)</tt>	Creates the variables of the layer.
<tt style='background-color:#E8E8E8;'> python.layers.Layer <a href=' /python/layers/base.py#L395'>__call__</a>(inputs)</tt>	Wraps call, applying pre- and post-processing steps.
<tt style='background-color:#E8E8E8;'> python.layers.Layer <a href=' /python/layers/base.py#L306'>_compute_output_shape</a>(input_shape)</tt>	Computes the output shape of the layer given the input shape.
<tt style='background-color:#E8E8E8;'> python.layers.Layer <a href=' /python/layers/base.py#L336'>add_variable</a>(name,shape,dtype,initializer)</tt>	Adds a new variable to the layer or gets an existing one returns it.
<tt style='background-color:#E8E8E8;'> python.layers.Layer <a href=' /python/layers/base.py#L467'>apply</a>(inputs)</tt>	Apply the layer on a input.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/base.py#L493'>_to_list</a>(x)</tt>	This normalizes a list/tuple or single element into a list.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/base.py#L526'>_unique_layer_name</a>(name)</tt>	Makes a layer name or arbitrary string unique within a tensorflow graph.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/pooling.py#L133'>average_pooling1d</a>(inputs,pool_size,strides,padding)</tt>	Average pooling layer for 1d inputs.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/pooling.py#L195'>max_pooling1d</a>(inputs,pool_size,strides,padding)</tt>	Max pooling layer for 1d inputs.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/pooling.py#L313'>average_pooling2d</a>(inputs,pool_size,strides,padding)</tt>	Average pooling layer for 2d inputs e g images.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/pooling.py#L378'>max_pooling2d</a>(inputs,pool_size,strides,padding)</tt>	Max pooling layer for 2d inputs e g images.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/pooling.py#L508'>average_pooling3d</a>(inputs,pool_size,strides,padding)</tt>	Average pooling layer for 3d inputs e g volumes.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/pooling.py#L577'>max_pooling3d</a>(inputs,pool_size,strides,padding)</tt>	Max pooling layer for 3d inputs e g volumes.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/utils.py#L57'>normalize_tuple</a>(value,n,name)</tt>	Transforms a single integer or iterable of integers into an integer tuple.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/utils.py#L113'>smart_cond</a>(pred,fn1,fn2,name)</tt>	Return either fn1() or fn2() based on the boolean predicate pred.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/utils.py#L146'>constant_value</a>(pred)</tt>	Return the bool value for pred, or none if pred had a dynamic value.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/utils.py#L170'>get_deconv_dim</a>(dim_size,stride_size,kernel_size,padding)</tt>	Return output dimension of a deconv layer based on input dimension.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/convolutional.py#L268'>conv1d</a>(inputs,filters,kernel_size,strides)</tt>	Functional interface for 1d convolution layer e g temporal convolution.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/convolutional.py#L436'>conv2d</a>(inputs,filters,kernel_size,strides)</tt>	Functional interface for the 2d convolution layer.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/convolutional.py#L612'>conv3d</a>(inputs,filters,kernel_size,strides)</tt>	Functional interface for the 3d convolution layer.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/convolutional.py#L872'>separable_conv2d</a>(inputs,filters,kernel_size,strides)</tt>	Functional interface for the depthwise separable 2d convolution layer.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/convolutional.py#L1129'>conv2d_transpose</a>(inputs,filters,kernel_size,strides)</tt>	Functional interface for transposed 2d convolution layer.
<tt style='background-color:#E8E8E8;'> python.layers. <a href=' /python/layers/convolutional.py#L1377'>conv3d_transpose</a>(inputs,filters,kernel_size,strides)</tt>	Functional interface for transposed 3d convolution layer.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ScatterNdTest <a href=' /python/kernel_tests/scatter_nd_ops_test.py#L211'>testScatterRepeatIndices</a>()</tt>	This tests scatter_add using indices that repeat.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/pool_test.py#L33'>pool_direct_single_axis</a>(input,axis,window_size,pooling_type)</tt>	Numpy implementation of pooling along a single axis.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/pool_test.py#L98'>pool_direct</a>(input,window_shape,pooling_type,padding)</tt>	Numpy implementation of pooling.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.TileTest <a href=' /python/kernel_tests/shape_ops_test.py#L370'>testUnknownInputShape</a>()</tt>	Importing can call _tileshape without shape of <multiples> known.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/scan_ops_test.py#L41'>handle_options</a>(func,x,axis,exclusive)</tt>	Adds tf options to numpy scan ops.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/bias_op_test.py#L33'>GetTestConfigs</a>()</tt>	Get all the valid tests configs to run.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/ctc_decoder_ops_test.py#L33'>grouper</a>(iterable,n,fillvalue)</tt>	Collect data into fixed-length chunks or blocks.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/parsing_ops_test.py#L55'>flatten</a>(list_of_lists)</tt>	Flatten one level of nesting.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.CTCGreedyDecoderTest <a href=' /python/kernel_tests/ctc_decoder_ops_test.py#L97'>testCTCGreedyDecoder</a>()</tt>	Test two batch entries - best path decoder.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.CTCGreedyDecoderTest <a href=' /python/kernel_tests/ctc_decoder_ops_test.py#L173'>testCTCDecoderBeamSearch</a>()</tt>	Test one batch two beams - hibernating beam search.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.MultinomialTest <a href=' /python/kernel_tests/multinomial_op_test.py#L138'>_do_sampling</a>(logits,num_samples,sampler)</tt>	Samples using the supplied sampler and inputs.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ExtractGlimpseTest <a href=' /python/kernel_tests/attention_ops_test.py#L31'>_VerifyValues</a>(tensor_in_sizes,glimpse_sizes,offsets,expected_rows)</tt>	Verifies the output values of the glimpse extraction kernel.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/pooling_ops_test.py#L49'>GetShrunkInceptionMaxPoolShapes</a>(shrink)</tt>	Iterator for some of the max pool ops in the inception 2015 model.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.PoolingTest <a href=' /python/kernel_tests/pooling_ops_test.py#L78'>_VerifyOneType</a>(pool_func,input_sizes,ksize,strides)</tt>	Verifies the output values of the pooling function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.PoolingTest <a href=' /python/kernel_tests/pooling_ops_3d_test.py#L48'>_VerifyOneTest</a>(pool_func,input_sizes,ksize,strides)</tt>	Verifies the output values of the pooling function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.PoolingTest <a href=' /python/kernel_tests/pooling_ops_3d_test.py#L89'>_VerifyValues</a>(pool_func,input_sizes,ksize,strides)</tt>	Verifies the output values of the pooling function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.PoolingTest <a href=' /python/kernel_tests/pooling_ops_3d_test.py#L286'>_ConstructAndTestGradient</a>(pool_func,input_sizes,output_sizes,window_rows)</tt>	Verifies the gradients of the avg pooling function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.PoolingTest <a href=' /python/kernel_tests/pooling_ops_test.py#L737'>_ConstructAndTestSecondGradient</a>(pool_func,input_sizes,output_sizes,window_rows)</tt>	Verifies the second-order gradients of the pooling function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.PoolingTest <a href=' /python/kernel_tests/pooling_ops_test.py#L929'>_MaxPoolGrad</a>(orig_input,orig_output,grad,window_rows)</tt>	Max pooling gradient.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.PoolingTest <a href=' /python/kernel_tests/pooling_ops_test.py#L1296'>_MaxPoolGradGrad</a>(orig_input,orig_output,grad,window_rows)</tt>	Max pooling second-order gradient.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ExtractImagePatches <a href=' /python/kernel_tests/extract_image_patches_op_test.py#L31'>_VerifyValues</a>(image,ksizes,strides,rates)</tt>	Tests input-output pairs for the extractimagepatches op.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ExtractImagePatches <a href=' /python/kernel_tests/extract_image_patches_op_test.py#L56'>testKsize1x1Stride1x1Rate1x1</a>()</tt>	Verifies that for 1x1 kernel the output equals the input.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ExtractImagePatches <a href=' /python/kernel_tests/extract_image_patches_op_test.py#L71'>testKsize1x1Stride2x3Rate1x1</a>()</tt>	Test for 1x1 kernel and strides.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ExtractImagePatches <a href=' /python/kernel_tests/extract_image_patches_op_test.py#L86'>testKsize2x2Stride1x1Rate1x1Valid</a>()</tt>	Test for 1x1 kernel.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ExtractImagePatches <a href=' /python/kernel_tests/extract_image_patches_op_test.py#L100'>testKsize2x2Stride1x1Rate1x1Same</a>()</tt>	Test for 1x1 kernel.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.Conv1DTest <a href=' /python/kernel_tests/conv1d_test.py#L29'>testBasic</a>()</tt>	Test that argument passing to conv2d is handled properly.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.SummaryImageOpTest <a href=' /python/kernel_tests/summary_image_op_test.py#L40'>_CheckProto</a>(image_summ,shape)</tt>	Verify that the non-image parts of the image_summ proto match shape.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.SetOpsTest <a href=' /python/kernel_tests/sets_test.py#L473'>_run_equivalent_set_ops</a>(ops)</tt>	Assert all ops return the same shapes and return 1st result.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.BenchmarkRNN <a href=' /python/kernel_tests/rnn_test.py#L551'>_benchmarkDynamicLSTMMemorySwapLongSeq</a>()</tt>	The memory swapping test for the sosp submission.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.DivisionTestCase <a href=' /python/kernel_tests/division_future_test.py#L34'>testDivision</a>()</tt>	Test all the different ways to divide.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.DilationTest <a href=' /python/kernel_tests/morphological_ops_test.py#L32'>_VerifyValues</a>(image,kernel,strides,rates)</tt>	Verifies the output values of the dilation function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.DilationTest <a href=' /python/kernel_tests/morphological_ops_test.py#L184'>_ConstructAndTestGradient</a>(image_shape,kernel_shape,strides,rates)</tt>	Verifies the gradients of the dilation function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ErosionTest <a href=' /python/kernel_tests/morphological_ops_test.py#L307'>_VerifyValues</a>(image,kernel,strides,rates)</tt>	Verifies the output values of the erosion function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ErosionTest <a href=' /python/kernel_tests/morphological_ops_test.py#L459'>_ConstructAndTestGradient</a>(image_shape,kernel_shape,strides,rates)</tt>	Verifies the gradients of the erosion function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/functional_ops_test.py#L38'>simple_scoped_fn</a>(a,x)</tt>	Simple function a x -> 2 x+a but with "2" as a variable in scope.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalMaxPoolTest <a href=' /python/kernel_tests/fractional_max_pool_op_test.py#L40'>_MaxPoolAlongRows</a>(input_matrix,row_seq,overlapping)</tt>	Perform max pool along row of a 2-d matrix based on row_seq.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalMaxPoolTest <a href=' /python/kernel_tests/fractional_max_pool_op_test.py#L64'>_MaxPoolAlongCols</a>(input_matrix,col_seq,overlapping)</tt>	Perform max pool along column of a 2-d matrix based on col_seq.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalMaxPoolTest <a href=' /python/kernel_tests/fractional_max_pool_op_test.py#L81'>_GetExpectedFractionalMaxPoolResult</a>(input_tensor,row_seq,col_seq,overlapping)</tt>	Get expected fractional max pool result.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalMaxPoolTest <a href=' /python/kernel_tests/fractional_max_pool_op_test.py#L112'>_ValidateFractionalMaxPoolResult</a>(input_tensor,pooling_ratio,pseudo_random,overlapping)</tt>	Validate fractionalmaxpool's result against expected.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalMaxPoolTest <a href=' /python/kernel_tests/fractional_max_pool_op_test.py#L143'>_testVisually</a>()</tt>	Manual test by printing out intermediate result of a small random tensor.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalMaxPoolTest <a href=' /python/kernel_tests/fractional_max_pool_op_test.py#L199'>testAllInputOptions</a>()</tt>	Try all possible input options for fractional_max_pool.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalMaxPoolTest <a href=' /python/kernel_tests/fractional_max_pool_op_test.py#L215'>testIntegerTensorInput</a>()</tt>	Test it works fine when input tensor is integer type.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalMaxPoolTest <a href=' /python/kernel_tests/fractional_max_pool_op_test.py#L230'>testDifferentTensorShapes</a>()</tt>	Test different shapes of input tensor.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalMaxPoolTest <a href=' /python/kernel_tests/fractional_max_pool_op_test.py#L248'>testLargePoolingRatio</a>()</tt>	Test when pooling ratio is not within [1 2).
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalMaxPoolTest <a href=' /python/kernel_tests/fractional_max_pool_op_test.py#L266'>testDivisiblePoolingRatio</a>()</tt>	Test when num of rows/cols can evenly divide pooling ratio.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalMaxPoolGradTest <a href=' /python/kernel_tests/fractional_max_pool_op_test.py#L318'>_GenerateUniqueRandomInputTensor</a>(shape)</tt>	Generate 'unqiue' random input tensor.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalMaxPoolGradTest <a href=' /python/kernel_tests/fractional_max_pool_op_test.py#L514'>testWhenRepeatedMaxValueInPoolingRegion</a>()</tt>	Test when there's repeating value in pooling region.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FIFOQueueBenchmark <a href=' /python/kernel_tests/fifo_queue_test.py#L1621'>_build_graph</a>()</tt>	Builds a graph that enqueues and dequeues a single float.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FIFOQueueBenchmark <a href=' /python/kernel_tests/fifo_queue_test.py#L1637'>_run</a>(num_iters)</tt>	Benchmarks enqueueing and dequeueing from a fifoqueue.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/reduction_ops_test.py#L39'>_powerset</a>(iterable)</tt>	Helper for generating all possible reduction_axes arguments.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ReducedShapeTest <a href=' /python/kernel_tests/reduction_ops_test.py#L71'>testZeros</a>()</tt>	Check that reduced_shape does the right thing with zero dimensions.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/control_flow_ops_py_test.py#L64'>check_op_order</a>(graph)</tt>	Sanity check on the ordering of op id.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/control_flow_ops_py_test.py#L74'>check_consumers</a>(graph)</tt>	Sanity check on the consumer list of the tensors.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.AssignOpTest <a href=' /python/kernel_tests/dense_update_ops_test.py#L33'>_initAssignFetch</a>(x,y,use_gpu)</tt>	Initialize a param to init and update it with y.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.AssignOpTest <a href=' /python/kernel_tests/dense_update_ops_test.py#L43'>_initAssignAddFetch</a>(x,y,use_gpu)</tt>	Initialize a param to init and compute param += y.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.AssignOpTest <a href=' /python/kernel_tests/dense_update_ops_test.py#L52'>_initAssignSubFetch</a>(x,y,use_gpu)</tt>	Initialize a param to init and compute param -= y.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/parsing_ops_test.py#L60'>flatten_values_tensors_or_sparse</a>(tensors_list)</tt>	Flatten each sparsetensor object into 3 tensors for session run().
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/atrous_convolution_test.py#L31'>upsample_filters</a>(filters,rate)</tt>	Upsamples the filters by a factor of rate along the spatial dimensions.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.AtrousConv2DTest <a href=' /python/kernel_tests/atrous_conv2d_test.py#L84'>testAtrousSequence</a>()</tt>	Tests optimization of sequence of atrous convolutions.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/conv_ops_test.py#L44'>GetShrunkInceptionShapes</a>(shrink)</tt>	Iterator for smaller versions of convolution shapes in 2015 inception.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.Conv2DTest <a href=' /python/kernel_tests/conv_ops_test.py#L165'>_SetupValuesForDevice</a>(tensor_in_sizes,filter_in_sizes,strides,padding)</tt>	Verifies the output values of the convolution function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.Conv2DTest <a href=' /python/kernel_tests/conv_ops_test.py#L206'>_CompareFwdValues</a>(tensor_in_sizes,filter_in_sizes,conv_strides,padding)</tt>	Verifies that cpu and gpu produce the same values.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.DepthwiseConv2DTest <a href=' /python/kernel_tests/depthwise_conv_op_test.py#L91'>_VerifyValues</a>(tensor_in_sizes,filter_in_sizes,stride,padding)</tt>	Verifies the output values of the convolution function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.SeparableConv2DTest <a href=' /python/kernel_tests/conv_ops_test.py#L1182'>_InitValues</a>(sizes)</tt>	Initializes values for input tensors.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.SeparableConv2DTest <a href=' /python/kernel_tests/conv_ops_test.py#L1197'>_VerifyValues</a>(tensor_in_sizes,depthwise_filter_in_sizes,pointwise_filter_in_sizes,stride)</tt>	Verifies the output values of the separable convolution function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.DeepConv2DTest <a href=' /python/kernel_tests/conv_ops_test.py#L1336'>_CompareFwdConv2D</a>(tensor_in_sizes,filter_in_sizes,conv_strides,padding)</tt>	Verifies that deepconv2d and conv2d produce the same values.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.CastOpTest <a href=' /python/kernel_tests/cast_op_test.py#L36'>_toDataType</a>(dtype)</tt>	Returns tensorflow data type for numpy type.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.CastOpTest <a href=' /python/kernel_tests/cast_op_test.py#L60'>_test</a>(x,dtype,use_gpu)</tt>	Tests cast x to dtype behaves the same as numpy astype.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.CastOpTest <a href=' /python/kernel_tests/cast_op_test.py#L66'>_testTypes</a>(x,use_gpu)</tt>	Tests cast x to different tf.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.AtrousConvolutionTest <a href=' /python/kernel_tests/atrous_convolution_test.py#L127'>testAtrousSequence</a>()</tt>	Tests optimization of sequence of atrous convolutions.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.PoolingTest <a href=' /python/kernel_tests/pooling_ops_3d_test.py#L48'>_VerifyOneTest</a>(pool_func,input_sizes,window,strides)</tt>	Verifies the output values of the pooling function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.PoolingTest <a href=' /python/kernel_tests/pooling_ops_3d_test.py#L208'>_ConstructAndTestGradientForConfig</a>(pool_func,input_sizes,output_sizes,window)</tt>	Verifies the gradients of a pooling function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.PoolingTest <a href=' /python/kernel_tests/pooling_ops_3d_test.py#L286'>_ConstructAndTestGradient</a>(pool_func)</tt>	Runs _constructandtestgradientforconfig for all tests configurations.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.RandomPoissonTest <a href=' /python/kernel_tests/random_poisson_test.py#L119'>testNoCSE</a>()</tt>	Cse = constant subexpression eliminator.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/metrics_test.py#L54'>_binary_2d_label_to_2d_sparse_value</a>(labels)</tt>	Convert dense 2d binary indicator to sparse id.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/metrics_test.py#L88'>_binary_2d_label_to_1d_sparse_value</a>(labels)</tt>	Convert dense 2d binary indicator to sparse id.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/metrics_test.py#L127'>_binary_3d_label_to_sparse_value</a>(labels)</tt>	Convert dense 3d binary indicator tensor to sparse tensor.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.AUCTest <a href=' /python/kernel_tests/metrics_test.py#L1171'>np_auc</a>(predictions,labels,weights)</tt>	Computes the auc explicitely using numpy.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.MultiLabelSparsePrecisionTest <a href=' /python/kernel_tests/metrics_test.py#L1966'>test_average_precision_some_labels_out_of_range</a>()</tt>	Tests that labels outside the [0 n_classes) range are ignored.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.MultiLabelSparsePrecisionTest <a href=' /python/kernel_tests/metrics_test.py#L2032'>test_three_labels_at_k5_some_out_of_range</a>()</tt>	Tests that labels outside the [0 n_classes) range are ignored.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.MultiLabel2dRecallAtKTest <a href=' /python/kernel_tests/metrics_test.py#L2390'>test_at_k5_some_out_of_range</a>()</tt>	Tests that labels outside the [0 n_classes) count in denominator.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/ctc_loss_op_test.py#L31'>SimpleSparseTensorFrom</a>(x)</tt>	Create a very simple sparsetensor with dimensions batch time.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.CTCLossTest <a href=' /python/kernel_tests/ctc_loss_op_test.py#L83'>testBasic</a>()</tt>	Test two batch entries.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.CTCLossTest <a href=' /python/kernel_tests/ctc_loss_op_test.py#L218'>test_time_major</a>()</tt>	Testing time_major param.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/init_ops_test.py#L37'>identicaltest</a>(tc,init1,init2,shape)</tt>	Tests if two initializations are identical to within tiny tolerances.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/init_ops_test.py#L58'>duplicated_initializer</a>(tc,init,graph_seed,shape)</tt>	Tests duplicated random initializer within the same graph.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/init_ops_test.py#L84'>_init_sampler</a>(tc,init,num)</tt>	Returns a func to generate a random tensor of shape [num].
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/reduce_join_op_test.py#L33'>_input_array</a>(num_dims)</tt>	Creates an ndarray where each element is the binary of its linear index.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/reduce_join_op_test.py#L47'>_joined_array</a>(num_dims,reduce_dim)</tt>	Creates an ndarray with the result from reduce_join on input_array.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ReduceJoinTest <a href=' /python/kernel_tests/reduce_join_op_test.py#L99'>_testReduceJoin</a>(input_array,truth,truth_shape,reduction_indices)</tt>	Compares the output of reduce_join to an expected result.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ReduceJoinTest <a href=' /python/kernel_tests/reduce_join_op_test.py#L127'>_testMultipleReduceJoin</a>(input_array,reduction_indices,separator)</tt>	Tests reduce_join for one input and multiple reduction_indices.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.RandomGammaTest <a href=' /python/kernel_tests/random_gamma_test.py#L135'>_testZeroDensity</a>(alpha)</tt>	Zero isn't in the support of the gamma distribution.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.RandomGammaTest <a href=' /python/kernel_tests/random_gamma_test.py#L211'>testNoCSE</a>()</tt>	Cse = constant subexpression eliminator.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ConfusionMatrixTest <a href=' /python/kernel_tests/confusion_matrix_test.py#L35'>testExample</a>()</tt>	This is a test of the example provided in pydoc.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.SummaryAudioOpTest <a href=' /python/kernel_tests/summary_audio_op_test.py#L37'>_CheckProto</a>(audio_summ,sample_rate,num_channels,length_frames)</tt>	Verify that the non-audio parts of the audio_summ proto match shape.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.DenormalTest <a href=' /python/kernel_tests/denormal_test.py#L30'>testPythonHasDenormals</a>()</tt>	Non-tf numpy code should treat denormals correctly.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.TruncatedNormalMoments <a href=' /python/kernel_tests/parameterized_truncated_normal_op_test.py#L53'>__getitem__</a>(moment)</tt>	Calculates the truncated normal moments.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.TFRecordWriterZlibTest <a href=' /python/kernel_tests/reader_ops_test.py#L668'>testZlibReadWrite</a>()</tt>	Verify that files produced are zlib compatible.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.TFRecordWriterZlibTest <a href=' /python/kernel_tests/reader_ops_test.py#L683'>testZlibReadWriteLarge</a>()</tt>	Verify that writing large contents also works.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.TFRecordWriterZlibTest <a href=' /python/kernel_tests/reader_ops_test.py#L700'>testGzipReadWrite</a>()</tt>	Verify that files produced are gzip compatible.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.TFRecordIteratorTest <a href=' /python/kernel_tests/reader_ops_test.py#L763'>testWriteZlibRead</a>()</tt>	Verify compression with tfrecordwriter is zlib library compatible.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.TFRecordIteratorTest <a href=' /python/kernel_tests/reader_ops_test.py#L774'>testWriteZlibReadLarge</a>()</tt>	Verify compression for large records is zlib library compatible.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.TFRecordIteratorTest <a href=' /python/kernel_tests/reader_ops_test.py#L804'>testBadFile</a>()</tt>	Verify that tf_record_iterator throws an exception on bad tfrecords.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.AsyncReaderTest <a href=' /python/kernel_tests/reader_ops_test.py#L822'>testNoDeadlockFromQueue</a>()</tt>	Tests that reading does not block main execution threads.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/embedding_ops_test.py#L45'>_AsLong</a>(array)</tt>	Casts arrays elements to long type used to convert from numpy tf.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ScatterAddSubTest <a href=' /python/kernel_tests/embedding_ops_test.py#L52'>_TestCase</a>(shape,indices,scatter_op)</tt>	Run a random test case with the given shape and indices.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.LRNOpTest <a href=' /python/kernel_tests/lrn_op_test.py#L37'>_LRN</a>(input_image,lrn_depth_radius,bias,alpha)</tt>	Compute expected result.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/depthwise_conv_op_test.py#L33'>ConfigsToTest</a>()</tt>	Iterator for different convolution shapes strides and paddings.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/depthwise_conv_op_test.py#L57'>CheckGradConfigsToTest</a>()</tt>	Iterator for different convolution shapes strides and paddings.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.DepthwiseConv2DTest <a href=' /python/kernel_tests/depthwise_conv_op_test.py#L184'>_VerifyHandValues</a>(tensor_in_sizes,filter_in_sizes,stride,padding)</tt>	Verifies the output values of the depthwise convolution function.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/template_test.py#L46'>function_with_create</a>(trainable)</tt>	Creates a variable as a side effect using tf variable.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.TemplateTest <a href=' /python/kernel_tests/template_test.py#L55'>test_end_to_end</a>()</tt>	This test shows a very simple line model with test_loss.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.DrawBoundingBoxOpTest <a href=' /python/kernel_tests/draw_bounding_box_op_test.py#L34'>_fillBorder</a>(image,color)</tt>	Fill the border of the image.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.DrawBoundingBoxOpTest <a href=' /python/kernel_tests/draw_bounding_box_op_test.py#L57'>_testDrawBoundingBoxColorCycling</a>(img)</tt>	Tests if cycling works appropriately.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.DrawBoundingBoxOpTest <a href=' /python/kernel_tests/draw_bounding_box_op_test.py#L93'>testDrawBoundingBoxRGBColorCycling</a>()</tt>	Test if rgb color cycling works correctly.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.DrawBoundingBoxOpTest <a href=' /python/kernel_tests/draw_bounding_box_op_test.py#L98'>testDrawBoundingBoxRGBAColorCycling</a>()</tt>	Test if rgba color cycling works correctly.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.DrawBoundingBoxOpTest <a href=' /python/kernel_tests/draw_bounding_box_op_test.py#L103'>testDrawBoundingBoxGRY</a>()</tt>	Test if drawing bounding box on a gry image works.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/spacetobatch_op_test.py#L33'>space_to_batch_direct</a>(input_array,block_shape,paddings)</tt>	Direct python implementation of space-to-batch conversion.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.RequiredSpaceToBatchPaddingsTest <a href=' /python/kernel_tests/spacetobatch_op_test.py#L590'>_checkProperties</a>(input_shape,block_shape,base_paddings,paddings)</tt>	Checks that paddings and crops satisfy invariants.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.BooleanMaskTest <a href=' /python/kernel_tests/array_ops_test.py#L98'>CheckVersusNumpy</a>(ndims_mask,arr_shape,make_mask)</tt>	Check equivalence between boolean_mask and numpy masking.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.ReverseV2Test <a href=' /python/kernel_tests/array_ops_test.py#L313'>testReverseRowsOf3Channels</a>()</tt>	Tests optimized code for reversing rows with last dim size = 3.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.SelectOpTest <a href=' /python/kernel_tests/cwise_ops_test.py#L1477'>testNan</a>()</tt>	Verify that nans don't propagate where they shouldn't.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalAvgTest <a href=' /python/kernel_tests/fractional_avg_pool_op_test.py#L40'>_AvgPoolAlongRows</a>(input_matrix,row_seq,overlapping)</tt>	Perform average pool along row of a 2-d matrix based on row_seq.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalAvgTest <a href=' /python/kernel_tests/fractional_avg_pool_op_test.py#L64'>_AvgPoolAlongCols</a>(input_matrix,col_seq,overlapping)</tt>	Perform average pool along column of a 2-d matrix based on col_seq.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalAvgTest <a href=' /python/kernel_tests/fractional_avg_pool_op_test.py#L81'>_GetExpectedFractionalAvgPoolResult</a>(input_tensor,row_seq,col_seq,overlapping)</tt>	Get expected fractional average pooling result.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalAvgTest <a href=' /python/kernel_tests/fractional_avg_pool_op_test.py#L112'>_ValidateFractionalAvgPoolResult</a>(input_tensor,pooling_ratio,pseudo_random,overlapping)</tt>	Validate fractionalavgpool's result against expected.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalAvgTest <a href=' /python/kernel_tests/fractional_avg_pool_op_test.py#L143'>_testVisually</a>()</tt>	Manual test by printing out intermediate result of a small random tensor.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalAvgTest <a href=' /python/kernel_tests/fractional_avg_pool_op_test.py#L197'>testAllInputOptions</a>()</tt>	Try all possible input options for fractional_avg_pool.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalAvgTest <a href=' /python/kernel_tests/fractional_avg_pool_op_test.py#L213'>testIntegerTensorInput</a>()</tt>	Test fractionalavgpool works fine when input tensor is integer type.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalAvgTest <a href=' /python/kernel_tests/fractional_avg_pool_op_test.py#L259'>testDifferentTensorShapes</a>()</tt>	Test different shapes of input tensor.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalAvgTest <a href=' /python/kernel_tests/fractional_avg_pool_op_test.py#L277'>testLargePoolingRatio</a>()</tt>	Test when pooling ratio is not within [1 2).
<tt style='background-color:#E8E8E8;'> python.kernel_tests.FractionalAvgTest <a href=' /python/kernel_tests/fractional_avg_pool_op_test.py#L295'>testDivisiblePoolingRatio</a>()</tt>	Test when num of rows/cols can evenly divide pooling ratio.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.SparseSoftmaxCrossEntropyLossTest <a href=' /python/kernel_tests/losses_test.py#L386'>testInconsistentWeightSizeRaisesException</a>()</tt>	The weight tensor has incorrect number of elements.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.SparseSoftmaxCrossEntropyLossTest <a href=' /python/kernel_tests/losses_test.py#L399'>testInconsistentLabelSizeRaisesException</a>()</tt>	The label tensor has incorrect number of elements.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.SparseSoftmaxCrossEntropyLossTest <a href=' /python/kernel_tests/losses_test.py#L412'>testInconsistentWeightShapeRaisesException</a>()</tt>	The weight tensor has incorrect shape.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.SparseSoftmaxCrossEntropyLossTest <a href=' /python/kernel_tests/losses_test.py#L426'>testInconsistentLabelShapeRaisesException</a>()</tt>	The label tensor has incorrect shape.
<tt style='background-color:#E8E8E8;'> python.kernel_tests. <a href=' /python/kernel_tests/linalg_ops_test.py#L30'>_random_pd_matrix</a>(n,rng)</tt>	Random postive definite matrix.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.distributions. <a href=' /python/kernel_tests/distributions/special_math_test.py#L54'>_make_grid</a>(dtype,grid_spec)</tt>	Returns a uniform grid + noise reshaped to shape argument.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.distributions.NdtriTest <a href=' /python/kernel_tests/distributions/special_math_test.py#L78'>testNdtri</a>()</tt>	Verifies that ndtri computation is correct.
<tt style='background-color:#E8E8E8;'> python.kernel_tests.distributions.NdtriTest <a href=' /python/kernel_tests/distributions/special_math_test.py#L93'>_baseNdtriFiniteGradientTest</a>(dtype)</tt>	Verifies that ndtri has finite gradients at interesting points.
<tt style='background-color:#E8E8E8;'> python.user_ops. <a href=' /python/user_ops/user_ops.py#L28'>my_fact</a>()</tt>	Example of overriding the generated code for an op.
<tt style='background-color:#E8E8E8;'> python.summary. <a href=' /python/summary/summary.py#L107'>scalar</a>(name,tensor,collections)</tt>	Outputs a summary protocol buffer containing a single scalar value.
<tt style='background-color:#E8E8E8;'> python.summary. <a href=' /python/summary/summary.py#L134'>image</a>(name,tensor,max_outputs,collections)</tt>	Outputs a summary protocol buffer with images.
<tt style='background-color:#E8E8E8;'> python.summary. <a href=' /python/summary/summary.py#L189'>histogram</a>(name,values,collections)</tt>	Outputs a summary protocol buffer with a histogram.
<tt style='background-color:#E8E8E8;'> python.summary. <a href=' /python/summary/summary.py#L221'>audio</a>(name,tensor,sample_rate,max_outputs)</tt>	Outputs a summary protocol buffer with audio.
<tt style='background-color:#E8E8E8;'> python.summary. <a href=' /python/summary/summary.py#L301'>merge_all</a>(key)</tt>	Merges all summaries collected in the default graph.
<tt style='background-color:#E8E8E8;'> python.summary. <a href=' /python/summary/summary.py#L320'>get_summary_description</a>(node_def)</tt>	Given a tensorsummary node_def retrieve its summarydescription.
<tt style='background-color:#E8E8E8;'> python.summary.SummaryWriter <a href=' /python/summary/summary_iterator.py#L49'>__init__</a>(logdir,graph,max_queue,flush_secs)</tt>	Creates a summarywriter and an event file.
<tt style='background-color:#E8E8E8;'> python.summary.SummaryWriter <a href=' /python/summary/summary_iterator.py#L105'>get_logdir</a>()</tt>	Returns the directory where event file will be written.
<tt style='background-color:#E8E8E8;'> python.summary.SummaryWriter <a href=' /python/summary/summary_iterator.py#L109'>reopen</a>()</tt>	Reopens the summary writer.
<tt style='background-color:#E8E8E8;'> python.summary.SummaryWriter <a href=' /python/summary/summary_iterator.py#L120'>add_summary</a>(summary,global_step)</tt>	Adds a summary protocol buffer to the event file.
<tt style='background-color:#E8E8E8;'> python.summary.SummaryWriter <a href=' /python/summary/summary_iterator.py#L147'>add_session_log</a>(session_log,global_step)</tt>	Adds a sessionlog protocol buffer to the event file.
<tt style='background-color:#E8E8E8;'> python.summary.SummaryWriter <a href=' /python/summary/summary_iterator.py#L163'>add_event</a>(event)</tt>	Adds an event to the event file.
<tt style='background-color:#E8E8E8;'> python.summary.SummaryWriter <a href=' /python/summary/summary_iterator.py#L179'>add_graph</a>(graph,global_step,graph_def)</tt>	Adds a graph to the event file.
<tt style='background-color:#E8E8E8;'> python.summary.SummaryWriter <a href=' /python/summary/summary_iterator.py#L231'>add_run_metadata</a>(run_metadata,tag,global_step)</tt>	Adds a metadata information for a single session run() call.
<tt style='background-color:#E8E8E8;'> python.summary.SummaryWriter <a href=' /python/summary/summary_iterator.py#L258'>flush</a>()</tt>	Flushes the event file to disk.
<tt style='background-color:#E8E8E8;'> python.summary.SummaryWriter <a href=' /python/summary/summary_iterator.py#L267'>close</a>()</tt>	Flushes the event file to disk and close the file.
<tt style='background-color:#E8E8E8;'> python.summary._EventLoggerThread <a href=' /python/summary/summary_iterator.py#L280'>__init__</a>(queue,ev_writer,flush_secs)</tt>	Creates an _eventloggerthread.
<tt style='background-color:#E8E8E8;'> python.summary. <a href=' /python/summary/summary_iterator.py#L313'>summary_iterator</a>(path)</tt>	An iterator for reading event protocol buffers from an event file.
<tt style='background-color:#E8E8E8;'> python.summary.SummaryWriterCache <a href=' /python/summary/summary_iterator.py#L368'>clear</a>()</tt>	Clear cached summary writers currently only used for unit tests.
<tt style='background-color:#E8E8E8;'> python.summary.SummaryWriterCache <a href=' /python/summary/summary_iterator.py#L374'>get</a>(logdir)</tt>	Returns the summarywriter for the specified directory.
<tt style='background-color:#E8E8E8;'> python.summary. <a href=' /python/summary/plugin_asset.py#L40'>get_plugin_asset</a>(plugin_asset_cls,graph)</tt>	Acquire singleton pluginasset instance from a graph.
<tt style='background-color:#E8E8E8;'> python.summary. <a href=' /python/summary/plugin_asset.py#L82'>get_all_plugin_assets</a>(graph)</tt>	Retrieve all pluginassets stored in the graph collection.
<tt style='background-color:#E8E8E8;'> python.summary.PluginAsset <a href=' /python/summary/plugin_asset.py#L131'>assets</a>()</tt>	Provide all of the assets contained by the pluginasset instance.
<tt style='background-color:#E8E8E8;'> python.summary. <a href=' /python/summary/text_summary.py#L33'>text_summary</a>(name,tensor,collections)</tt>	Summarizes textual data.
<tt style='background-color:#E8E8E8;'> python.summary.TextSummaryPluginAsset <a href=' /python/summary/text_summary.py#L76'>register_tensor</a>(name)</tt>	Register a new tensor summary name as containing textual data.
<tt style='background-color:#E8E8E8;'> python.summary.TextSummaryPluginAsset <a href=' /python/summary/text_summary.py#L80'>assets</a>()</tt>	Store the tensors registry in a file called tensors json.
<tt style='background-color:#E8E8E8;'> python.summary.writer.SummaryWriterCacheTest <a href=' /python/summary/writer/writer_test.py#L340'>_test_dir</a>(test_name)</tt>	Create an empty dir to use for tests.
<tt style='background-color:#E8E8E8;'> python.summary.writer.FileWriterCache <a href=' /python/summary/writer/writer_cache.py#L38'>clear</a>()</tt>	Clear cached summary writers currently only used for unit tests.
<tt style='background-color:#E8E8E8;'> python.summary.writer.FileWriterCache <a href=' /python/summary/writer/writer_cache.py#L48'>get</a>(logdir)</tt>	Returns the filewriter for the specified directory.
<tt style='background-color:#E8E8E8;'> python.summary.writer.EventFileWriter <a href=' /python/summary/writer/event_file_writer.py#L41'>__init__</a>(logdir,max_queue,flush_secs,filename_suffix)</tt>	Creates a eventfilewriter and an event file to write to.
<tt style='background-color:#E8E8E8;'> python.summary.writer.EventFileWriter <a href=' /python/summary/writer/event_file_writer.py#L81'>_get_sentinel_event</a>()</tt>	Generate a sentinel event for terminating worker.
<tt style='background-color:#E8E8E8;'> python.summary.writer.EventFileWriter <a href=' /python/summary/writer/event_file_writer.py#L85'>get_logdir</a>()</tt>	Returns the directory where event file will be written.
<tt style='background-color:#E8E8E8;'> python.summary.writer.EventFileWriter <a href=' /python/summary/writer/event_file_writer.py#L89'>reopen</a>()</tt>	Reopens the eventfilewriter.
<tt style='background-color:#E8E8E8;'> python.summary.writer.EventFileWriter <a href=' /python/summary/writer/event_file_writer.py#L103'>add_event</a>(event)</tt>	Adds an event to the event file.
<tt style='background-color:#E8E8E8;'> python.summary.writer.EventFileWriter <a href=' /python/summary/writer/event_file_writer.py#L112'>flush</a>()</tt>	Flushes the event file to disk.
<tt style='background-color:#E8E8E8;'> python.summary.writer.EventFileWriter <a href=' /python/summary/writer/event_file_writer.py#L121'>close</a>()</tt>	Flushes the event file to disk and close the file.
<tt style='background-color:#E8E8E8;'> python.summary.writer._EventLoggerThread <a href=' /python/summary/writer/event_file_writer.py#L136'>__init__</a>(queue,ev_writer,flush_secs,sentinel_event)</tt>	Creates an _eventloggerthread.
<tt style='background-color:#E8E8E8;'> python.summary.writer.SummaryToEventTransformer <a href=' /python/summary/writer/writer.py#L46'>__init__</a>(event_writer,graph,graph_def)</tt>	Creates a summarywriter and an event file.
<tt style='background-color:#E8E8E8;'> python.summary.writer.SummaryToEventTransformer <a href=' /python/summary/writer/writer.py#L89'>add_summary</a>(summary,global_step)</tt>	Adds a summary protocol buffer to the event file.
<tt style='background-color:#E8E8E8;'> python.summary.writer.SummaryToEventTransformer <a href=' /python/summary/writer/writer.py#L114'>add_session_log</a>(session_log,global_step)</tt>	Adds a sessionlog protocol buffer to the event file.
<tt style='background-color:#E8E8E8;'> python.summary.writer.SummaryToEventTransformer <a href=' /python/summary/writer/writer.py#L133'>add_graph</a>(graph,global_step,graph_def)</tt>	Adds a graph to the event file.
<tt style='background-color:#E8E8E8;'> python.summary.writer.SummaryToEventTransformer <a href=' /python/summary/writer/writer.py#L199'>add_meta_graph</a>(meta_graph_def,global_step)</tt>	Adds a metagraphdef to the event file.
<tt style='background-color:#E8E8E8;'> python.summary.writer.SummaryToEventTransformer <a href=' /python/summary/writer/writer.py#L221'>add_run_metadata</a>(run_metadata,tag,global_step)</tt>	Adds a metadata information for a single session run() call.
<tt style='background-color:#E8E8E8;'> python.summary.writer.FileWriter <a href=' /python/summary/writer/writer.py#L262'>__init__</a>(logdir,graph,max_queue,flush_secs)</tt>	Creates a filewriter and an event file.
<tt style='background-color:#E8E8E8;'> python.summary.writer.FileWriter <a href=' /python/summary/writer/writer.py#L313'>get_logdir</a>()</tt>	Returns the directory where event file will be written.
<tt style='background-color:#E8E8E8;'> python.summary.writer.FileWriter <a href=' /python/summary/writer/writer.py#L317'>add_event</a>(event)</tt>	Adds an event to the event file.
<tt style='background-color:#E8E8E8;'> python.summary.writer.FileWriter <a href=' /python/summary/writer/writer.py#L325'>flush</a>()</tt>	Flushes the event file to disk.
<tt style='background-color:#E8E8E8;'> python.summary.writer.FileWriter <a href=' /python/summary/writer/writer.py#L333'>close</a>()</tt>	Flushes the event file to disk and close the file.
<tt style='background-color:#E8E8E8;'> python.summary.writer.FileWriter <a href=' /python/summary/writer/writer.py#L340'>reopen</a>()</tt>	Reopens the eventfilewriter.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/ui_factory.py#L26'>get_ui</a>(ui_type,on_ui_exit,available_ui_types)</tt>	Create a base_ui baseui subtype.
<tt style='background-color:#E8E8E8;'> python.debug.cli.MockCursesUI <a href=' /python/debug/cli/curses_ui_test.py#L116'>_screen_create_command_textbox</a>(existing_command)</tt>	Override to insert observer of existing commands.
<tt style='background-color:#E8E8E8;'> python.debug.cli.MockCursesUI <a href=' /python/debug/cli/curses_ui_test.py#L186'>_scroll_output</a>(direction,line_index)</tt>	Override to observe screen output.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/readline_ui_test.py#L81'>testRunUIExitImmediately</a>()</tt>	Make sure that the ui can exit properly after launch.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/readline_ui_test.py#L90'>testRunUIEmptyCommand</a>()</tt>	Issue an empty command then exit.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/curses_ui_test.py#L342'>testRunUIInvalidCommandPrefix</a>()</tt>	Handle an unregistered command prefix.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/curses_ui_test.py#L365'>testRunUIInvalidCommandSyntax</a>()</tt>	Handle a command with invalid syntax.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/curses_ui_test.py#L385'>testRunUIScrollTallOutputPageDownUp</a>()</tt>	Scroll tall output with pagedown and pageup.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/curses_ui_test.py#L442'>testRunUIScrollTallOutputEndHome</a>()</tt>	Scroll tall output with pagedown and pageup.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/readline_ui_test.py#L97'>testRunUIWithInitCmd</a>()</tt>	Run ui with an initial command specified.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/curses_ui_test.py#L810'>testRegexSearch</a>()</tt>	Test regex search.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/curses_ui_test.py#L852'>testRegexSearchContinuation</a>()</tt>	Test continuing scrolling down to next regex match.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/curses_ui_test.py#L921'>testRegexSearchNoMatchContinuation</a>()</tt>	Test continuing scrolling when there is no regex match.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/curses_ui_test.py#L943'>testRegexSearchContinuationWithoutSearch</a>()</tt>	Test continuation scrolling when no regex search has been performed.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/curses_ui_test.py#L962'>testRegexSearchWithInvalidRegex</a>()</tt>	Test using invalid regex to search.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/curses_ui_test.py#L989'>testRegexSearchFromCommandHistory</a>()</tt>	Test regex search commands are recorded in command history.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/curses_ui_test.py#L1029'>testDisplayTensorWithIndices</a>()</tt>	Test displaying tensor with indices.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/curses_ui_test.py#L1146'>testScrollTensorByValidIndices</a>()</tt>	Test scrolling to specified valid indices in a tensor.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/curses_ui_test.py#L1193'>testScrollTensorByInvalidIndices</a>()</tt>	Test scrolling to specified invalid indices in a tensor.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CommandHandlerRegistryTest <a href=' /python/debug/cli/debugger_cli_common_test.py#L305'>_exiting_handler</a>(argv,screen_info)</tt>	A handler that exits with an exit token.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CommandHandlerRegistryTest <a href=' /python/debug/cli/debugger_cli_common_test.py#L342'>testExitingHandler</a>()</tt>	Test that exit exception is correctly raised.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/cli_shared.py#L48'>bytes_to_readable_str</a>(num_bytes,include_b)</tt>	Generate a human-readable string representing number of bytes.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/cli_shared.py#L86'>parse_ranges_highlight</a>(ranges_string)</tt>	Process ranges highlight string.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/tensor_format.py#L72'>format_tensor</a>(tensor,tensor_name,np_printoptions,print_all)</tt>	Generate formatted str to represent a tensor or its slices.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/cli_shared.py#L165'>error</a>(msg)</tt>	Generate a richtextlines output for error.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/cli_shared.py#L180'>_get_fetch_name</a>(fetch)</tt>	Obtain the name or string representation of a fetch.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/cli_shared.py#L194'>_get_fetch_names</a>(fetches)</tt>	Get a flattened list of the names in run() call fetches.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/cli_shared.py#L221'>_recommend_command</a>(command,description,indent,create_link)</tt>	Generate a richtextlines object that describes a recommended command.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/cli_shared.py#L249'>get_tfdbg_logo</a>()</tt>	Make an ascii representation of the tfdbg logo.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/cli_shared.py#L264'>get_run_start_intro</a>(run_call_count,fetches,feed_dict,tensor_filters)</tt>	Generate formatted intro for run-start ui.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/cli_shared.py#L370'>get_run_short_description</a>(run_call_count,fetches,feed_dict)</tt>	Get a short description of the run() call.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/cli_shared.py#L410'>get_error_intro</a>(tf_error)</tt>	Generate formatted intro for tensorflow run-time error.
<tt style='background-color:#E8E8E8;'> python.debug.cli.ReadlineUI <a href=' /python/debug/cli/readline_ui.py#L55'>run_ui</a>(init_command,title,title_color,enable_mouse_on_start)</tt>	Run the cli see the doc of base_ui baseui run_ui for more details.
<tt style='background-color:#E8E8E8;'> python.debug.cli.ReadlineUI <a href=' /python/debug/cli/readline_ui.py#L86'>_dispatch_command</a>(command)</tt>	Dispatch user command.
<tt style='background-color:#E8E8E8;'> python.debug.cli.RichLine <a href=' /python/debug/cli/debugger_cli_common.py#L60'>__init__</a>(text,font_attr)</tt>	Construct a richline with no rich attributes or a single attribute.
<tt style='background-color:#E8E8E8;'> python.debug.cli.RichLine <a href=' /python/debug/cli/debugger_cli_common.py#L77'>__add__</a>(other)</tt>	Concatenate two chunks of maybe rich text to make a longer rich line.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/debugger_cli_common.py#L111'>rich_text_lines_from_rich_line_list</a>(rich_text_list)</tt>	Convert a list of richline objects or strings to a richtextlines object.
<tt style='background-color:#E8E8E8;'> python.debug.cli.RichTextLines <a href=' /python/debug/cli/debugger_cli_common.py#L143'>__init__</a>(lines,font_attr_segs,annotations)</tt>	Constructor of richtextlines.
<tt style='background-color:#E8E8E8;'> python.debug.cli.RichTextLines <a href=' /python/debug/cli/debugger_cli_common.py#L208'>slice</a>(begin,end)</tt>	Slice a richtextlines object.
<tt style='background-color:#E8E8E8;'> python.debug.cli.RichTextLines <a href=' /python/debug/cli/debugger_cli_common.py#L248'>extend</a>(other)</tt>	Extend this instance of richtextlines with another instance.
<tt style='background-color:#E8E8E8;'> python.debug.cli.RichTextLines <a href=' /python/debug/cli/debugger_cli_common.py#L280'>_extend_before</a>(other)</tt>	Add another richtextlines object to the front.
<tt style='background-color:#E8E8E8;'> python.debug.cli.RichTextLines <a href=' /python/debug/cli/debugger_cli_common.py#L312'>append</a>(line,font_attr_segs)</tt>	Append a single line of text.
<tt style='background-color:#E8E8E8;'> python.debug.cli.RichTextLines <a href=' /python/debug/cli/debugger_cli_common.py#L328'>prepend</a>(line,font_attr_segs)</tt>	Prepend (i e add to the front) a single line of text.
<tt style='background-color:#E8E8E8;'> python.debug.cli.RichTextLines <a href=' /python/debug/cli/debugger_cli_common.py#L342'>write_to_file</a>(file_path)</tt>	Write the object itself to file in a plain format.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/debugger_cli_common.py#L359'>regex_find</a>(orig_screen_output,regex,font_attr)</tt>	Perform regex match in rich text lines.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/debugger_cli_common.py#L413'>wrap_rich_text_lines</a>(inp,cols)</tt>	Wrap richtextlines according to maximum number of columns.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CommandHandlerRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L563'>register_command_handler</a>(prefix,handler,help_info,prefix_aliases)</tt>	Register a callable as a command handler.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CommandHandlerRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L629'>dispatch_command</a>(prefix,argv,screen_info)</tt>	Handles a command by dispatching it to a registered command handler.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CommandHandlerRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L690'>is_registered</a>(prefix)</tt>	Test if a command prefix or its alias is has a registered handler.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CommandHandlerRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L701'>get_help</a>(cmd_prefix)</tt>	Compile help information into a richtextlines object.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CommandHandlerRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L731'>set_help_intro</a>(help_intro)</tt>	Set an introductory message to help output.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CommandHandlerRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L741'>_help_handler</a>(args,screen_info)</tt>	Command handler for "help".
<tt style='background-color:#E8E8E8;'> python.debug.cli.CommandHandlerRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L764'>_resolve_prefix</a>(token)</tt>	Resolve command prefix from the prefix itself or its alias.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CommandHandlerRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L781'>_get_help_for_command_prefix</a>(cmd_prefix)</tt>	Compile the help information for a given command prefix.
<tt style='background-color:#E8E8E8;'> python.debug.cli.TabCompletionRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L822'>register_tab_comp_context</a>(context_words,comp_items)</tt>	Register a tab-completion context.
<tt style='background-color:#E8E8E8;'> python.debug.cli.TabCompletionRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L865'>deregister_context</a>(context_words)</tt>	Deregister a list of context words.
<tt style='background-color:#E8E8E8;'> python.debug.cli.TabCompletionRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L884'>extend_comp_items</a>(context_word,new_comp_items)</tt>	Add a list of completion items to a completion context.
<tt style='background-color:#E8E8E8;'> python.debug.cli.TabCompletionRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L903'>remove_comp_items</a>(context_word,comp_items)</tt>	Remove a list of completion items from a completion context.
<tt style='background-color:#E8E8E8;'> python.debug.cli.TabCompletionRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L922'>get_completions</a>(context_word,prefix)</tt>	Get the tab completions given a context word and a prefix.
<tt style='background-color:#E8E8E8;'> python.debug.cli.TabCompletionRegistry <a href=' /python/debug/cli/debugger_cli_common.py#L950'>_common_prefix</a>(m)</tt>	Given a list of str returns the longest common prefix.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CommandHistory <a href=' /python/debug/cli/debugger_cli_common.py#L1020'>add_command</a>(command)</tt>	Add a command to the command history.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CommandHistory <a href=' /python/debug/cli/debugger_cli_common.py#L1044'>most_recent_n</a>(n)</tt>	Look up the n most recent commands.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CommandHistory <a href=' /python/debug/cli/debugger_cli_common.py#L1057'>lookup_prefix</a>(prefix,n)</tt>	Look up the n most recent commands that starts with prefix.
<tt style='background-color:#E8E8E8;'> python.debug.cli.Menu <a href=' /python/debug/cli/debugger_cli_common.py#L1131'>append</a>(item)</tt>	Append an item to the menu.
<tt style='background-color:#E8E8E8;'> python.debug.cli.Menu <a href=' /python/debug/cli/debugger_cli_common.py#L1148'>caption_to_item</a>(caption)</tt>	Get a menuitem from the caption.
<tt style='background-color:#E8E8E8;'> python.debug.cli.Menu <a href=' /python/debug/cli/debugger_cli_common.py#L1168'>format_as_single_line</a>(prefix,divider,enabled_item_attrs,disabled_item_attrs)</tt>	Format the menu as a single-line richtextlines object.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/curses_ui.py#L51'>_get_command_from_line_attr_segs</a>(mouse_x,attr_segs)</tt>	Attempt to extract command from the attribute segments of a line.
<tt style='background-color:#E8E8E8;'> python.debug.cli.ScrollBar <a href=' /python/debug/cli/curses_ui.py#L87'>__init__</a>(min_x,min_y,max_x,max_y)</tt>	Constructor of scrollbar.
<tt style='background-color:#E8E8E8;'> python.debug.cli.ScrollBar <a href=' /python/debug/cli/curses_ui.py#L127'>_block_y</a>(screen_coord_sys)</tt>	Get the 0-based y coordinate of the scroll block.
<tt style='background-color:#E8E8E8;'> python.debug.cli.ScrollBar <a href=' /python/debug/cli/curses_ui.py#L154'>layout</a>()</tt>	Get the richtextlines layout of the scroll bar.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L276'>__init__</a>(on_ui_exit)</tt>	Constructor of cursesui.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L332'>_init_layout</a>()</tt>	Initialize the layout of ui components.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L402'>_screen_color_init</a>()</tt>	Initialization of screen colors.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L441'>_screen_launch</a>(enable_mouse_on_start)</tt>	Launch the curses screen.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L453'>_screen_create_command_window</a>()</tt>	Create command window according to screen size.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L465'>_screen_terminate</a>()</tt>	Terminate the curses screen.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L480'>run_ui</a>(init_command,title,title_color,enable_mouse_on_start)</tt>	Run the cli see the doc of base_ui baseui run_ui for more details.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L516'>_screen_create_command_textbox</a>(existing_command)</tt>	Create command textbox on screen.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L538'>_ui_loop</a>()</tt>	Command-line ui loop.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L574'>_get_user_command</a>()</tt>	Get user command from ui.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L614'>_navigate_screen_output</a>(command)</tt>	Navigate in screen output history.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L642'>_dispatch_command</a>(command)</tt>	Dispatch user command.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L746'>_screen_gather_textbox_str</a>()</tt>	Gather the text string in the command text box.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L757'>_on_textbox_keypress</a>(x)</tt>	Text box key validator callback of key strokes.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L906'>_auto_key_in</a>(command,erase_existing)</tt>	Automatically key in a command to the command textbox.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L921'>_erase_existing_command</a>()</tt>	Erase existing text in command textpad.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L928'>_screen_draw_text_line</a>(row,line,attr,color)</tt>	Render a line of text on the screen.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L953'>_screen_new_output_pad</a>(rows,cols)</tt>	Generate a new pad on the screen.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L967'>_screen_display_output</a>(output)</tt>	Actually render text output on the screen.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1017'>_display_output</a>(output,is_refresh,highlight_regex)</tt>	Display text output in a scrollable text pad.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1084'>_display_lines</a>(output,min_num_rows)</tt>	Display richtextlines object on screen.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1137'>_display_main_menu</a>(output)</tt>	Display main menu associated with screen output if the menu exists.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1167'>_screen_add_line_to_output_pad</a>(pad,row,txt,color_segments)</tt>	Render a line in a text pad.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1252'>_scroll_output</a>(direction,line_index)</tt>	Scroll the output pad.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1341'>_compile_ui_status_summary</a>()</tt>	Compile status summary about this curses ui instance.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1397'>_show_array_indices</a>()</tt>	Show array indices for the lines at the top and bottom of the output.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1426'>_show_array_index_at_line</a>(line_index)</tt>	Show array indices for the specified line in the display area.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1469'>_tab_complete</a>(command_str)</tt>	Perform tab completion.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1507'>_display_candidates</a>(candidates)</tt>	Show candidates (e g tab-completion candidates) on multiple lines.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1545'>_toast</a>(message,color,line_index)</tt>	Display a one-line message on the screen.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1571'>_error_toast</a>(message)</tt>	Display a one-line error message on screen.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1581'>_info_toast</a>(message)</tt>	Display a one-line informational message on screen.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesUI <a href=' /python/debug/cli/curses_ui.py#L1602'>_mouse_mode_command_handler</a>(args,screen_info)</tt>	Handler for the command prefix 'mouse'.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/analyzer_cli_test.py#L50'>parse_op_and_node</a>(line)</tt>	Parse a line containing an op node followed by a node name.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/analyzer_cli_test.py#L88'>assert_listed_tensors</a>(tst,out,expected_tensor_names,expected_op_types)</tt>	Check richtextlines output for list_tensors commands.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/analyzer_cli_test.py#L238'>assert_node_attribute_lines</a>(tst,out,node_name,op_type)</tt>	Check richtextlines output for node_info commands.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/analyzer_cli_test.py#L404'>check_syntax_error_output</a>(tst,out,command_prefix)</tt>	Check richtextlines output for valid command prefix but invalid syntax.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/analyzer_cli_test.py#L413'>check_error_output</a>(tst,out,command_prefix,args)</tt>	Check richtextlines output from invalid/erroneous commands.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/analyzer_cli_test.py#L429'>check_main_menu</a>(tst,out,list_tensors_enabled,node_info_node_name)</tt>	Check the main menu annotation of an output.
<tt style='background-color:#E8E8E8;'> python.debug.cli.AnalyzerCLISimpleMulAddTest <a href=' /python/debug/cli/analyzer_cli_test.py#L746'>testListTensorsFilterNanOrInf</a>()</tt>	Test register and invoke a tensor filter.
<tt style='background-color:#E8E8E8;'> python.debug.cli.AnalyzerCLISimpleMulAddTest <a href=' /python/debug/cli/analyzer_cli_test.py#L763'>testListTensorNonexistentFilter</a>()</tt>	Test attempt to use a nonexistent tensor filter.
<tt style='background-color:#E8E8E8;'> python.debug.cli.AnalyzerCLISimpleMulAddTest <a href=' /python/debug/cli/analyzer_cli_test.py#L1145'>_findSourceLine</a>(annotated_source,line_number)</tt>	Find line of given line number in annotated source.
<tt style='background-color:#E8E8E8;'> python.debug.cli.AnalyzerCLIControlDepTest <a href=' /python/debug/cli/analyzer_cli_test.py#L1566'>testListInputsNonRecursiveNoControl</a>()</tt>	List inputs non-recursively without any control inputs.
<tt style='background-color:#E8E8E8;'> python.debug.cli.AnalyzerCLIControlDepTest <a href=' /python/debug/cli/analyzer_cli_test.py#L1608'>testListInputsNonRecursiveNoControlUsingTensorName</a>()</tt>	List inputs using the name of an output tensor of the node.
<tt style='background-color:#E8E8E8;'> python.debug.cli.AnalyzerCLIControlDepTest <a href=' /python/debug/cli/analyzer_cli_test.py#L1636'>testListInputsNonRecursiveWithControls</a>()</tt>	List inputs non-recursively with control inputs.
<tt style='background-color:#E8E8E8;'> python.debug.cli.AnalyzerCLIControlDepTest <a href=' /python/debug/cli/analyzer_cli_test.py#L1666'>testListInputsRecursiveWithControls</a>()</tt>	List inputs recursively with control inputs.
<tt style='background-color:#E8E8E8;'> python.debug.cli.AnalyzerCLIControlDepTest <a href=' /python/debug/cli/analyzer_cli_test.py#L1711'>testListInputsRecursiveWithControlsWithDepthLimit</a>()</tt>	List inputs recursively with control inputs and a depth limit.
<tt style='background-color:#E8E8E8;'> python.debug.cli.AnalyzerCLIControlDepTest <a href=' /python/debug/cli/analyzer_cli_test.py#L1743'>testListInputsNodeWithoutInputs</a>()</tt>	List the inputs to a node without any input.
<tt style='background-color:#E8E8E8;'> python.debug.cli.AnalyzerCLIControlDepTest <a href=' /python/debug/cli/analyzer_cli_test.py#L1770'>testListRecipientsRecursiveWithControlsWithDepthLimit</a>()</tt>	List recipients recursively with control inputs and a depth limit.
<tt style='background-color:#E8E8E8;'> python.debug.cli.NavigationHistoryItem <a href=' /python/debug/cli/curses_widgets.py#L29'>__init__</a>(command,screen_output,scroll_position)</tt>	Constructor of navigationhistoryitem.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesNavigationHistory <a href=' /python/debug/cli/curses_widgets.py#L48'>__init__</a>(capacity)</tt>	Constructor of cursesnavigationhistory.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesNavigationHistory <a href=' /python/debug/cli/curses_widgets.py#L66'>add_item</a>(command,screen_output,scroll_position)</tt>	Add an item to the navigation histoyr.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesNavigationHistory <a href=' /python/debug/cli/curses_widgets.py#L82'>update_scroll_position</a>(new_scroll_position)</tt>	Update the scroll position of the currently-pointed-to history item.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesNavigationHistory <a href=' /python/debug/cli/curses_widgets.py#L101'>go_back</a>()</tt>	Go back one place in the history if possible.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesNavigationHistory <a href=' /python/debug/cli/curses_widgets.py#L120'>go_forward</a>()</tt>	Go forward one place in the history if possible.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesNavigationHistory <a href=' /python/debug/cli/curses_widgets.py#L139'>can_go_back</a>()</tt>	Test whether client can go back one place.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesNavigationHistory <a href=' /python/debug/cli/curses_widgets.py#L147'>can_go_forward</a>()</tt>	Test whether client can go forward one place.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesNavigationHistory <a href=' /python/debug/cli/curses_widgets.py#L155'>render</a>(max_length,backward_command,forward_command,latest_command_attribute)</tt>	Render the rich text content of the single-line navigation bar.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/command_parser.py#L55'>parse_command</a>(command)</tt>	Parse command string into a list of arguments.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/command_parser.py#L102'>extract_output_file_path</a>(args)</tt>	Extract output file path from command arguments.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/command_parser.py#L149'>parse_tensor_name_with_slicing</a>(in_str)</tt>	Parse tensor name potentially suffixed by slicing string.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/command_parser.py#L172'>validate_slicing_string</a>(slicing_string)</tt>	Validate a slicing string.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/command_parser.py#L188'>_parse_slices</a>(slicing_string)</tt>	Construct a tuple of slices from the slicing string.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/command_parser.py#L217'>parse_indices</a>(indices_string)</tt>	Parse a string representing indices.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/command_parser.py#L241'>parse_ranges</a>(range_string)</tt>	Parse a string representing numerical range s.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/command_parser.py#L282'>parse_memory_interval</a>(interval_str)</tt>	Convert a human-readable memory interval to a tuple of start and end value.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/command_parser.py#L312'>parse_time_interval</a>(interval_str)</tt>	Convert a human-readable time interval to a tuple of start and end value.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/command_parser.py#L341'>_parse_interval</a>(interval_str)</tt>	Convert a human-readable interval to a tuple of start and end value.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/command_parser.py#L407'>parse_readable_size_str</a>(size_str)</tt>	Convert a human-readable str representation to number of bytes.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/command_parser.py#L441'>parse_readable_time_str</a>(time_str)</tt>	Parses a time string in the format n nus nms ns.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/command_parser.py#L469'>evaluate_tensor_slice</a>(tensor,tensor_slicing)</tt>	Call eval on the slicing of a tensor with validation.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/readline_ui_test.py#L109'>testRunUIWithValidUsersCommands</a>()</tt>	Run ui with an initial command specified.
<tt style='background-color:#E8E8E8;'> python.debug.cli.CursesTest <a href=' /python/debug/cli/readline_ui_test.py#L121'>testRunUIWithInvalidUsersCommands</a>()</tt>	Run ui with an initial command specified.
<tt style='background-color:#E8E8E8;'> python.debug.cli.HighlightOptions <a href=' /python/debug/cli/tensor_format.py#L43'>__init__</a>(criterion,description,font_attr)</tt>	Constructor of highlightoptions.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/tensor_format.py#L72'>format_tensor</a>(tensor,tensor_label,include_metadata,np_printoptions)</tt>	Generate a richtextlines object showing a tensor in formatted style.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/tensor_format.py#L187'>_annotate_ndarray_lines</a>(array_lines,tensor,np_printoptions,offset)</tt>	Generate annotations for line-by-line begin indices of tensor text.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/tensor_format.py#L267'>locate_tensor_element</a>(formatted,indices)</tt>	Locate a tensor element in formatted text lines given element indices.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/tensor_format.py#L414'>_locate_elements_in_line</a>(line,indices_list,ref_indices)</tt>	Determine the start and end indices of an element in a line.
<tt style='background-color:#E8E8E8;'> python.debug.cli.NodeStepperCLI <a href=' /python/debug/cli/stepper_cli.py#L197'>_initialize_state</a>()</tt>	Initialize the state of this stepper cli.
<tt style='background-color:#E8E8E8;'> python.debug.cli.NodeStepperCLI <a href=' /python/debug/cli/stepper_cli.py#L208'>_calculate_next</a>()</tt>	Calculate the next target for "step" action based on current state.
<tt style='background-color:#E8E8E8;'> python.debug.cli.NodeStepperCLI <a href=' /python/debug/cli/stepper_cli.py#L222'>list_sorted_nodes</a>(args,screen_info)</tt>	List the sorted transitive closure of the stepper's fetches.
<tt style='background-color:#E8E8E8;'> python.debug.cli.NodeStepperCLI <a href=' /python/debug/cli/stepper_cli.py#L281'>_get_status_labels</a>(element_name,handle_node_names,intermediate_tensor_names,override_names)</tt>	Get a string of status labels for a graph element.
<tt style='background-color:#E8E8E8;'> python.debug.cli.NodeStepperCLI <a href=' /python/debug/cli/stepper_cli.py#L342'>_node_status_label_legend</a>()</tt>	Get legend for node-status labels.
<tt style='background-color:#E8E8E8;'> python.debug.cli.NodeStepperCLI <a href=' /python/debug/cli/stepper_cli.py#L378'>cont</a>(args,screen_info)</tt>	Continue-to action on the graph.
<tt style='background-color:#E8E8E8;'> python.debug.cli.NodeStepperCLI <a href=' /python/debug/cli/stepper_cli.py#L423'>_report_last_feed_types</a>()</tt>	Generate a report of the feed types used in the cont/step call.
<tt style='background-color:#E8E8E8;'> python.debug.cli.NodeStepperCLI <a href=' /python/debug/cli/stepper_cli.py#L445'>_report_last_updated</a>()</tt>	Generate a report of the variables updated in the last cont/step call.
<tt style='background-color:#E8E8E8;'> python.debug.cli.NodeStepperCLI <a href=' /python/debug/cli/stepper_cli.py#L491'>print_tensor</a>(args,screen_info)</tt>	Print the value of a tensor that the stepper has access to.
<tt style='background-color:#E8E8E8;'> python.debug.cli.NodeStepperCLI <a href=' /python/debug/cli/stepper_cli.py#L530'>inject_value</a>(args,screen_info)</tt>	Inject value to a given tensor.
<tt style='background-color:#E8E8E8;'> python.debug.cli.NodeStepperCLI <a href=' /python/debug/cli/stepper_cli.py#L587'>_resolve_tensor_names</a>(element_name)</tt>	Resolve tensor name from graph element name.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/analyzer_cli.py#L62'>_add_main_menu</a>(output,node_name,enable_list_tensors,enable_node_info)</tt>	Generate main menu for the screen output from a command.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L369'>add_tensor_filter</a>(filter_name,filter_callable)</tt>	Add a tensor filter.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L409'>get_tensor_filter</a>(filter_name)</tt>	Retrieve filter function by name.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L430'>list_tensors</a>(args,screen_info)</tt>	Command handler for list_tensors.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L538'>_measure_tensor_list_column_widths</a>(data)</tt>	Determine the maximum widths of the timestamp and op-type column.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L573'>_sort_dump_data_by</a>(data,sort_by,reverse)</tt>	Sort a list of debugtensordatum in specified order.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L608'>_tensor_list_column_heads</a>(parsed,max_timestamp_width,max_dump_size_width,max_op_type_width)</tt>	Generate a line containing the column heads of the tensor list.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L672'>node_info</a>(args,screen_info)</tt>	Command handler for node_info.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L753'>_render_node_traceback</a>(node_name)</tt>	Render traceback of a node's creation in python if available.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L788'>list_inputs</a>(args,screen_info)</tt>	Command handler for inputs.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L824'>print_tensor</a>(args,screen_info)</tt>	Command handler for print_tensor.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L965'>list_outputs</a>(args,screen_info)</tt>	Command handler for inputs.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L1010'>print_source</a>(args,screen_info)</tt>	Print the content of a source file.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L1081'>_make_source_table</a>(source_list,is_tf_py_library)</tt>	Make a table summarizing the source files that create nodes and tensors.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L1153'>list_source</a>(args,screen_info)</tt>	List python source files that constructed nodes and tensors.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L1184'>_list_inputs_or_outputs</a>(recursive,node_name,depth,control)</tt>	Helper function used by list_inputs and list_outputs.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L1275'>_dfs_from_node</a>(lines,attr_segs,node_name,tracker)</tt>	Perform depth-first search dfs traversal of a node's input tree.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L1387'>_format_neighbors</a>(neighbor_type,non_ctrls,ctrls)</tt>	List neighbors inputs or recipients of a node.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L1429'>_list_node_attributes</a>(node_name)</tt>	List neighbors inputs or recipients of a node.
<tt style='background-color:#E8E8E8;'> python.debug.cli.DebugAnalyzer <a href=' /python/debug/cli/analyzer_cli.py#L1452'>_list_node_dumps</a>(node_name)</tt>	List dumped tensor data from a node.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/analyzer_cli.py#L1488'>create_analyzer_ui</a>(debug_dump,tensor_filters,ui_type,on_ui_exit)</tt>	Create an instance of cursesui based on a debugdumpdir object.
<tt style='background-color:#E8E8E8;'> python.debug.cli.ProfileDatum <a href=' /python/debug/cli/profile_analyzer_cli.py#L56'>exec_time</a>()</tt>	Measures compute function exection time plus pre- and post-processing.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/profile_analyzer_cli.py#L107'>_list_profile_filter</a>(profile_datum,node_name_regex,file_name_regex,op_type_regex)</tt>	Filter function for list_profile command.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/profile_analyzer_cli.py#L141'>_list_profile_sort_key</a>(profile_datum,sort_by)</tt>	Get a profile_datum property to sort by in list_profile command.
<tt style='background-color:#E8E8E8;'> python.debug.cli.ProfileAnalyzer <a href=' /python/debug/cli/profile_analyzer_cli.py#L252'>list_profile</a>(args,screen_info)</tt>	Command handler for list_profile.
<tt style='background-color:#E8E8E8;'> python.debug.cli.ProfileAnalyzer <a href=' /python/debug/cli/profile_analyzer_cli.py#L300'>_get_profile_data_generator</a>()</tt>	Get function that generates profiledatum objects.
<tt style='background-color:#E8E8E8;'> python.debug.cli.ProfileAnalyzer <a href=' /python/debug/cli/profile_analyzer_cli.py#L329'>_get_list_profile_lines</a>(device_name,device_index,device_count,profile_datum_list)</tt>	Get richtextlines object for list_profile command for a given device.
<tt style='background-color:#E8E8E8;'> python.debug.cli.ProfileAnalyzer <a href=' /python/debug/cli/profile_analyzer_cli.py#L412'>_measure_list_profile_column_widths</a>(profile_data)</tt>	Determine the maximum column widths for each data list.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/profile_analyzer_cli.py#L433'>create_profiler_ui</a>(graph,run_metadata,ui_type,on_ui_exit)</tt>	Create an instance of cursesui based on a tf graph and runmetadata.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/stepper_cli_test.py#L41'>_parse_sorted_nodes_list</a>(lines)</tt>	Parsed a list of lines to extract the node list.
<tt style='background-color:#E8E8E8;'> python.debug.cli. <a href=' /python/debug/cli/stepper_cli_test.py#L98'>_parse_updated</a>(lines)</tt>	Parse the updated section in the output text lines.
<tt style='background-color:#E8E8E8;'> python.debug.cli.NodeStepperSimpleGraphTest <a href=' /python/debug/cli/stepper_cli_test.py#L154'>_assert_nodes_topologically_sorted_with_target_e</a>(node_names)</tt>	Check the topologically sorted order of the node names.
<tt style='background-color:#E8E8E8;'> python.debug.cli.BaseUI <a href=' /python/debug/cli/base_ui.py#L32'>__init__</a>(on_ui_exit)</tt>	Constructor of the base class.
<tt style='background-color:#E8E8E8;'> python.debug.cli.BaseUI <a href=' /python/debug/cli/base_ui.py#L53'>set_help_intro</a>(help_intro)</tt>	Set an introductory message to the help output of the command registry.
<tt style='background-color:#E8E8E8;'> python.debug.cli.BaseUI <a href=' /python/debug/cli/base_ui.py#L63'>register_command_handler</a>(prefix,handler,help_info,prefix_aliases)</tt>	A wrapper around commandhandlerregistry register_command_handler().
<tt style='background-color:#E8E8E8;'> python.debug.cli.BaseUI <a href=' /python/debug/cli/base_ui.py#L90'>register_tab_comp_context</a>()</tt>	Wrapper around tabcompletionregistry register_tab_comp_context().
<tt style='background-color:#E8E8E8;'> python.debug.cli.BaseUI <a href=' /python/debug/cli/base_ui.py#L95'>run_ui</a>(init_command,title,title_color,enable_mouse_on_start)</tt>	Run the ui until user- or command- triggered exit.
<tt style='background-color:#E8E8E8;'> python.debug.cli.BaseUI <a href=' /python/debug/cli/base_ui.py#L115'>_parse_command</a>(command)</tt>	Parse a command string into prefix and arguments.
<tt style='background-color:#E8E8E8;'> python.debug.cli.BaseUI <a href=' /python/debug/cli/base_ui.py#L138'>_analyze_tab_complete_input</a>(text)</tt>	Analyze raw input to tab-completer.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebuggerWrapperSessionForTest <a href=' /python/debug/wrappers/local_cli_wrapper_test.py#L49'>__init__</a>(command_args_sequence,sess,dump_root)</tt>	Constructor of the for-test subclass.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.GrpcDebugWrapperSession <a href=' /python/debug/wrappers/grpc_wrapper.py#L29'>__init__</a>(sess,grpc_debug_server_addresses,watch_fn,thread_name_filter)</tt>	Constructor of dumpingdebugwrappersession.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.GrpcDebugWrapperSession <a href=' /python/debug/wrappers/grpc_wrapper.py#L80'>prepare_run_debug_urls</a>(fetches,feed_dict)</tt>	Implementation of abstract method in superclass.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.DumpingDebugWrapperSession <a href=' /python/debug/wrappers/dumping_wrapper.py#L34'>__init__</a>(sess,session_root,watch_fn,thread_name_filter)</tt>	Constructor of dumpingdebugwrappersession.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.DumpingDebugWrapperSession <a href=' /python/debug/wrappers/dumping_wrapper.py#L85'>prepare_run_debug_urls</a>(fetches,feed_dict)</tt>	Implementation of abstrat method in superclass.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers. <a href=' /python/debug/wrappers/framework.py#L127'>_check_type</a>(obj,expected_type)</tt>	Check if an object is of the expected type.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.OnRunStartRequest <a href=' /python/debug/wrappers/framework.py#L195'>__init__</a>(fetches,feed_dict,run_options,run_metadata)</tt>	Constructor of onrunstartrequest.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.OnRunStartResponse <a href=' /python/debug/wrappers/framework.py#L238'>__init__</a>(action,debug_urls,debug_ops,node_name_regex_whitelist)</tt>	Constructor of onrunstartresponse.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.OnRunEndRequest <a href=' /python/debug/wrappers/framework.py#L285'>__init__</a>(performed_action,run_metadata,client_graph_def,tf_error)</tt>	Constructor for onrunendrequest.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.BaseDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L332'>__init__</a>(sess,thread_name_filter)</tt>	Constructor of basedebugwrappersession.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.BaseDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L394'>run</a>(fetches,feed_dict,options,run_metadata)</tt>	Wrapper around session run() that inserts tensor watch options.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.BaseDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L490'>partial_run_setup</a>(fetches,feeds)</tt>	Sets up the feeds and fetches for partial runs in the session.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.BaseDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L499'>_decorate_run_options</a>(run_options,debug_urls,debug_ops,node_name_regex_whitelist)</tt>	Modify a runoptions object for debug tensor watching.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.BaseDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L537'>on_session_init</a>(request)</tt>	Callback invoked during construction of the debug-wrapper session.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.BaseDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L552'>on_run_start</a>(request)</tt>	Callback invoked on run() calls to the debug-wrapper session.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.BaseDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L573'>on_run_end</a>(request)</tt>	Callback invoked on run() calls to the debug-wrapper session.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.BaseDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L601'>invoke_node_stepper</a>(node_stepper,restore_variable_values_on_exit)</tt>	Callback invoked when the client intends to step through graph nodes.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.WatchOptions <a href=' /python/debug/wrappers/framework.py#L623'>__init__</a>(debug_ops,node_name_regex_whitelist,op_type_regex_whitelist,tensor_dtype_regex_whitelist)</tt>	Constructor of watchoptions debug watch options.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.NonInteractiveDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L673'>__init__</a>(sess,watch_fn,thread_name_filter)</tt>	Constructor of dumpingdebugwrappersession.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.NonInteractiveDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L705'>on_session_init</a>(request)</tt>	See doc of basedebugwrappersession on_run_start.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.NonInteractiveDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L710'>prepare_run_debug_urls</a>(fetches,feed_dict)</tt>	Abstract method to be implemented by concrete subclasses.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.NonInteractiveDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L725'>on_run_start</a>(request)</tt>	See doc of basedebugwrappersession on_run_start.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.NonInteractiveDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L741'>_prepare_run_watch_config</a>(fetches,feed_dict)</tt>	Get the debug_urls and node/op whitelists for the current run() call.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.NonInteractiveDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L766'>on_run_end</a>(request)</tt>	See doc of basedebugwrappersession on_run_end.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.NonInteractiveDebugWrapperSession <a href=' /python/debug/wrappers/framework.py#L771'>invoke_node_stepper</a>(node_stepper,restore_variable_values_on_exit)</tt>	See doc of basedebugwrappersession invoke_node_stepper.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugWrapperSession <a href=' /python/debug/wrappers/local_cli_wrapper.py#L47'>__init__</a>(sess,dump_root,log_usage,ui_type)</tt>	Constructor of localclidebugwrappersession.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugWrapperSession <a href=' /python/debug/wrappers/local_cli_wrapper.py#L177'>add_tensor_filter</a>(filter_name,tensor_filter)</tt>	Add a tensor filter.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugWrapperSession <a href=' /python/debug/wrappers/local_cli_wrapper.py#L188'>on_session_init</a>(request)</tt>	Overrides on-session-init callback.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugWrapperSession <a href=' /python/debug/wrappers/local_cli_wrapper.py#L201'>on_run_start</a>(request)</tt>	Overrides on-run-start callback.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugWrapperSession <a href=' /python/debug/wrappers/local_cli_wrapper.py#L256'>_prep_cli_for_run_start</a>()</tt>	Prepare but not launch the cli for run-start.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugWrapperSession <a href=' /python/debug/wrappers/local_cli_wrapper.py#L275'>on_run_end</a>(request)</tt>	Overrides on-run-end callback.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugWrapperSession <a href=' /python/debug/wrappers/local_cli_wrapper.py#L339'>_prep_cli_for_run_end</a>(debug_dump,tf_error,passed_filter)</tt>	Prepare but not launch cli for run-end with debug dump from the run.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugWrapperSession <a href=' /python/debug/wrappers/local_cli_wrapper.py#L394'>_launch_cli</a>()</tt>	Launch the interactive command-line interface.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugWrapperSession <a href=' /python/debug/wrappers/local_cli_wrapper.py#L425'>_run_handler</a>(args,screen_info)</tt>	Command handler for "run" command during on-run-start.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugWrapperSession <a href=' /python/debug/wrappers/local_cli_wrapper.py#L490'>_on_run_start_step_handler</a>(args,screen_info)</tt>	Command handler for "invoke_stepper" command during on-run-start.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugWrapperSession <a href=' /python/debug/wrappers/local_cli_wrapper.py#L503'>_get_run_debug_urls</a>()</tt>	Get the debug_urls value for the current run() call.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugWrapperSession <a href=' /python/debug/wrappers/local_cli_wrapper.py#L513'>_update_run_calls_state</a>(run_call_count,fetches,feed_dict)</tt>	Update the internal state with regard to run() call history.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugWrapperSession <a href=' /python/debug/wrappers/local_cli_wrapper.py#L536'>invoke_node_stepper</a>(node_stepper,restore_variable_values_on_exit)</tt>	Overrides method in base class to implement interactive node stepper.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugHook <a href=' /python/debug/wrappers/hooks.py#L42'>__init__</a>(ui_type,dump_root,thread_name_filter)</tt>	Create a local debugger command-line interface cli hook.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugHook <a href=' /python/debug/wrappers/hooks.py#L65'>add_tensor_filter</a>(filter_name,tensor_filter)</tt>	Add a tensor filter.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.LocalCLIDebugHook <a href=' /python/debug/wrappers/hooks.py#L157'>_decorate_options_for_debug</a>(options,graph,watch_options)</tt>	Modify runoptions debug_options debug_tensor_watch_opts for debugging.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.DumpingDebugHook <a href=' /python/debug/wrappers/hooks.py#L179'>__init__</a>(session_root,watch_fn,thread_name_filter,log_usage)</tt>	Create a local debugger command-line interface cli hook.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.GrpcDebugHook <a href=' /python/debug/wrappers/hooks.py#L257'>__init__</a>(grpc_debug_server_addresses,watch_fn,thread_name_filter,log_usage)</tt>	Constructs a grpcdebughook.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.GrpcDebugHook <a href=' /python/debug/wrappers/hooks.py#L295'>before_run</a>(run_context)</tt>	Called right before a session is run.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.TestDebugWrapperSession <a href=' /python/debug/wrappers/framework_test.py#L55'>on_session_init</a>(request)</tt>	Override abstract on-session-init callback method.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.TestDebugWrapperSession <a href=' /python/debug/wrappers/framework_test.py#L64'>on_run_start</a>(request)</tt>	Override abstract on-run-start callback method.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.TestDebugWrapperSession <a href=' /python/debug/wrappers/framework_test.py#L75'>on_run_end</a>(request)</tt>	Override abstract on-run-end callback method.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.DebugWrapperSessionTest <a href=' /python/debug/wrappers/framework_test.py#L215'>testInteractiveSessionInit</a>()</tt>	The wrapper should work also on other subclassses of session session.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.DebugWrapperSessionTest <a href=' /python/debug/wrappers/framework_test.py#L259'>testSessionInitInvalidSessionType</a>()</tt>	Attempt to wrap a non-session-type object should cause an exception.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.DumpingDebugWrapperSessionTest <a href=' /python/debug/wrappers/dumping_wrapper_test.py#L149'>testDumpingWithLegacyWatchFnOnFetchesWorks</a>()</tt>	Use a watch_fn that returns different whitelists for different runs.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.DumpingDebugWrapperSessionTest <a href=' /python/debug/wrappers/dumping_wrapper_test.py#L191'>testDumpingWithLegacyWatchFnWithNonDefaultDebugOpsWorks</a>()</tt>	Use a watch_fn that specifies non-default debug ops.
<tt style='background-color:#E8E8E8;'> python.debug.wrappers.DumpingDebugWrapperSessionTest <a href=' /python/debug/wrappers/dumping_wrapper_test.py#L214'>testDumpingWithWatchFnWithNonDefaultDebugOpsWorks</a>()</tt>	Use a watch_fn that specifies non-default debug ops.
<tt style='background-color:#E8E8E8;'> python.debug.lib.SessionDebugTest <a href=' /python/debug/lib/session_debug_file_test.py#L47'>testAllowsDifferentWatchesOnDifferentRuns</a>()</tt>	Test watching different tensors on different runs of the same graph.
<tt style='background-color:#E8E8E8;'> python.debug.lib.StepperTestWithPlaceHolders <a href=' /python/debug/lib/stepper_test.py#L514'>testAttemptToContToPlaceholderWithTensorFeedKeysShouldWork</a>()</tt>	Continuing to a placeholder should be allowed using client feed.
<tt style='background-color:#E8E8E8;'> python.debug.lib.StepperBackwardRunTest <a href=' /python/debug/lib/stepper_test.py#L861'>testSelectiveHandleUsageDependingOnTransitiveCleanliness</a>()</tt>	Test tensor handlers are using only during clean transitive closure.
<tt style='background-color:#E8E8E8;'> python.debug.lib.StepperBackwardRunTest <a href=' /python/debug/lib/stepper_test.py#L924'>testRestoreVariableValues</a>()</tt>	Test restore_variable_values() restores the old values of variables.
<tt style='background-color:#E8E8E8;'> python.debug.lib.StepperBackwardRunTest <a href=' /python/debug/lib/stepper_test.py#L937'>testFinalize</a>()</tt>	Test finalize() to restore variables and run the original fetch.
<tt style='background-color:#E8E8E8;'> python.debug.lib.StepperBackwardRunTest <a href=' /python/debug/lib/stepper_test.py#L956'>testOverrideThenContToUpdateThenRemoveOverrideThenUpdateAgain</a>()</tt>	Test cont() to update nodes after overriding tensor values.
<tt style='background-color:#E8E8E8;'> python.debug.lib.StepperBackwardRunTest <a href=' /python/debug/lib/stepper_test.py#L1028'>testContToNodeWithOutputTensors</a>()</tt>	Cont() to an op should cache its output tensors if appropriate.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/source_utils.py#L47'>guess_is_tensorflow_py_library</a>(py_file_path)</tt>	Guess whether a python source file is a part of the tensorflow library.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/source_utils.py#L76'>annotate_source</a>(dump,source_file_path,do_dumped_tensors,file_stack_top)</tt>	Annotate a python source file with a list of ops created at each line.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/source_utils.py#L143'>list_source_files_against_dump</a>(dump,path_regex_whitelist,node_name_regex_whitelist)</tt>	Generate a list of source files with information regarding ops and tensors.
<tt style='background-color:#E8E8E8;'> python.debug.lib.HasNanOrInfTest <a href=' /python/debug/lib/debug_data_test.py#L150'>testDTypeStringGivesFalse</a>()</tt>	Isnan and isinf are not applicable to strings.
<tt style='background-color:#E8E8E8;'> python.debug.lib.SourceHelperTest <a href=' /python/debug/lib/source_utils_test.py#L79'>createAndRunGraphHelper</a>()</tt>	Create and run a tensorflow graph to generate debug dumps.
<tt style='background-color:#E8E8E8;'> python.debug.lib.ListSourceAgainstDumpTest <a href=' /python/debug/lib/source_utils_test.py#L218'>createAndRunGraphWithWhileLoop</a>()</tt>	Create and run a tensorflow graph with a while loop to generate dumps.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/stepper.py#L36'>_flatten_fetches</a>(fetches)</tt>	Flatten list tuple of fetches or a single fetch into a list of fetches.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L113'>__init__</a>(sess,fetches,feed_dict)</tt>	Constructor for debugger.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L193'>_get_fetch_and_name_lists</a>(flattened_fetches)</tt>	Get the lists of fetches and their names.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L217'>_dfs_visit</a>(graph,elem_list)</tt>	Trace back the input of a graph element using depth-first search.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L331'>sorted_nodes</a>()</tt>	Get a topologically-sorted list of node names of the stepper.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L344'>closure_elements</a>()</tt>	Get a name list of the graph elements of the stepper.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L354'>output_slots_in_closure</a>(node_name)</tt>	Get the output tensors in the transitive closure from node.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L375'>is_feedable</a>(name)</tt>	Determine if a graph element if feedable.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L391'>override_tensor</a>(tensor_name,overriding_val)</tt>	Override the value of a tensor.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L418'>remove_override</a>(tensor_name)</tt>	Remove the overriding value on a tensor.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L438'>last_feed_types</a>()</tt>	Obtain information about the feed in the last cont() call.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L447'>cont</a>(target,use_tensor_handles,use_dumped_intermediates,use_overrides)</tt>	Continue till the completion of the specified target tensor.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L694'>_prepare_cont_call_dump_path_and_run_options</a>()</tt>	Prepare the dump path and runoptions for next cont() call.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L731'>_invalidate_transitively_outgoing_cache</a>(source_element)</tt>	Invalidate the cached tensor handles by tracing output.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L796'>finalize</a>()</tt>	Run the final fetch es.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L809'>restore_variable_values</a>()</tt>	Restore variables to the initial values.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L823'>handle_names</a>()</tt>	Return names of the tensorhandles that the debugger is holding.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L832'>handle_node_names</a>()</tt>	Get list of names of the nodes for which handles are available.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L841'>intermediate_tensor_names</a>()</tt>	Get list of the names of the tensors for which dumps are available.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L851'>last_updated</a>()</tt>	Get the names of the variables updated in the last cont() call.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L861'>dirty_variables</a>()</tt>	Get the set of variables that are currently "dirty".
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L875'>is_placeholder</a>(graph_element_name)</tt>	Check whether a graph element is a placeholder by name.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L901'>placeholders</a>()</tt>	Get the list of placeholder tensors in the transitive closure.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L916'>get_tensor_value</a>(tensor_name)</tt>	Get the value of a tensor that the stepper has access to.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L945'>override_names</a>()</tt>	Return names of the tensorhandles that the debugger is holding.
<tt style='background-color:#E8E8E8;'> python.debug.lib.NodeStepper <a href=' /python/debug/lib/stepper.py#L954'>_get_node</a>(element)</tt>	Get the node of a graph element.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugUtilsTest <a href=' /python/debug/lib/debug_utils_test.py#L69'>_verify_watches</a>(watch_opts,expected_output_slot,expected_debug_ops,expected_debug_urls)</tt>	Verify a list of debug tensor watches.
<tt style='background-color:#E8E8E8;'> python.debug.lib.SessionDebugTestBase <a href=' /python/debug/lib/session_debug_testlib.py#L907'>testOutputSlotWithoutOutgoingEdgeCanBeWatched</a>()</tt>	Test watching output slots not attached to any outgoing edges.
<tt style='background-color:#E8E8E8;'> python.debug.lib.SessionDebugTestBase <a href=' /python/debug/lib/session_debug_testlib.py#L942'>testWatchingVariableUpdateOpsSeesUpdatedValues</a>()</tt>	Watch output slots on variable-updating ops with no emitted edges.
<tt style='background-color:#E8E8E8;'> python.debug.lib.SessionDebugTestBase <a href=' /python/debug/lib/session_debug_testlib.py#L996'>testAllowsWatchingUnconnectedOutputTensor</a>()</tt>	Watch an output slot not emitting any edges.
<tt style='background-color:#E8E8E8;'> python.debug.lib.SessionDebugTestBase <a href=' /python/debug/lib/session_debug_testlib.py#L1060'>testSuccessiveDebuggingRunsIncreasesCounters</a>()</tt>	Test repeated session run() calls with debugger increments counters.
<tt style='background-color:#E8E8E8;'> python.debug.lib.SessionDebugTestBase <a href=' /python/debug/lib/session_debug_testlib.py#L1117'>testDebuggingDuringOpError</a>()</tt>	Test the debug tensor dumping when error occurs in graph runtime.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugConcurrentRunCallsTest <a href=' /python/debug/lib/session_debug_testlib.py#L1487'>_get_concurrent_debug_urls</a>()</tt>	Abstract method to generate debug urls for concurrent debugged runs.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/debug_utils.py#L26'>add_debug_tensor_watch</a>(run_options,node_name,output_slot,debug_ops)</tt>	Add watch on a tensor to runoptions.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/debug_utils.py#L82'>watch_graph</a>(run_options,graph,debug_ops,debug_urls)</tt>	Add debug watches to runoptions for a tensorflow graph.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/debug_utils.py#L175'>watch_graph_with_blacklists</a>(run_options,graph,debug_ops,debug_urls)</tt>	Add debug tensor watches blacklisting nodes and op types.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/debug_data.py#L66'>load_tensor_from_event_file</a>(event_file_path)</tt>	Load a tensor from an event file.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/debug_data.py#L88'>load_tensor_from_event</a>(event)</tt>	Load a tensor from an event proto.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/debug_data.py#L137'>parse_node_or_tensor_name</a>(name)</tt>	Get the node name from a string that can be node or tensor name.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/debug_data.py#L181'>get_output_slot</a>(element_name)</tt>	Get the output slot number from the name of a graph element.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/debug_data.py#L196'>_get_tensor_name</a>(node_name,output_slot)</tt>	Get tensor name given node name and output slot index.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/debug_data.py#L210'>_get_tensor_watch_key</a>(node_name,output_slot,debug_op)</tt>	Get the string representation of a debug watch on a tensor.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/debug_data.py#L227'>is_copy_node</a>(node_name)</tt>	Determine whether a node name is that of a debug copy node.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/debug_data.py#L243'>is_debug_node</a>(node_name)</tt>	Determine whether a node name is that of a debug node.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/debug_data.py#L258'>parse_debug_node_name</a>(node_name)</tt>	Parse the name of a debug node.
<tt style='background-color:#E8E8E8;'> python.debug.lib. <a href=' /python/debug/lib/debug_data.py#L299'>has_inf_or_nan</a>(datum,tensor)</tt>	A predicate for whether a tensor consists of any bad numerical values.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugTensorDatum <a href=' /python/debug/lib/debug_data.py#L419'>get_tensor</a>()</tt>	Get tensor from the dump (event) file.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugTensorDatum <a href=' /python/debug/lib/debug_data.py#L429'>timestamp</a>()</tt>	Timestamp of when this tensor value was dumped.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugTensorDatum <a href=' /python/debug/lib/debug_data.py#L439'>extended_timestamp</a>()</tt>	Extended timestamp possibly with an index suffix.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugTensorDatum <a href=' /python/debug/lib/debug_data.py#L453'>debug_op</a>()</tt>	Name of the debug op.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugTensorDatum <a href=' /python/debug/lib/debug_data.py#L463'>node_name</a>()</tt>	Name of the node from which the tensor value was dumped.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugTensorDatum <a href=' /python/debug/lib/debug_data.py#L473'>output_slot</a>()</tt>	Output slot index from which the tensor value was dumped.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugTensorDatum <a href=' /python/debug/lib/debug_data.py#L483'>tensor_name</a>()</tt>	Name of the tensor watched by the debug op.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugTensorDatum <a href=' /python/debug/lib/debug_data.py#L493'>watch_key</a>()</tt>	Watch key identities a debug watch on a tensor.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugTensorDatum <a href=' /python/debug/lib/debug_data.py#L504'>file_path</a>()</tt>	Path to the file which stores the value of the dumped tensor.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugTensorDatum <a href=' /python/debug/lib/debug_data.py#L510'>dump_size_bytes</a>()</tt>	Size of the dump file.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L555'>_load_dumps</a>(dump_root)</tt>	Load debugtensordatum instances from the dump root.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L629'>_dump_file_name_to_datum</a>(dir_name,file_name)</tt>	Obtain a debugtensordatum from the directory and file name.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L646'>_create_tensor_watch_maps</a>()</tt>	Create maps from tensor watch keys to datum and to timestamps.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L673'>set_python_graph</a>(python_graph)</tt>	Provide python graph object to the wrapper.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L690'>python_graph</a>()</tt>	Get the python graph.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L701'>core_metadata</a>()</tt>	Metadata about the session run() call from the core runtime.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L736'>t0</a>()</tt>	Absolute timestamp of the first dumped tensor.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L746'>size</a>()</tt>	Total number of dumped tensors in the dump root directory.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L756'>_load_partition_graphs</a>(partition_graphs,validate)</tt>	Load and process partition graphs.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L811'>_process_partition_graph_node</a>(node)</tt>	Process a node from the partition graphs.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L859'>_prune_nodes_from_input_and_recipient_maps</a>(nodes_to_prune)</tt>	Prune nodes out of input and recipient maps.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L872'>_prune_non_control_edges_of_debug_ops</a>()</tt>	Prune non-control edges related to debug ops.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L901'>_prune_control_edges_of_debug_ops</a>()</tt>	Prune control edges related to the debug ops.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L913'>_populate_recipient_maps</a>()</tt>	Populate the map from node name to recipient s of its output s.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L934'>_validate_dump_with_graphs</a>()</tt>	Validate the dumped tensor data against the partition graphs.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L999'>_satisfied_at_timestamp</a>(pending,timestamp,start_i)</tt>	Determine whether pending inputs are satisfied at given timestamp.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1029'>loaded_partition_graphs</a>()</tt>	Test whether partition graphs have been loaded.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1033'>partition_graphs</a>()</tt>	Get the partition graphs.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1048'>run_fetches_info</a>()</tt>	Get a str representation of the fetches used in the session run() call.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1059'>run_feed_keys_info</a>()</tt>	Get a str representation of the feed_dict used in the session run() call.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1070'>nodes</a>()</tt>	Get a list of all nodes from the partition graphs.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1085'>node_attributes</a>(node_name)</tt>	Get the attributes of a node.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1107'>node_inputs</a>(node_name,is_control)</tt>	Get the inputs of given node according to partition graphs.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1137'>transitive_inputs</a>(node_name,include_control)</tt>	Get the transitive inputs of given node according to partition graphs.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1205'>node_recipients</a>(node_name,is_control)</tt>	Get recipient of the given node's output according to partition graphs.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1235'>devices</a>()</tt>	Get the list of devices.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1251'>node_exists</a>(node_name)</tt>	Test if a node exists in the partition graphs.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1270'>node_device</a>(node_name)</tt>	Get the device of a node.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1295'>node_op_type</a>(node_name)</tt>	Get the op type of given node.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1320'>debug_watch_keys</a>(node_name)</tt>	Get all tensor watch keys of given node according to partition graphs.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1347'>watch_key_to_data</a>(debug_watch_key)</tt>	Get all debugtensordatum instances corresponding to a debug watch key.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1363'>find</a>(predicate,first_n)</tt>	Find dumped tensor data by a certain predicate.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1398'>get_tensor_file_paths</a>(node_name,output_slot,debug_op)</tt>	Get the file paths from a debug-dumped tensor.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1421'>get_tensors</a>(node_name,output_slot,debug_op)</tt>	Get the tensor value from for a debug-dumped tensor.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1446'>get_rel_timestamps</a>(node_name,output_slot,debug_op)</tt>	Get the relative timestamp from for a debug-dumped tensor.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1473'>get_dump_sizes_bytes</a>(node_name,output_slot,debug_op)</tt>	Get the sizes of the dump files for a debug-dumped tensor.
<tt style='background-color:#E8E8E8;'> python.debug.lib.DebugDumpDir <a href=' /python/debug/lib/debug_data.py#L1497'>node_traceback</a>(element_name)</tt>	Try to retrieve the python traceback of node's construction.
<tt style='background-color:#E8E8E8;'> python.debug.examples. <a href=' /python/debug/examples/debug_tflearn_iris.py#L39'>maybe_download_data</a>(data_dir)</tt>	Download data sets if necessary.
<tt style='background-color:#E8E8E8;'> python.framework.AsGraphDefTest <a href=' /python/framework/ops_test.py#L1415'>testGraphDefVersion</a>()</tt>	Test that the graphdef version is plumbed through to kernels.
<tt style='background-color:#E8E8E8;'> python.framework.ImportGraphDefTest <a href=' /python/framework/importer_test.py#L860'>testVersionAppliesToOpConstruction</a>()</tt>	These tests rely on shape fns in test_ops cc.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/random_seed.py#L34'>get_seed</a>(op_seed)</tt>	Returns the local seeds an operation should use given an op-specific seed.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/random_seed.py#L70'>set_random_seed</a>(seed)</tt>	Sets the graph-level random seed.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L49'>_override_helper</a>(clazz_object,operator,func)</tt>	Overrides string operator on tensors to call func.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L73'>_convert_stack</a>(stack,include_func_start_lineno)</tt>	Converts a stack extracted using _extract_stack() to a traceback stack.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L104'>_extract_stack</a>()</tt>	A lightweight re-implementation of traceback extract_stack.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L137'>_as_graph_element</a>(obj)</tt>	Convert obj to a graph element if possible otherwise return none.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L156'>is_dense_tensor_like</a>(t)</tt>	Experimental returns true if t implements the tensor interface.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L171'>register_dense_tensor_like_type</a>(tensor_type)</tt>	Experimental registers tensor_type as implementing the tensor interface.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L283'>__init__</a>(op,value_index,dtype)</tt>	Creates a new tensor.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L309'>op</a>()</tt>	The operation that produces this tensor as an output.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L314'>dtype</a>()</tt>	The dtype of elements in this tensor.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L319'>graph</a>()</tt>	The graph that contains this tensor.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L324'>name</a>()</tt>	The string name of this tensor.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L331'>device</a>()</tt>	The name of the device on which this tensor will be produced or none.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L336'>shape</a>()</tt>	Returns the tensorshape that represents the shape of this tensor.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L388'>get_shape</a>()</tt>	Alias of tensor shape.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L392'>set_shape</a>(shape)</tt>	Updates the shape of this tensor.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L425'>value_index</a>()</tt>	The index of this tensor in the outputs of its operation.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L430'>consumers</a>()</tt>	Returns a list of operations that consume this tensor.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L438'>_add_consumer</a>(consumer)</tt>	Add a consumer to this tensor.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L451'>_as_node_def_input</a>()</tt>	Return a value to use for the nodedef "input" attribute.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L503'>__iter__</a>()</tt>	Dummy method to prevent iteration do not call.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L516'>__bool__</a>()</tt>	Dummy method to prevent a tensor from being used as a python bool.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L543'>__nonzero__</a>()</tt>	Dummy method to prevent a tensor from being used as a python bool.
<tt style='background-color:#E8E8E8;'> python.framework.Tensor <a href=' /python/framework/ops.py#L557'>eval</a>(feed_dict,session)</tt>	Evaluates this tensor in a session.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L596'>convert_to_tensor</a>(value,dtype,name,preferred_dtype)</tt>	Converts the given value to a tensor.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L652'>internal_convert_to_tensor</a>(value,dtype,name,as_ref)</tt>	Converts the given value to an tensor.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L735'>internal_convert_n_to_tensor</a>(values,dtype,name,as_ref)</tt>	Converts values to a list of tensor objects.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L779'>convert_n_to_tensor</a>(values,dtype,name,preferred_dtype)</tt>	Converts values to a list of tensor objects.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L813'>convert_to_tensor_or_indexed_slices</a>(value,dtype,name)</tt>	Converts the given object to a tensor or an indexedslices.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L837'>internal_convert_to_tensor_or_indexed_slices</a>(value,dtype,name,as_ref)</tt>	Converts the given object to an tensor or an indexedslices.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L872'>internal_convert_n_to_tensor_or_indexed_slices</a>(values,dtype,name,as_ref)</tt>	Converts values to a list of tensor or indexedslices objects.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L912'>convert_n_to_tensor_or_indexed_slices</a>(values,dtype,name)</tt>	Converts values to a list of output or indexedslices objects.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L940'>register_tensor_conversion_function</a>(base_type,conversion_func,priority)</tt>	Registers a function for converting objects of base_type to tensor.
<tt style='background-color:#E8E8E8;'> python.framework.IndexedSlices <a href=' /python/framework/ops.py#L1024'>__init__</a>(values,indices,dense_shape)</tt>	Creates an indexedslices.
<tt style='background-color:#E8E8E8;'> python.framework.IndexedSlices <a href=' /python/framework/ops.py#L1031'>values</a>()</tt>	A tensor containing the values of the slices.
<tt style='background-color:#E8E8E8;'> python.framework.IndexedSlices <a href=' /python/framework/ops.py#L1036'>indices</a>()</tt>	A 1-d tensor containing the indices of the slices.
<tt style='background-color:#E8E8E8;'> python.framework.IndexedSlices <a href=' /python/framework/ops.py#L1041'>dense_shape</a>()</tt>	A 1-d tensor containing the shape of the corresponding dense tensor.
<tt style='background-color:#E8E8E8;'> python.framework.IndexedSlices <a href=' /python/framework/ops.py#L1046'>name</a>()</tt>	The name of this indexedslices.
<tt style='background-color:#E8E8E8;'> python.framework.IndexedSlices <a href=' /python/framework/ops.py#L1051'>device</a>()</tt>	The name of the device on which values will be produced or none.
<tt style='background-color:#E8E8E8;'> python.framework.IndexedSlices <a href=' /python/framework/ops.py#L1056'>op</a>()</tt>	The operation that produces values as an output.
<tt style='background-color:#E8E8E8;'> python.framework.IndexedSlices <a href=' /python/framework/ops.py#L1061'>dtype</a>()</tt>	The dtype of elements in this tensor.
<tt style='background-color:#E8E8E8;'> python.framework.IndexedSlices <a href=' /python/framework/ops.py#L1066'>graph</a>()</tt>	The graph that contains the values indices and shape tensors.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L1092'>_NodeDef</a>(op_type,name,device,attrs)</tt>	Create a nodedef proto.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1147'>__init__</a>(node_def,g,inputs,output_types)</tt>	Creates an operation.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1255'>colocation_groups</a>()</tt>	Returns the list of colocation groups of the op.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1272'>values</a>()</tt>	Deprecated use outputs.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1276'>_get_control_flow_context</a>()</tt>	Returns the control flow context of this op.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1284'>_set_control_flow_context</a>(context)</tt>	Sets the current control flow context of this op.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1292'>name</a>()</tt>	The full name of this operation.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1297'>_id</a>()</tt>	The unique integer id of this operation.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1302'>device</a>()</tt>	The name of the device to which this op has been assigned if any.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1313'>_set_device</a>(device)</tt>	Set the device of this operation.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1321'>_add_input</a>(tensor,dtype)</tt>	Add a new input to this operation.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1350'>_update_input</a>(index,tensor,dtype)</tt>	Update the input to this operation at the given index.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1384'>_add_control_inputs</a>(ops)</tt>	Add a list of new control inputs to this operation.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1402'>_add_control_input</a>(op)</tt>	Add a new control input to this operation.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1428'>outputs</a>()</tt>	The list of tensor objects representing the outputs of this op.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1456'>inputs</a>()</tt>	The list of tensor objects representing the data inputs of this op.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1465'>control_inputs</a>()</tt>	The operation objects on which this op has a control dependency.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1481'>type</a>()</tt>	The type of the op (e g "matmul").
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1486'>graph</a>()</tt>	The graph that contains this operation.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1491'>node_def</a>()</tt>	Returns a serialized nodedef representation of this operation.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1502'>op_def</a>()</tt>	Returns the opdef proto that represents the type of this op.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1513'>traceback</a>()</tt>	Returns the call stack from when this operation was constructed.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1518'>traceback_with_start_lines</a>()</tt>	Same as traceback but includes start line of function definition.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1527'>get_attr</a>(name)</tt>	Returns the value of the attr of this op with the given name.
<tt style='background-color:#E8E8E8;'> python.framework.Operation <a href=' /python/framework/ops.py#L1558'>run</a>(feed_dict,session)</tt>	Runs this operation in a session.
<tt style='background-color:#E8E8E8;'> python.framework.RegisterGradient <a href=' /python/framework/ops.py#L1606'>__init__</a>(op_type)</tt>	Creates a new decorator with op_type as the operation type.
<tt style='background-color:#E8E8E8;'> python.framework.RegisterGradient <a href=' /python/framework/ops.py#L1617'>__call__</a>(f)</tt>	Registers the function f as gradient function for op_type.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L1623'>NotDifferentiable</a>(op_type)</tt>	Specifies that ops of type op_type is not differentiable.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L1660'>get_gradient_function</a>(op)</tt>	Returns the function that computes gradients for "op".
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L1680'>_set_call_cpp_shape_fn</a>(call_cpp_shape_fn)</tt>	Sets default shape fns from passed common_shapes call_cpp_shape_fn.
<tt style='background-color:#E8E8E8;'> python.framework.RegisterShape <a href=' /python/framework/ops.py#L1705'>__init__</a>(op_type)</tt>	Saves the op_type as the operation type.
<tt style='background-color:#E8E8E8;'> python.framework.RegisterShape <a href=' /python/framework/ops.py#L1711'>__call__</a>(f)</tt>	Registers "f" as the shape function for "op_type".
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L1732'>set_shapes_for_outputs</a>(op)</tt>	Uses the registered shape functions to set the shapes for op's outputs.
<tt style='background-color:#E8E8E8;'> python.framework.OpStats <a href=' /python/framework/ops.py#L1781'>__init__</a>(statistic_type,value)</tt>	Sets up the initial placeholders for the statistics.
<tt style='background-color:#E8E8E8;'> python.framework.RegisterStatistics <a href=' /python/framework/ops.py#L1859'>__init__</a>(op_type,statistic_type)</tt>	Saves the op_type as the operation type.
<tt style='background-color:#E8E8E8;'> python.framework.RegisterStatistics <a href=' /python/framework/ops.py#L1872'>__call__</a>(f)</tt>	Registers "f" as the statistics function for "op_type".
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L1878'>get_stats_for_node_def</a>(graph,node,statistic_type)</tt>	Looks up the node's statistics function in the registry and calls it.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L1902'>_name_from_scope_name</a>(name)</tt>	Returns the name of an op given the name of its scope.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L1960'>__init__</a>()</tt>	Creates a new empty graph.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2027'>_check_not_finalized</a>()</tt>	Check if the graph is finalized.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2036'>_add_op</a>(op)</tt>	Adds 'op' to the graph.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2062'>version</a>()</tt>	Returns a version number that increases as ops are added to the graph.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2075'>graph_def_versions</a>()</tt>	The graphdef version information of this graph.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2092'>seed</a>()</tt>	The graph-level random seed of this graph.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2096'>finalized</a>()</tt>	True if this graph has been finalized.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2101'>finalize</a>()</tt>	Finalizes this graph making it read-only.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2111'>_unsafe_unfinalize</a>()</tt>	Opposite of finalize internal interface.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2121'>_get_control_flow_context</a>()</tt>	Returns the current control flow context.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2129'>_set_control_flow_context</a>(context)</tt>	Sets the current control flow context.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2191'>as_graph_def</a>(from_version,add_shapes)</tt>	Returns a serialized graphdef representation of this graph.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2217'>_is_function</a>(name)</tt>	Tests whether 'name' is registered in this graph's function library.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2227'>_get_function</a>(name)</tt>	Returns the function definition for 'name'.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2237'>_add_function</a>(function)</tt>	Adds a function to the graph.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2264'>building_function</a>()</tt>	Returns true iff this graph represents a function.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2270'>create_op</a>(op_type,inputs,dtypes,input_types)</tt>	Creates an operation in this graph.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2404'>as_graph_element</a>(obj,allow_tensor,allow_operation)</tt>	Returns the object referred to by obj, as an operation or tensor.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2439'>_as_graph_element_locked</a>(obj,allow_tensor,allow_operation)</tt>	See graph as_graph_element() for details.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2528'>get_operations</a>()</tt>	Return the list of operations in the graph.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2546'>get_operation_by_name</a>(name)</tt>	Returns the operation with the given name.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2567'>get_tensor_by_name</a>(name)</tt>	Returns the tensor with the given name.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2588'>_next_id</a>()</tt>	Id for next operation instance also increments the internal id.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2599'>as_default</a>()</tt>	Returns a context manager that makes this graph the default graph.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2634'>add_to_collection</a>(name,value)</tt>	Stores value in the collection with the given name.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2652'>add_to_collections</a>(names,value)</tt>	Stores value in the collections given by names.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2673'>get_collection_ref</a>(name)</tt>	Returns a list of values in the collection with the given name.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2698'>get_collection</a>(name,scope)</tt>	Returns a list of values in the collection with the given name.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2734'>get_all_collection_keys</a>()</tt>	Returns a list of collections used in this graph.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2739'>clear_collection</a>(name)</tt>	Clears all values in a collection.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2751'>_original_op</a>(op)</tt>	Python 'with' handler to help annotate ops with their originator.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2777'>name_scope</a>(name)</tt>	Returns a context manager that creates hierarchical names for operations.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2888'>unique_name</a>(name,mark_as_used)</tt>	Return a unique operation name for name.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2933'>get_name_scope</a>()</tt>	Returns the current name scope.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L2950'>colocate_with</a>(op,ignore_existing)</tt>	Returns a context manager that specifies an op to colocate with.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L3025'>device</a>(device_name_or_function)</tt>	Returns a context manager that specifies the default device to use.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L3095'>_apply_device_functions</a>(op)</tt>	Applies the current device function stack to the given operation.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L3107'>container</a>(container_name)</tt>	Returns a context manager that specifies the resource container to use.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L3238'>_control_dependencies_for_inputs</a>(input_tensors)</tt>	For an op that takes input_tensors as inputs compute control inputs.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L3273'>_record_op_seen_by_control_dependencies</a>(op)</tt>	Record that the given op depends on all registered control dependencies.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L3282'>control_dependencies</a>(control_inputs)</tt>	Returns a context manager that specifies control dependencies.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L3375'>_attr_scope</a>(attr_map)</tt>	Experimental a context manager for setting attributes on operators.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L3440'>_kernel_label_map</a>(op_to_kernel_label_map)</tt>	Experimental a context manager for setting kernel labels.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L3502'>gradient_override_map</a>(op_type_map)</tt>	Experimental a context manager for overriding gradient functions.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L3564'>prevent_feeding</a>(tensor)</tt>	Marks the given tensor as unfeedable in this graph.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L3568'>is_feedable</a>(tensor)</tt>	Returns true if and only if tensor is feedable.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L3572'>prevent_fetching</a>(op)</tt>	Marks the given op as unfetchable in this graph.
<tt style='background-color:#E8E8E8;'> python.framework.Graph <a href=' /python/framework/ops.py#L3576'>is_fetchable</a>(tensor_or_op)</tt>	Returns true if and only if tensor_or_op is fetchable.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L3584'>device</a>(device_name_or_function)</tt>	Wrapper for graph device() using the default graph.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L3602'>container</a>(container_name)</tt>	Wrapper for graph container() using the default graph.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L3619'>control_dependencies</a>(control_inputs)</tt>	Wrapper for graph control_dependencies() using the default graph.
<tt style='background-color:#E8E8E8;'> python.framework._DefaultStack <a href=' /python/framework/ops.py#L3660'>get_controller</a>(default)</tt>	A context manager for manipulating a default stack.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L3679'>default_session</a>(session)</tt>	Python "with" handler for defining a default session.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L3727'>get_default_session</a>()</tt>	Returns the default session for the current thread.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L3744'>_eval_using_default_session</a>(tensors,feed_dict,graph,session)</tt>	Uses the default session to evaluate one or more tensors.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L3784'>_run_using_default_session</a>(operation,feed_dict,graph,session)</tt>	Uses the default session to run "operation".
<tt style='background-color:#E8E8E8;'> python.framework._DefaultGraphStack <a href=' /python/framework/ops.py#L3826'>get_default</a>()</tt>	Override that returns a global default if the stack is empty.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L3849'>reset_default_graph</a>()</tt>	Clears the default graph stack and resets the global default graph.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L3861'>get_default_graph</a>()</tt>	Returns the default graph for the current thread.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L3879'>_assert_same_graph</a>(original_item,item)</tt>	Fail if the 2 items are from different graphs.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L3894'>_get_graph_from_inputs</a>(op_input_list,graph)</tt>	Returns the appropriate graph to use for the given inputs.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4090'>add_to_collection</a>(name,value)</tt>	Wrapper for graph add_to_collection() using the default graph.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4104'>add_to_collections</a>(names,value)</tt>	Wrapper for graph add_to_collections() using the default graph.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4118'>get_collection_ref</a>(key)</tt>	Wrapper for graph get_collection_ref() using the default graph.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4137'>get_collection</a>(key,scope)</tt>	Wrapper for graph get_collection() using the default graph.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4161'>get_all_collection_keys</a>()</tt>	Returns a list of collections used in the default graph.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4167'>name_scope</a>(name,default_name,values)</tt>	Returns a context manager for use when defining a python op.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4217'>strip_name_scope</a>(name,export_scope)</tt>	Removes name scope from a name.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4237'>prepend_name_scope</a>(name,import_scope)</tt>	Prepends name scope to a name.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4257'>op_scope</a>(values,name,default_name)</tt>	Deprecated same as name_scope above just different argument order.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4269'>register_proto_function</a>(collection_name,proto_type,to_proto,from_proto)</tt>	Registers to_proto and from_proto functions for collection_name.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4295'>get_collection_proto_type</a>(collection_name)</tt>	Returns the proto_type for collection_name.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4303'>get_to_proto_function</a>(collection_name)</tt>	Returns the to_proto function for collection_name.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4311'>get_from_proto_function</a>(collection_name)</tt>	Returns the from_proto function for collection_name.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/ops.py#L4319'>_operation_conversion_error</a>(op,dtype,name,as_ref)</tt>	Produce a nice error if someone converts an operation to a tensor.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/graph_io.py#L28'>write_graph</a>(graph_or_graph_def,logdir,name,as_text)</tt>	Writes a graph proto to a file.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/op_def_library.py#L83'>_Flatten</a>(l)</tt>	Converts [1 2 [3 4], [5]] to [1 2 3 4 5].
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/op_def_library.py#L91'>_Restructure</a>(l,structure)</tt>	Returns the elements of list l structured according to the given structure.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/op_def_library.py#L183'>_MakeShape</a>(v,arg_name)</tt>	Convert v into a tensorshapeproto.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/op_def_library.py#L201'>_MakeTensor</a>(v,arg_name)</tt>	Ensure v is a tensorproto.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/op_def_library.py#L243'>_MaybeColocateWith</a>(inputs)</tt>	A context manager for maybe colocating with a list of input tensors.
<tt style='background-color:#E8E8E8;'> python.framework.OpDefLibrary <a href=' /python/framework/op_def_library.py#L269'>add_op</a>(op_def)</tt>	Register an opdef may call apply_op with the name afterwards.
<tt style='background-color:#E8E8E8;'> python.framework.OpDefLibrary <a href=' /python/framework/op_def_library.py#L280'>add_op_list</a>(op_list)</tt>	Register the opdefs from an oplist.
<tt style='background-color:#E8E8E8;'> python.framework.OpDefLibrary <a href=' /python/framework/op_def_library.py#L288'>apply_op</a>(op_type_name,name)</tt>	Add a node invoking a registered op to a graph.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_shape.py#L801'>unknown_shape</a>(op)</tt>	Shape function for use with ops whose output shapes are unknown.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/test_util.py#L52'>gpu_device_name</a>()</tt>	Returns the name of a gpu device if available or the empty string.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/test_util.py#L60'>assert_ops_in_graph</a>(expected_ops,graph)</tt>	Assert all expected operations are found.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/test_util.py#L86'>assert_equal_graph_def</a>(actual,expected,checkpoint_v2)</tt>	Asserts that two graphdefs are mostly the same.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/test_util.py#L120'>assert_meta_graph_protos_equal</a>(tester,a,b)</tt>	Compares metagraphdefs a and b in unit test class tester.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/test_util.py#L177'>NHWCToNCHW</a>(input_tensor)</tt>	Converts the input from the nhwc format to nchw.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/test_util.py#L199'>NCHWToNHWC</a>(input_tensor)</tt>	Converts the input from the nchw format to nhwc.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L249'>get_temp_dir</a>()</tt>	Returns a unique temporary directory for the test to use.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L267'>_AssertProtoEquals</a>(a,b)</tt>	Asserts that a and b are the same proto.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L281'>assertProtoEquals</a>(expected_message_maybe_ascii,message)</tt>	Asserts that message is same as parsed expected_message_ascii.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L314'>assertStartsWith</a>(actual,expected_start,msg)</tt>	Assert that actual startswith(expected_start) is true.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L328'>test_session</a>(graph,config,use_gpu,force_gpu)</tt>	Returns a tensorflow session for use in executing tests.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L495'>checkedThread</a>(target,args,kwargs)</tt>	Returns a thread wrapper that asserts 'target' completes successfully.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L517'>assertNear</a>(f1,f2,err,msg)</tt>	Asserts that two floats are near each other.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L534'>assertArrayNear</a>(farray1,farray2,err)</tt>	Asserts that two float arrays are near each other.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L552'>assertNDArrayNear</a>(ndarray1,ndarray2,err)</tt>	Asserts that two numpy arrays have near values.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L597'>assertAllClose</a>(a,b,rtol,atol)</tt>	Asserts that two numpy arrays or dicts of same have near values.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L627'>assertAllCloseAccordingToType</a>(a,b,rtol,atol)</tt>	Like assertallclose but also suitable for comparing fp16 arrays.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L663'>assertAllEqual</a>(a,b)</tt>	Asserts that two numpy arrays have the same values.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L693'>assertRaisesWithPredicateMatch</a>(exception_type,expected_err_re_or_predicate)</tt>	Returns a context manager to enclose code expected to raise an exception.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L740'>assertShapeEqual</a>(np_array,tf_tensor)</tt>	Asserts that a numpy ndarray and a tensorflow tensor have the same shape.
<tt style='background-color:#E8E8E8;'> python.framework.TensorFlowTestCase <a href=' /python/framework/test_util.py#L756'>assertDeviceEqual</a>(device1,device2)</tt>	Asserts that the two given devices are the same.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/subscribe.py#L30'>_recursive_apply</a>(tensors,apply_fn)</tt>	Helper method to recursively apply a function to structure of tensors.
<tt style='background-color:#E8E8E8;'> python.framework._ControlOutputCache <a href=' /python/framework/subscribe.py#L72'>calc_control_outputs</a>(graph)</tt>	Returns the map of control_outputs for a given graph.
<tt style='background-color:#E8E8E8;'> python.framework._ControlOutputCache <a href=' /python/framework/subscribe.py#L88'>get_control_outputs</a>(op)</tt>	Return the control outputs for a given op.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/subscribe.py#L104'>_subscribe_new</a>(tensor,side_effects,control_cache)</tt>	Helper method that subscribes a single tensor to a list of side_effects.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/subscribe.py#L142'>_subscribe_extend</a>(tensor,side_effects)</tt>	Helper method to extend the list of side_effects for a subscribed tensor.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/subscribe.py#L173'>_is_subscribed_identity</a>(tensor)</tt>	Checks if the given tensor is an identity op returned by subscribe().
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/subscribe.py#L206'>_subscribe</a>(tensor,side_effects,control_cache)</tt>	Helper method that subscribes a single tensor to a list of side_effects.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/subscribe.py#L247'>subscribe</a>(tensors,side_effects)</tt>	Subscribe to a tensor.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/meta_graph.py#L48'>_node_def</a>(from_node_def,export_scope,unbound_inputs,clear_devices)</tt>	Create a nodedef proto with export_scope stripped.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/meta_graph.py#L92'>_read_file</a>(filename)</tt>	Reads a file containing graphdef and returns the protocol buffer.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/meta_graph.py#L124'>ops_used_by_graph_def</a>(graph_def)</tt>	Collect the list of ops used by a graph.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/meta_graph.py#L160'>stripped_op_list_for_graph</a>(graph_def)</tt>	Collect the stripped opdefs for ops used by a graph.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/meta_graph.py#L198'>_get_kind_name</a>(item)</tt>	Returns the kind name in collectiondef.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/meta_graph.py#L220'>_should_include_node</a>(node_or_node_name,export_scope)</tt>	Returns true if a node should be included.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/meta_graph.py#L245'>add_collection_def</a>(meta_graph_def,key,graph,export_scope)</tt>	Adds a collection to metagraphdef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/meta_graph.py#L309'>create_meta_graph_def</a>(meta_info_def,graph_def,saver_def,collection_list)</tt>	Construct and returns a metagraphdef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/meta_graph.py#L388'>read_meta_graph_file</a>(filename)</tt>	Reads a file containing metagraphdef and returns the protocol buffer.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/meta_graph.py#L420'>import_scoped_meta_graph</a>(meta_graph_or_file,clear_devices,graph,import_scope)</tt>	Recreates a graph saved in a metagraphdef proto.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/meta_graph.py#L555'>export_scoped_meta_graph</a>(filename,graph_def,graph,export_scope)</tt>	Returns metagraphdef proto optionally writes it to filename.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/meta_graph.py#L660'>copy_scoped_meta_graph</a>(from_scope,to_scope,from_graph,to_graph)</tt>	Copies a sub-meta_graph from one scope to another.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_util.py#L158'>TensorShapeProtoToList</a>(shape)</tt>	Convert a tensorshape to a list.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_util.py#L170'>_GetDenseDimensions</a>(list_of_lists)</tt>	Returns the inferred dense dimensions of a list of lists.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_util.py#L305'>make_tensor_proto</a>(values,dtype,shape,verify_shape)</tt>	Create a tensorproto.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_util.py#L478'>MakeNdarray</a>(tensor)</tt>	Create a numpy ndarray from a tensor.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_util.py#L572'>ShapeEquals</a>(tensor_proto,shape)</tt>	Returns true if "tensor_proto" has the given "shape".
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_util.py#L685'>constant_value</a>(tensor)</tt>	Returns the constant value of the given tensor if efficiently calculable.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_util.py#L718'>constant_value_as_shape</a>(tensor)</tt>	A version of constant_value() that returns a tensorshape.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_util.py#L780'>is_tensor</a>(x)</tt>	Check whether x is of tensor type.
<tt style='background-color:#E8E8E8;'> python.framework.DimensionDivTest <a href=' /python/framework/tensor_shape_div_test.py#L30'>testDivSucceeds</a>()</tt>	Without from __future__ import division __div__ should work.
<tt style='background-color:#E8E8E8;'> python.framework.DeviceSpec <a href=' /python/framework/device.py#L65'>__init__</a>(job,replica,task,device_type)</tt>	Create a new devicespec object.
<tt style='background-color:#E8E8E8;'> python.framework.DeviceSpec <a href=' /python/framework/device.py#L128'>parse_from_string</a>(spec)</tt>	Parse a devicespec name into its components.
<tt style='background-color:#E8E8E8;'> python.framework.DeviceSpec <a href=' /python/framework/device.py#L175'>merge_from</a>(dev)</tt>	Merge the properties of "dev" into this devicespec.
<tt style='background-color:#E8E8E8;'> python.framework.DeviceSpec <a href=' /python/framework/device.py#L192'>to_string</a>()</tt>	Return a string representation of this devicespec.
<tt style='background-color:#E8E8E8;'> python.framework.DeviceSpec <a href=' /python/framework/device.py#L213'>from_string</a>(spec)</tt>	Construct a devicespec from a string.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/device.py#L231'>check_valid</a>(spec)</tt>	Check that a device spec is valid.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/device.py#L244'>canonical_name</a>(device)</tt>	Returns a canonical name for the given devicespec or device name.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/device.py#L255'>merge_device</a>(spec)</tt>	Returns a device function that merges devices specifications.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/importer.py#L91'>_ParseTensorName</a>(tensor_name)</tt>	Parses a tensor name into an operation name and output index.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/importer.py#L137'>_MaybeDevice</a>(device)</tt>	Applies the given device only if device is not none or empty.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/importer.py#L154'>import_graph_def</a>(graph_def,input_map,return_elements,name)</tt>	Imports the graph from graph_def into the current default graph.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/load_library.py#L33'>load_op_library</a>(library_filename)</tt>	Loads a tensorflow plugin containing custom ops and kernels.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/load_library.py#L93'>load_file_system_library</a>(library_filename)</tt>	Loads a tensorflow plugin containing file system implementation.
<tt style='background-color:#E8E8E8;'> python.framework.Registry <a href=' /python/framework/registry.py#L40'>__init__</a>(name)</tt>	Creates a new registry.
<tt style='background-color:#E8E8E8;'> python.framework.Registry <a href=' /python/framework/registry.py#L45'>register</a>(candidate,name)</tt>	Registers a python object "candidate" for the given "name".
<tt style='background-color:#E8E8E8;'> python.framework.Registry <a href=' /python/framework/registry.py#L70'>list</a>()</tt>	Lists registered items.
<tt style='background-color:#E8E8E8;'> python.framework.Registry <a href=' /python/framework/registry.py#L78'>lookup</a>(name)</tt>	Looks up "name".
<tt style='background-color:#E8E8E8;'> python.framework.SparseTensor <a href=' /python/framework/sparse_tensor.py#L105'>__init__</a>(indices,values,dense_shape)</tt>	Creates a sparsetensor.
<tt style='background-color:#E8E8E8;'> python.framework.SparseTensor <a href=' /python/framework/sparse_tensor.py#L142'>get_shape</a>()</tt>	Get the tensorshape representing the shape of the dense tensor.
<tt style='background-color:#E8E8E8;'> python.framework.SparseTensor <a href=' /python/framework/sparse_tensor.py#L150'>indices</a>()</tt>	The indices of non-zero values in the represented dense tensor.
<tt style='background-color:#E8E8E8;'> python.framework.SparseTensor <a href=' /python/framework/sparse_tensor.py#L160'>values</a>()</tt>	The non-zero values in the represented dense tensor.
<tt style='background-color:#E8E8E8;'> python.framework.SparseTensor <a href=' /python/framework/sparse_tensor.py#L169'>op</a>()</tt>	The operation that produces values as an output.
<tt style='background-color:#E8E8E8;'> python.framework.SparseTensor <a href=' /python/framework/sparse_tensor.py#L174'>dtype</a>()</tt>	The dtype of elements in this tensor.
<tt style='background-color:#E8E8E8;'> python.framework.SparseTensor <a href=' /python/framework/sparse_tensor.py#L179'>dense_shape</a>()</tt>	A 1-d tensor of int64 representing the shape of the dense tensor.
<tt style='background-color:#E8E8E8;'> python.framework.SparseTensor <a href=' /python/framework/sparse_tensor.py#L184'>graph</a>()</tt>	The graph that contains the index value and dense_shape tensors.
<tt style='background-color:#E8E8E8;'> python.framework.SparseTensor <a href=' /python/framework/sparse_tensor.py#L193'>eval</a>(feed_dict,session)</tt>	Evaluates this sparse tensor in a session.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/sparse_tensor.py#L228'>convert_to_tensor_or_sparse_tensor</a>(value,dtype,name)</tt>	Converts value to a sparsetensor or tensor.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L59'>__init__</a>(type_enum)</tt>	Creates a new datatype.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L82'>_is_ref_dtype</a>()</tt>	Returns true if this dtype represents a reference type.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L87'>_as_ref</a>()</tt>	Returns a reference dtype based on this dtype.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L95'>base_dtype</a>()</tt>	Returns a non-reference dtype based on this dtype.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L103'>real_dtype</a>()</tt>	Returns the dtype correspond to this dtype's real part.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L119'>as_numpy_dtype</a>()</tt>	Returns a numpy dtype based on this dtype.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L124'>as_datatype_enum</a>()</tt>	Returns a types_pb2 datatype enum value based on this dtype.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L129'>is_bool</a>()</tt>	Returns whether this is a boolean data type.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L134'>is_integer</a>()</tt>	Returns whether this is a non-quantized integer type.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L140'>is_floating</a>()</tt>	Returns whether this is a non-quantized real floating point type.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L146'>is_complex</a>()</tt>	Returns whether this is a complex floating point type.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L151'>is_quantized</a>()</tt>	Returns whether this is a quantized data type.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L156'>is_unsigned</a>()</tt>	Returns whether this type is unsigned.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L171'>min</a>()</tt>	Returns the minimum representable value in this data type.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L193'>max</a>()</tt>	Returns the maximum representable value in this data type.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L215'>limits</a>(clip_negative)</tt>	Return intensity limits i e min max tuple of the dtype.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L231'>is_compatible_with</a>(other)</tt>	Returns true if the other dtype will be converted to this dtype.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L254'>__eq__</a>(other)</tt>	Returns true iff this dtype refers to the same type as other.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L264'>__ne__</a>(other)</tt>	Returns true iff self != other.
<tt style='background-color:#E8E8E8;'> python.framework.DType <a href=' /python/framework/dtypes.py#L268'>name</a>()</tt>	Returns the string name for this dtype.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/dtypes.py#L537'>as_dtype</a>(type_value)</tt>	Converts the given type_value to a dtype.
<tt style='background-color:#E8E8E8;'> python.framework.DeviceFunctionsTest <a href=' /python/framework/graph_util_test.py#L352'>testRemoveIdentityChains</a>()</tt>	Check that chains of identity nodes are correctly pruned.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L32'>scalar_shape</a>(unused_op)</tt>	Shape function for ops that output a scalar value.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L37'>unchanged_shape</a>(op)</tt>	Shape function for ops that output an tensor like their first input.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L42'>unchanged_shape_with_rank</a>(rank)</tt>	Returns a shape function for ops that constrain the rank of their input.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L59'>unchanged_shape_with_rank_at_least</a>(rank)</tt>	Returns a shape function for ops that constrain the rank of their input.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L76'>unchanged_shape_with_rank_at_most</a>(rank)</tt>	Returns a shape function for ops that constrain the rank of their input.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L93'>matmul_shape</a>(op)</tt>	Shape function for a matmul op.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L107'>get_conv_output_size</a>(input_size,filter_size,strides,padding_type)</tt>	Returns the spatial size of a n-d convolution/pooling output.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L149'>get2d_conv_output_size</a>(input_height,input_width,filter_height,filter_width)</tt>	Returns the number of rows and columns in a convolution/pooling output.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L157'>conv2d_shape</a>(op)</tt>	Shape function for a conv2d op.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L226'>depthwise_conv2d_native_shape</a>(op)</tt>	Shape function for a depthwiseconv2d op.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L282'>separable_conv2d_shape</a>(op)</tt>	Shape function for a separableconv2d op.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L345'>avg_pool_shape</a>(op)</tt>	Shape function for an avgpool op.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L413'>max_pool_shape</a>(op)</tt>	Shape function for a maxpool op.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L493'>no_outputs</a>(unused_op)</tt>	Shape function for use with ops that have no outputs.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L503'>broadcast_shape</a>(shape_x,shape_y)</tt>	Returns the broadcasted shape between shape_x and shape_y.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L557'>call_cpp_shape_fn</a>(op,input_tensors_needed,input_tensors_as_shapes_needed,debug_python_shape_fn)</tt>	A shape function that delegates to the registered c++ shape function.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/common_shapes.py#L633'>_call_cpp_shape_fn_impl</a>(op,input_tensors_needed,input_tensors_as_shapes_needed,debug_python_shape_fn)</tt>	Core implementaton of call_cpp_shape_fn.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L27'>__init__</a>(value)</tt>	Creates a new dimension with the given value.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L46'>__eq__</a>(other)</tt>	Returns true if other has the same known value as this dimension.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L56'>__ne__</a>(other)</tt>	Returns true if other has a different known value from self.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L73'>value</a>()</tt>	The value of this dimension or none if it is unknown.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L78'>is_compatible_with</a>(other)</tt>	Returns true if other is compatible with this dimension.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L94'>assert_is_compatible_with</a>(other)</tt>	Raises an exception if other is not compatible with this dimension.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L108'>merge_with</a>(other)</tt>	Returns a dimension that combines the information in self and other.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L139'>__add__</a>(other)</tt>	Returns the sum of self and other.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L161'>__sub__</a>(other)</tt>	Returns the subtraction of other from self.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L183'>__mul__</a>(other)</tt>	Returns the product of self and other.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L207'>__floordiv__</a>(other)</tt>	Returns the quotient of self and other rounded down.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L229'>__div__</a>(other)</tt>	Deprecated use __floordiv__ via x // y instead.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L245'>__mod__</a>(other)</tt>	Returns self modulo other.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L267'>__lt__</a>(other)</tt>	Returns true if self is known to be less than other.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L290'>__le__</a>(other)</tt>	Returns true if self is known to be less than or equal to other.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L313'>__gt__</a>(other)</tt>	Returns true if self is known to be greater than other.
<tt style='background-color:#E8E8E8;'> python.framework.Dimension <a href=' /python/framework/tensor_shape.py#L336'>__ge__</a>(other)</tt>	Returns true if self is known to be greater than or equal to other.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_shape.py#L360'>as_dimension</a>(value)</tt>	Converts the given value to a dimension.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L399'>__init__</a>(dims)</tt>	Creates a new tensorshape with the given dimensions.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L447'>dims</a>()</tt>	Returns a list of dimensions or none if the shape is unspecified.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L452'>ndims</a>()</tt>	Returns the rank of this shape or none if it is unspecified.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L460'>__len__</a>()</tt>	Returns the rank of this shape or raises valueerror if unspecified.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L466'>__bool__</a>()</tt>	Returns true if this shape contains non-zero information.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L473'>__iter__</a>()</tt>	Returns self dims if the rank is known otherwise raises valueerror.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L480'>__getitem__</a>(key)</tt>	Returns the value of a dimension or a shape depending on the key.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L524'>num_elements</a>()</tt>	Returns the total number of elements or none for incomplete shapes.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L534'>merge_with</a>(other)</tt>	Returns a tensorshape combining the information in self and other.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L563'>concatenate</a>(other)</tt>	Returns the concatenation of the dimension in self and other.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L586'>assert_same_rank</a>(other)</tt>	Raises an exception if self and other do not have compatible ranks.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L602'>assert_has_rank</a>(rank)</tt>	Raises an exception if self is not compatible with the given rank.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L614'>with_rank</a>(rank)</tt>	Returns a shape based on self with the given rank.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L634'>with_rank_at_least</a>(rank)</tt>	Returns a shape based on self with at least the given rank.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L653'>with_rank_at_most</a>(rank)</tt>	Returns a shape based on self with at most the given rank.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L672'>is_compatible_with</a>(other)</tt>	Returns true iff self is compatible with other.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L719'>assert_is_compatible_with</a>(other)</tt>	Raises exception if self and other do not represent the same shape.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L734'>is_fully_defined</a>()</tt>	Returns true iff self is fully defined in every dimension.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L739'>assert_is_fully_defined</a>()</tt>	Raises an exception if self is not fully defined in every dimension.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L748'>as_list</a>()</tt>	Returns a list of integers or none for each dimension.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L761'>as_proto</a>()</tt>	Returns this shape as a tensorshapeproto.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L772'>__eq__</a>(other)</tt>	Returns true if self is equivalent to other.
<tt style='background-color:#E8E8E8;'> python.framework.TensorShape <a href=' /python/framework/tensor_shape.py#L780'>__ne__</a>(other)</tt>	Returns true if self is known to be different from other.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_shape.py#L793'>as_shape</a>(shape)</tt>	Converts the given object to a tensorshape.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_shape.py#L801'>unknown_shape</a>(ndims)</tt>	Returns an unknown tensorshape optionally with a known rank.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_shape.py#L816'>scalar</a>()</tt>	Returns a shape representing a scalar.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_shape.py#L821'>vector</a>(length)</tt>	Returns a shape representing a vector.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/tensor_shape.py#L833'>matrix</a>(rows,cols)</tt>	Returns a shape representing a matrix.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/graph_util_impl.py#L47'>_is_variable_op</a>(op)</tt>	Returns true if 'op' refers to a variable node.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/graph_util_impl.py#L52'>must_run_on_cpu</a>(node,pin_variables_on_cpu)</tt>	Returns true if the given node_def must run on cpu otherwise false.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/graph_util_impl.py#L110'>extract_sub_graph</a>(graph_def,dest_nodes)</tt>	Extract the subgraph that can reach any of the nodes in 'dest_nodes'.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/graph_util_impl.py#L166'>tensor_shape_from_node_def_name</a>(graph,input_name)</tt>	Convenience function to get a shape from a nodedef's input string.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/graph_util_impl.py#L180'>convert_variables_to_constants</a>(sess,input_graph_def,output_node_names,variable_names_whitelist)</tt>	Replaces all the variables in a graph with constants of the same values.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/graph_util_impl.py#L250'>remove_training_nodes</a>(input_graph)</tt>	Prunes out nodes that aren't needed for inference.
<tt style='background-color:#E8E8E8;'> python.framework.SubscribeTest <a href=' /python/framework/subscribe_test.py#L38'>_ExpectSubscribedIdentities</a>(container)</tt>	Convenience function to test a container of subscribed identities.
<tt style='background-color:#E8E8E8;'> python.framework.SubscribeTest <a href=' /python/framework/subscribe_test.py#L70'>testSupportedTypes</a>()</tt>	Confirm that supported types are correctly detected and handled.
<tt style='background-color:#E8E8E8;'> python.framework.SubscribeTest <a href=' /python/framework/subscribe_test.py#L115'>testCaching</a>()</tt>	Confirm caching of control output is recalculated between calls.
<tt style='background-color:#E8E8E8;'> python.framework.SubscribeTest <a href=' /python/framework/subscribe_test.py#L147'>testIsSubscribedIdentity</a>()</tt>	Confirm subscribed identity ops are correctly detected.
<tt style='background-color:#E8E8E8;'> python.framework.SubscribeTest <a href=' /python/framework/subscribe_test.py#L160'>testSubscribeExtend</a>()</tt>	Confirm side effect are correctly added for different input types.
<tt style='background-color:#E8E8E8;'> python.framework.SubscribeTest <a href=' /python/framework/subscribe_test.py#L205'>testSubscribeVariable</a>()</tt>	Confirm that variables can be subscribed.
<tt style='background-color:#E8E8E8;'> python.framework.SubscribeTest <a href=' /python/framework/subscribe_test.py#L243'>testResourceType</a>()</tt>	Confirm that subscribe correctly handles tensors with 'resource' type.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/constant_op.py#L54'>constant</a>(value,dtype,shape,name)</tt>	Creates a constant tensor.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/op_def_registry.py#L28'>register_op_list</a>(op_list)</tt>	Register all the ops in an op_def_pb2 oplist.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/op_def_registry.py#L40'>get_registered_ops</a>()</tt>	Returns a dictionary mapping names to opdefs.
<tt style='background-color:#E8E8E8;'> python.framework.OpError <a href=' /python/framework/errors_impl.py#L37'>__init__</a>(node_def,op,message,error_code)</tt>	Creates a new operror indicating that a particular op failed.
<tt style='background-color:#E8E8E8;'> python.framework.OpError <a href=' /python/framework/errors_impl.py#L53'>message</a>()</tt>	The error message that describes the error.
<tt style='background-color:#E8E8E8;'> python.framework.OpError <a href=' /python/framework/errors_impl.py#L58'>op</a>()</tt>	The operation that failed if known.
<tt style='background-color:#E8E8E8;'> python.framework.OpError <a href=' /python/framework/errors_impl.py#L74'>error_code</a>()</tt>	The integer error code that describes the error.
<tt style='background-color:#E8E8E8;'> python.framework.OpError <a href=' /python/framework/errors_impl.py#L79'>node_def</a>()</tt>	The nodedef proto representing the op that failed.
<tt style='background-color:#E8E8E8;'> python.framework.CancelledError <a href=' /python/framework/errors_impl.py#L169'>__init__</a>(node_def,op,message)</tt>	Creates a cancellederror.
<tt style='background-color:#E8E8E8;'> python.framework.UnknownError <a href=' /python/framework/errors_impl.py#L187'>__init__</a>(node_def,op,message,error_code)</tt>	Creates an unknownerror.
<tt style='background-color:#E8E8E8;'> python.framework.InvalidArgumentError <a href=' /python/framework/errors_impl.py#L206'>__init__</a>(node_def,op,message)</tt>	Creates an invalidargumenterror.
<tt style='background-color:#E8E8E8;'> python.framework.DeadlineExceededError <a href=' /python/framework/errors_impl.py#L220'>__init__</a>(node_def,op,message)</tt>	Creates a deadlineexceedederror.
<tt style='background-color:#E8E8E8;'> python.framework.NotFoundError <a href=' /python/framework/errors_impl.py#L237'>__init__</a>(node_def,op,message)</tt>	Creates a notfounderror.
<tt style='background-color:#E8E8E8;'> python.framework.AlreadyExistsError <a href=' /python/framework/errors_impl.py#L253'>__init__</a>(node_def,op,message)</tt>	Creates an alreadyexistserror.
<tt style='background-color:#E8E8E8;'> python.framework.PermissionDeniedError <a href=' /python/framework/errors_impl.py#L270'>__init__</a>(node_def,op,message)</tt>	Creates a permissiondeniederror.
<tt style='background-color:#E8E8E8;'> python.framework.UnauthenticatedError <a href=' /python/framework/errors_impl.py#L284'>__init__</a>(node_def,op,message)</tt>	Creates an unauthenticatederror.
<tt style='background-color:#E8E8E8;'> python.framework.ResourceExhaustedError <a href=' /python/framework/errors_impl.py#L299'>__init__</a>(node_def,op,message)</tt>	Creates a resourceexhaustederror.
<tt style='background-color:#E8E8E8;'> python.framework.FailedPreconditionError <a href=' /python/framework/errors_impl.py#L315'>__init__</a>(node_def,op,message)</tt>	Creates a failedpreconditionerror.
<tt style='background-color:#E8E8E8;'> python.framework.AbortedError <a href=' /python/framework/errors_impl.py#L333'>__init__</a>(node_def,op,message)</tt>	Creates an abortederror.
<tt style='background-color:#E8E8E8;'> python.framework.OutOfRangeError <a href=' /python/framework/errors_impl.py#L350'>__init__</a>(node_def,op,message)</tt>	Creates an outofrangeerror.
<tt style='background-color:#E8E8E8;'> python.framework.UnimplementedError <a href=' /python/framework/errors_impl.py#L368'>__init__</a>(node_def,op,message)</tt>	Creates an unimplementederror.
<tt style='background-color:#E8E8E8;'> python.framework.InternalError <a href=' /python/framework/errors_impl.py#L383'>__init__</a>(node_def,op,message)</tt>	Creates an internalerror.
<tt style='background-color:#E8E8E8;'> python.framework.UnavailableError <a href=' /python/framework/errors_impl.py#L396'>__init__</a>(node_def,op,message)</tt>	Creates an unavailableerror.
<tt style='background-color:#E8E8E8;'> python.framework.DataLossError <a href=' /python/framework/errors_impl.py#L412'>__init__</a>(node_def,op,message)</tt>	Creates a datalosserror.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/function.py#L46'>_tensor_to_argdef</a>(t,name,used_names)</tt>	Convert tensor t to an argdef with a specified name or a unique name.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/function.py#L79'>_create_input_dict</a>(function_graph,func_arg_placeholders)</tt>	Create a mapping from graph tensor names to function tensor names.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/function.py#L106'>_add_op_node</a>(op,func,input_dict)</tt>	Converts an op to a function def node and add it to func.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/function.py#L121'>_graph_to_function_def</a>(graph,inputs,outputs,out_names)</tt>	Returns graph as a functiondef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/function.py#L183'>_parse_kwargs_as_attrs</a>(func_name)</tt>	Parses **kwargs into a node's attributes.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/function.py#L205'>_call</a>(sig)</tt>	Adds a node calling a function.
<tt style='background-color:#E8E8E8;'> python.framework._FuncGraph <a href=' /python/framework/function.py#L298'>getvar</a>(getter,name,shape,dtype)</tt>	A custom variable getter.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/function.py#L360'>get_extra_vars</a>()</tt>	Returns the captured variables by the function.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/function.py#L375'>get_extra_inputs</a>()</tt>	Returns the captured input tensors by the function.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/function.py#L391'>get_extra_args</a>()</tt>	Returns the corresponding function arguments for the captured inputs.
<tt style='background-color:#E8E8E8;'> python.framework._DefinedFunction <a href=' /python/framework/function.py#L476'>definition</a>()</tt>	Function definition proto.
<tt style='background-color:#E8E8E8;'> python.framework._DefinedFunction <a href=' /python/framework/function.py#L482'>set_grad_func</a>(grad_func)</tt>	Specifies the gradient function of this function.
<tt style='background-color:#E8E8E8;'> python.framework._DefinedFunction <a href=' /python/framework/function.py#L488'>grad_func_name</a>()</tt>	Its gradient function's name.
<tt style='background-color:#E8E8E8;'> python.framework._DefinedFunction <a href=' /python/framework/function.py#L493'>python_grad_func</a>()</tt>	Python gradient function callable.
<tt style='background-color:#E8E8E8;'> python.framework._DefinedFunction <a href=' /python/framework/function.py#L498'>declared_input_types</a>()</tt>	Returns the list of data types of explicit declared inputs.
<tt style='background-color:#E8E8E8;'> python.framework._DefinedFunction <a href=' /python/framework/function.py#L503'>captured_inputs</a>()</tt>	Returns the list of implicitly captured inputs.
<tt style='background-color:#E8E8E8;'> python.framework._DefinedFunction <a href=' /python/framework/function.py#L509'>_create_definition_if_needed</a>()</tt>	Creates the function definition if it's not created yet.
<tt style='background-color:#E8E8E8;'> python.framework._DefinedFunction <a href=' /python/framework/function.py#L564'>_create_hash_str</a>(input_arg,output_arg,node_def)</tt>	Creates an 8-character string unique to this input.
<tt style='background-color:#E8E8E8;'> python.framework._DefinedFunction <a href=' /python/framework/function.py#L610'>add_to_graph</a>(g)</tt>	Adds this function into the graph g.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/function.py#L646'>_from_definition</a>(fdef,grad_func)</tt>	Creates a _definedfunction initialized from a functiondef proto.
<tt style='background-color:#E8E8E8;'> python.framework. <a href=' /python/framework/function.py#L684'>_from_library</a>(lib)</tt>	Creates _definedfunctions initialized from a functiondeflibrary proto.
<tt style='background-color:#E8E8E8;'> python.framework._OverloadedFunction <a href=' /python/framework/function.py#L820'>instantiate</a>(input_types)</tt>	Instantiate this function given input argument types.
<tt style='background-color:#E8E8E8;'> python.framework.Defun <a href=' /python/framework/function.py#L917'>__init__</a>()</tt>	Create a defun decorator.
<tt style='background-color:#E8E8E8;'> python.framework.Declare <a href=' /python/framework/function.py#L1027'>__init__</a>(func_name,inputs,outputs)</tt>	Creates a declare object.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/benchmark.py#L49'>_global_report_benchmark</a>(name,iters,cpu_time,wall_time)</tt>	Method for recording a benchmark directly.
<tt style='background-color:#E8E8E8;'> python.platform.Benchmark <a href=' /python/platform/benchmark.py#L135'>_get_name</a>(overwrite_name)</tt>	Returns full name of class and method calling report_benchmark.
<tt style='background-color:#E8E8E8;'> python.platform.Benchmark <a href=' /python/platform/benchmark.py#L159'>report_benchmark</a>(iters,cpu_time,wall_time,throughput)</tt>	Report a benchmark.
<tt style='background-color:#E8E8E8;'> python.platform.TensorFlowBenchmark <a href=' /python/platform/benchmark.py#L194'>run_op_benchmark</a>(sess,op_or_tensor,feed_dict,burn_iters)</tt>	Run an op or tensor in the given session report the results.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/benchmark.py#L285'>_run_benchmarks</a>(regex)</tt>	Run benchmarks that match regex regex.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/benchmark.py#L321'>benchmarks_main</a>(true_main,argv)</tt>	Run benchmarks as declared in argv.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/test.py#L61'>main</a>(argv)</tt>	Runs all unit tests.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/googletest.py#L102'>GetTempDir</a>()</tt>	Return a temporary directory for tests to use.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/googletest.py#L123'>test_src_dir_path</a>(relative_path)</tt>	Creates an absolute test srcdir path given a relative path.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/test.py#L90'>is_built_with_cuda</a>()</tt>	Returns whether tensorflow was built with cuda gpu support.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/test.py#L95'>is_gpu_available</a>(cuda_only)</tt>	Returns whether tensorflow can access a gpu.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/app.py#L31'>run</a>(main,argv)</tt>	Runs the program with an optional 'main' function and 'argv' list.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/sysconfig.py#L31'>get_include</a>()</tt>	Get the directory containing the tensorflow c++ header files.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/sysconfig.py#L45'>get_lib</a>()</tt>	Get the directory containing the tensorflow framework library.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/tf_logging.py#L124'>_GetNextLogCountPerToken</a>(token)</tt>	Wrapper for _log_counter_per_token.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/tf_logging.py#L139'>log_every_n</a>(level,msg,n)</tt>	Log 'msg % args' at level 'level' once per 'n' times.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/tf_logging.py#L155'>log_first_n</a>(level,msg,n)</tt>	Log 'msg % args' at level 'level' only first 'n' times.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/tf_logging.py#L170'>log_if</a>(level,msg,condition)</tt>	Log 'msg % args' at level 'level' only if condition is fulfilled.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/tf_logging.py#L176'>_GetFileAndLine</a>()</tt>	Returns filename linenumber for the stack frame.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/tf_logging.py#L192'>google2_log_prefix</a>(level,timestamp,file_and_line)</tt>	Assemble a logline prefix using the google2 format.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/tf_logging.py#L226'>get_verbosity</a>()</tt>	Return how much logging output will be produced.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/tf_logging.py#L231'>set_verbosity</a>(v)</tt>	Sets the threshold for what messages will be logged.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/tf_logging.py#L236'>_get_thread_id</a>()</tt>	Get id of current thread suitable for logging as an unsigned quantity.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/googletest.py#L52'>g_main</a>(argv)</tt>	Delegate to unittest main after redefining testloader.
<tt style='background-color:#E8E8E8;'> python.platform.StubOutForTesting <a href=' /python/platform/googletest.py#L162'>__del__</a>()</tt>	Do not rely on the destructor to undo your stubs.
<tt style='background-color:#E8E8E8;'> python.platform.StubOutForTesting <a href=' /python/platform/googletest.py#L177'>CleanUp</a>()</tt>	Undoes all smartset() & set() calls restoring original definitions.
<tt style='background-color:#E8E8E8;'> python.platform.StubOutForTesting <a href=' /python/platform/googletest.py#L182'>SmartSet</a>(obj,attr_name,new_attr)</tt>	Replace obj attr_name with new_attr.
<tt style='background-color:#E8E8E8;'> python.platform.StubOutForTesting <a href=' /python/platform/googletest.py#L245'>SmartUnsetAll</a>()</tt>	Reverses smartset() calls restoring things to original definitions.
<tt style='background-color:#E8E8E8;'> python.platform.StubOutForTesting <a href=' /python/platform/googletest.py#L259'>Set</a>(parent,child_name,new_child)</tt>	In parent replace child_name's old definition with new_child.
<tt style='background-color:#E8E8E8;'> python.platform.StubOutForTesting <a href=' /python/platform/googletest.py#L285'>UnsetAll</a>()</tt>	Reverses set() calls restoring things to their original definitions.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/resource_loader.py#L34'>load_resource</a>(path)</tt>	Load the resource at given path where path is relative to tensorflow/.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/resource_loader.py#L55'>get_data_files_path</a>()</tt>	Get a direct path to the data files colocated with the script.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/resource_loader.py#L65'>get_root_dir_with_all_resources</a>()</tt>	Get a root directory containing all the data attributes in the build rule.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/resource_loader.py#L104'>get_path_to_datafile</a>(path)</tt>	Get the path to the specified file in the data dependencies.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/resource_loader.py#L123'>readahead_file_path</a>(path,readahead)</tt>	Readahead files not implemented simply returns given path.
<tt style='background-color:#E8E8E8;'> python.platform._FlagValues <a href=' /python/platform/flags.py#L45'>__getattr__</a>(name)</tt>	Retrieves the 'value' attribute of the flag --name.
<tt style='background-color:#E8E8E8;'> python.platform._FlagValues <a href=' /python/platform/flags.py#L53'>__setattr__</a>(name,value)</tt>	Sets the 'value' attribute of the flag --name.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/flags.py#L60'>_define_helper</a>(flag_name,default_value,docstring,flagtype)</tt>	Registers 'flag_name' with 'default_value' and 'docstring'.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/flags.py#L72'>DEFINE_string</a>(flag_name,default_value,docstring)</tt>	Defines a flag of type 'string'.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/flags.py#L83'>DEFINE_integer</a>(flag_name,default_value,docstring)</tt>	Defines a flag of type 'int'.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/flags.py#L94'>DEFINE_boolean</a>(flag_name,default_value,docstring)</tt>	Defines a flag of type 'boolean'.
<tt style='background-color:#E8E8E8;'> python.platform. <a href=' /python/platform/flags.py#L124'>DEFINE_float</a>(flag_name,default_value,docstring)</tt>	Defines a flag of type 'float'.
<tt style='background-color:#E8E8E8;'> python.grappler.PyWrapOptimizeGraphTest <a href=' /python/grappler/tf_optimizer_test.py#L32'>testBasic</a>()</tt>	Make sure arguments can be passed correctly.
<tt style='background-color:#E8E8E8;'> python.grappler. <a href=' /python/grappler/tf_optimizer.py#L26'>OptimizeGraph</a>(rewriter_config,metagraph,graph_id)</tt>	Optimize the provided metagraph.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L145'>make_input_layer</a>(features,feature_columns,weight_collections,trainable)</tt>	Returns a dense tensor as input layer based on given feature_columns.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L221'>make_linear_model</a>(features,feature_columns,units,sparse_combiner)</tt>	Returns a linear prediction tensor based on given feature_columns.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L315'>numeric_column</a>(key,shape,default_value,dtype)</tt>	Represents real valued or numerical features.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L388'>bucketized_column</a>(source_column,boundaries)</tt>	Represents discretized dense input.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L444'>categorical_column_with_hash_bucket</a>(key,hash_bucket_size,dtype)</tt>	Represents sparse feature where ids are set by hashing.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L491'>categorical_column_with_vocabulary_file</a>(key,vocabulary_file,vocabulary_size,num_oov_buckets)</tt>	A _categoricalcolumn with a vocabulary file.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L585'>categorical_column_with_vocabulary_list</a>(key,vocabulary_list,dtype,default_value)</tt>	A _categoricalcolumn with in-memory vocabulary.
<tt style='background-color:#E8E8E8;'> python.feature_column._FeatureColumn <a href=' /python/feature_column/feature_column.py#L676'>name</a>()</tt>	Returns string used for variable_scope and naming.
<tt style='background-color:#E8E8E8;'> python.feature_column._FeatureColumn <a href=' /python/feature_column/feature_column.py#L681'>_transform_feature</a>(inputs)</tt>	Returns transformed tensor, uses inputs to access input tensors.
<tt style='background-color:#E8E8E8;'> python.feature_column._FeatureColumn <a href=' /python/feature_column/feature_column.py#L706'>_parse_example_config</a>()</tt>	Returns a tf example parsing spec as dict.
<tt style='background-color:#E8E8E8;'> python.feature_column._DenseColumn <a href=' /python/feature_column/feature_column.py#L740'>_variable_shape</a>()</tt>	Returns a tensorshape of variable compatible with _get_dense_tensor.
<tt style='background-color:#E8E8E8;'> python.feature_column._DenseColumn <a href=' /python/feature_column/feature_column.py#L745'>_get_dense_tensor</a>(inputs,weight_collections,trainable)</tt>	Returns a tensor.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L768'>_create_dense_column_weighted_sum</a>(column,builder,units,weight_collections)</tt>	Create a weighted sum of a dense column for make_linear_model.
<tt style='background-color:#E8E8E8;'> python.feature_column._CategoricalColumn <a href=' /python/feature_column/feature_column.py#L800'>_num_buckets</a>()</tt>	Returns number of buckets in this sparse feature.
<tt style='background-color:#E8E8E8;'> python.feature_column._CategoricalColumn <a href=' /python/feature_column/feature_column.py#L805'>_get_sparse_tensors</a>(inputs,weight_collections,trainable)</tt>	Returns an idweightpair.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L833'>_create_categorical_column_weighted_sum</a>(column,builder,units,sparse_combiner)</tt>	Create a weighted sum of a categorical column for make_linear_model.
<tt style='background-color:#E8E8E8;'> python.feature_column._LazyBuilder <a href=' /python/feature_column/feature_column.py#L883'>__init__</a>(features)</tt>	Creates a _lazybuilder.
<tt style='background-color:#E8E8E8;'> python.feature_column._LazyBuilder <a href=' /python/feature_column/feature_column.py#L897'>get</a>(key)</tt>	Returns a tensor for the given key.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L945'>_shape_offsets</a>(shape)</tt>	Returns moving offset for each dimension given shape.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L958'>_to_sparse_input</a>(input_tensor,ignore_value)</tt>	Converts a tensor to a sparsetensor, dropping ignore_value cells.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L1130'>_create_tuple</a>(shape,value)</tt>	Returns a tuple with given shape and filled with value.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L1143'>_check_shape</a>(shape,key)</tt>	Returns shape if it's valid raises error otherwise.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L1159'>_is_shape_and_default_value_compatible</a>(default_value,shape)</tt>	Verifies compatibility of shape and default_value.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L1176'>_check_default_value</a>(shape,default_value,dtype,key)</tt>	Returns default value as tuple if it's valid otherwise raises errors.
<tt style='background-color:#E8E8E8;'> python.feature_column._HashedCategoricalColumn <a href=' /python/feature_column/feature_column.py#L1274'>_num_buckets</a>()</tt>	Returns number of buckets in this sparse feature.
<tt style='background-color:#E8E8E8;'> python.feature_column._VocabularyFileCategoricalColumn <a href=' /python/feature_column/feature_column.py#L1327'>_num_buckets</a>()</tt>	Returns number of buckets in this sparse feature.
<tt style='background-color:#E8E8E8;'> python.feature_column._VocabularyListCategoricalColumn <a href=' /python/feature_column/feature_column.py#L1377'>_num_buckets</a>()</tt>	Returns number of buckets in this sparse feature.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L1388'>_safe_embedding_lookup_sparse</a>(embedding_weights,sparse_ids,sparse_weights,combiner)</tt>	Lookup embedding results accounting for invalid ids and empty features.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/feature_column.py#L1523'>_prune_invalid_ids</a>(sparse_ids,sparse_weights)</tt>	Prune invalid ids (< 0) from the input ids and weights.
<tt style='background-color:#E8E8E8;'> python.feature_column.LookupInterface <a href=' /python/feature_column/lookup_ops.py#L41'>__init__</a>(key_dtype,value_dtype,name)</tt>	Construct a lookup table interface.
<tt style='background-color:#E8E8E8;'> python.feature_column.LookupInterface <a href=' /python/feature_column/lookup_ops.py#L53'>key_dtype</a>()</tt>	The table key dtype.
<tt style='background-color:#E8E8E8;'> python.feature_column.LookupInterface <a href=' /python/feature_column/lookup_ops.py#L58'>value_dtype</a>()</tt>	The table value dtype.
<tt style='background-color:#E8E8E8;'> python.feature_column.LookupInterface <a href=' /python/feature_column/lookup_ops.py#L63'>name</a>()</tt>	The name of the table.
<tt style='background-color:#E8E8E8;'> python.feature_column.LookupInterface <a href=' /python/feature_column/lookup_ops.py#L68'>init</a>()</tt>	The table initialization op.
<tt style='background-color:#E8E8E8;'> python.feature_column.LookupInterface <a href=' /python/feature_column/lookup_ops.py#L73'>size</a>(name)</tt>	Compute the number of elements in this table.
<tt style='background-color:#E8E8E8;'> python.feature_column.LookupInterface <a href=' /python/feature_column/lookup_ops.py#L77'>lookup</a>(keys,name)</tt>	Looks up keys in a table outputs the corresponding values.
<tt style='background-color:#E8E8E8;'> python.feature_column.LookupInterface <a href=' /python/feature_column/lookup_ops.py#L81'>check_table_dtypes</a>(key_dtype,value_dtype)</tt>	Check that the given key_dtype and value_dtype matches the table dtypes.
<tt style='background-color:#E8E8E8;'> python.feature_column.InitializableLookupTableBase <a href=' /python/feature_column/lookup_ops.py#L106'>__init__</a>(table_ref,default_value,initializer)</tt>	Construct a table object from a table reference.
<tt style='background-color:#E8E8E8;'> python.feature_column.InitializableLookupTableBase <a href=' /python/feature_column/lookup_ops.py#L127'>table_ref</a>()</tt>	Get the underlying table reference.
<tt style='background-color:#E8E8E8;'> python.feature_column.InitializableLookupTableBase <a href=' /python/feature_column/lookup_ops.py#L132'>default_value</a>()</tt>	The default value of the table.
<tt style='background-color:#E8E8E8;'> python.feature_column.InitializableLookupTableBase <a href=' /python/feature_column/lookup_ops.py#L137'>init</a>()</tt>	The table initialization op.
<tt style='background-color:#E8E8E8;'> python.feature_column.InitializableLookupTableBase <a href=' /python/feature_column/lookup_ops.py#L142'>size</a>(name)</tt>	Compute the number of elements in this table.
<tt style='background-color:#E8E8E8;'> python.feature_column.InitializableLookupTableBase <a href=' /python/feature_column/lookup_ops.py#L157'>lookup</a>(keys,name)</tt>	Looks up keys in a table outputs the corresponding values.
<tt style='background-color:#E8E8E8;'> python.feature_column.HashTable <a href=' /python/feature_column/lookup_ops.py#L210'>__init__</a>(initializer,default_value,shared_name,name)</tt>	Creates a non-initialized hashtable object.
<tt style='background-color:#E8E8E8;'> python.feature_column.TableInitializerBase <a href=' /python/feature_column/lookup_ops.py#L245'>__init__</a>(key_dtype,value_dtype)</tt>	Construct a table initializer object.
<tt style='background-color:#E8E8E8;'> python.feature_column.TableInitializerBase <a href=' /python/feature_column/lookup_ops.py#L255'>key_dtype</a>()</tt>	The expected table key dtype.
<tt style='background-color:#E8E8E8;'> python.feature_column.TableInitializerBase <a href=' /python/feature_column/lookup_ops.py#L260'>value_dtype</a>()</tt>	The expected table value dtype.
<tt style='background-color:#E8E8E8;'> python.feature_column.TableInitializerBase <a href=' /python/feature_column/lookup_ops.py#L265'>initialize</a>(table)</tt>	Returns the table initialization op.
<tt style='background-color:#E8E8E8;'> python.feature_column.KeyValueTensorInitializer <a href=' /python/feature_column/lookup_ops.py#L273'>__init__</a>(keys,values,key_dtype,value_dtype)</tt>	Constructs a table initializer object based on keys and values tensors.
<tt style='background-color:#E8E8E8;'> python.feature_column.KeyValueTensorInitializer <a href=' /python/feature_column/lookup_ops.py#L293'>initialize</a>(table)</tt>	Initializes the given table with keys and values tensors.
<tt style='background-color:#E8E8E8;'> python.feature_column.TextFileInitializer <a href=' /python/feature_column/lookup_ops.py#L378'>__init__</a>(filename,key_dtype,key_index,value_dtype)</tt>	Constructs a table initializer object to populate from a text file.
<tt style='background-color:#E8E8E8;'> python.feature_column.TextFileInitializer <a href=' /python/feature_column/lookup_ops.py#L458'>initialize</a>(table)</tt>	Initializes the table from a text file.
<tt style='background-color:#E8E8E8;'> python.feature_column.TextFileStringTableInitializer <a href=' /python/feature_column/lookup_ops.py#L495'>__init__</a>(filename,key_column_index,value_column_index,vocab_size)</tt>	Constructs an initializer for an id-to-string table from a text file.
<tt style='background-color:#E8E8E8;'> python.feature_column.TextFileIdTableInitializer <a href=' /python/feature_column/lookup_ops.py#L545'>__init__</a>(filename,key_column_index,value_column_index,vocab_size)</tt>	Constructs an initializer for an string-to-id table from a text file.
<tt style='background-color:#E8E8E8;'> python.feature_column.IdTableWithHashBuckets <a href=' /python/feature_column/lookup_ops.py#L679'>__init__</a>(table,num_oov_buckets,hasher_spec,name)</tt>	Construct a idtablewithhashbuckets object.
<tt style='background-color:#E8E8E8;'> python.feature_column.IdTableWithHashBuckets <a href=' /python/feature_column/lookup_ops.py#L739'>init</a>()</tt>	The table initialization op.
<tt style='background-color:#E8E8E8;'> python.feature_column.IdTableWithHashBuckets <a href=' /python/feature_column/lookup_ops.py#L747'>size</a>(name)</tt>	Compute the number of elements in this table.
<tt style='background-color:#E8E8E8;'> python.feature_column.IdTableWithHashBuckets <a href=' /python/feature_column/lookup_ops.py#L756'>_get_string_to_hash_bucket_fn</a>(hasher_spec)</tt>	Returns the string_to_hash_bucket op to use based on hasher_spec.
<tt style='background-color:#E8E8E8;'> python.feature_column.IdTableWithHashBuckets <a href=' /python/feature_column/lookup_ops.py#L769'>lookup</a>(keys,name)</tt>	Looks up keys in the table outputs the corresponding values.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/lookup_ops.py#L828'>index_table_from_file</a>(vocabulary_file,num_oov_buckets,vocab_size,default_value)</tt>	Returns a lookup table that converts a string tensor into int64 ids.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/lookup_ops.py#L948'>index_table_from_tensor</a>(mapping,num_oov_buckets,default_value,hasher_spec)</tt>	Returns a lookup table that converts a string tensor into int64 ids.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/lookup_ops.py#L1044'>string_to_index</a>(tensor,mapping,default_value,name)</tt>	Maps tensor of strings into int64 indices based on mapping.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/lookup_ops.py#L1094'>index_to_string_table_from_file</a>(vocabulary_file,vocab_size,default_value,name)</tt>	Returns a lookup table that maps a tensor of indices into strings.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/lookup_ops.py#L1171'>index_to_string_table_from_tensor</a>(mapping,default_value,name)</tt>	Returns a lookup table that maps a tensor of indices into strings.
<tt style='background-color:#E8E8E8;'> python.feature_column. <a href=' /python/feature_column/lookup_ops.py#L1231'>index_to_string</a>(tensor,mapping,default_value,name)</tt>	Maps tensor of indices into string values based on mapping.
<tt style='background-color:#E8E8E8;'> python.feature_column.MutableHashTable <a href=' /python/feature_column/lookup_ops.py#L1295'>__init__</a>(key_dtype,value_dtype,default_value,shared_name)</tt>	Creates an empty mutablehashtable object.
<tt style='background-color:#E8E8E8;'> python.feature_column.MutableHashTable <a href=' /python/feature_column/lookup_ops.py#L1357'>size</a>(name)</tt>	Compute the number of elements in this table.
<tt style='background-color:#E8E8E8;'> python.feature_column.MutableHashTable <a href=' /python/feature_column/lookup_ops.py#L1371'>lookup</a>(keys,name)</tt>	Looks up keys in a table outputs the corresponding values.
<tt style='background-color:#E8E8E8;'> python.feature_column.MutableHashTable <a href=' /python/feature_column/lookup_ops.py#L1401'>insert</a>(keys,values,name)</tt>	Associates keys with values.
<tt style='background-color:#E8E8E8;'> python.feature_column.MutableHashTable <a href=' /python/feature_column/lookup_ops.py#L1426'>export</a>(name)</tt>	Returns tensors of all keys and values in the table.
<tt style='background-color:#E8E8E8;'> python.feature_column.MutableDenseHashTable <a href=' /python/feature_column/lookup_ops.py#L1491'>__init__</a>(key_dtype,value_dtype,default_value,empty_key)</tt>	Creates an empty mutabledensehashtable object.
<tt style='background-color:#E8E8E8;'> python.feature_column.MutableDenseHashTable <a href=' /python/feature_column/lookup_ops.py#L1551'>size</a>(name)</tt>	Compute the number of elements in this table.
<tt style='background-color:#E8E8E8;'> python.feature_column.MutableDenseHashTable <a href=' /python/feature_column/lookup_ops.py#L1565'>lookup</a>(keys,name)</tt>	Looks up keys in a table outputs the corresponding values.
<tt style='background-color:#E8E8E8;'> python.feature_column.MutableDenseHashTable <a href=' /python/feature_column/lookup_ops.py#L1598'>insert</a>(keys,values,name)</tt>	Associates keys with values.
<tt style='background-color:#E8E8E8;'> python.feature_column.MutableDenseHashTable <a href=' /python/feature_column/lookup_ops.py#L1623'>export</a>(name)</tt>	Returns tensors of all keys and values in the table.
<tt style='background-color:#E8E8E8;'> python.feature_column.BucketizedColumnTest <a href=' /python/feature_column/feature_column_test.py#L412'>test_get_dense_tensor_one_input_value</a>()</tt>	Tests _get_dense_tensor() for input with shape=[1].
<tt style='background-color:#E8E8E8;'> python.feature_column.BucketizedColumnTest <a href=' /python/feature_column/feature_column_test.py#L430'>test_get_dense_tensor_two_input_values</a>()</tt>	Tests _get_dense_tensor() for input with shape=[2].
<tt style='background-color:#E8E8E8;'> python.feature_column.BucketizedColumnTest <a href=' /python/feature_column/feature_column_test.py#L446'>test_get_sparse_tensors_one_input_value</a>()</tt>	Tests _get_sparse_tensors() for input with shape=[1].
<tt style='background-color:#E8E8E8;'> python.feature_column.BucketizedColumnTest <a href=' /python/feature_column/feature_column_test.py#L463'>test_get_sparse_tensors_two_input_values</a>()</tt>	Tests _get_sparse_tensors() for input with shape=[2].
<tt style='background-color:#E8E8E8;'> python.feature_column.BucketizedColumnTest <a href=' /python/feature_column/feature_column_test.py#L501'>test_make_linear_model_one_input_value</a>()</tt>	Tests make_linear_model() for input with shape=[1].
<tt style='background-color:#E8E8E8;'> python.feature_column.BucketizedColumnTest <a href=' /python/feature_column/feature_column_test.py#L526'>test_make_linear_model_two_input_values</a>()</tt>	Tests make_linear_model() for input with shape=[2].
<tt style='background-color:#E8E8E8;'> python.feature_column.HashedCategoricalColumnTest <a href=' /python/feature_column/feature_column_test.py#L580'>test_deep_copy</a>()</tt>	Tests deepcopy of categorical_column_with_hash_bucket.
<tt style='background-color:#E8E8E8;'> python.feature_column.MakeLinearModelTest <a href=' /python/feature_column/feature_column_test.py#L830'>test_dense_and_sparse_column</a>()</tt>	When the column is both dense and sparse uses sparse tensors.
<tt style='background-color:#E8E8E8;'> python.feature_column.VocabularyFileCategoricalColumnTest <a href=' /python/feature_column/feature_column_test.py#L1245'>test_deep_copy</a>()</tt>	Tests deepcopy of categorical_column_with_hash_bucket.
<tt style='background-color:#E8E8E8;'> python.feature_column.VocabularyListCategoricalColumnTest <a href=' /python/feature_column/feature_column_test.py#L1615'>test_deep_copy</a>()</tt>	Tests deepcopy of categorical_column_with_hash_bucket.
<tt style='background-color:#E8E8E8;'> python.client.SessionBenchmark <a href=' /python/client/session_benchmark.py#L38'>_benchmarkFeed</a>(name,target,size,iters)</tt>	Runs a microbenchmark to measure the cost of feeding a tensor.
<tt style='background-color:#E8E8E8;'> python.client.SessionBenchmark <a href=' /python/client/session_benchmark.py#L67'>_benchmarkFetch</a>(name,target,size,iters)</tt>	Runs a microbenchmark to measure the cost of fetching a tensor.
<tt style='background-color:#E8E8E8;'> python.client.SessionBenchmark <a href=' /python/client/session_benchmark.py#L95'>_benchmarkFetchPrebuilt</a>(name,target,size,iters)</tt>	Runs a microbenchmark to measure the cost of fetching a tensor.
<tt style='background-color:#E8E8E8;'> python.client.SessionBenchmark <a href=' /python/client/session_benchmark.py#L124'>_benchmarkRunOp</a>(name,target,iters)</tt>	Runs a microbenchmark to measure the cost of running an op.
<tt style='background-color:#E8E8E8;'> python.client.SessionBenchmark <a href=' /python/client/session_benchmark.py#L150'>_benchmarkRunOpPrebuilt</a>(name,target,iters)</tt>	Runs a microbenchmark to measure the cost of running an op.
<tt style='background-color:#E8E8E8;'> python.client.SessionInterface <a href=' /python/client/session.py#L41'>graph</a>()</tt>	The underlying tensorflow graph to be used in building operations.
<tt style='background-color:#E8E8E8;'> python.client.SessionInterface <a href=' /python/client/session.py#L46'>sess_str</a>()</tt>	The tensorflow process to which this session will connect.
<tt style='background-color:#E8E8E8;'> python.client.SessionInterface <a href=' /python/client/session.py#L51'>run</a>(fetches,feed_dict,options,run_metadata)</tt>	Runs operations in the session see basesession run() for details.
<tt style='background-color:#E8E8E8;'> python.client.SessionInterface <a href=' /python/client/session.py#L55'>partial_run_setup</a>(fetches,feeds)</tt>	Sets up the feeds and fetches for partial runs in the session.
<tt style='background-color:#E8E8E8;'> python.client.SessionInterface <a href=' /python/client/session.py#L59'>partial_run</a>(handle,fetches,feed_dict)</tt>	Continues the execution with additional feeds and fetches.
<tt style='background-color:#E8E8E8;'> python.client. <a href=' /python/client/session.py#L125'>register_session_run_conversion_functions</a>(tensor_type,fetch_function,feed_function,feed_function_for_partial_run)</tt>	Register fetch and feed conversion functions for tf session run().
<tt style='background-color:#E8E8E8;'> python.client._FetchMapper <a href=' /python/client/session.py#L189'>unique_fetches</a>()</tt>	Return the list of unique tensors or ops needed by this fetch mapper.
<tt style='background-color:#E8E8E8;'> python.client._FetchMapper <a href=' /python/client/session.py#L197'>build_results</a>(values)</tt>	Build results that match the original shape of the fetch.
<tt style='background-color:#E8E8E8;'> python.client._FetchMapper <a href=' /python/client/session.py#L211'>for_fetch</a>(fetch)</tt>	Creates fetch mapper that handles the structure of fetch.
<tt style='background-color:#E8E8E8;'> python.client._ElementFetchMapper <a href=' /python/client/session.py#L247'>__init__</a>(fetches,contraction_fn)</tt>	Creates an _elementfetchmapper.
<tt style='background-color:#E8E8E8;'> python.client. <a href=' /python/client/session.py#L291'>_uniquify_fetches</a>(fetch_mappers)</tt>	Uniquifies fetches from a list of fetch_mappers.
<tt style='background-color:#E8E8E8;'> python.client._ListFetchMapper <a href=' /python/client/session.py#L330'>__init__</a>(fetches)</tt>	Creates a _listfetchmapper.
<tt style='background-color:#E8E8E8;'> python.client._DictFetchMapper <a href=' /python/client/session.py#L361'>__init__</a>(fetches)</tt>	Creates a _dictfetchmapper.
<tt style='background-color:#E8E8E8;'> python.client._FetchHandler <a href=' /python/client/session.py#L397'>__init__</a>(graph,fetches,feeds,feed_handles)</tt>	Creates a fetch handler.
<tt style='background-color:#E8E8E8;'> python.client._FetchHandler <a href=' /python/client/session.py#L439'>fetches</a>()</tt>	Return the unique names of tensors to fetch.
<tt style='background-color:#E8E8E8;'> python.client._FetchHandler <a href=' /python/client/session.py#L447'>targets</a>()</tt>	Return the unique names of ops to run.
<tt style='background-color:#E8E8E8;'> python.client._FetchHandler <a href=' /python/client/session.py#L455'>build_results</a>(session,tensor_values)</tt>	Build results matching the original fetch shape.
<tt style='background-color:#E8E8E8;'> python.client.BaseSession <a href=' /python/client/session.py#L511'>__init__</a>(target,graph,config)</tt>	Constructs a new tensorflow session.
<tt style='background-color:#E8E8E8;'> python.client.BaseSession <a href=' /python/client/session.py#L566'>close</a>()</tt>	Closes this session.
<tt style='background-color:#E8E8E8;'> python.client.BaseSession <a href=' /python/client/session.py#L605'>graph</a>()</tt>	The graph that was launched in this session.
<tt style='background-color:#E8E8E8;'> python.client.BaseSession <a href=' /python/client/session.py#L610'>graph_def</a>()</tt>	A serializable version of the underlying tensorflow graph.
<tt style='background-color:#E8E8E8;'> python.client.BaseSession <a href=' /python/client/session.py#L624'>as_default</a>()</tt>	Returns a context manager that makes this object the default session.
<tt style='background-color:#E8E8E8;'> python.client.BaseSession <a href=' /python/client/session.py#L678'>run</a>(fetches,feed_dict,options,run_metadata)</tt>	Runs operations and evaluates tensors in fetches.
<tt style='background-color:#E8E8E8;'> python.client.BaseSession <a href=' /python/client/session.py#L799'>partial_run</a>(handle,fetches,feed_dict)</tt>	Continues the execution with more feeds and fetches.
<tt style='background-color:#E8E8E8;'> python.client.BaseSession <a href=' /python/client/session.py#L846'>partial_run_setup</a>(fetches,feeds)</tt>	Sets up a graph with feeds and fetches for partial run.
<tt style='background-color:#E8E8E8;'> python.client.BaseSession <a href=' /python/client/session.py#L914'>_run</a>(handle,fetches,feed_dict,options)</tt>	Perform either run or partial_run depending the presence of handle.
<tt style='background-color:#E8E8E8;'> python.client.BaseSession <a href=' /python/client/session.py#L1002'>make_callable</a>(fetches,feed_list)</tt>	Returns a python callable that runs a particular step.
<tt style='background-color:#E8E8E8;'> python.client.BaseSession <a href=' /python/client/session.py#L1090'>_do_run</a>(handle,target_list,fetch_list,feed_dict)</tt>	Runs a step based on the given fetches and feeds.
<tt style='background-color:#E8E8E8;'> python.client.Session <a href=' /python/client/session.py#L1271'>__init__</a>(target,graph,config)</tt>	Creates a new tensorflow session.
<tt style='background-color:#E8E8E8;'> python.client.Session <a href=' /python/client/session.py#L1321'>reset</a>(target,containers,config)</tt>	Resets resource containers on target, and close all connected sessions.
<tt style='background-color:#E8E8E8;'> python.client.InteractiveSession <a href=' /python/client/session.py#L1395'>__init__</a>(target,graph,config)</tt>	Creates a new interactive tensorflow session.
<tt style='background-color:#E8E8E8;'> python.client.InteractiveSession <a href=' /python/client/session.py#L1432'>close</a>()</tt>	Closes an interactivesession.
<tt style='background-color:#E8E8E8;'> python.client. <a href=' /python/client/device_lib.py#L25'>list_local_devices</a>()</tt>	List the available devices available in the local process.
<tt style='background-color:#E8E8E8;'> python.client.TimelineTest <a href=' /python/client/timeline_test.py#L118'>testTimelineWithRPCs</a>()</tt>	Tests that timeline can handle rpc tracing.
<tt style='background-color:#E8E8E8;'> python.client.SessionTest <a href=' /python/client/session_test.py#L1896'>testClusterSpecPropagationThreeServers2Graphs</a>()</tt>	Boots 3 servers creates 2 sessions ensures appropriate operations.
<tt style='background-color:#E8E8E8;'> python.client.SessionTest <a href=' /python/client/session_test.py#L1957'>testClusterSpecPropagationThreeServers</a>()</tt>	Boots 3 servers creates 2 sessions ensures appropriate operations.
<tt style='background-color:#E8E8E8;'> python.client.SessionTest <a href=' /python/client/session_test.py#L2011'>testClusterSpecPropagationThreeServersOneCluster</a>()</tt>	Boots 3 servers ensures appropriate communication across workers.
<tt style='background-color:#E8E8E8;'> python.client.SessionTest <a href=' /python/client/session_test.py#L2074'>testClusterSpecPropagationPartialRun</a>()</tt>	Test successful partial run with clusterspec propagation.
<tt style='background-color:#E8E8E8;'> python.client._ChromeTraceFormatter <a href=' /python/client/timeline.py#L58'>__init__</a>(show_memory)</tt>	Constructs a new chrome trace formatter.
<tt style='background-color:#E8E8E8;'> python.client._ChromeTraceFormatter <a href=' /python/client/timeline.py#L64'>_create_event</a>(ph,category,name,pid)</tt>	Creates a new chrome trace event.
<tt style='background-color:#E8E8E8;'> python.client._ChromeTraceFormatter <a href=' /python/client/timeline.py#L90'>emit_pid</a>(name,pid)</tt>	Adds a process metadata event to the trace.
<tt style='background-color:#E8E8E8;'> python.client._ChromeTraceFormatter <a href=' /python/client/timeline.py#L104'>emit_tid</a>(name,pid,tid)</tt>	Adds a thread metadata event to the trace.
<tt style='background-color:#E8E8E8;'> python.client._ChromeTraceFormatter <a href=' /python/client/timeline.py#L120'>emit_region</a>(timestamp,duration,pid,tid)</tt>	Adds a region event to the trace.
<tt style='background-color:#E8E8E8;'> python.client._ChromeTraceFormatter <a href=' /python/client/timeline.py#L137'>emit_obj_create</a>(category,name,timestamp,pid)</tt>	Adds an object creation event to the trace.
<tt style='background-color:#E8E8E8;'> python.client._ChromeTraceFormatter <a href=' /python/client/timeline.py#L152'>emit_obj_delete</a>(category,name,timestamp,pid)</tt>	Adds an object deletion event to the trace.
<tt style='background-color:#E8E8E8;'> python.client._ChromeTraceFormatter <a href=' /python/client/timeline.py#L167'>emit_obj_snapshot</a>(category,name,timestamp,pid)</tt>	Adds an object snapshot event to the trace.
<tt style='background-color:#E8E8E8;'> python.client._ChromeTraceFormatter <a href=' /python/client/timeline.py#L185'>emit_flow_start</a>(name,timestamp,pid,tid)</tt>	Adds a flow start event to the trace.
<tt style='background-color:#E8E8E8;'> python.client._ChromeTraceFormatter <a href=' /python/client/timeline.py#L202'>emit_flow_end</a>(name,timestamp,pid,tid)</tt>	Adds a flow end event to the trace.
<tt style='background-color:#E8E8E8;'> python.client._ChromeTraceFormatter <a href=' /python/client/timeline.py#L219'>emit_counter</a>(category,name,pid,timestamp)</tt>	Emits a record for a single counter.
<tt style='background-color:#E8E8E8;'> python.client._ChromeTraceFormatter <a href=' /python/client/timeline.py#L234'>emit_counters</a>(category,name,pid,timestamp)</tt>	Emits a counter record for the dictionary 'counters'.
<tt style='background-color:#E8E8E8;'> python.client._ChromeTraceFormatter <a href=' /python/client/timeline.py#L248'>format_to_string</a>(pretty)</tt>	Formats the chrome trace to a string.
<tt style='background-color:#E8E8E8;'> python.client._TensorTracker <a href=' /python/client/timeline.py#L268'>__init__</a>(name,object_id,timestamp,pid)</tt>	Creates an object to track tensor references.
<tt style='background-color:#E8E8E8;'> python.client._TensorTracker <a href=' /python/client/timeline.py#L294'>name</a>()</tt>	Name of this tensor.
<tt style='background-color:#E8E8E8;'> python.client._TensorTracker <a href=' /python/client/timeline.py#L299'>pid</a>()</tt>	Id of the process which created this tensor an integer.
<tt style='background-color:#E8E8E8;'> python.client._TensorTracker <a href=' /python/client/timeline.py#L304'>create_time</a>()</tt>	Timestamp when this tensor was created long integer.
<tt style='background-color:#E8E8E8;'> python.client._TensorTracker <a href=' /python/client/timeline.py#L309'>object_id</a>()</tt>	Returns the object identifier of this tensor integer.
<tt style='background-color:#E8E8E8;'> python.client._TensorTracker <a href=' /python/client/timeline.py#L314'>num_bytes</a>()</tt>	Size of this tensor in bytes long integer.
<tt style='background-color:#E8E8E8;'> python.client._TensorTracker <a href=' /python/client/timeline.py#L319'>allocator</a>()</tt>	Name of the allocator used to create this tensor string.
<tt style='background-color:#E8E8E8;'> python.client._TensorTracker <a href=' /python/client/timeline.py#L324'>last_unref</a>()</tt>	Last unreference timestamp of this tensor long integer.
<tt style='background-color:#E8E8E8;'> python.client._TensorTracker <a href=' /python/client/timeline.py#L329'>add_ref</a>(timestamp)</tt>	Adds a reference to this tensor with the specified timestamp.
<tt style='background-color:#E8E8E8;'> python.client._TensorTracker <a href=' /python/client/timeline.py#L337'>add_unref</a>(timestamp)</tt>	Adds an unref to this tensor with the specified timestamp.
<tt style='background-color:#E8E8E8;'> python.client.Timeline <a href=' /python/client/timeline.py#L349'>__init__</a>(step_stats,graph)</tt>	Constructs a new timeline.
<tt style='background-color:#E8E8E8;'> python.client.Timeline <a href=' /python/client/timeline.py#L374'>_alloc_pid</a>()</tt>	Allocate a process id.
<tt style='background-color:#E8E8E8;'> python.client.Timeline <a href=' /python/client/timeline.py#L380'>_alloc_flow_id</a>()</tt>	Allocate a flow id.
<tt style='background-color:#E8E8E8;'> python.client.Timeline <a href=' /python/client/timeline.py#L386'>_parse_op_label</a>(label)</tt>	Parses the fields in a node timeline label.
<tt style='background-color:#E8E8E8;'> python.client.Timeline <a href=' /python/client/timeline.py#L399'>_assign_lanes</a>()</tt>	Assigns non-overlapping lanes for the activities on each device.
<tt style='background-color:#E8E8E8;'> python.client.Timeline <a href=' /python/client/timeline.py#L416'>_emit_op</a>(nodestats,pid,is_gputrace)</tt>	Generates a chrome trace event to show op execution.
<tt style='background-color:#E8E8E8;'> python.client.Timeline <a href=' /python/client/timeline.py#L443'>_emit_tensor_snapshot</a>(tensor,timestamp,pid,tid)</tt>	Generate chrome trace snapshot event for a computed tensor.
<tt style='background-color:#E8E8E8;'> python.client.Timeline <a href=' /python/client/timeline.py#L465'>_is_gputrace_device</a>(device_name)</tt>	Returns true if this device is part of the gputracer logging.
<tt style='background-color:#E8E8E8;'> python.client.Timeline <a href=' /python/client/timeline.py#L469'>_allocate_pids</a>()</tt>	Allocate fake process ids for each device in the stepstats.
<tt style='background-color:#E8E8E8;'> python.client.Timeline <a href=' /python/client/timeline.py#L483'>_analyze_tensors</a>(show_memory)</tt>	Analyze tensor references to track dataflow.
<tt style='background-color:#E8E8E8;'> python.client.Timeline <a href=' /python/client/timeline.py#L515'>_show_compute</a>(show_dataflow)</tt>	Visualize the computation activity.
<tt style='background-color:#E8E8E8;'> python.client.Timeline <a href=' /python/client/timeline.py#L564'>_show_memory_counters</a>()</tt>	Produce a counter series for each memory allocator.
<tt style='background-color:#E8E8E8;'> python.client.Timeline <a href=' /python/client/timeline.py#L620'>generate_chrome_trace_format</a>(show_dataflow,show_memory)</tt>	Produces a trace in chrome trace format.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L122'>__init__</a>(initial_value,trainable,collections,validate_shape)</tt>	Creates a new variable with value initial_value.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L205'>_init_from_args</a>(initial_value,trainable,collections,validate_shape)</tt>	Creates a new variable from arguments.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L324'>_init_from_proto</a>(variable_def,import_scope)</tt>	Recreates the variable object from a variabledef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L351'>_as_graph_element</a>()</tt>	Conversion function for graph as_graph_element().
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L355'>_AsTensor</a>()</tt>	Converts this variable to a tensor.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L365'>__iter__</a>()</tt>	Dummy method to prevent iteration do not call.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L377'>value</a>()</tt>	Returns the last snapshot of this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L396'>read_value</a>()</tt>	Returns the value of this variable read in the current context.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L407'>_ref</a>()</tt>	Returns a reference to this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L423'>set_shape</a>(shape)</tt>	Overrides the shape for this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L432'>eval</a>(session)</tt>	In a session computes and returns the value of this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L464'>initialized_value</a>()</tt>	Returns the value of the initialized variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L488'>initial_value</a>()</tt>	Returns the tensor used as the initial value for the variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L502'>assign</a>(value,use_locking)</tt>	Assigns a new value to the variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L517'>assign_add</a>(delta,use_locking)</tt>	Adds a value to this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L532'>assign_sub</a>(delta,use_locking)</tt>	Subtracts a value from this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L547'>scatter_sub</a>(sparse_delta,use_locking)</tt>	Subtracts indexedslices from this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L572'>count_up_to</a>(limit)</tt>	Increments this variable until it reaches limit.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L594'>load</a>(value,session)</tt>	Load new value into this variable writes new value to variable's memory.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L635'>_TensorConversionFunction</a>(v,dtype,name,as_ref)</tt>	Utility function for converting a variable to a tensor.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L648'>_OverloadAllOperators</a>()</tt>	Register overloads for all operators.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L658'>_OverloadOperator</a>(operator)</tt>	Defer an operator overload to ops tensor.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L688'>name</a>()</tt>	The name of this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L693'>initializer</a>()</tt>	The initializer operation for this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L698'>device</a>()</tt>	The device of this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L703'>dtype</a>()</tt>	The dtype of this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L708'>op</a>()</tt>	The operation of this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L713'>graph</a>()</tt>	The graph of this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L718'>shape</a>()</tt>	The tensorshape of this variable.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L727'>get_shape</a>()</tt>	Alias of variable shape.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L731'>to_proto</a>(export_scope)</tt>	Converts a variable to a variabledef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L757'>from_proto</a>(variable_def,import_scope)</tt>	Returns a variable object created from variable_def.
<tt style='background-color:#E8E8E8;'> python.ops.Variable <a href=' /python/ops/variables.py#L847'>_set_save_slice_info</a>(save_slice_info)</tt>	Sets the slice info for this variable.
<tt style='background-color:#E8E8E8;'> python.ops.PartitionedVariable <a href=' /python/ops/variables.py#L890'>__init__</a>(name,shape,dtype,variable_list)</tt>	Creates a new partitioned variable wrapper.
<tt style='background-color:#E8E8E8;'> python.ops.PartitionedVariable <a href=' /python/ops/variables.py#L944'>__iter__</a>()</tt>	Return an iterable for accessing the underlying partition variables.
<tt style='background-color:#E8E8E8;'> python.ops.PartitionedVariable <a href=' /python/ops/variables.py#L961'>_concat</a>()</tt>	Returns the overall concatenated value as a tensor.
<tt style='background-color:#E8E8E8;'> python.ops.PartitionedVariable <a href=' /python/ops/variables.py#L989'>as_tensor</a>()</tt>	Returns the overall concatenated value as a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1039'>global_variables</a>()</tt>	Returns global variables.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1057'>all_variables</a>()</tt>	See tf global_variables.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1063'>_all_saveable_objects</a>()</tt>	Returns all variables and saveableobjects that must be checkpointed.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1074'>local_variables</a>()</tt>	Returns local variables.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1094'>model_variables</a>()</tt>	Returns all variables in the model_variables collection.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1103'>trainable_variables</a>()</tt>	Returns all variables created with trainable=true.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1117'>moving_average_variables</a>()</tt>	Returns all variables that maintain their moving averages.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1131'>variables_initializer</a>(var_list,name)</tt>	Returns an op that initializes a list of variables.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1156'>initialize_variables</a>(var_list,name)</tt>	See tf variables_initializer.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1163'>global_variables_initializer</a>()</tt>	Returns an op that initializes global variables.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1174'>initialize_all_variables</a>()</tt>	See tf global_variables_initializer.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1181'>local_variables_initializer</a>()</tt>	Returns an op that initializes all local variables.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1192'>initialize_local_variables</a>()</tt>	See tf local_variables_initializer.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/state_ops.py#L166'>is_variable_initialized</a>(variable)</tt>	Tests if a variable has been initialized.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1213'>assert_variables_initialized</a>(var_list)</tt>	Returns an op to check if variables are initialized.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variables.py#L1255'>report_uninitialized_variables</a>(var_list,name)</tt>	Adds ops to list the names of uninitialized variables.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/clip_ops.py#L33'>clip_by_value</a>(t,clip_value_min,clip_value_max,name)</tt>	Clips tensor values to a specified min and max.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/clip_ops.py#L73'>clip_by_norm</a>(t,clip_norm,axes,name)</tt>	Clips tensor values to a maximum l2-norm.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/clip_ops.py#L122'>global_norm</a>(t_list,name)</tt>	Computes the global norm of multiple tensors.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/clip_ops.py#L169'>clip_by_global_norm</a>(t_list,clip_norm,use_norm,name)</tt>	Clips values of multiple tensors by the ratio of the sum of their norms.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/clip_ops.py#L251'>clip_by_average_norm</a>(t,clip_norm,name)</tt>	Clips tensor values to a maximum average l2-norm.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L208'>abs</a>(x,name)</tt>	Computes the absolute value of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L274'>divide</a>(x,y,name)</tt>	Computes python style division of x by y.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L324'>negative</a>(x,name)</tt>	Computes numerical negative value element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L350'>_neg</a>(x,name)</tt>	Computes numerical negative value element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L371'>sign</a>(x,name)</tt>	Returns an element-wise indication of the sign of a number.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L401'>square</a>(x,name)</tt>	Computes square of x element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L423'>sqrt</a>(x,name)</tt>	Computes square root of x element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L445'>erf</a>(x,name)</tt>	Computes the gauss error function of x element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L465'>scalar_mul</a>(scalar,x)</tt>	Multiplies a scalar times a tensor or indexedslices object.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L494'>pow</a>(x,y,name)</tt>	Computes the power of one value to another.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L521'>complex</a>(real,imag,name)</tt>	Converts two real numbers to a complex number.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L562'>real</a>(input,name)</tt>	Returns the real part of a complex number.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L594'>imag</a>(input,name)</tt>	Returns the imaginary part of a complex number.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L625'>round</a>(x,name)</tt>	Rounds the values of a tensor to the nearest integer element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L651'>cast</a>(x,dtype,name)</tt>	Casts a tensor to a new type.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L692'>saturate_cast</a>(value,dtype,name)</tt>	Performs a safe saturating cast of value to dtype.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L725'>to_float</a>(x,name)</tt>	Casts a tensor to type float32.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L741'>to_double</a>(x,name)</tt>	Casts a tensor to type float64.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L757'>to_int32</a>(x,name)</tt>	Casts a tensor to type int32.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L773'>to_int64</a>(x,name)</tt>	Casts a tensor to type int64.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L789'>to_bfloat16</a>(x,name)</tt>	Casts a tensor to type bfloat16.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L813'>_OverrideBinaryOperatorHelper</a>(func,op_name,clazz_object)</tt>	Register operators with different tensor and scalar versions.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L895'>_sparse_dense_truediv</a>(sp_indices,sp_values,sp_shape,y)</tt>	Internal helper function for 'sp_t / dense_t'.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L936'>_div_python2</a>(x,y,name)</tt>	Divide two values using python 2 semantics used for tensor __div__.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L961'>truediv</a>(x,y,name)</tt>	Divides x / y elementwise using python 3 division operator semantics.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L992'>div</a>(x,y,name)</tt>	Divides x / y elementwise using python 2 division operator semantics.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1019'>floordiv</a>(x,y,name)</tt>	Divides x / y elementwise rounding toward the most negative integer.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1057'>_mul_dispatch</a>(x,y,name)</tt>	Dispatches cwise mul for "dense*dense" and "dense*sparse".
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1091'>logical_xor</a>(x,y,name)</tt>	X ^ y = (x | y) & ~(x & y).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1110'>range</a>(start,limit,delta,dtype)</tt>	Creates a sequence of numbers.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1184'>_ReductionDims</a>(x,axis,reduction_indices)</tt>	Returns range(0 rank x if reduction_indices is none.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1207'>reduce_sum</a>(input_tensor,axis,keep_dims,name)</tt>	Computes the sum of elements across dimensions of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1256'>count_nonzero</a>(input_tensor,axis,keep_dims,dtype)</tt>	Computes number of nonzero elements across dimensions of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1313'>reduce_mean</a>(input_tensor,axis,keep_dims,name)</tt>	Computes the mean of elements across dimensions of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1360'>reduce_prod</a>(input_tensor,axis,keep_dims,name)</tt>	Computes the product of elements across dimensions of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1397'>reduce_min</a>(input_tensor,axis,keep_dims,name)</tt>	Computes the minimum of elements across dimensions of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1434'>reduce_max</a>(input_tensor,axis,keep_dims,name)</tt>	Computes the maximum of elements across dimensions of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1471'>reduce_all</a>(input_tensor,axis,keep_dims,name)</tt>	Computes the "logical and" of elements across dimensions of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1518'>reduce_any</a>(input_tensor,axis,keep_dims,name)</tt>	Computes the "logical or" of elements across dimensions of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1565'>reduce_logsumexp</a>(input_tensor,axis,keep_dims,name)</tt>	Computes log(sum(exp elements across dimensions of a tensor )).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1627'>trace</a>(x,name)</tt>	Compute the trace of a tensor x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1669'>matmul</a>(a,b,transpose_a,transpose_b)</tt>	Multiplies matrix a by matrix b, producing a * b.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1826'>_calc_mat_mul_flops</a>(graph,node)</tt>	Calculates the compute resources needed for matmul.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1842'>_as_indexed_slices</a>(x,optimize)</tt>	Convert 'x' to indexedslices.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1866'>_as_indexed_slices_list</a>(inputs,optimize)</tt>	Convert all elements of 'inputs' to indexedslices.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1901'>add_n</a>(inputs,name)</tt>	Adds all input tensors element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L1930'>accumulate_n</a>(inputs,shape,tensor_dtype,name)</tt>	Returns the element-wise sum of a list of tensors.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L2007'>sigmoid</a>(x,name)</tt>	Computes sigmoid of x element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L2030'>log_sigmoid</a>(x,name)</tt>	Computes log sigmoid of x element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L2048'>tanh</a>(x,name)</tt>	Computes hyperbolic tangent of x element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L2069'>bincount</a>(arr,weights,minlength,maxlength)</tt>	Counts the number of occurrences of each value in an integer array.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L2113'>cumsum</a>(x,axis,exclusive,reverse)</tt>	Compute the cumulative sum of the tensor x along axis.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L2158'>cumprod</a>(x,axis,exclusive,reverse)</tt>	Compute the cumulative product of the tensor x along axis.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L2205'>conj</a>(x,name)</tt>	Returns the complex conjugate of a complex number.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L2242'>_BroadcastShape</a>(op)</tt>	Common shape function for binary operators that broadcast their inputs.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L2250'>reduced_shape</a>(input_shape,axes)</tt>	Helper function for reduction ops.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_ops.py#L2278'>tensordot</a>(a,b,axes,name)</tt>	Tensor contraction of a and b along specified axes.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L56'>_IndexedSlicesToTensor</a>(value,dtype,name,as_ref)</tt>	Converts an indexedslices object value to a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L103'>_MarkReachedOps</a>(from_ops,reached_ops)</tt>	Mark all ops reached from "from_ops".
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L120'>_GatherInputs</a>(to_ops,reached_ops)</tt>	List all inputs of to_ops that are in reached_ops.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L146'>_PendingCount</a>(graph,to_ops,from_ops,colocate_gradients_with_ops)</tt>	Initialize the pending count for ops between two lists of operations.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L204'>_DefaultGradYs</a>(grad_ys,ys,colocate_gradients_with_ops)</tt>	Fill in default values for grad_ys.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L262'>_VerifyGeneratedGradients</a>(grads,op)</tt>	Verify that gradients are valid in number and type.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L300'>_StopOps</a>(from_ops,pending_count)</tt>	The set of ops that terminate the gradient computation.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L329'>_maybe_colocate_with</a>(op,colocate_gradients_with_ops)</tt>	Context to colocate with op if colocate_gradients_with_ops.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L339'>_SymGrad</a>(op,out_grads)</tt>	Backprop through a function call node op given its outputs' gradients.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L353'>_MaybeCompile</a>(scope,op,func,grad_fn)</tt>	Compile the calculation in grad_fn if op was marked as compiled.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L390'>gradients</a>(ys,xs,grad_ys,name)</tt>	Constructs symbolic partial derivatives of sum of ys w r t x in xs.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L595'>_HasAnyNotNoneGrads</a>(grads,op)</tt>	Return true iff op has real gradient.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L607'>_UpdatePendingAndEnqueueReady</a>(grads,op,queue,pending_count)</tt>	Update pending count for the inputs of op and enqueue ready ops.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L647'>_SetGrad</a>(grads,t,grad)</tt>	Sets gradient "grad" in "grads" for tensor "t".
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L662'>_GetGrad</a>(grads,t)</tt>	Gets gradient for tensor "t".
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L674'>_GetGrads</a>(grads,op)</tt>	Gets all gradients for op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L702'>_LogOpGradients</a>(op,out_grads,in_grads)</tt>	Log the in and out grads of an op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L720'>_MultiDeviceAddN</a>(tensor_list)</tt>	Adds tensors from potentially multiple devices.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L764'>_AggregatedGrads</a>(grads,op,loop_state,aggregation_method)</tt>	Get the aggregated gradients for op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L865'>_hessian_vector_product</a>(ys,xs,v)</tt>	Multiply the hessian of ys wrt xs by v.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_impl.py#L917'>hessians</a>(ys,xs,name,colocate_gradients_with_ops)</tt>	Constructs the hessian of sum of ys with respect to x in xs.
<tt style='background-color:#E8E8E8;'> python.ops.AddNTest <a href=' /python/ops/math_ops_test.py#L275'>testPartials</a>()</tt>	Test that previously revealed a bug in buffer forwarding for addn.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L45'>__init__</a>(initial_value,trainable,collections,validate_shape)</tt>	Creates a variable.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L106'>_init_from_args</a>(initial_value,trainable,collections,validate_shape)</tt>	Creates a variable.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L220'>_init_from_proto</a>(variable_def,import_scope)</tt>	Initializes from variabledef proto.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L249'>dtype</a>()</tt>	The dtype of this variable.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L254'>device</a>()</tt>	The device this variable is on.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L259'>name</a>()</tt>	The name of the handle for this variable.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L264'>get_shape</a>()</tt>	The shape of this variable.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L268'>create</a>()</tt>	The op responsible for initializing this variable.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L273'>handle</a>()</tt>	The handle by which this variable can be accessed.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L278'>value</a>()</tt>	A cached operation which reads the value of this variable.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L287'>_as_graph_element</a>()</tt>	Conversion function for graph as_graph_element().
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L291'>initializer</a>()</tt>	The op responsible for initializing this variable.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L296'>op</a>()</tt>	The op for this variable.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L301'>eval</a>(session)</tt>	Evaluates and returns the value of this variable.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L305'>_set_save_slice_info</a>(save_slice_info)</tt>	Sets the slice info for this resourcevariable.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L316'>read_value</a>()</tt>	Constructs an op which reads the value of this variable.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L333'>sparse_read</a>(indices,name)</tt>	Reads the value of this variable sparsely using gather.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L340'>to_proto</a>(export_scope)</tt>	Converts a resourcevariable to a variabledef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L373'>_OverloadAllOperators</a>()</tt>	Register overloads for all operators.
<tt style='background-color:#E8E8E8;'> python.ops.ResourceVariable <a href=' /python/ops/resource_variable_ops.py#L386'>_OverloadOperator</a>(operator)</tt>	Defer an operator overload to ops tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/resource_variable_ops.py#L453'>_ReadGrad</a>(_,grad)</tt>	Gradient for read op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_grad.py#L353'>_GatherGrad</a>(op,grad)</tt>	Gradient for gather op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/resource_variable_ops.py#L478'>_to_proto_fn</a>(v,export_scope)</tt>	Converts variable and resourcevariable to variabledef for collections.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/resource_variable_ops.py#L483'>_from_proto_fn</a>(v,import_scope)</tt>	Creates variable or resourcevariable from variabledef as needed.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/special_math_ops.py#L37'>lbeta</a>(x,name)</tt>	Computes \\(ln(|beta x |)\\), reducing along the last dimension.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/special_math_ops.py#L85'>einsum</a>(equation)</tt>	A generalized contraction between tensors of arbitrary dimension.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/special_math_ops.py#L220'>_einsum_reduction</a>(t0,t0_axis_labels,t1,t1_axis_labels)</tt>	Helper for einsum() that computes the result of a two-argument einsum().
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/special_math_ops.py#L342'>_transpose_if_necessary</a>(tensor,perm)</tt>	Like transpose(), but avoids creating a new tensor if possible.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/special_math_ops.py#L350'>_reshape_if_necessary</a>(tensor,new_shape)</tt>	Like reshape(), but avoids creating a new tensor if possible.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/special_math_ops.py#L362'>_get_shape</a>(tensor)</tt>	Like get_shape() as_list(), but explicitly queries the shape of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/special_math_ops.py#L376'>_total_size</a>(shape_values)</tt>	Given list of tensor shape values returns total size.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/special_math_ops.py#L388'>_exponential_space_einsum</a>(equation)</tt>	Fallback implementation that supports summing an index over > 2 inputs.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/resources.py#L37'>register_resource</a>(handle,create_op,is_initialized_op,is_shared)</tt>	Registers a resource into the appropriate collections.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/resources.py#L59'>shared_resources</a>()</tt>	Returns resources visible to all tasks in the cluster.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/resources.py#L64'>local_resources</a>()</tt>	Returns resources intended to be local to this session.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/resources.py#L69'>report_uninitialized_resources</a>(resource_list,name)</tt>	Returns the names of all uninitialized resources in resource_list.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/resources.py#L102'>initialize_resources</a>(resource_list,name)</tt>	Initializes the resources in the given list.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/weights_broadcast_ops.py#L63'>assert_broadcastable</a>(weights,values)</tt>	Asserts weights can be broadcast to values.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/weights_broadcast_ops.py#L136'>broadcast_weights</a>(weights,values)</tt>	Broadcast weights to the same shape as values.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/data_flow_grad.py#L30'>_DynamicPartitionGrads</a>(op)</tt>	Gradients for dynamicpartition.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/data_flow_grad.py#L47'>_DynamicStitchGrads</a>(op,grad)</tt>	Gradients for dynamicstitch.
<tt style='background-color:#E8E8E8;'> python.ops.GroupTestCase <a href=' /python/ops/control_flow_ops_test.py#L61'>_StripGraph</a>(gd)</tt>	Copy gd keeping only node name node op node input and node device.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_grad.py#L37'>_MatrixInverseGrad</a>(op,grad)</tt>	Gradient for matrixinverse.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_grad.py#L46'>_MatrixDeterminantGrad</a>(op,grad)</tt>	Gradient for matrixdeterminant.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_grad.py#L57'>_CholeskyGrad</a>(op,grad)</tt>	Gradient for cholesky.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_grad.py#L63'>_MatrixSolveGrad</a>(op,grad)</tt>	Gradient for matrixsolve.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_grad.py#L77'>_MatrixSolveLsGrad</a>(op,grad)</tt>	Gradients for matrixsolvels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_grad.py#L162'>_MatrixTriangularSolveGrad</a>(op,grad)</tt>	Gradient for matrixtriangularsolve.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_grad.py#L182'>_SelfAdjointEigV2Grad</a>(op,grad_e,grad_v)</tt>	Gradient for selfadjointeigv2.
<tt style='background-color:#E8E8E8;'> python.ops.CropAndResizeOpTest <a href=' /python/ops/image_grad_test.py#L210'>_randomUniformAvoidAnchors</a>(low,high,anchors,radius)</tt>	Generate samples that are far enough from a set of anchor points.
<tt style='background-color:#E8E8E8;'> python.ops.CropAndResizeOpTest <a href=' /python/ops/image_grad_test.py#L240'>testGradRandomBoxes</a>()</tt>	Test that the gradient is correct for randomly generated boxes.
<tt style='background-color:#E8E8E8;'> python.ops.AbsOpTest <a href=' /python/ops/math_grad_test.py#L61'>_biasedRandN</a>(shape,bias,sigma)</tt>	Returns samples from a normal distribution shifted bias away from 0.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L45'>_non_atrous_convolution</a>(input,filter,padding,data_format)</tt>	Computes sums of n-d convolutions actually cross correlation.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L149'>with_space_to_batch</a>(input,dilation_rate,padding,op)</tt>	Performs op on the space-to-batch representation of input.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L460'>_get_strides_and_dilation_rate</a>(num_spatial_dims,strides,dilation_rate)</tt>	Helper function for verifying strides and dilation_rate arguments.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L503'>convolution</a>(input,filter,padding,strides)</tt>	Computes sums of n-d convolutions actually cross-correlation.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L673'>pool</a>(input,window_shape,pooling_type,padding)</tt>	Performs an n-d pooling operation.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L840'>atrous_conv2d</a>(value,filters,rate,padding)</tt>	Atrous convolution a k a convolution with holes or dilated convolution.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L971'>conv2d_transpose</a>(value,filter,output_shape,strides)</tt>	The transpose of conv2d.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1045'>atrous_conv2d_transpose</a>(value,filters,output_shape,rate)</tt>	The transpose of atrous_conv2d.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1190'>conv3d_transpose</a>(value,filter,output_shape,strides)</tt>	The transpose of conv3d.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1263'>bias_add</a>(value,bias,data_format,name)</tt>	Adds bias to value.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1290'>bias_add_v1</a>(value,bias,name)</tt>	Adds bias to value.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1317'>crelu</a>(features,name)</tt>	Computes concatenated relu.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1339'>relu6</a>(features,name)</tt>	Computes rectified linear 6 min(max features 0 6).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1355'>_flatten_outer_dims</a>(logits)</tt>	Flattens logits' outer dimensions and keep its last dimension.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1381'>_softmax</a>(logits,compute_op,dim,name)</tt>	Helper function for softmax and log_softmax.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1454'>softmax</a>(logits,dim,name)</tt>	Computes softmax activations.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1477'>log_softmax</a>(logits,dim,name)</tt>	Computes log softmax activations.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1510'>softmax_cross_entropy_with_logits</a>(_sentinel,labels,logits,dim)</tt>	Computes softmax cross entropy between logits and labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1609'>sparse_softmax_cross_entropy_with_logits</a>(_sentinel,labels,logits,name)</tt>	Computes sparse softmax cross entropy between logits and labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1707'>avg_pool</a>(value,ksize,strides,padding)</tt>	Performs the average pooling on the input.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1739'>max_pool</a>(value,ksize,strides,padding)</tt>	Performs the max pooling on the input.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1767'>_calc_conv_flops</a>(graph,node)</tt>	Calculates the compute resources needed for conv2d.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1785'>_calc_depthwise_conv_flops</a>(graph,node)</tt>	Calculates the compute resources needed for depthwiseconv2dnative.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1801'>_calc_bias_add_flops</a>(graph,node)</tt>	Calculates the computing needed for biasadd.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1810'>xw_plus_b</a>(x,weights,biases,name)</tt>	Computes matmul x weights + biases.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1832'>xw_plus_b_v1</a>(x,weights,biases,name)</tt>	Computes matmul x weights + biases.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1915'>top_k</a>(input,k,sorted,name)</tt>	Finds values and indices of the k largest entries for the last dimension.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L1944'>conv1d</a>(value,filters,stride,padding)</tt>	Computes a 1-d convolution given 3-d input and filter tensors.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L2009'>_calc_dilation2d_flops</a>(graph,node)</tt>	Calculates the compute resources needed for dilation2d.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_ops.py#L2025'>erosion2d</a>(value,kernel,strides,rates)</tt>	Computes the grayscale erosion of 4-d value and 3-d kernel tensors.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/ctc_ops.py#L31'>ctc_loss</a>(labels,inputs,sequence_length,preprocess_collapse_repeated)</tt>	Computes the ctc connectionist temporal classification loss.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/ctc_ops.py#L149'>_CTCLossGrad</a>(op,grad_loss,_)</tt>	The derivative provided by ctc loss.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/ctc_ops.py#L175'>ctc_greedy_decoder</a>(inputs,sequence_length,merge_repeated)</tt>	Performs greedy decoding on the logits given in input best path.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/ctc_ops.py#L217'>ctc_beam_search_decoder</a>(inputs,sequence_length,beam_width,top_paths)</tt>	Performs beam search decoding on the logits given in input.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/functional_ops.py#L49'>foldl</a>(fn,elems,initializer,parallel_iterations)</tt>	Foldl on the list of tensors unpacked from elems on dimension 0.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/functional_ops.py#L129'>foldr</a>(fn,elems,initializer,parallel_iterations)</tt>	Foldr on the list of tensors unpacked from elems on dimension 0.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/functional_ops.py#L209'>map_fn</a>(fn,elems,dtype,parallel_iterations)</tt>	Map on the list of tensors unpacked from elems on dimension 0.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/functional_ops.py#L405'>scan</a>(fn,elems,initializer,parallel_iterations)</tt>	Scan on the list of tensors unpacked from elems on dimension 0.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/logging_ops.py#L38'>Print</a>(input_,data,message,first_n)</tt>	Prints a list of tensors.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/logging_ops.py#L77'>histogram_summary</a>(tag,values,collections,name)</tt>	Outputs a summary protocol buffer with a histogram.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/logging_ops.py#L116'>image_summary</a>(tag,tensor,max_images,collections)</tt>	Outputs a summary protocol buffer with images.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/logging_ops.py#L177'>audio_summary</a>(tag,tensor,sample_rate,max_outputs)</tt>	Outputs a summary protocol buffer with audio.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/logging_ops.py#L269'>merge_all_summaries</a>(key)</tt>	Merges all summaries collected in the default graph.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/logging_ops.py#L292'>get_summary_op</a>()</tt>	Returns a single summary op that would run all summaries.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/logging_ops.py#L316'>scalar_summary</a>(tags,values,collections,name)</tt>	Outputs a summary protocol buffer with scalar values.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_ops.py#L38'>cholesky_solve</a>(chol,rhs,name)</tt>	Solves systems of linear eqns a x = rhs, given cholesky factorizations.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_ops.py#L80'>eye</a>(num_rows,num_columns,batch_shape,dtype)</tt>	Construct an identity matrix or a batch of matrices.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_ops.py#L138'>matrix_solve_ls</a>(matrix,rhs,l2_regularizer,fast)</tt>	Solves one or more linear least-squares problems.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_ops.py#L194'>self_adjoint_eig</a>(tensor,name)</tt>	Computes the eigen decomposition of a batch of self-adjoint matrices.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_ops.py#L216'>self_adjoint_eigvals</a>(tensor,name)</tt>	Computes the eigenvalues of one or more self-adjoint matrices.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_ops.py#L232'>svd</a>(tensor,full_matrices,compute_uv,name)</tt>	Computes the singular value decompositions of one or more matrices.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/linalg_ops.py#L287'>norm</a>(tensor,ord,axis,keep_dims)</tt>	Computes the norm of vectors matrices and tensors.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradients_test.py#L53'>_OpsBetween</a>(graph,to_ops,from_ops)</tt>	Build the list of operations between two lists of operations.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/numerics.py#L28'>verify_tensor_all_finite</a>(t,msg,name)</tt>	Assert that the tensor does not contain any nan's or inf's.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/numerics.py#L47'>add_check_numerics_ops</a>()</tt>	Connect a check_numerics to every floating point tensor.
<tt style='background-color:#E8E8E8;'> python.ops.BatchNormalizationTest <a href=' /python/ops/nn_batchnorm_test.py#L62'>_tfBatchNormV1BW</a>(x,m,v,beta)</tt>	Re-implementation of the original kernel for backward compatibility.
<tt style='background-color:#E8E8E8;'> python.ops.BatchNormalizationTest <a href=' /python/ops/nn_batchnorm_test.py#L249'>testBatchNormKeepDims</a>()</tt>	Test for tf nn moments( keep_dims=true / false).
<tt style='background-color:#E8E8E8;'> python.ops.BatchNormalizationTest <a href=' /python/ops/nn_batchnorm_test.py#L324'>testBatchNormArbitraryShapes</a>()</tt>	Test for a variety of shapes and moments.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/batch_norm_benchmark.py#L68'>build_graph</a>(device,input_shape,output_sizes,axis)</tt>	Build a graph containing a sequence of split operations.
<tt style='background-color:#E8E8E8;'> python.ops.SplitBenchmark <a href=' /python/ops/split_benchmark.py#L58'>_run_graph</a>(device,output_shape,variable,num_outputs)</tt>	Run the graph and print its execution time.
<tt style='background-color:#E8E8E8;'> python.ops.Conv2DTest <a href=' /python/ops/quantized_conv_ops_test.py#L34'>_VerifyValues</a>(tensor_in_sizes,filter_in_sizes,stride,padding)</tt>	Verifies the output values of the convolution function.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/template.py#L33'>make_template</a>(name_,func_,create_scope_now_,unique_name_)</tt>	Given an arbitrary function wrap it so that it does variable sharing.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/template.py#L146'>_skip_common_stack_elements</a>(stacktrace,base_case)</tt>	Skips items that the target stacktrace shares with the base stacktrace.
<tt style='background-color:#E8E8E8;'> python.ops.Template <a href=' /python/ops/template.py#L166'>__init__</a>(name,func,create_scope_now,unique_name)</tt>	Creates a template for the given function.
<tt style='background-color:#E8E8E8;'> python.ops.Template <a href=' /python/ops/template.py#L282'>variable_scope</a>()</tt>	Returns the variable scope object created by this template.
<tt style='background-color:#E8E8E8;'> python.ops.Template <a href=' /python/ops/template.py#L287'>var_scope</a>()</tt>	Returns the variable scope object created by this template.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradient_checker_test.py#L35'>_bad_grad</a>(unused_op,grad)</tt>	A gradient that returns the wrong shape.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradient_checker_test.py#L41'>_nan_grad</a>(unused_op,grad)</tt>	A gradient that returns nan.
<tt style='background-color:#E8E8E8;'> python.ops.Initializer <a href=' /python/ops/init_ops.py#L53'>get_config</a>()</tt>	Returns the configuration of the initializer as a json-serializable dict.
<tt style='background-color:#E8E8E8;'> python.ops.Initializer <a href=' /python/ops/init_ops.py#L61'>from_config</a>(cls,config)</tt>	Instantiates an initializer from a configuration dictionary.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/init_ops.py#L526'>glorot_uniform_initializer</a>(seed,dtype)</tt>	The glorot uniform initializer also called xavier uniform initializer.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/init_ops.py#L552'>glorot_normal_initializer</a>(seed,dtype)</tt>	The glorot normal initializer also called xavier normal initializer.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/init_ops.py#L581'>_compute_fans</a>(shape)</tt>	Computes the number of input and output units for a weight shape.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/init_ops.py#L608'>_assert_float_dtype</a>(dtype)</tt>	Validate and return floating point type based on dtype.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_grad.py#L34'>_PackGrad</a>(op,grad)</tt>	Gradient for pack op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_grad.py#L40'>_UnpackGrad</a>(op)</tt>	Gradient for unpack op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_grad.py#L46'>_ConcatGradHelper</a>(op,grad,start_value_index,end_value_index)</tt>	Gradient for concat op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_grad.py#L200'>_SliceGrad</a>(op,grad)</tt>	Gradient for slice op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_grad.py#L225'>_StridedSliceGrad</a>(op,grad)</tt>	Gradient for stridedslice op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_grad.py#L246'>_StridedSliceGradGrad</a>(op,grad)</tt>	Gradient for stridedslicegrad op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_grad.py#L303'>_MatrixSetDiagGrad</a>(op,grad)</tt>	Gradient for matrixsetdiag.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_grad.py#L379'>_CheckNumericsGrad</a>(_,grad)</tt>	Gradient for check_numerics op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_grad.py#L408'>_ReshapeToInput</a>(op,grad)</tt>	Reshapes the gradient to the shape of the original input.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_grad.py#L423'>_TransposeGrad</a>(op,grad)</tt>	Returns unshuffle grad.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_grad.py#L442'>_TileGrad</a>(op,grad)</tt>	Sum reduces grad along the tiled dimensions.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_grad.py#L467'>_PadGrad</a>(op,grad)</tt>	Gradient for pad.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_grad.py#L34'>_SwitchGrad</a>(op)</tt>	Gradients for a switch op is calculated using a merge op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_grad.py#L86'>_MergeGrad</a>(op,grad,_)</tt>	Gradients for a merge op are calculated using a switch op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_grad.py#L137'>_ExitGrad</a>(op,grad)</tt>	Gradients for an exit op are calculated using an enter op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_grad.py#L177'>_NextIterationGrad</a>(_,grad)</tt>	A forward next_iteration is translated into a backprop identity.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_grad.py#L191'>_EnterGrad</a>(op,grad)</tt>	Gradients for an enter are calculated using an exit op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_grad.py#L229'>_LoopCondGrad</a>(_)</tt>	Stop backprop for the predicate of a while loop.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/tensor_array_grad.py#L41'>_GetGradSource</a>(op_or_tensor)</tt>	Identify which call to tf gradients created this gradient op or tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/tensor_array_grad.py#L78'>_TensorArrayReadGrad</a>(op,grad)</tt>	Gradient for tensorarrayread.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/tensor_array_grad.py#L109'>_TensorArrayWriteGrad</a>(op,flow)</tt>	Gradient for tensorarraywrite.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/tensor_array_grad.py#L135'>_TensorArrayGatherGrad</a>(op,grad)</tt>	Gradient for tensorarraygather.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/tensor_array_grad.py#L166'>_TensorArrayScatterGrad</a>(op,flow)</tt>	Gradient for tensorarrayscatter.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/tensor_array_grad.py#L190'>_TensorArrayConcatGrad</a>(op,grad,unused_lengths_grad)</tt>	Gradient for tensorarrayconcat.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/tensor_array_grad.py#L222'>_TensorArraySplitGrad</a>(op,flow)</tt>	Gradient for tensorarraysplit.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/rnn_cell_impl.py#L36'>_state_size_with_prefix</a>(state_size,prefix)</tt>	Helper function that enables int or tensorshape shape specification.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/rnn_cell_impl.py#L58'>_zero_state_tensors</a>(state_size,batch_size,dtype)</tt>	Create tensors of zeros based on state_size batch_size and dtype.
<tt style='background-color:#E8E8E8;'> python.ops._RNNCell <a href=' /python/ops/rnn_cell_impl.py#L102'>__call__</a>(inputs,state,scope)</tt>	Run this rnn cell on inputs starting from the given state.
<tt style='background-color:#E8E8E8;'> python.ops._RNNCell <a href=' /python/ops/rnn_cell_impl.py#L140'>state_size</a>()</tt>	Size s of state s used by this cell.
<tt style='background-color:#E8E8E8;'> python.ops._RNNCell <a href=' /python/ops/rnn_cell_impl.py#L149'>output_size</a>()</tt>	Integer or tensorshape size of outputs produced by this cell.
<tt style='background-color:#E8E8E8;'> python.ops._RNNCell <a href=' /python/ops/rnn_cell_impl.py#L159'>zero_state</a>(batch_size,dtype)</tt>	Return zero-filled state tensor s.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/batch_norm_benchmark.py#L68'>build_graph</a>(device,input_shape,variable,num_inputs)</tt>	Build a graph containing a sequence of concat operations.
<tt style='background-color:#E8E8E8;'> python.ops.ConcatBenchmark <a href=' /python/ops/concat_benchmark.py#L81'>_run_graph</a>(device,input_shape,variable,num_inputs)</tt>	Run the graph and print its execution time.
<tt style='background-color:#E8E8E8;'> python.ops.FuncRegistry <a href=' /python/ops/script_ops.py#L48'>insert</a>(func)</tt>	Registers func and returns a unique token for this entry.
<tt style='background-color:#E8E8E8;'> python.ops.FuncRegistry <a href=' /python/ops/script_ops.py#L54'>remove</a>(token)</tt>	Removes the registered function corresponding to token.
<tt style='background-color:#E8E8E8;'> python.ops.FuncRegistry <a href=' /python/ops/script_ops.py#L58'>_convert</a>(value)</tt>	Converts an arg to numpy avoiding dangerous string and unicode dtypes.
<tt style='background-color:#E8E8E8;'> python.ops.FuncRegistry <a href=' /python/ops/script_ops.py#L78'>__call__</a>(token,args)</tt>	Calls the registered function for token with args.
<tt style='background-color:#E8E8E8;'> python.ops.FuncRegistry <a href=' /python/ops/script_ops.py#L91'>size</a>()</tt>	Returns how many functions are currently registered.
<tt style='background-color:#E8E8E8;'> python.ops.FuncRegistry <a href=' /python/ops/script_ops.py#L95'>_next_unique_token</a>()</tt>	Returns a unique token.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/script_ops.py#L118'>py_func</a>(func,inp,Tout,stateful)</tt>	Wraps a python function and uses it as a tensorflow op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sets_impl.py#L33'>set_size</a>(a,validate_indices)</tt>	Compute number of unique elements along last dimension of a.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sets_impl.py#L66'>_convert_to_tensors_or_sparse_tensors</a>(a,b)</tt>	Convert to tensor types and flip order if necessary.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sets_impl.py#L91'>_set_operation</a>(a,b,set_operation,validate_indices)</tt>	Compute set operation of elements in last dimension of a and b.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sets_impl.py#L134'>set_intersection</a>(a,b,validate_indices)</tt>	Compute set intersection of elements in last dimension of a and b.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sets_impl.py#L197'>set_difference</a>(a,b,aminusb,validate_indices)</tt>	Compute set difference of elements in last dimension of a and b.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sets_impl.py#L263'>set_union</a>(a,b,validate_indices)</tt>	Compute set union of elements in last dimension of a and b.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradient_checker.py#L54'>_compute_theoretical_jacobian</a>(x,x_shape,x_data,dy)</tt>	Computes the theoretical jacobian for dy/dx.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradient_checker.py#L132'>_compute_numeric_jacobian</a>(x,x_shape,x_data,y)</tt>	Computes the numeric jacobian for dy/dx.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradient_checker.py#L183'>_compute_dx_and_dy</a>(x,y,y_shape)</tt>	Returns a node to compute gradient of x wrt y.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradient_checker.py#L198'>_compute_gradient</a>(x,x_shape,dx,y)</tt>	Computes the theoretical and numerical jacobian.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradient_checker.py#L232'>_compute_gradient_list</a>(x,x_shape,y,y_shape)</tt>	Compute gradients for a list of x values.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradient_checker.py#L257'>compute_gradient</a>(x,x_shape,y,y_shape)</tt>	Computes and returns the theoretical and numerical jacobian.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/gradient_checker.py#L318'>compute_gradient_error</a>(x,x_shape,y,y_shape)</tt>	Computes the gradient error.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/data_flow_ops.py#L43'>_as_type_list</a>(dtypes)</tt>	Convert dtypes to a list of types.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/data_flow_ops.py#L54'>_as_shape_list</a>(shapes,dtypes,unknown_dim_allowed,unknown_rank_allowed)</tt>	Convert shapes to a list of tuples of int or none.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/data_flow_ops.py#L95'>_shape_common</a>(s1,s2)</tt>	The greatest lower bound ordered by specificity tensorshape.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L127'>__init__</a>(dtypes,shapes,names,queue_ref)</tt>	Constructs a queue object from a queue reference.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L165'>from_list</a>(index,queues)</tt>	Create a queue using the queue reference from queues[index].
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L203'>queue_ref</a>()</tt>	The underlying queue reference.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L208'>name</a>()</tt>	The name of the underlying queue.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L213'>dtypes</a>()</tt>	The list of dtypes for each component of a queue element.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L218'>shapes</a>()</tt>	The list of shapes for each component of a queue element.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L223'>names</a>()</tt>	The list of names for each component of a queue element.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L228'>_check_enqueue_dtypes</a>(vals)</tt>	Validate and convert vals to a list of tensors.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L271'>_scope_vals</a>(vals)</tt>	Return a list of values to pass to name_scope().
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L287'>enqueue</a>(vals,name)</tt>	Enqueues one element to this queue.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L326'>enqueue_many</a>(vals,name)</tt>	Enqueues zero or more elements to this queue.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L368'>_dequeue_return_value</a>(tensors)</tt>	Return the value to return from a dequeue op.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L391'>dequeue</a>(name)</tt>	Dequeues one element from this queue.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L428'>dequeue_many</a>(n,name)</tt>	Dequeues and concatenates n elements from this queue.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L468'>dequeue_up_to</a>(n,name)</tt>	Dequeues and concatenates n elements from this queue.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L508'>close</a>(cancel_pending_enqueues,name)</tt>	Closes this queue.
<tt style='background-color:#E8E8E8;'> python.ops.QueueBase <a href=' /python/ops/data_flow_ops.py#L540'>size</a>(name)</tt>	Compute the number of elements in this queue.
<tt style='background-color:#E8E8E8;'> python.ops.RandomShuffleQueue <a href=' /python/ops/data_flow_ops.py#L564'>__init__</a>(capacity,min_after_dequeue,dtypes,shapes)</tt>	Create a queue that dequeues elements in a random order.
<tt style='background-color:#E8E8E8;'> python.ops.FIFOQueue <a href=' /python/ops/data_flow_ops.py#L637'>__init__</a>(capacity,dtypes,shapes,names)</tt>	Creates a queue that dequeues elements in a first-in first-out order.
<tt style='background-color:#E8E8E8;'> python.ops.PaddingFIFOQueue <a href=' /python/ops/data_flow_ops.py#L688'>__init__</a>(capacity,dtypes,shapes,names)</tt>	Creates a queue that dequeues elements in a first-in first-out order.
<tt style='background-color:#E8E8E8;'> python.ops.PriorityQueue <a href=' /python/ops/data_flow_ops.py#L750'>__init__</a>(capacity,types,shapes,names)</tt>	Creates a queue that dequeues elements in a first-in first-out order.
<tt style='background-color:#E8E8E8;'> python.ops.Barrier <a href=' /python/ops/data_flow_ops.py#L807'>__init__</a>(types,shapes,shared_name,name)</tt>	Creates a barrier that persists across different graph executions.
<tt style='background-color:#E8E8E8;'> python.ops.Barrier <a href=' /python/ops/data_flow_ops.py#L882'>barrier_ref</a>()</tt>	Get the underlying barrier reference.
<tt style='background-color:#E8E8E8;'> python.ops.Barrier <a href=' /python/ops/data_flow_ops.py#L887'>name</a>()</tt>	The name of the underlying barrier.
<tt style='background-color:#E8E8E8;'> python.ops.Barrier <a href=' /python/ops/data_flow_ops.py#L892'>insert_many</a>(component_index,keys,values,name)</tt>	For each key assigns the respective value to the specified component.
<tt style='background-color:#E8E8E8;'> python.ops.Barrier <a href=' /python/ops/data_flow_ops.py#L914'>take_many</a>(num_elements,allow_small_batch,timeout,name)</tt>	Takes the given number of completed elements from this barrier.
<tt style='background-color:#E8E8E8;'> python.ops.Barrier <a href=' /python/ops/data_flow_ops.py#L980'>close</a>(cancel_pending_enqueues,name)</tt>	Closes this barrier.
<tt style='background-color:#E8E8E8;'> python.ops.Barrier <a href=' /python/ops/data_flow_ops.py#L1009'>ready_size</a>(name)</tt>	Compute the number of complete elements in the given barrier.
<tt style='background-color:#E8E8E8;'> python.ops.Barrier <a href=' /python/ops/data_flow_ops.py#L1023'>incomplete_size</a>(name)</tt>	Compute the number of incomplete elements in the given barrier.
<tt style='background-color:#E8E8E8;'> python.ops.ConditionalAccumulatorBase <a href=' /python/ops/data_flow_ops.py#L1049'>__init__</a>(dtype,shape,accumulator_ref)</tt>	Creates a new conditionalaccumulator.
<tt style='background-color:#E8E8E8;'> python.ops.ConditionalAccumulatorBase <a href=' /python/ops/data_flow_ops.py#L1066'>accumulator_ref</a>()</tt>	The underlying accumulator reference.
<tt style='background-color:#E8E8E8;'> python.ops.ConditionalAccumulatorBase <a href=' /python/ops/data_flow_ops.py#L1071'>name</a>()</tt>	The name of the underlying accumulator.
<tt style='background-color:#E8E8E8;'> python.ops.ConditionalAccumulatorBase <a href=' /python/ops/data_flow_ops.py#L1076'>dtype</a>()</tt>	The datatype of the gradients accumulated by this accumulator.
<tt style='background-color:#E8E8E8;'> python.ops.ConditionalAccumulatorBase <a href=' /python/ops/data_flow_ops.py#L1081'>num_accumulated</a>(name)</tt>	Number of gradients that have currently been aggregated in accumulator.
<tt style='background-color:#E8E8E8;'> python.ops.ConditionalAccumulatorBase <a href=' /python/ops/data_flow_ops.py#L1095'>set_global_step</a>(new_global_step,name)</tt>	Sets the global time step of the accumulator.
<tt style='background-color:#E8E8E8;'> python.ops.ConditionalAccumulator <a href=' /python/ops/data_flow_ops.py#L1124'>__init__</a>(dtype,shape,shared_name,name)</tt>	Creates a new conditionalaccumulator.
<tt style='background-color:#E8E8E8;'> python.ops.ConditionalAccumulator <a href=' /python/ops/data_flow_ops.py#L1142'>apply_grad</a>(grad,local_step,name)</tt>	Attempts to apply a gradient to the accumulator.
<tt style='background-color:#E8E8E8;'> python.ops.ConditionalAccumulator <a href=' /python/ops/data_flow_ops.py#L1165'>take_grad</a>(num_required,name)</tt>	Attempts to extract the average gradient from the accumulator.
<tt style='background-color:#E8E8E8;'> python.ops.SparseConditionalAccumulator <a href=' /python/ops/data_flow_ops.py#L1222'>apply_indexed_slices_grad</a>(grad,local_step,name)</tt>	Attempts to apply a gradient to the accumulator.
<tt style='background-color:#E8E8E8;'> python.ops.SparseConditionalAccumulator <a href=' /python/ops/data_flow_ops.py#L1246'>apply_grad</a>(grad_indices,grad_values,grad_shape,local_step)</tt>	Attempts to apply a sparse gradient to the accumulator.
<tt style='background-color:#E8E8E8;'> python.ops.SparseConditionalAccumulator <a href=' /python/ops/data_flow_ops.py#L1294'>take_grad</a>(num_required,name)</tt>	Attempts to extract the average gradient from the accumulator.
<tt style='background-color:#E8E8E8;'> python.ops.SparseConditionalAccumulator <a href=' /python/ops/data_flow_ops.py#L1318'>take_indexed_slices_grad</a>(num_required,name)</tt>	Attempts to extract the average gradient from the accumulator.
<tt style='background-color:#E8E8E8;'> python.ops.StagingArea <a href=' /python/ops/data_flow_ops.py#L1371'>__init__</a>(dtypes,shapes,names,shared_name)</tt>	Constructs a staging area object.
<tt style='background-color:#E8E8E8;'> python.ops.StagingArea <a href=' /python/ops/data_flow_ops.py#L1424'>name</a>()</tt>	The name of the staging area.
<tt style='background-color:#E8E8E8;'> python.ops.StagingArea <a href=' /python/ops/data_flow_ops.py#L1429'>dtypes</a>()</tt>	The list of dtypes for each component of a staging area element.
<tt style='background-color:#E8E8E8;'> python.ops.StagingArea <a href=' /python/ops/data_flow_ops.py#L1434'>shapes</a>()</tt>	The list of shapes for each component of a staging area element.
<tt style='background-color:#E8E8E8;'> python.ops.StagingArea <a href=' /python/ops/data_flow_ops.py#L1439'>names</a>()</tt>	The list of names for each component of a staging area element.
<tt style='background-color:#E8E8E8;'> python.ops.StagingArea <a href=' /python/ops/data_flow_ops.py#L1444'>_check_put_dtypes</a>(vals)</tt>	Validate and convert vals to a list of tensors.
<tt style='background-color:#E8E8E8;'> python.ops.StagingArea <a href=' /python/ops/data_flow_ops.py#L1490'>_scope_vals</a>(vals)</tt>	Return a list of values to pass to name_scope().
<tt style='background-color:#E8E8E8;'> python.ops.StagingArea <a href=' /python/ops/data_flow_ops.py#L1506'>put</a>(values,name)</tt>	Create an op that places a value into the staging area.
<tt style='background-color:#E8E8E8;'> python.ops.StagingArea <a href=' /python/ops/data_flow_ops.py#L1539'>_get_return_value</a>(tensors)</tt>	Return the value to return from a get op.
<tt style='background-color:#E8E8E8;'> python.ops.StagingArea <a href=' /python/ops/data_flow_ops.py#L1562'>get</a>(name)</tt>	Gets one element from this staging area.
<tt style='background-color:#E8E8E8;'> python.ops.RecordInput <a href=' /python/ops/data_flow_ops.py#L1616'>__init__</a>(file_pattern,batch_size,buffer_size,parallelism)</tt>	Constructs a recordinput op.
<tt style='background-color:#E8E8E8;'> python.ops.RecordInput <a href=' /python/ops/data_flow_ops.py#L1652'>get_yield_op</a>()</tt>	Add a node that yields a minibatch every time it is executed.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L57'>_assert</a>(cond,ex_type,msg)</tt>	A polymorphic assert works with tensors and boolean expressions.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L81'>_is_tensor</a>(x)</tt>	Returns true if x is a symbolic tensor-like object.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L93'>_ImageDimensions</a>(image,rank)</tt>	Returns the dimensions of an image tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L114'>_Check3DImage</a>(image,require_static)</tt>	Assert that we are working with properly shaped image.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L148'>_CheckAtLeast3DImage</a>(image,require_static)</tt>	Assert that we are working with properly shaped image.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L183'>fix_image_flip_shape</a>(image,result)</tt>	Set the shape to 3 dimensional if we don't know anything else.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L202'>random_flip_up_down</a>(image,seed)</tt>	Randomly flips an image vertically upside down.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L231'>random_flip_left_right</a>(image,seed)</tt>	Randomly flip an image horizontally left to right.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L260'>flip_left_right</a>(image)</tt>	Flip an image horizontally left to right.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L283'>flip_up_down</a>(image)</tt>	Flip an image horizontally upside down.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L306'>rot90</a>(image,k,name)</tt>	Rotate an image counter-clockwise by 90 degrees.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L343'>transpose_image</a>(image)</tt>	Transpose an image by swapping the first and second dimension.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L363'>central_crop</a>(image,central_fraction)</tt>	Crop the central region of the image.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L414'>pad_to_bounding_box</a>(image,offset_height,offset_width,target_height)</tt>	Pad image with zeros to the specified height and width.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L493'>crop_to_bounding_box</a>(image,offset_height,offset_width,target_height)</tt>	Crops an image to a specified bounding box.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L570'>resize_image_with_crop_or_pad</a>(image,target_height,target_width)</tt>	Crops and/or pads an image to a target width and height.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L689'>resize_images</a>(images,size,method,align_corners)</tt>	Resize images to size using the specified method.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L788'>per_image_standardization</a>(image)</tt>	Linearly scales image to have zero mean and unit norm.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L830'>random_brightness</a>(image,max_delta,seed)</tt>	Adjust the brightness of images by a random factor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L856'>random_contrast</a>(image,lower,upper,seed)</tt>	Adjust the contrast of an image by a random factor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L887'>adjust_brightness</a>(image,delta)</tt>	Adjust the brightness of rgb or grayscale images.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L921'>adjust_contrast</a>(images,contrast_factor)</tt>	Adjust contrast of rgb or grayscale images.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L962'>adjust_gamma</a>(image,gamma,gain)</tt>	Performs gamma correction on the input image.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L1002'>convert_image_dtype</a>(image,dtype,saturate,name)</tt>	Convert image to dtype, scaling its values if needed.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L1080'>rgb_to_grayscale</a>(images,name)</tt>	Converts one or more images from rgb to grayscale.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L1112'>grayscale_to_rgb</a>(images,name)</tt>	Converts one or more images from grayscale to rgb.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L1138'>random_hue</a>(image,max_delta,seed)</tt>	Adjust the hue of an rgb image by a random factor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L1170'>adjust_hue</a>(image,delta,name)</tt>	Adjust hue of an rgb image.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L1222'>random_saturation</a>(image,lower,upper,seed)</tt>	Adjust the saturation of an rgb image by a random factor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L1254'>adjust_saturation</a>(image,saturation_factor,name)</tt>	Adjust saturation of an rgb image.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L1306'>decode_image</a>(contents,channels,name)</tt>	Convenience function for decode_gif, decode_jpeg, and decode_png.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_impl.py#L1361'>total_variation</a>(images,name)</tt>	Calculate and return the total variation for one or more images.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/batch_norm_benchmark.py#L68'>build_graph</a>(device,input_shape,perm,datatype)</tt>	Build a graph containing a sequence of conv2d operations.
<tt style='background-color:#E8E8E8;'> python.ops.TransposeBenchmark <a href=' /python/ops/transpose_benchmark.py#L63'>_run_graph</a>(device,input_shape,perm,num_iters)</tt>	Run the graph and print its execution time.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L96'>_assert_static</a>(condition,data)</tt>	Raises a static valueerror with as much information as possible.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L103'>assert_proper_iterable</a>(values)</tt>	Static assert that values is a "proper" iterable.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L130'>assert_negative</a>(x,data,summarize,message)</tt>	Assert the condition x < 0 holds element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L166'>assert_positive</a>(x,data,summarize,message)</tt>	Assert the condition x > 0 holds element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L201'>assert_non_negative</a>(x,data,summarize,message)</tt>	Assert the condition x >= 0 holds element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L238'>assert_non_positive</a>(x,data,summarize,message)</tt>	Assert the condition x <= 0 holds element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L275'>assert_equal</a>(x,y,data,summarize)</tt>	Assert the condition x == y holds element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L321'>assert_none_equal</a>(x,y,data,summarize)</tt>	Assert the condition x != y holds for all elements.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L364'>assert_less</a>(x,y,data,summarize)</tt>	Assert the condition x < y holds element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L404'>assert_less_equal</a>(x,y,data,summarize)</tt>	Assert the condition x <= y holds element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L444'>assert_greater</a>(x,y,data,summarize)</tt>	Assert the condition x > y holds element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L484'>assert_greater_equal</a>(x,y,data,summarize)</tt>	Assert the condition x >= y holds element-wise.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L526'>_assert_rank_condition</a>(x,rank,static_condition,dynamic_condition)</tt>	Assert x has a rank that satisfies a given condition.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L574'>assert_rank</a>(x,rank,data,summarize)</tt>	Assert x has rank equal to rank.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L630'>assert_rank_at_least</a>(x,rank,data,summarize)</tt>	Assert x has rank equal to rank or higher.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L702'>_assert_ranks_condition</a>(x,ranks,static_condition,dynamic_condition)</tt>	Assert x has a rank that satisfies a given condition.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L754'>assert_rank_in</a>(x,ranks,data,summarize)</tt>	Assert x has rank in ranks.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L810'>assert_integer</a>(x,message,name)</tt>	Assert that x is of integer dtype.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L843'>assert_type</a>(tensor,tf_type,message,name)</tt>	Statically asserts that the given tensor is of the specified type.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L870'>_get_diff_for_monotonic_comparison</a>(x)</tt>	Gets the difference x[1 ] - x[:-1].
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L890'>is_non_decreasing</a>(x,name)</tt>	Returns true if x is non-decreasing.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L916'>is_strictly_increasing</a>(x,name)</tt>	Returns true if x is strictly increasing.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L943'>_assert_same_base_type</a>(items,expected_type)</tt>	Asserts all items are of the same base type.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/check_ops.py#L974'>assert_same_float_dtype</a>(tensors,dtype)</tt>	Validate and return float type based on tensors and dtype.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/spectral_grad.py#L69'>_RFFTGradHelper</a>(rank,irfft_fn)</tt>	Returns a gradient function for an rfft of the provided rank.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/spectral_grad.py#L146'>_IRFFTGradHelper</a>(rank,rfft_fn)</tt>	Returns a gradient function for an irfft of the provided rank.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/io_ops.py#L83'>_save</a>(filename,tensor_names,tensors,tensor_slices)</tt>	Save a list of tensors to a file with given names.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/io_ops.py#L116'>_restore_slice</a>(file_pattern,tensor_name,shape_and_slice,tensor_type)</tt>	Restore a tensor slice from a set of files with a given pattern.
<tt style='background-color:#E8E8E8;'> python.ops.ReaderBase <a href=' /python/ops/io_ops.py#L155'>__init__</a>(reader_ref,supports_serialize)</tt>	Creates a new readerbase.
<tt style='background-color:#E8E8E8;'> python.ops.ReaderBase <a href=' /python/ops/io_ops.py#L166'>reader_ref</a>()</tt>	Op that implements the reader.
<tt style='background-color:#E8E8E8;'> python.ops.ReaderBase <a href=' /python/ops/io_ops.py#L171'>read</a>(queue,name)</tt>	Returns the next record key value pair produced by a reader.
<tt style='background-color:#E8E8E8;'> python.ops.ReaderBase <a href=' /python/ops/io_ops.py#L200'>read_up_to</a>(queue,num_records,name)</tt>	Returns up to num_records key value pairs produced by a reader.
<tt style='background-color:#E8E8E8;'> python.ops.ReaderBase <a href=' /python/ops/io_ops.py#L238'>num_records_produced</a>(name)</tt>	Returns the number of records this reader has produced.
<tt style='background-color:#E8E8E8;'> python.ops.ReaderBase <a href=' /python/ops/io_ops.py#L258'>num_work_units_completed</a>(name)</tt>	Returns the number of work units this reader has finished processing.
<tt style='background-color:#E8E8E8;'> python.ops.ReaderBase <a href=' /python/ops/io_ops.py#L274'>serialize_state</a>(name)</tt>	Produce a string tensor that encodes the state of a reader.
<tt style='background-color:#E8E8E8;'> python.ops.ReaderBase <a href=' /python/ops/io_ops.py#L291'>restore_state</a>(state,name)</tt>	Restore a reader to a previously saved state.
<tt style='background-color:#E8E8E8;'> python.ops.ReaderBase <a href=' /python/ops/io_ops.py#L312'>supports_serialize</a>()</tt>	Whether the reader implementation can serialize its state.
<tt style='background-color:#E8E8E8;'> python.ops.ReaderBase <a href=' /python/ops/io_ops.py#L317'>reset</a>(name)</tt>	Restore a reader to its initial clean state.
<tt style='background-color:#E8E8E8;'> python.ops.WholeFileReader <a href=' /python/ops/io_ops.py#L350'>__init__</a>(name)</tt>	Create a wholefilereader.
<tt style='background-color:#E8E8E8;'> python.ops.TextLineReader <a href=' /python/ops/io_ops.py#L371'>__init__</a>(skip_header_lines,name)</tt>	Create a textlinereader.
<tt style='background-color:#E8E8E8;'> python.ops.FixedLengthRecordReader <a href=' /python/ops/io_ops.py#L394'>__init__</a>(record_bytes,header_bytes,footer_bytes,hop_bytes)</tt>	Create a fixedlengthrecordreader.
<tt style='background-color:#E8E8E8;'> python.ops.TFRecordReader <a href=' /python/ops/io_ops.py#L428'>__init__</a>(name,options)</tt>	Create a tfrecordreader.
<tt style='background-color:#E8E8E8;'> python.ops.IdentityReader <a href=' /python/ops/io_ops.py#L455'>__init__</a>(name)</tt>	Create a identityreader.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L63'>__init__</a>(dtype,size,dynamic_size,clear_after_read)</tt>	Construct a new tensorarray or wrap an existing tensorarray handle.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L165'>flow</a>()</tt>	The flow tensor forcing ops leading to this tensorarray state.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L170'>dtype</a>()</tt>	The data type of this tensorarray.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L175'>handle</a>()</tt>	The reference to the tensorarray.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L180'>_merge_element_shape</a>(shape)</tt>	Changes the element shape of the array given a shape to merge with.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L200'>identity</a>()</tt>	Returns a tensorarray with the same content and properties.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L235'>read</a>(index,name)</tt>	Read the value at location index in the tensorarray.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L256'>write</a>(index,value,name)</tt>	Write value into index index of the tensorarray.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L289'>stack</a>(name)</tt>	Return the values in the tensorarray as a stacked tensor.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L305'>gather</a>(indices,name)</tt>	Return selected values in the tensorarray as a packed tensor.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L335'>concat</a>(name)</tt>	Return the values in the tensorarray as a concatenated tensor.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L363'>unstack</a>(value,name)</tt>	Unstack the values of a tensor in the tensorarray.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L386'>scatter</a>(indices,value,name)</tt>	Scatter the values of a tensor in specific indices of a tensorarray.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L425'>split</a>(value,lengths,name)</tt>	Split the values of a tensor into the tensorarray.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L468'>size</a>(name)</tt>	Return the size of the tensorarray.
<tt style='background-color:#E8E8E8;'> python.ops.TensorArray <a href=' /python/ops/tensor_array_ops.py#L474'>close</a>(name)</tt>	Close the current tensorarray.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L36'>log_poisson_loss</a>(targets,log_input,compute_full_loss,name)</tt>	Computes log poisson loss given log_input.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L100'>sigmoid_cross_entropy_with_logits</a>(_sentinel,labels,logits,name)</tt>	Computes sigmoid cross entropy given logits.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L176'>weighted_cross_entropy_with_logits</a>(targets,logits,pos_weight,name)</tt>	Computes a weighted cross entropy.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L246'>relu_layer</a>(x,weights,biases,name)</tt>	Computes relu(x * weight + biases).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L268'>l2_normalize</a>(x,dim,epsilon,name)</tt>	Normalizes along dimension dim using an l2 norm.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L296'>zero_fraction</a>(value,name)</tt>	Returns the fraction of zeros in value.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L323'>depthwise_conv2d</a>(input,filter,strides,padding)</tt>	Depthwise 2-d convolution.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L399'>separable_conv2d</a>(input,depthwise_filter,pointwise_filter,strides)</tt>	2-d convolution with separable filters.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L520'>sufficient_statistics</a>(x,axes,shift,keep_dims)</tt>	Calculate the sufficient statistics for the mean and variance of x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L569'>normalize_moments</a>(counts,mean_ss,variance_ss,shift)</tt>	Calculate the mean and variance of based on the sufficient statistics.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L599'>moments</a>(x,axes,shift,name)</tt>	Calculate the mean and variance of x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L659'>weighted_moments</a>(x,axes,frequency_weights,name)</tt>	Returns the frequency-weighted mean and variance of x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L887'>_sum_rows</a>(x)</tt>	Returns a vector summing up each row of the matrix x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L900'>_compute_sampled_logits</a>(weights,biases,labels,inputs)</tt>	Helper function for nce_loss and sampled_softmax_loss functions.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L1072'>nce_loss</a>(weights,biases,labels,inputs)</tt>	Computes and returns the noise-contrastive estimation training loss.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_impl.py#L1180'>sampled_softmax_loss</a>(weights,biases,labels,inputs)</tt>	Computes and returns the sampled softmax training loss.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/candidate_sampling_ops.py#L28'>uniform_candidate_sampler</a>(true_classes,num_true,num_sampled,unique)</tt>	Samples a set of classes using a uniform base distribution.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/candidate_sampling_ops.py#L83'>log_uniform_candidate_sampler</a>(true_classes,num_true,num_sampled,unique)</tt>	Samples a set of classes using a log-uniform zipfian base distribution.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/candidate_sampling_ops.py#L141'>learned_unigram_candidate_sampler</a>(true_classes,num_true,num_sampled,unique)</tt>	Samples a set of classes from a distribution learned during training.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/candidate_sampling_ops.py#L197'>fixed_unigram_candidate_sampler</a>(true_classes,num_true,num_sampled,unique)</tt>	Samples a set of classes using the provided fixed base distribution.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/candidate_sampling_ops.py#L288'>all_candidate_sampler</a>(true_classes,num_true,num_sampled,unique)</tt>	Generate the set of all classes.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/candidate_sampling_ops.py#L323'>compute_accidental_hits</a>(true_classes,sampled_candidates,num_true,seed)</tt>	Compute the position ids in sampled_candidates matching true_classes.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/string_ops.py#L53'>string_split</a>(source,delimiter)</tt>	Split elements of source based on delimiter into a sparsetensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/string_ops.py#L103'>_reduce_join_reduction_dims</a>(x,axis,reduction_indices)</tt>	Returns range(rank x - 1 0 -1) if reduction_indices is none.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_grad.py#L36'>_SparseReorderGrad</a>(op,unused_output_indices_grad,output_values_grad)</tt>	Gradients for the sparsereorder op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_grad.py#L65'>_SparseAddGrad</a>(op)</tt>	The backward operator for the sparseadd op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_grad.py#L108'>_SparseReduceSumGrad</a>(op,out_grad)</tt>	Similar to gradient for the sum op (i e tf reduce_sum()).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_grad.py#L121'>_SparseTensorDenseMatMulGrad</a>(op,grad)</tt>	Gradients for the dense tensor in the sparsetensordensematmul op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_grad.py#L183'>_SparseDenseCwiseMulOrDivGrad</a>(op,grad,is_mul)</tt>	Common code for sparsedensecwise{mul div} gradients.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_grad.py#L217'>_SparseDenseCwiseMulGrad</a>(op,grad)</tt>	Gradients for sparsedensecwisemul.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_grad.py#L223'>_SparseDenseCwiseDivGrad</a>(op,grad)</tt>	Gradients for sparsedensecwisediv.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_grad.py#L229'>_SparseSoftmaxGrad</a>(op,grad)</tt>	Gradients for sparsesoftmax.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L31'>_Conv2DBackpropInputGrad</a>(op,grad)</tt>	The derivatives for deconvolution.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L188'>_SoftmaxGrad</a>(op,grad_softmax)</tt>	The derivative of the softmax nonlinearity.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L217'>_LogSoftmaxGrad</a>(op,grad)</tt>	The gradient for log_softmax.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L235'>_BiasAddGrad</a>(op,received_grad)</tt>	Return the gradients for the 2 inputs of bias_op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L262'>_BiasAddGradGrad</a>(op,received_grad)</tt>	Gradient for the biasaddgrad op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L299'>_BiasAddGradV1</a>(unused_bias_op,received_grad)</tt>	Return the gradients for the 2 inputs of bias_op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L364'>_BroadcastMul</a>(vec,mat)</tt>	Multiply after broadcasting vec to match dimensions of mat.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L379'>_SoftmaxCrossEntropyWithLogitsGrad</a>(op,grad_loss,grad_grad)</tt>	Gradient function for softmaxcrossentropywithlogits.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L409'>_SparseSoftmaxCrossEntropyWithLogitsGrad</a>(op,grad_0,_)</tt>	Gradient function for sparsesoftmaxcrossentropywithlogits.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L557'>_FractionalMaxPoolGrad</a>(op,grad_0,unused_grad_1,unused_grad_2)</tt>	Returns gradient for fractionalmaxpool.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L581'>_FractionalAvgPoolGrad</a>(op,grad_0,unused_grad_1,unused_grad_2)</tt>	Returns gradient for fractionalavgpool.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L604'>_BatchNormWithGlobalNormalizationGrad</a>(op,grad)</tt>	Return the gradients for the 5 inputs of batchnormwithglobalnormalization.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L631'>_FusedBatchNormGrad</a>(op)</tt>	Return the gradients for the 3 inputs of batchnorm.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L661'>_L2LossGrad</a>(op,grad)</tt>	Return the gradients for l2loss.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/nn_grad.py#L675'>_TopKGrad</a>(op,grad,_)</tt>	Return the gradients for topk.
<tt style='background-color:#E8E8E8;'> python.ops.AdjustGamma <a href=' /python/ops/image_ops_test.py#L177'>test_adjust_gamma_one</a>()</tt>	Same image should be returned for gamma equal to one.
<tt style='background-color:#E8E8E8;'> python.ops.AdjustGamma <a href=' /python/ops/image_ops_test.py#L191'>test_adjust_gamma_zero</a>()</tt>	White image should be returned for gamma equal to zero.
<tt style='background-color:#E8E8E8;'> python.ops.AdjustGamma <a href=' /python/ops/image_ops_test.py#L208'>test_adjust_gamma_less_one</a>()</tt>	Verifying the output with expected results for gamma.
<tt style='background-color:#E8E8E8;'> python.ops.AdjustGamma <a href=' /python/ops/image_ops_test.py#L229'>test_adjust_gamma_greater_one</a>()</tt>	Verifying the output with expected results for gamma.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_ops_test.py#L2308'>_SimpleColorRamp</a>()</tt>	Build a simple color ramp rgb image.
<tt style='background-color:#E8E8E8;'> python.ops.TotalVariationTest <a href=' /python/ops/image_ops_test.py#L2624'>_test</a>(x_np,y_np)</tt>	Test that the tensorflow implementation of total_variation(x_np) calculates the values in y_np.
<tt style='background-color:#E8E8E8;'> python.ops.TotalVariationTest <a href=' /python/ops/image_ops_test.py#L2647'>_total_variation_np</a>(x_np)</tt>	Calculate the total variation of x_np using numpy.
<tt style='background-color:#E8E8E8;'> python.ops.TotalVariationTest <a href=' /python/ops/image_ops_test.py#L2681'>_test_tensorflow_vs_numpy</a>(x_np)</tt>	Test the tensorflow implementation against a numpy implementation.
<tt style='background-color:#E8E8E8;'> python.ops.TotalVariationTest <a href=' /python/ops/image_ops_test.py#L2693'>_generateArray</a>(shape)</tt>	Generate an array of the given shape for use in testing.
<tt style='background-color:#E8E8E8;'> python.ops.TotalVariationTest <a href=' /python/ops/image_ops_test.py#L2707'>testTotalVariationNumpy</a>()</tt>	Test the tensorflow implementation against a numpy implementation.
<tt style='background-color:#E8E8E8;'> python.ops.TotalVariationTest <a href=' /python/ops/image_ops_test.py#L2734'>testTotalVariationHandmade</a>()</tt>	Test the total variation for a few handmade examples.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/spectral_ops.py#L42'>_infer_fft_length_for_rfft</a>(input_tensor,fft_rank)</tt>	Infers the fft_length argument for a rank rfft from input_tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/spectral_ops.py#L55'>_infer_fft_length_for_irfft</a>(input_tensor,fft_rank)</tt>	Infers the fft_length argument for a rank irfft from input_tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/spectral_ops.py#L73'>_rfft_wrapper</a>(fft_fn,fft_rank,default_name)</tt>	Wrapper around gen_spectral_ops rfft* that infers fft_length argument.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/spectral_ops.py#L89'>_irfft_wrapper</a>(ifft_fn,fft_rank,default_name)</tt>	Wrapper around gen_spectral_ops irfft* that infers fft_length argument.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L37'>_local_variable</a>(initial_value,validate_shape,name)</tt>	Create variable and add it to graphkeys local_variables collection.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L53'>_remove_squeezable_dimensions</a>(predictions,labels,weights)</tt>	Internal version of remove_squeezable_dimensions which handles weights.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L123'>_maybe_expand_labels</a>(labels,predictions)</tt>	If necessary expand labels along last dimension to match predictions.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L174'>_create_local</a>(name,shape,collections,validate_shape)</tt>	Creates a new local variable.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L199'>_safe_div</a>(numerator,denominator,name)</tt>	Divides two values returning 0 if the denominator is <= 0.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L217'>_safe_scalar_div</a>(numerator,denominator,name)</tt>	Divides two values returning 0 if the denominator is 0.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L238'>_streaming_confusion_matrix</a>(labels,predictions,num_classes,weights)</tt>	Calculate a streaming confusion matrix.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L290'>mean</a>(values,weights,metrics_collections,updates_collections)</tt>	Computes the weighted mean of the given values.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L360'>accuracy</a>(labels,predictions,weights,metrics_collections)</tt>	Calculates how often predictions matches labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L414'>_confusion_matrix_at_thresholds</a>(labels,predictions,thresholds,weights)</tt>	Computes true_positives false_negatives true_negatives false_positives.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L556'>auc</a>(labels,predictions,weights,num_thresholds)</tt>	Computes the approximate auc via a riemann sum.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L661'>mean_absolute_error</a>(labels,predictions,weights,metrics_collections)</tt>	Computes the mean absolute error between the labels and predictions.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L714'>mean_cosine_distance</a>(labels,predictions,dim,weights)</tt>	Computes the cosine distance between the labels and predictions.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L780'>mean_per_class_accuracy</a>(labels,predictions,num_classes,weights)</tt>	Calculates the mean of the per-class accuracies.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L859'>mean_iou</a>(labels,predictions,num_classes,weights)</tt>	Calculate per-step mean intersection-over-union miou.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L943'>mean_relative_error</a>(labels,predictions,normalizer,weights)</tt>	Computes the mean relative error by normalizing with the given values.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1004'>mean_squared_error</a>(labels,predictions,weights,metrics_collections)</tt>	Computes the mean squared error between the labels and predictions.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1057'>mean_tensor</a>(values,weights,metrics_collections,updates_collections)</tt>	Computes the element-wise weighted mean of the given tensors.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1135'>percentage_below</a>(values,threshold,weights,metrics_collections)</tt>	Computes the percentage of values less than the given threshold.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1184'>_count_condition</a>(values,weights,metrics_collections,updates_collections)</tt>	Sums the weights of cases where the given values are true.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1231'>true_positives</a>(labels,predictions,weights,metrics_collections)</tt>	Sum the weights of true_positives.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1276'>false_positives</a>(labels,predictions,weights,metrics_collections)</tt>	Sum the weights of false positives.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1321'>precision</a>(labels,predictions,weights,metrics_collections)</tt>	Computes the precision of the predictions with respect to the labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1401'>precision_at_thresholds</a>(labels,predictions,thresholds,weights)</tt>	Computes precision values for different thresholds on predictions.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1471'>false_negatives</a>(labels,predictions,weights,metrics_collections)</tt>	Computes the total number of false negatives.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1514'>recall</a>(labels,predictions,weights,metrics_collections)</tt>	Computes the recall of the predictions with respect to the labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1601'>_select_class_id</a>(ids,selected_id)</tt>	Filter all but selected_id out of ids.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1634'>_maybe_select_class_id</a>(labels,predictions_idx,selected_id)</tt>	If class id is specified filter all other classes.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1657'>_sparse_true_positive_at_k</a>(labels,predictions_idx,class_id,weights)</tt>	Calculates true positives for recall@k and precision@k.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1702'>_streaming_sparse_true_positive_at_k</a>(labels,predictions_idx,k,class_id)</tt>	Calculates weighted per step true positives for recall@k and precision@k.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1752'>_sparse_false_negative_at_k</a>(labels,predictions_idx,class_id,weights)</tt>	Calculates false negatives for recall@k.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1798'>_streaming_sparse_false_negative_at_k</a>(labels,predictions_idx,k,class_id)</tt>	Calculates weighted per step false negatives for recall@k.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1848'>recall_at_k</a>(labels,predictions,k,class_id)</tt>	Computes recall@k of the predictions with respect to sparse labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L1938'>_sparse_recall_at_top_k</a>(labels,predictions_idx,k,class_id)</tt>	Computes recall@k of top-k predictions with respect to sparse labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L2012'>recall_at_thresholds</a>(labels,predictions,thresholds,weights)</tt>	Computes various recall values for different thresholds on predictions.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L2078'>root_mean_squared_error</a>(labels,predictions,weights,metrics_collections)</tt>	Computes the root mean squared error between the labels and predictions.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L2142'>sensitivity_at_specificity</a>(labels,predictions,specificity,weights)</tt>	Computes the specificity at a given sensitivity.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L2232'>_expand_and_tile</a>(tensor,multiple,dim,name)</tt>	Slice tensor shape in 2 then tile along the sliced dimension.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L2286'>_num_relevant</a>(labels,k)</tt>	Computes number of relevant values for each row in labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L2322'>_sparse_average_precision_at_top_k</a>(labels,predictions_idx)</tt>	Computes average precision@k of predictions with respect to sparse labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L2408'>_streaming_sparse_average_precision_at_top_k</a>(labels,predictions_idx,weights,metrics_collections)</tt>	Computes average precision@k of predictions with respect to sparse labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L2501'>sparse_average_precision_at_k</a>(labels,predictions,k,weights)</tt>	Computes average precision@k of predictions with respect to sparse labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L2575'>_sparse_false_positive_at_k</a>(labels,predictions_idx,class_id,weights)</tt>	Calculates false positives for precision@k.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L2620'>_streaming_sparse_false_positive_at_k</a>(labels,predictions_idx,k,class_id)</tt>	Calculates weighted per step false positives for precision@k.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L2670'>_sparse_precision_at_top_k</a>(labels,predictions_idx,k,class_id)</tt>	Computes precision@k of the predictions with respect to sparse labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L2743'>sparse_precision_at_k</a>(labels,predictions,k,class_id)</tt>	Computes precision@k of the predictions with respect to sparse labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/metrics_impl.py#L2833'>specificity_at_sensitivity</a>(labels,predictions,sensitivity,weights)</tt>	Computes the specificity at a given sensitivity.
<tt style='background-color:#E8E8E8;'> python.ops._PartitionInfo <a href=' /python/ops/variable_scope.py#L101'>single_offset</a>(shape)</tt>	Returns the offset when the variable is partitioned in at most one dim.
<tt style='background-color:#E8E8E8;'> python.ops._PartitionInfo <a href=' /python/ops/variable_scope.py#L123'>single_slice_dim</a>(shape)</tt>	Returns the slice dim when the variable is partitioned only in one dim.
<tt style='background-color:#E8E8E8;'> python.ops._VariableStore <a href=' /python/ops/variable_scope.py#L183'>__init__</a>()</tt>	Create a variable store.
<tt style='background-color:#E8E8E8;'> python.ops._VariableStore <a href=' /python/ops/variable_scope.py#L203'>get_variable</a>(name,shape,dtype,initializer)</tt>	Gets an existing variable with these parameters or create a new one.
<tt style='background-color:#E8E8E8;'> python.ops._VariableStore <a href=' /python/ops/variable_scope.py#L369'>_get_partitioned_variable</a>(name,partitioner,shape,dtype)</tt>	Gets or creates a sharded variable list with these parameters.
<tt style='background-color:#E8E8E8;'> python.ops._VariableStore <a href=' /python/ops/variable_scope.py#L605'>_get_single_variable</a>(name,shape,dtype,initializer)</tt>	Get or create a single variable e g a shard or entire variable.
<tt style='background-color:#E8E8E8;'> python.ops._VariableStore <a href=' /python/ops/variable_scope.py#L743'>_get_default_initializer</a>(name,shape,dtype)</tt>	Provide a default initializer and a corresponding value.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variable_scope.py#L776'>no_regularizer</a>(_)</tt>	Use this function to prevent regularization of variables.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L803'>__init__</a>(reuse,name,initializer,regularizer)</tt>	Creates a new variablescope with the given properties.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L866'>reuse_variables</a>()</tt>	Reuse variables in this scope.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L870'>set_initializer</a>(initializer)</tt>	Set initializer for this scope.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L874'>set_dtype</a>(dtype)</tt>	Set data type for this scope.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L878'>set_use_resource</a>(use_resource)</tt>	Sets whether to use resourcevariables for this scope.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L882'>set_regularizer</a>(regularizer)</tt>	Set regularizer for this scope.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L886'>set_caching_device</a>(caching_device)</tt>	Set caching_device for this scope.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L890'>set_partitioner</a>(partitioner)</tt>	Set partitioner for this scope.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L894'>set_custom_getter</a>(custom_getter)</tt>	Set custom getter for this scope.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L898'>get_collection</a>(name)</tt>	Get this scope's variables.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L903'>trainable_variables</a>()</tt>	Get this scope's trainable variables.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L907'>global_variables</a>()</tt>	Get this scope's global variables.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L911'>get_variable</a>(var_store,name,shape,dtype)</tt>	Gets an existing variable with this name or create a new one.
<tt style='background-color:#E8E8E8;'> python.ops.VariableScope <a href=' /python/ops/variable_scope.py#L964'>_get_partitioned_variable</a>(var_store,name,shape,dtype)</tt>	Gets an existing variable with this name or create a new one.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variable_scope.py#L1029'>get_variable_scope</a>()</tt>	Returns the current variable scope.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variable_scope.py#L1169'>_get_partitioned_variable</a>(name,shape,dtype,initializer)</tt>	Gets or creates a sharded variable list with these parameters.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variable_scope.py#L1264'>_pure_variable_scope</a>(name_or_scope,reuse,initializer,regularizer)</tt>	Creates a context for the variable_scope see variable_scope for docs.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variable_scope.py#L1389'>_maybe_wrap_custom_getter</a>(custom_getter,old_getter)</tt>	Wrap a call to a custom_getter to use the old_getter internally.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variable_scope.py#L1409'>_get_unique_variable_scope</a>(prefix)</tt>	Get a name with the given prefix unique in the current variable scope.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variable_scope.py#L1423'>variable_scope</a>(name_or_scope,default_name,values,initializer)</tt>	Returns a context manager for defining ops that creates variables layers.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variable_scope.py#L1599'>variable_op_scope</a>(values,name_or_scope,default_name,initializer)</tt>	Deprecated context manager for defining an op that creates variables.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/variable_scope.py#L1628'>_compute_slice_dim_and_shape</a>(full_shape,slicing)</tt>	Computes which dimension is being sliced and the typical slice shape.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/random_ops.py#L36'>_ShapeTensor</a>(shape)</tt>	Convert to an int32 or int64 tensor defaulting to int32 if empty.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/random_ops.py#L46'>random_normal</a>(shape,mean,stddev,dtype)</tt>	Outputs random values from a normal distribution.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/random_ops.py#L85'>parameterized_truncated_normal</a>(shape,means,stddevs,minvals)</tt>	Outputs random values from a truncated normal distribution.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/random_ops.py#L138'>truncated_normal</a>(shape,mean,stddev,dtype)</tt>	Outputs random values from a truncated normal distribution.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/random_ops.py#L182'>random_uniform</a>(shape,minval,maxval,dtype)</tt>	Outputs random values from a uniform distribution.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/random_ops.py#L243'>random_shuffle</a>(value,seed,name)</tt>	Randomly shuffles a tensor along its first dimension.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/random_ops.py#L273'>random_crop</a>(value,size,seed,name)</tt>	Randomly crops a tensor to a given size.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/random_ops.py#L314'>multinomial</a>(logits,num_samples,seed,name)</tt>	Draws samples from a multinomial distribution.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/random_ops.py#L348'>random_gamma</a>(shape,alpha,beta,dtype)</tt>	Draws shape samples from each of the given gamma distribution s.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/random_ops.py#L415'>random_poisson</a>(lam,shape,dtype,seed)</tt>	Draws shape samples from each of the given poisson distribution s.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/state_ops.py#L91'>variable_op</a>(shape,dtype,name,set_shape)</tt>	Deprecated used variable_op_v2 instead.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/state_ops.py#L105'>variable_op_v2</a>(shape,dtype,name,container)</tt>	Create a variable operation.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/state_ops.py#L131'>init_variable</a>(v,init,name)</tt>	Initializes variable with "init".
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/state_ops.py#L166'>is_variable_initialized</a>(ref,name)</tt>	Checks whether a tensor has been initialized.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/state_ops.py#L187'>assign_sub</a>(ref,value,use_locking,name)</tt>	Update 'ref' by subtracting 'value' from it.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/state_ops.py#L215'>assign_add</a>(ref,value,use_locking,name)</tt>	Update 'ref' by adding 'value' to it.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/state_ops.py#L243'>assign</a>(ref,value,validate_shape,use_locking)</tt>	Update 'ref' by assigning 'value' to it.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/lookup_ops.py#L30'>initialize_all_tables</a>(name)</tt>	Returns an op that initializes all tables of the default graph.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/lookup_ops.py#L44'>tables_initializer</a>(name)</tt>	Returns an op that initializes all tables of the default graph.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/batch_norm_benchmark.py#L39'>batch_norm_op</a>(tensor,mean,variance,beta)</tt>	Fused kernel for batch normalization.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/batch_norm_benchmark.py#L55'>batch_norm_py</a>(tensor,mean,variance,beta)</tt>	Python implementation of batch normalization.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/batch_norm_benchmark.py#L68'>build_graph</a>(device,input_shape,axes,num_layers)</tt>	Build a graph containing a sequence of batch normalizations.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/batch_norm_benchmark.py#L117'>print_difference</a>(mode,t1,t2)</tt>	Print the difference in timing between two runs.
<tt style='background-color:#E8E8E8;'> python.ops.BatchNormBenchmark <a href=' /python/ops/batch_norm_benchmark.py#L126'>_run_graph</a>(device,input_shape,axes,num_layers)</tt>	Run the graph and print its execution time.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L32'>_safe_shape_div</a>(x,y)</tt>	Divides x / y assuming x y >= 0, treating 0 / 0 = 0.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L37'>_SumGrad</a>(op,grad)</tt>	Gradient for sum.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L62'>_MinOrMaxGrad</a>(op,grad)</tt>	Gradient for min or max amazingly it's precisely the same code.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L80'>_MaxGrad</a>(op,grad)</tt>	Gradient for max.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L91'>_MeanGrad</a>(op,grad)</tt>	Gradient for mean.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L102'>_ProdGrad</a>(op,grad)</tt>	Gradient for prod.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L146'>_SegmentSumGrad</a>(op,grad)</tt>	Gradient for segmentsum.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L152'>_SegmentMeanGrad</a>(op,grad)</tt>	Gradient for segmentmean.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L166'>_SparseSegmentSumGrad</a>(op,grad)</tt>	Gradient for sparsesegmentsum.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L175'>_SparseSegmentMeanGrad</a>(op,grad)</tt>	Gradient for sparsesegmentmean.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L183'>_SparseSegmentSqrtNGrad</a>(op,grad)</tt>	Gradient for sparsesegmentsqrtn.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L191'>_SegmentMinOrMaxGrad</a>(op,grad,is_sorted)</tt>	Gradient for segmentmin and unsorted segmentmax they share similar code.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L217'>_SegmentMinGrad</a>(op,grad)</tt>	Gradient for segmentmin.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L223'>_SegmentMaxGrad</a>(op,grad)</tt>	Gradient for segmentmax.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L229'>_UnsortedSegmentSumGrad</a>(op,grad)</tt>	Gradient for segmentsum.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L252'>_InvGrad</a>(op,grad)</tt>	Returns -grad * (1 / x^2).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L260'>_ReciprocalGrad</a>(op,grad)</tt>	Returns -grad * (1 / x^2).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L314'>_RsqrtGrad</a>(op,grad)</tt>	Returns -0 5 * grad * conj y ^3.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L321'>_RsqrtGradGrad</a>(op,grad)</tt>	Returns backprop gradient for f a b = -0 5 * b * conj a ^3.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L335'>_ExpGrad</a>(op,grad)</tt>	Returns grad * exp x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L344'>_Expm1Grad</a>(op,grad)</tt>	Returns grad * exp x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L354'>_LogGrad</a>(op,grad)</tt>	Returns grad * (1/x).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L363'>_Log1pGrad</a>(op,grad)</tt>	Returns grad * (1/ 1 + x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L372'>_TanhGrad</a>(op,grad)</tt>	Returns grad * (1 - tanh x * tanh x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L391'>_ErfGrad</a>(op,grad)</tt>	Returns grad * 2/sqrt pi * exp(-x**2).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L401'>_ErfcGrad</a>(op,grad)</tt>	Returns -grad * 2/sqrt pi * exp(-x**2).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L412'>_LgammaGrad</a>(op,grad)</tt>	Returns grad * digamma x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L421'>_DigammaGrad</a>(op,grad)</tt>	Compute gradient of the digamma function with respect to its argument.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L430'>_IgammaGrad</a>(op,grad)</tt>	Returns gradient of igamma a x with respect to x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L448'>_IgammacGrad</a>(op,grad)</tt>	Returns gradient of igammac a x = 1 - igamma a x w r t x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L455'>_BetaincGrad</a>(op,grad)</tt>	Returns gradient of betainc a b x with respect to x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L482'>_ZetaGrad</a>(op,grad)</tt>	Returns gradient of zeta x q with respect to x and q.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L502'>_PolygammaGrad</a>(op,grad)</tt>	Returns gradient of psi n x with respect to n and x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L522'>_SigmoidGrad</a>(op,grad)</tt>	Returns grad * sigmoid x * (1 - sigmoid x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L549'>_SinGrad</a>(op,grad)</tt>	Returns grad * cos x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L558'>_CosGrad</a>(op,grad)</tt>	Returns grad * -sin x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L567'>_TanGrad</a>(op,grad)</tt>	Returns grad * 1/sec^2 x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L578'>_AsinGrad</a>(op,grad)</tt>	Returns grad * 1/sqrt(1-x^2).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L591'>_AcosGrad</a>(op,grad)</tt>	Returns grad * -1/sqrt(1-x^2).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L604'>_AtanGrad</a>(op,grad)</tt>	Returns grad * 1/ (1 + x^2).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L616'>_Atan2Grad</a>(op,grad)</tt>	Returns grad * x / (x^2 + y^2), grad * -y / (x^2 + y^2).
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L626'>_AddNGrad</a>(op,grad)</tt>	Copies the gradient to all inputs.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L655'>_MulGrad</a>(op,grad)</tt>	The gradient of scalar multiplication.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L670'>_DivGrad</a>(op,grad)</tt>	The gradient for the div operator.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L688'>_FloorDivGrad</a>(_,unused_grad)</tt>	The gradient for the floordiv operator.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L699'>_RealDivGrad</a>(op,grad)</tt>	Realdiv op gradient.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L718'>_PowGrad</a>(op,grad)</tt>	Returns grad * (y*x^ y-1 z*log x.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L744'>_MaximumMinimumGrad</a>(op,grad,selector_op)</tt>	Factor out the code for the gradient of maximum or minimum.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L762'>_MaximumGrad</a>(op,grad)</tt>	Returns grad*(x > y x <= y) with type of grad.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L768'>_MinimumGrad</a>(op,grad)</tt>	Returns grad*(x < y x >= y) with type of grad.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L774'>_SquaredDifferenceGrad</a>(op,grad)</tt>	Returns the gradient for x-y ^2.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L815'>_MatMulGrad</a>(op,grad)</tt>	Gradient for matmul.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L838'>_SparseMatMulGrad</a>(op,grad)</tt>	Gradient for sparsematmul.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L912'>_BatchMatMul</a>(op,grad)</tt>	Returns the gradient of x and y given the gradient of x * y.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L942'>_ComplexGrad</a>(op,grad)</tt>	Returns the real and imaginary components of 'grad', respectively.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L954'>_RealGrad</a>(_,grad)</tt>	Returns 'grad' as the real part and set the imaginary part 0.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L961'>_ImagGrad</a>(_,grad)</tt>	Returns 'grad' as the imaginary part and set the real part 0.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L968'>_ConjGrad</a>(_,grad)</tt>	Returns the complex conjugate of grad.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/math_grad.py#L974'>_ComplexAbsGrad</a>(op,grad)</tt>	Returns the gradient of complexabs.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/partitioned_variables.py#L70'>variable_axis_size_partitioner</a>(max_shard_bytes,axis,bytes_per_string_element,max_shards)</tt>	Get a partitioner for variablescope to keep shards below max_shard_bytes.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/partitioned_variables.py#L154'>min_max_variable_partitioner</a>(max_partitions,axis,min_slice_size,bytes_per_string_element)</tt>	Partitioner to allocate minimum size per slice.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/partitioned_variables.py#L217'>fixed_size_partitioner</a>(num_shards,axis)</tt>	Partitioner to specify a fixed number of shards along given axis.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/partitioned_variables.py#L235'>create_partitioned_variables</a>(shape,slicing,initializer,dtype)</tt>	Create a list of partitioned variables according to the given slicing.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/session_ops.py#L41'>encode_resource_handle</a>(resource_handle)</tt>	Encode a resourcehandle proto as custom numpy struct type.
<tt style='background-color:#E8E8E8;'> python.ops.TensorHandle <a href=' /python/ops/session_ops.py#L50'>__init__</a>(handle,dtype,session)</tt>	Constructs a new tensor handle.
<tt style='background-color:#E8E8E8;'> python.ops.TensorHandle <a href=' /python/ops/session_ops.py#L74'>_get_resource_handle</a>()</tt>	The resourcehandle representation of this handle.
<tt style='background-color:#E8E8E8;'> python.ops.TensorHandle <a href=' /python/ops/session_ops.py#L84'>to_numpy_array</a>()</tt>	Convert a tensorhandle object to a feedable numpy value.
<tt style='background-color:#E8E8E8;'> python.ops.TensorHandle <a href=' /python/ops/session_ops.py#L93'>handle</a>()</tt>	The string representation of this handle.
<tt style='background-color:#E8E8E8;'> python.ops.TensorHandle <a href=' /python/ops/session_ops.py#L98'>eval</a>()</tt>	Return the value of the tensor represented by this handle.
<tt style='background-color:#E8E8E8;'> python.ops.TensorHandle <a href=' /python/ops/session_ops.py#L107'>delete</a>()</tt>	Force the deletion of this persistent tensor.
<tt style='background-color:#E8E8E8;'> python.ops.TensorHandle <a href=' /python/ops/session_ops.py#L116'>get_raw_handle</a>()</tt>	Return the raw handle of the tensor.
<tt style='background-color:#E8E8E8;'> python.ops.TensorHandle <a href=' /python/ops/session_ops.py#L126'>_get_device_name</a>(handle)</tt>	The device name encoded in the handle.
<tt style='background-color:#E8E8E8;'> python.ops.TensorHandle <a href=' /python/ops/session_ops.py#L132'>_get_reader_key</a>(handle)</tt>	The graph key for reader.
<tt style='background-color:#E8E8E8;'> python.ops.TensorHandle <a href=' /python/ops/session_ops.py#L138'>_get_mover_key</a>(feeder,handle)</tt>	The graph key for mover.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/session_ops.py#L144'>get_session_handle</a>(data,name)</tt>	Return the handle of data.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/session_ops.py#L186'>get_session_tensor</a>(handle,dtype,name)</tt>	Get the tensor of type dtype by feeding a tensor handle.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/session_ops.py#L226'>delete_session_tensor</a>(handle,name)</tt>	Delete the tensor for the given tensor handle.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/session_ops.py#L257'>_get_handle_reader</a>(graph,handle,dtype)</tt>	Return a read subgraph for this handle.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/session_ops.py#L273'>_get_handle_mover</a>(graph,feeder,handle)</tt>	Return a move subgraph for this pair of feeder and handle.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/session_ops.py#L294'>_get_handle_deleter</a>(graph,deleter_key,handle)</tt>	Return a deletion subgraph for this handle.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_grad.py#L27'>_ResizeNearestNeighborGrad</a>(op,grad)</tt>	The derivatives for nearest neighbor resizing.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_grad.py#L53'>_ResizeBilinearGrad</a>(op,grad)</tt>	The derivatives for bilinear resizing.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/image_grad.py#L76'>_CropAndResizeGrad</a>(op,grad)</tt>	The derivatives for crop_and_resize.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/parsing_ops.py#L175'>_features_to_raw_params</a>(features,types)</tt>	Split feature tuples into raw params used by gen_parsing_ops.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/parsing_ops.py#L286'>_construct_sparse_tensors_for_sparse_features</a>(features,tensor_dict)</tt>	Merges sparsetensors of indices and values of sparsefeatures.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/parsing_ops.py#L347'>parse_example</a>(serialized,features,name,example_names)</tt>	Parses example protos into a dict of tensors.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/parsing_ops.py#L573'>_parse_example_raw</a>(serialized,names,sparse_keys,sparse_types)</tt>	Parses example protos.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/parsing_ops.py#L706'>parse_single_example</a>(serialized,features,name,example_names)</tt>	Parses a single example proto.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/parsing_ops.py#L751'>_parse_single_example_raw</a>(serialized,names,sparse_keys,sparse_types)</tt>	Parses a single example proto.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/parsing_ops.py#L839'>parse_single_sequence_example</a>(serialized,context_features,sequence_features,example_name)</tt>	Parses a single sequenceexample proto.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/parsing_ops.py#L935'>_parse_single_sequence_example_raw</a>(serialized,context_sparse_keys,context_sparse_types,context_dense_keys)</tt>	Parses a single sequenceexample proto.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/confusion_matrix.py#L35'>remove_squeezable_dimensions</a>(labels,predictions,expected_rank_diff,name)</tt>	Squeeze last dim if ranks differ from expected by exactly 1.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/confusion_matrix.py#L95'>confusion_matrix</a>(labels,predictions,num_classes,dtype)</tt>	Computes the confusion matrix from predictions and labels.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/embedding_ops.py#L36'>_do_gather</a>(params,ids,name)</tt>	Deals with doing gather differently for resource variables.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/embedding_ops.py#L43'>embedding_lookup</a>(params,ids,partition_strategy,name)</tt>	Looks up ids in a list of embedding tensors.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/embedding_ops.py#L209'>embedding_lookup_sparse</a>(params,sp_ids,sp_weights,partition_strategy)</tt>	Computes embeddings for the given ids and weights.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L67'>_convert_to_sparse_tensor</a>(sp_input)</tt>	Convert sp_input to sparsetensor and return it.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L86'>_convert_to_sparse_tensors</a>(sp_inputs)</tt>	Convert sp_inputs to sparsetensor objects and return them.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L108'>sparse_concat</a>(axis,sp_inputs,name,expand_nonconcat_dim)</tt>	Concatenates a list of sparsetensor along the specified dimension.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L236'>sparse_add</a>(a,b,thresh)</tt>	Adds two tensors at least one of each is a sparsetensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L318'>sparse_dense_cwise_add</a>(sp_t,dense_t)</tt>	Adds up a sparsetensor and a dense tensor using these special rules 1 broadcasts the dense side to have the same shape as the sparse side if.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L343'>sparse_reorder</a>(sp_input,name)</tt>	Reorders a sparsetensor into the canonical row-major ordering.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L391'>sparse_reshape</a>(sp_input,shape,name)</tt>	Reshapes a sparsetensor to represent values in a new dense shape.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L472'>sparse_split</a>(keyword_required,sp_input,num_split,axis)</tt>	Split a sparsetensor into num_split tensors along axis.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L538'>sparse_to_dense</a>(sparse_indices,output_shape,sparse_values,default_value)</tt>	Converts a sparse representation into a dense tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L593'>sparse_reduce_sum</a>(sp_input,axis,keep_dims,reduction_axes)</tt>	Computes the sum of elements across dimensions of a sparsetensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L640'>sparse_reduce_sum_sparse</a>(sp_input,axis,keep_dims,reduction_axes)</tt>	Computes the sum of elements across dimensions of a sparsetensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L677'>sparse_tensor_to_dense</a>(sp_input,default_value,validate_indices,name)</tt>	Converts a sparsetensor into a dense tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L728'>sparse_to_indicator</a>(sp_input,vocab_size,name)</tt>	Converts a sparsetensor of ids into a dense bool indicator tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L790'>sparse_merge</a>(sp_ids,sp_values,vocab_size,name)</tt>	Combines a batch of feature ids and values into a single sparsetensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L930'>sparse_retain</a>(sp_input,to_retain)</tt>	Retains specified non-empty values within a sparsetensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L973'>sparse_reset_shape</a>(sp_input,new_shape)</tt>	Resets the shape of a sparsetensor with indices and values unchanged.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L1072'>sparse_fill_empty_rows</a>(sp_input,default_value,name)</tt>	Fills empty rows in the input 2-d sparsetensor with a default value.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L1154'>serialize_sparse</a>(sp_input,name)</tt>	Serialize a sparsetensor into a string 3-vector (1-d tensor) object.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L1174'>serialize_many_sparse</a>(sp_input,name)</tt>	Serialize an n-minibatch sparsetensor into an [n 3] string tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L1203'>deserialize_many_sparse</a>(serialized_sparse,dtype,rank,name)</tt>	Deserialize and concatenate sparsetensors from a serialized minibatch.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L1272'>sparse_tensor_dense_matmul</a>(sp_a,b,adjoint_a,adjoint_b)</tt>	Multiply sparsetensor of rank 2 "a" by dense matrix "b".
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L1490'>sparse_softmax</a>(sp_input,name)</tt>	Applies softmax to a batched n-d sparsetensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L1544'>sparse_maximum</a>(sp_a,sp_b,name)</tt>	Returns the element-wise max of two sparsetensors.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L1580'>sparse_minimum</a>(sp_a,sp_b,name)</tt>	Returns the element-wise min of two sparsetensors.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L1616'>sparse_transpose</a>(sp_input,perm,name)</tt>	Transposes a sparsetensor the returned tensor's dimension i will correspond to the input dimension.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L1665'>_add_sparse_to_tensors_map</a>(sp_input,container,shared_name,name)</tt>	Add a sparsetensor to a sparsetensorsmap and return its handle.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L1691'>_add_many_sparse_to_tensors_map</a>(sp_input,container,shared_name,name)</tt>	Add a minibatch sparsetensor to a sparsetensorsmap, return n handles.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/sparse_ops.py#L1725'>_take_many_sparse_from_tensors_map</a>(sparse_map_op,sparse_handles,rank,name)</tt>	Read sparsetensors from a sparsetensorsmap and concatenate them.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L89'>Assert</a>(condition,data,summarize,name)</tt>	Asserts that the given condition is true.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L133'>_Identity</a>(data,name)</tt>	Return a tensor with the same shape and contents as the input tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L186'>_Enter</a>(data,frame_name,is_constant,parallel_iterations)</tt>	Creates or finds a child frame and makes data available to it.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L243'>exit</a>(data,name)</tt>	Exits the current frame to its parent frame.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L276'>switch</a>(data,pred,dtype,name)</tt>	Forwards data to an output determined by pred.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L324'>_SwitchRefOrTensor</a>(data,pred,name)</tt>	Forwards data to an output determined by pred.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L368'>merge</a>(inputs,name)</tt>	Returns the value of an available element of inputs.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L457'>_IsLoopConstantEnter</a>(op)</tt>	Return true iff op is a loop invariant.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L463'>_GetLoopConstantEnter</a>(value)</tt>	Return the enter op if we can infer value to be a loop invariant.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L472'>_GetOutputContext</a>(op)</tt>	Return the control flow context for the output of an op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L491'>_SetShapeInvariants</a>(input_vars,enter_vars,shapes)</tt>	Set the shapes of the tensors in enter_vars to shapes.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L547'>_EnforceShapeInvariant</a>(merge_var,next_var)</tt>	Check if the shapes of the loops variables are invariants.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L615'>_AddNextAndBackEdge</a>(m,v)</tt>	Add nextiteration and back edge from v to m.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L734'>outer_grad_state</a>()</tt>	The grad loop state for outer loop.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L739'>forward_context</a>()</tt>	The while loop context for forward.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L744'>forward_index</a>()</tt>	The loop index of forward loop.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L749'>forward_sync</a>()</tt>	A control trigger node for synchronization in the forward loop.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L763'>grad_context</a>()</tt>	The corresponding whilecontext for gradient.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L768'>grad_index</a>()</tt>	The loop index of backprop loop.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L773'>grad_sync</a>()</tt>	A control trigger node for synchronization in the grad loop.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L787'>history_map</a>()</tt>	The map that records all the tensors needed for backprop.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L792'>switch_map</a>()</tt>	The map that records all the switch ops for the while loop.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L797'>unused_exits</a>()</tt>	The list of "unused" exits.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L802'>deferred_exits</a>()</tt>	The list of "deferred" exits.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L807'>forward_loop_exits</a>()</tt>	The list of exits of the forward loop.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L817'>pending_exits_count</a>()</tt>	The number of exits we expect to see but haven't.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L817'>pending_exits_count</a>(cnt)</tt>	Set the pending count to cnt.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L822'>AddForwardAccumulator</a>(value,dead_branch)</tt>	Add an accumulator for each forward tensor that is needed in backprop.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L901'>AddBackPropAccumulatedValue</a>(history_value,value,dead_branch)</tt>	Add the getter for an accumulated value in the grad context.
<tt style='background-color:#E8E8E8;'> python.ops.GradLoopState <a href=' /python/ops/control_flow_ops.py#L948'>GetRealValue</a>(value)</tt>	Get the real value of value.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L998'>_GetWhileContext</a>(op)</tt>	Get the whilecontext to which this op belongs.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowState <a href=' /python/ops/control_flow_ops.py#L1012'>GetGradState</a>(op,before)</tt>	Return the grad state for this op if it's in a forward loop context.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowState <a href=' /python/ops/control_flow_ops.py#L1025'>ProcessUnusedLoopExits</a>(pending_count,to_ops_set)</tt>	Process all the "unused" loop exits.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowState <a href=' /python/ops/control_flow_ops.py#L1063'>EnterGradWhileContext</a>(op,before)</tt>	Enter the whilecontext for gradient computation.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowState <a href=' /python/ops/control_flow_ops.py#L1069'>ExitGradWhileContext</a>(op,before)</tt>	Exit the whilecontext for gradient computation.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowState <a href=' /python/ops/control_flow_ops.py#L1075'>AddWhileContext</a>(op,between_op_list,between_ops)</tt>	Add the grad state for the while loop that op belongs to.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowState <a href=' /python/ops/control_flow_ops.py#L1102'>ZerosLikeForExit</a>(val)</tt>	Create zeros_like gradient for a loop exit.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowState <a href=' /python/ops/control_flow_ops.py#L1157'>ZerosLike</a>(op,index)</tt>	Create zeros_like for the specified output of an op.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowState <a href=' /python/ops/control_flow_ops.py#L1218'>PostProcessing</a>()</tt>	Perform postprocessing at the end of gradients().
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L1259'>MaybeCreateControlFlowState</a>(between_op_list,between_ops,colocate_gradients_with_ops)</tt>	Create the state for all the while loops involved in one gradients().
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L1282'>IsSwitch</a>(op)</tt>	Return true if op is a switch.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L1287'>IsLoopExit</a>(op)</tt>	Return true if op is an exit.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L1292'>IsLoopSwitch</a>(op)</tt>	Return true if op is the switch for a while loop.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L1300'>ZerosLikeOutsideLoop</a>(op,index)</tt>	Create zeros_like for the specified output of an op.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowContext <a href=' /python/ops/control_flow_ops.py#L1348'>_init_values_from_proto</a>(values_def,import_scope)</tt>	Initializes values and external_values from valuesdef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowContext <a href=' /python/ops/control_flow_ops.py#L1370'>outer_context</a>()</tt>	Return the context containing this context.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowContext <a href=' /python/ops/control_flow_ops.py#L1383'>_to_proto</a>(export_scope)</tt>	Converts the values to a valuesdef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowContext <a href=' /python/ops/control_flow_ops.py#L1401'>_from_proto</a>(values_def,import_scope)</tt>	Returns a controlflowcontext created from values_def.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowContext <a href=' /python/ops/control_flow_ops.py#L1411'>Enter</a>()</tt>	Enter this control flow context.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowContext <a href=' /python/ops/control_flow_ops.py#L1417'>Exit</a>()</tt>	Exit this control flow context.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowContext <a href=' /python/ops/control_flow_ops.py#L1423'>ExitResult</a>(result)</tt>	Make a list of tensors available in the outer context.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowContext <a href=' /python/ops/control_flow_ops.py#L1428'>GetWhileContext</a>()</tt>	Return the while context containing this context.
<tt style='background-color:#E8E8E8;'> python.ops.ControlFlowContext <a href=' /python/ops/control_flow_ops.py#L1443'>_RemoveExternalControlEdges</a>(op)</tt>	Remove any external control dependency on this op.
<tt style='background-color:#E8E8E8;'> python.ops.CondContext <a href=' /python/ops/control_flow_ops.py#L1466'>__init__</a>(pred,pivot,branch,name)</tt>	Creates a condcontext.
<tt style='background-color:#E8E8E8;'> python.ops.CondContext <a href=' /python/ops/control_flow_ops.py#L1495'>_init_from_proto</a>(context_def,import_scope)</tt>	Creates a new condcontext from protocol buffer.
<tt style='background-color:#E8E8E8;'> python.ops.CondContext <a href=' /python/ops/control_flow_ops.py#L1546'>to_proto</a>(export_scope)</tt>	Converts a condcontext to a condcontextdef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.ops.CondContext <a href=' /python/ops/control_flow_ops.py#L1572'>from_proto</a>(context_def,import_scope)</tt>	Returns a condcontext object created from context_def.
<tt style='background-color:#E8E8E8;'> python.ops.CondContext <a href=' /python/ops/control_flow_ops.py#L1578'>AddValue</a>(val)</tt>	Add val to the current context and its outer context recursively.
<tt style='background-color:#E8E8E8;'> python.ops.CondContext <a href=' /python/ops/control_flow_ops.py#L1605'>_AddOpInternal</a>(op)</tt>	Add op to the current context.
<tt style='background-color:#E8E8E8;'> python.ops.CondContext <a href=' /python/ops/control_flow_ops.py#L1628'>_ProcessOutputTensor</a>(val)</tt>	Process an output tensor of a conditional branch.
<tt style='background-color:#E8E8E8;'> python.ops.CondContext <a href=' /python/ops/control_flow_ops.py#L1664'>BuildCondBranch</a>(fn)</tt>	Add the subgraph defined by fn() to the graph.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L1684'>cond</a>(pred,true_fn,false_fn,strict)</tt>	Return true_fn() if the predicate pred is true else false_fn().
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L1856'>_resource_safe_shape</a>(t)</tt>	Returns the shape of t or the variable it points to.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L1871'>__init__</a>(parallel_iterations,back_prop,swap_memory,name)</tt>	"creates a whilecontext.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L1896'>_init_from_args</a>(parallel_iterations,back_prop,swap_memory,name)</tt>	Creates a new whilecontext from arguments.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L1926'>_init_from_proto</a>(context_def,import_scope)</tt>	Creates a new whilecontext from protocol buffer.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L1961'>parallel_iterations</a>()</tt>	The number of iterations allowed to run in parallel.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L1966'>back_prop</a>()</tt>	True iff backprop is enabled for this while loop.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L1971'>swap_memory</a>()</tt>	True iff gpu-cpu memory swap is enabled for this while loop.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L1976'>pivot</a>()</tt>	The boolean tensor representing the loop termination condition.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L1981'>loop_exits</a>()</tt>	The list of exit tensors for loop variables.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L1986'>grad_state</a>()</tt>	The gradient loop state.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L1991'>to_proto</a>(export_scope)</tt>	Converts a whilecontext to a whilecontextdef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L2026'>from_proto</a>(context_def,import_scope)</tt>	Returns a whilecontext object created from context_def.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L2048'>AddValue</a>(val)</tt>	Add val to the current context and its outer context recursively.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L2091'>AddOp</a>(op)</tt>	Add op to the current context.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L2111'>_AddOpInternal</a>(op)</tt>	Add op to the current context.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L2147'>_MaybeAddControlDependency</a>(op)</tt>	Add a control input to the op if it only depends on loop invariants.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L2161'>AddForwardLoopCounter</a>(outer_grad_state)</tt>	Adds a loop that counts the number of iterations.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L2205'>AddBackPropLoopCounter</a>(count,outer_grad_state)</tt>	Add the backprop loop that controls the iterations.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L2257'>AddBackPropAccumulator</a>(op,grad)</tt>	Add an accumulation loop for every loop invariant.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L2331'>AddBackPropIndexedSlicesAccumulator</a>(op,grad)</tt>	This is used for accumulating gradients that are indexedslices.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L2411'>_InitializeValues</a>(values)</tt>	Makes the values known to this context.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L2429'>_BuildLoop</a>(pred,body,original_loop_vars,loop_vars)</tt>	Core add the loop termination condition and body to the graph.
<tt style='background-color:#E8E8E8;'> python.ops.WhileContext <a href=' /python/ops/control_flow_ops.py#L2522'>BuildLoop</a>(pred,body,loop_vars,shape_invariants)</tt>	Add the loop termination condition and body to the graph.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L2573'>while_loop</a>(cond,body,loop_vars,shape_invariants)</tt>	Repeat body while the condition cond is true.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L2709'>_AsTensorList</a>(x,p)</tt>	Return x as a list of tensors or indexedslices.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L2748'>with_dependencies</a>(dependencies,output_tensor,name)</tt>	Produces the content of output_tensor only after dependencies.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L2794'>group</a>()</tt>	Create an op that groups multiple operations.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L2849'>tuple</a>(tensors,name,control_inputs)</tt>	Group tensors together.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/control_flow_ops.py#L2905'>case</a>(pred_fn_pairs,default,exclusive,strict)</tt>	Create a case operation.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/summary_ops.py#L38'>tensor_summary</a>(name,tensor,summary_description,collections)</tt>	Outputs a summary protocol buffer with a serialized tensor proto.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L117'>expand_dims</a>(input,axis,name,dim)</tt>	Inserts a dimension of 1 into a tensor's shape.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L193'>broadcast_dynamic_shape</a>(shape_x,shape_y)</tt>	Returns the broadcasted dynamic shape between shape_x and shape_y.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L207'>broadcast_static_shape</a>(shape_x,shape_y)</tt>	Returns the broadcasted static shape between shape_x and shape_y.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L223'>shape</a>(input,name,out_type)</tt>	Returns the shape of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L248'>shape_internal</a>(input,name,optimize,out_type)</tt>	Returns the shape of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L275'>size</a>(input,name,out_type)</tt>	Returns the size of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L301'>size_internal</a>(input,name,optimize,out_type)</tt>	Returns the size of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L328'>rank</a>(input,name)</tt>	Returns the rank of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L360'>rank_internal</a>(input,name,optimize)</tt>	Returns the rank of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L384'>_SliceHelper</a>(tensor,slice_spec,var)</tt>	Overload for tensor __getitem__.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L504'>slice</a>(input_,begin,size,name)</tt>	Extracts a slice from a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L552'>strided_slice</a>(input_,begin,end,strides)</tt>	Extracts a strided slice of a tensor generalized python array indexing.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L694'>_SliceHelperVar</a>(var,slice_spec)</tt>	Creates a slice helper object given a variable.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L741'>parallel_stack</a>(values,name)</tt>	Stacks a list of rank-r tensors into one rank- r+1 tensor in parallel.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L787'>stack</a>(values,axis,name)</tt>	Stacks a list of rank-r tensors into one rank- r+1 tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L844'>_autopacking_helper</a>(list_or_tuple,dtype,name)</tt>	Converts the given list or tuple to a tensor by packing.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L889'>_get_dtype_from_nested_lists</a>(list_or_tuple)</tt>	Returns the dtype of any tensor-like object in list_or_tuple, if found.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L910'>_autopacking_conversion_function</a>(v,dtype,name,as_ref)</tt>	Tensor conversion function that automatically packs arguments.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L931'>unstack</a>(value,num,axis,name)</tt>	Unpacks the given dimension of a rank-r tensor into rank- r-1 tensors.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L980'>concat</a>(values,axis,name)</tt>	Concatenates tensors along one dimension.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1053'>boolean_mask</a>(tensor,mask,name)</tt>	Apply boolean mask to tensor numpy equivalent is tensor[mask].
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1122'>sparse_mask</a>(a,mask_indices,name)</tt>	Masks elements of indexedslices.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1165'>split</a>(value,num_or_size_splits,axis,num)</tt>	Splits a tensor into sub tensors.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1230'>transpose</a>(a,perm,name)</tt>	Transposes a permutes the dimensions according to perm.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1291'>matrix_transpose</a>(a,name)</tt>	Transposes last two dimensions of tensor a.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1354'>zeros</a>(shape,dtype,name)</tt>	Creates a tensor with all elements set to zero.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1392'>zeros_like</a>(tensor,dtype,name,optimize)</tt>	Creates a tensor with all elements set to zero.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1432'>ones_like</a>(tensor,dtype,name,optimize)</tt>	Creates a tensor with all elements set to 1.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1468'>ones</a>(shape,dtype,name)</tt>	Creates a tensor with all elements set to 1.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1501'>placeholder</a>(dtype,shape,name)</tt>	Inserts a placeholder for a tensor that will be always fed.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1535'>_normalize_sparse_shape</a>(shape,name)</tt>	Takes numpy array or tensor or none and returns either none or tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1545'>sparse_placeholder</a>(dtype,shape,name)</tt>	Inserts a placeholder for a sparse tensor that will be always fed.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1599'>pad</a>(tensor,paddings,mode,name)</tt>	Pads a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1669'>meshgrid</a>()</tt>	Broadcasts parameters for evaluation on an n-d grid.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1749'>_compute_size_of_strided_dim</a>(shrink,spec,size)</tt>	Computes the size of a single strided slice dimension.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1789'>_TileGradShape</a>(op)</tt>	Shape function for the tilegrad op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1807'>edit_distance</a>(hypothesis,truth,normalize,name)</tt>	Computes the levenshtein distance between sequences.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1885'>_FakeQuantWithMinMaxArgsGradient</a>(op,grad)</tt>	Gradient for fakequantwithminmaxargs op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1892'>_FakeQuantWithMinMaxVarsGradient</a>(op,grad)</tt>	Gradient for fakequantwithminmaxvars op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1899'>_FakeQuantWithMinMaxVarsPerChannelGradient</a>(op,grad)</tt>	Gradient for fakequantwithminmaxvarsperchannel op.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L1907'>required_space_to_batch_paddings</a>(input_shape,block_shape,base_paddings,name)</tt>	Calculate padding required to make block_shape divide input_shape.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L2014'>one_hot</a>(indices,depth,on_value,off_value)</tt>	Returns a one-hot tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L2182'>sequence_mask</a>(lengths,maxlen,dtype,name)</tt>	Return a mask tensor representing the first n positions of each row.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L2237'>squeeze</a>(input,axis,name,squeeze_dims)</tt>	Removes dimensions of size 1 from the shape of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/array_ops.py#L2285'>where</a>(condition,x,y,name)</tt>	Return the elements either from x or y, depending on the condition.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/rnn.py#L40'>_transpose_batch_time</a>(x)</tt>	Transpose the batch and time dimensions of a tensor.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/rnn.py#L70'>_infer_state_dtype</a>(explicit_dtype,state)</tt>	Infer the dtype of an rnn state.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/rnn.py#L100'>_on_device</a>(fn,device)</tt>	Build the subgraph defined by lambda fn on device if it's not none.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/rnn.py#L110'>_rnn_step</a>(time,sequence_length,min_sequence_length,max_sequence_length)</tt>	Calculate one step of a dynamic rnn minibatch.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/rnn.py#L239'>_reverse_seq</a>(input_seq,lengths)</tt>	Reverse a list of tensors up to specified lengths.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/rnn.py#L285'>bidirectional_dynamic_rnn</a>(cell_fw,cell_bw,inputs,sequence_length)</tt>	Creates a dynamic version of bidirectional recurrent neural network.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/rnn.py#L416'>dynamic_rnn</a>(cell,inputs,sequence_length,initial_state)</tt>	Creates a recurrent neural network specified by rnncell cell.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/rnn.py#L591'>_dynamic_rnn_loop</a>(cell,inputs,initial_state,parallel_iterations)</tt>	Internal implementation of dynamic rnn.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/rnn.py#L759'>raw_rnn</a>(cell,loop_fn,parallel_iterations,swap_memory)</tt>	Creates an rnn specified by rnncell cell and loop function loop_fn.
<tt style='background-color:#E8E8E8;'> python.ops. <a href=' /python/ops/histogram_ops.py#L34'>histogram_fixed_width</a>(values,value_range,nbins,dtype)</tt>	Return histogram of values.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/util.py#L35'>add_loss</a>(loss,loss_collection)</tt>	Adds a externally defined loss to the collection of losses.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/util.py#L46'>get_losses</a>(scope,loss_collection)</tt>	Gets the list of losses from the loss_collection.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/util.py#L59'>get_regularization_losses</a>(scope)</tt>	Gets the list of regularization losses.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/util.py#L71'>get_regularization_loss</a>(scope,name)</tt>	Gets the total regularization loss.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/util.py#L88'>get_total_loss</a>(add_regularization_losses,name)</tt>	Returns a tensor whose value represents the total loss.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L62'>_safe_div</a>(numerator,denominator,name)</tt>	Computes a safe divide which returns 0 if the denominator is zero.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L87'>_safe_mean</a>(losses,num_present)</tt>	Computes a safe mean of the losses.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L102'>_num_present</a>(losses,weights,per_batch)</tt>	Computes the number of elements in the loss function induced by weights.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L138'>compute_weighted_loss</a>(losses,weights,scope,loss_collection)</tt>	Computes the weighted loss.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L187'>absolute_difference</a>(labels,predictions,weights,scope)</tt>	Adds an absolute difference loss to the training procedure.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L229'>cosine_distance</a>(labels,predictions,dim,weights)</tt>	Adds a cosine-distance loss to the training procedure.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L271'>hinge_loss</a>(labels,logits,weights,scope)</tt>	Adds a hinge loss to the training procedure.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L307'>huber_loss</a>(labels,predictions,weights,delta)</tt>	Adds a huber loss term to the training procedure.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L370'>log_loss</a>(labels,predictions,weights,epsilon)</tt>	Adds a log loss term to the training procedure.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L416'>mean_pairwise_squared_error</a>(labels,predictions,weights,scope)</tt>	Adds a pairwise-errors-squared loss to the training procedure.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L497'>mean_squared_error</a>(labels,predictions,weights,scope)</tt>	Adds a sum-of-squares loss to the training procedure.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L539'>sigmoid_cross_entropy</a>(multi_class_labels,logits,weights,label_smoothing)</tt>	Creates a cross-entropy loss using tf nn sigmoid_cross_entropy_with_logits.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L596'>softmax_cross_entropy</a>(onehot_labels,logits,weights,label_smoothing)</tt>	Creates a cross-entropy loss using tf nn softmax_cross_entropy_with_logits.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L652'>_remove_squeezable_dimensions</a>(labels,predictions,weights,expected_rank_diff)</tt>	Internal version of _remove_squeezable_dimensions which handles weights.
<tt style='background-color:#E8E8E8;'> python.ops.losses. <a href=' /python/ops/losses/losses_impl.py#L702'>sparse_softmax_cross_entropy</a>(labels,logits,weights,scope)</tt>	Cross-entropy loss using tf nn sparse_softmax_cross_entropy_with_logits.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Normal <a href=' /python/ops/distributions/normal.py#L104'>__init__</a>(loc,scale,validate_args,allow_nan_stats)</tt>	Construct normal distributions with mean and stddev loc and scale.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Normal <a href=' /python/ops/distributions/normal.py#L154'>loc</a>()</tt>	Distribution parameter for the mean.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Normal <a href=' /python/ops/distributions/normal.py#L159'>scale</a>()</tt>	Distribution parameter for standard deviation.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Normal <a href=' /python/ops/distributions/normal.py#L227'>_z</a>(x)</tt>	Standardize input x to a unit normal.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Normal <a href=' /python/ops/distributions/normal.py#L232'>_inv_z</a>(z)</tt>	Reconstruct input x from a its normalized version.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/normal.py#L258'>_kl_normal_normal</a>(n_a,n_b,name)</tt>	Calculate the batched kl divergence kl(n_a || n_b) with n_a and n_b normal.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/special_math.py#L55'>ndtr</a>(x,name)</tt>	Normal distribution function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/special_math.py#L90'>_ndtr</a>(x)</tt>	Implements ndtr core logic.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/special_math.py#L104'>ndtri</a>(p,name)</tt>	The inverse of the cdf of the normal distribution function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/special_math.py#L133'>_ndtri</a>(p)</tt>	Implements ndtri core logic.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/special_math.py#L235'>log_ndtr</a>(x,series_order,name)</tt>	Log normal distribution function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/special_math.py#L326'>_log_ndtr_lower</a>(x,series_order)</tt>	Asymptotic expansion version of log[cdf x ], apppropriate for x<<-1.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/special_math.py#L334'>_log_ndtr_asymptotic_series</a>(x,series_order)</tt>	Calculates the asymptotic series used in log_ndtr.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/special_math.py#L351'>_double_factorial</a>(n)</tt>	The double factorial function for small python integer n.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/special_math.py#L356'>log_cdf_laplace</a>(x,name)</tt>	Log laplace distribution function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.DirichletMultinomial <a href=' /python/ops/distributions/dirichlet_multinomial.py#L145'>__init__</a>(total_count,concentration,validate_args,allow_nan_stats)</tt>	Initialize a batch of dirichletmultinomial distributions.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.DirichletMultinomial <a href=' /python/ops/distributions/dirichlet_multinomial.py#L201'>total_count</a>()</tt>	Number of trials used to construct a sample.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.DirichletMultinomial <a href=' /python/ops/distributions/dirichlet_multinomial.py#L206'>concentration</a>()</tt>	Concentration parameter expected prior counts for that coordinate.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.DirichletMultinomial <a href=' /python/ops/distributions/dirichlet_multinomial.py#L211'>total_concentration</a>()</tt>	Sum of last dim of concentration parameter.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.DirichletMultinomial <a href=' /python/ops/distributions/dirichlet_multinomial.py#L294'>_variance_scale_term</a>()</tt>	Helper to _covariance and _variance which computes a shared scale.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.DirichletMultinomial <a href=' /python/ops/distributions/dirichlet_multinomial.py#L301'>_maybe_assert_valid_concentration</a>(concentration,validate_args)</tt>	Checks the validity of the concentration parameter.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.DirichletMultinomial <a href=' /python/ops/distributions/dirichlet_multinomial.py#L329'>_maybe_assert_valid_sample</a>(counts)</tt>	Check counts for proper shape values then return tensor version.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Dirichlet <a href=' /python/ops/distributions/dirichlet.py#L131'>__init__</a>(concentration,validate_args,allow_nan_stats,name)</tt>	Initialize a batch of dirichlet distributions.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Dirichlet <a href=' /python/ops/distributions/dirichlet.py#L171'>concentration</a>()</tt>	Concentration parameter expected counts for that coordinate.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Dirichlet <a href=' /python/ops/distributions/dirichlet.py#L176'>total_concentration</a>()</tt>	Sum of last dim of concentration parameter.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Dirichlet <a href=' /python/ops/distributions/dirichlet.py#L241'>_variance_scale_term</a>()</tt>	Helper to _covariance and _variance which computes a shared scale.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Dirichlet <a href=' /python/ops/distributions/dirichlet.py#L269'>_maybe_assert_valid_concentration</a>(concentration,validate_args)</tt>	Checks the validity of the concentration parameter.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Dirichlet <a href=' /python/ops/distributions/dirichlet.py#L285'>_maybe_assert_valid_sample</a>(x)</tt>	Checks the validity of a sample.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/bijector_test_util.py#L48'>assert_scalar_congruency</a>(bijector,lower_x,upper_x,n)</tt>	Assert bijector's forward/inverse/inverse_log_det_jacobian are congruent.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/bijector_test_util.py#L161'>assert_bijective_and_finite</a>(bijector,x,y,atol)</tt>	Assert that forward/inverse along with jacobians are inverses and finite.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.StudentT <a href=' /python/ops/distributions/student_t.py#L122'>__init__</a>(df,loc,scale,validate_args)</tt>	Construct student's t distributions.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.StudentT <a href=' /python/ops/distributions/student_t.py#L183'>df</a>()</tt>	Degrees of freedom in these student's t distribution s.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.StudentT <a href=' /python/ops/distributions/student_t.py#L188'>loc</a>()</tt>	Locations of these student's t distribution s.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.StudentT <a href=' /python/ops/distributions/student_t.py#L193'>scale</a>()</tt>	Scaling factors of these student's t distribution s.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/util.py#L38'>assert_close</a>(x,y,data,summarize)</tt>	Assert that that x and y are within machine epsilon of each other.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/util.py#L76'>assert_integer_form</a>(x,data,summarize,message)</tt>	Assert that x has integer components or floats equal to integers.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/util.py#L106'>embed_check_nonnegative_discrete</a>(x,check_integer)</tt>	Assert x is a non-negative tensor and optionally of integers.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/util.py#L116'>same_dynamic_shape</a>(a,b)</tt>	Returns whether a and b have the same dynamic shape.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/util.py#L145'>get_logits_and_probs</a>(logits,probs,multidimensional,validate_args)</tt>	Converts logit to probabilities or vice-versa and returns both.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/util.py#L242'>matrix_diag_transform</a>(matrix,transform,name)</tt>	Transform diagonal of [batch-]matrix leave rest of matrix unchanged.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/util.py#L303'>rotate_transpose</a>(x,shift,name)</tt>	Circularly moves dims left or right.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/util.py#L377'>pick_vector</a>(cond,true_vector,false_vector,name)</tt>	Picks possibly different length row tensors based on condition.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/util.py#L433'>gen_new_seed</a>(seed,salt)</tt>	Generate a new seed from the given seed and salt.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/util.py#L441'>fill_lower_triangular</a>(x,validate_args,name)</tt>	Creates a batch of lower triangular matrix from a vector of inputs.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/util.py#L569'>softplus_inverse</a>(x,name)</tt>	Computes the inverse softplus i e x = softplus_inverse(softplus x.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/util.py#L624'>dimension_size</a>(x,axis)</tt>	Returns the size of a specific dimension.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.AppendDocstring <a href=' /python/ops/distributions/util.py#L656'>__init__</a>(additional_note,kwargs_dict)</tt>	Initializes the appenddocstring object.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Laplace <a href=' /python/ops/distributions/laplace.py#L72'>__init__</a>(loc,scale,validate_args,allow_nan_stats)</tt>	Construct laplace distribution with parameters loc and scale.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Laplace <a href=' /python/ops/distributions/laplace.py#L123'>loc</a>()</tt>	Distribution parameter for the location.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Laplace <a href=' /python/ops/distributions/laplace.py#L128'>scale</a>()</tt>	Distribution parameter for scale.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/kullback_leibler.py#L31'>_registered_kl</a>(type_a,type_b)</tt>	Get the kl function registered for classes a and b.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/kullback_leibler.py#L47'>kl_divergence</a>(distribution_a,distribution_b,allow_nan_stats,name)</tt>	Get the kl-divergence kl(distribution_a || distribution_b).
<tt style='background-color:#E8E8E8;'> python.ops.distributions.RegisterKL <a href=' /python/ops/distributions/kullback_leibler.py#L117'>__init__</a>(dist_cls_a,dist_cls_b)</tt>	Initialize the kl registrar.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.RegisterKL <a href=' /python/ops/distributions/kullback_leibler.py#L126'>__call__</a>(kl_fn)</tt>	Perform the kl registration.
<tt style='background-color:#E8E8E8;'> python.ops.distributions._Mapping <a href=' /python/ops/distributions/bijector_impl.py#L46'>__new__</a>(cls,x,y,ildj)</tt>	Custom __new__ so namedtuple items have defaults.
<tt style='background-color:#E8E8E8;'> python.ops.distributions._Mapping <a href=' /python/ops/distributions/bijector_impl.py#L61'>x_key</a>()</tt>	Returns key used for caching y=g x.
<tt style='background-color:#E8E8E8;'> python.ops.distributions._Mapping <a href=' /python/ops/distributions/bijector_impl.py#L66'>y_key</a>()</tt>	Returns key used for caching x=g^{-1} y.
<tt style='background-color:#E8E8E8;'> python.ops.distributions._Mapping <a href=' /python/ops/distributions/bijector_impl.py#L71'>merge</a>(x,y,ildj,kwargs)</tt>	Returns new _mapping with args merged with self.
<tt style='background-color:#E8E8E8;'> python.ops.distributions._Mapping <a href=' /python/ops/distributions/bijector_impl.py#L99'>_merge</a>(old,new)</tt>	Helper to merge which handles merging one value.
<tt style='background-color:#E8E8E8;'> python.ops.distributions._Mapping <a href=' /python/ops/distributions/bijector_impl.py#L107'>_deep_tuple</a>(x)</tt>	Converts lists of lists to tuples of tuples.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L382'>event_ndims</a>()</tt>	Returns then number of event dimensions this bijector operates on.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L387'>graph_parents</a>()</tt>	Returns this bijector's graph_parents as a python list.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L392'>is_constant_jacobian</a>()</tt>	Returns true iff the jacobian is not a function of x.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L403'>validate_args</a>()</tt>	Returns true if tensor arguments will be validated.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L408'>dtype</a>()</tt>	Dtype of tensors transformable by this distribution.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L413'>name</a>()</tt>	Returns the string name of this bijector.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L418'>_forward_event_shape_tensor</a>(input_shape)</tt>	Subclass implementation for forward_event_shape_tensor function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L423'>forward_event_shape_tensor</a>(input_shape,name)</tt>	Shape of a single sample from a single batch as an int32 1d tensor.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L447'>forward_event_shape</a>(input_shape)</tt>	Shape of a single sample from a single batch as a tensorshape.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L462'>_inverse_event_shape_tensor</a>(output_shape)</tt>	Subclass implementation for inverse_event_shape_tensor function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L467'>inverse_event_shape_tensor</a>(output_shape,name)</tt>	Shape of a single sample from a single batch as an int32 1d tensor.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L491'>inverse_event_shape</a>(output_shape)</tt>	Shape of a single sample from a single batch as a tensorshape.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L506'>_forward</a>(x)</tt>	Subclass implementation for forward public function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L521'>forward</a>(x,name)</tt>	Returns the forward bijector evaluation i e x = g y.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L538'>_inverse</a>(y)</tt>	Subclass implementation for inverse public function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L553'>inverse</a>(y,name)</tt>	Returns the inverse bijector evaluation i e x = g^{-1} y.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L570'>_inverse_log_det_jacobian</a>(y)</tt>	Subclass implementation of inverse_log_det_jacobian public function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L598'>inverse_log_det_jacobian</a>(y,name)</tt>	Returns the log o det o jacobian o inverse y.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L619'>_forward_log_det_jacobian</a>(x)</tt>	Subclass implementation of forward_log_det_jacobian.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L649'>forward_log_det_jacobian</a>(x,name)</tt>	Returns both the forward_log_det_jacobian.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L667'>_name_scope</a>(name,values)</tt>	Helper function to standardize op scope.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L675'>_maybe_assert_dtype</a>(x)</tt>	Helper to check dtype when self dtype is known.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L681'>_cache</a>(mapping)</tt>	Helper which stores mapping info in forward/inverse dicts.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L696'>_lookup</a>(x,y,kwargs)</tt>	Helper which retrieves mapping info from forward/inverse dicts.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bijector <a href=' /python/ops/distributions/bijector_impl.py#L707'>_event_dims_tensor</a>(sample)</tt>	Return a 1d int32 tensor range(rank sample )[-event_ndims ].
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Gamma <a href=' /python/ops/distributions/gamma.py#L98'>__init__</a>(concentration,rate,validate_args,allow_nan_stats)</tt>	Construct gamma with concentration and rate parameters.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/gamma.py#L280'>_kl_gamma_gamma</a>(g0,g1,name)</tt>	Calculate the batched kl divergence kl(g0 || g1) with g0 and g1 gamma.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/distribution.py#L51'>_copy_fn</a>(fn)</tt>	Create a deep copy of fn.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/distribution.py#L83'>_update_docstring</a>(old_str,append_str)</tt>	Update old_str by inserting append_str just before the "args " section.
<tt style='background-color:#E8E8E8;'> python.ops.distributions._DistributionMeta <a href=' /python/ops/distributions/distribution.py#L107'>__new__</a>(mcs,classname,baseclasses,attrs)</tt>	Control the creation of subclasses of the distribution class.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.ReparameterizationType <a href=' /python/ops/distributions/distribution.py#L199'>__eq__</a>(other)</tt>	Determine if this reparameterizationtype is equal to another.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L343'>__init__</a>(dtype,reparameterization_type,validate_args,allow_nan_stats)</tt>	Constructs the distribution.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L393'>param_shapes</a>(cls,sample_shape,name)</tt>	Shapes of parameters given the desired shape of a call to sample().
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L414'>param_static_shapes</a>(cls,sample_shape)</tt>	Param_shapes with static (i e tensorshape) shapes.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L457'>name</a>()</tt>	Name prepended to all ops created by this distribution.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L462'>dtype</a>()</tt>	The dtype of tensors handled by this distribution.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L467'>parameters</a>()</tt>	Dictionary of parameters used to instantiate this distribution.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L475'>reparameterization_type</a>()</tt>	Describes how samples from the distribution are reparameterized.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L488'>allow_nan_stats</a>()</tt>	Python bool describing behavior when a stat is undefined.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L505'>validate_args</a>()</tt>	Python bool indicating possibly expensive checks are enabled.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L510'>copy</a>()</tt>	Creates a deep copy of the distribution.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L531'>batch_shape_tensor</a>(name)</tt>	Shape of a single sample from a single event index as a 1-d tensor.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L553'>batch_shape</a>()</tt>	Shape of a single sample from a single event index as a tensorshape.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L570'>event_shape_tensor</a>(name)</tt>	Shape of a single sample from a single batch as a 1-d int32 tensor.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L589'>event_shape</a>()</tt>	Shape of a single sample from a single batch as a tensorshape.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L600'>is_scalar_event</a>(name)</tt>	Indicates that event_shape == [].
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L614'>is_scalar_batch</a>(name)</tt>	Indicates that batch_shape == [].
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L644'>sample</a>(sample_shape,seed,name)</tt>	Generate samples of the specified shape.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L674'>log_prob</a>(value,name)</tt>	Log probability density/mass function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L701'>prob</a>(value,name)</tt>	Probability density/mass function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L728'>log_cdf</a>(value,name)</tt>	Log cumulative distribution function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L765'>cdf</a>(value,name)</tt>	Cumulative distribution function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L798'>log_survival_function</a>(value,name)</tt>	Log survival function.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L860'>entropy</a>(name)</tt>	Shannon entropy in nats.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L884'>quantile</a>(value,name)</tt>	Quantile function aka "inverse cdf" or "percent point function".
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L1016'>_name_scope</a>(name,values)</tt>	Helper function to standardize op scope.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L1024'>_expand_sample_shape_to_vector</a>(x,name)</tt>	Helper to sample which ensures input is 1d.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L1053'>_set_sample_static_shape</a>(x,sample_shape)</tt>	Helper to sample; sets static shape info.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Distribution <a href=' /python/ops/distributions/distribution.py#L1097'>_is_scalar_helper</a>(static_shape,dynamic_shape_fn)</tt>	Implementation for is_scalar_batch and is_scalar_event.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bernoulli <a href=' /python/ops/distributions/bernoulli.py#L42'>__init__</a>(logits,probs,dtype,validate_args)</tt>	Construct bernoulli distributions.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bernoulli <a href=' /python/ops/distributions/bernoulli.py#L94'>logits</a>()</tt>	Log-odds of a 1 outcome (vs 0).
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bernoulli <a href=' /python/ops/distributions/bernoulli.py#L99'>probs</a>()</tt>	Probability of a 1 outcome (vs 0).
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Bernoulli <a href=' /python/ops/distributions/bernoulli.py#L161'>_mode</a>()</tt>	Returns 1 if prob > 0 5 and 0 otherwise.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/bernoulli.py#L197'>_kl_bernoulli_bernoulli</a>(a,b,name)</tt>	Calculate the batched kl divergence kl(a || b) with a and b bernoulli.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Beta <a href=' /python/ops/distributions/beta.py#L125'>__init__</a>(concentration1,concentration0,validate_args,allow_nan_stats)</tt>	Initialize a batch of beta distributions.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Beta <a href=' /python/ops/distributions/beta.py#L179'>concentration1</a>()</tt>	Concentration parameter associated with a 1 outcome.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Beta <a href=' /python/ops/distributions/beta.py#L184'>concentration0</a>()</tt>	Concentration parameter associated with a 0 outcome.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Beta <a href=' /python/ops/distributions/beta.py#L189'>total_concentration</a>()</tt>	Sum of concentration parameters.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Beta <a href=' /python/ops/distributions/beta.py#L290'>_maybe_assert_valid_concentration</a>(concentration,validate_args)</tt>	Checks the validity of a concentration parameter.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Beta <a href=' /python/ops/distributions/beta.py#L300'>_maybe_assert_valid_sample</a>(x)</tt>	Checks the validity of a sample.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/beta.py#L337'>_kl_beta_beta</a>(d1,d2,name)</tt>	Calculate the batchwise kl divergence kl(d1 || d2) with d1 and d2 beta.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Categorical <a href=' /python/ops/distributions/categorical.py#L78'>__init__</a>(logits,probs,dtype,validate_args)</tt>	Initialize categorical distributions using class log-probabilities.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Categorical <a href=' /python/ops/distributions/categorical.py#L157'>event_size</a>()</tt>	Scalar int32 tensor the number of classes.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Categorical <a href=' /python/ops/distributions/categorical.py#L162'>logits</a>()</tt>	Vector of coordinatewise logits.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Categorical <a href=' /python/ops/distributions/categorical.py#L167'>probs</a>()</tt>	Vector of coordinatewise probabilities.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/categorical.py#L223'>_kl_categorical_categorical</a>(a,b,name)</tt>	Calculate the batched kl divergence kl(a || b) with a and b categorical.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/transformed_distribution.py#L47'>_static_value</a>(x)</tt>	Returns the static value of a tensor or none.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/transformed_distribution.py#L52'>_logical_and</a>()</tt>	Convenience function which attempts to statically reduce_all.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/transformed_distribution.py#L64'>_logical_equal</a>(x,y)</tt>	Convenience function which attempts to statically compute x == y.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/transformed_distribution.py#L73'>_logical_not</a>(x)</tt>	Convenience function which attempts to statically apply logical_not.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/transformed_distribution.py#L81'>_concat_vectors</a>()</tt>	Convenience function which concatenates input vectors.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/transformed_distribution.py#L89'>_pick_scalar_condition</a>(pred,cond_true,cond_false)</tt>	Convenience function which chooses the condition based on the predicate.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/transformed_distribution.py#L100'>_ones_like</a>(x)</tt>	Convenience function attempts to statically construct ones_like.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/transformed_distribution.py#L108'>_ndims_from_shape</a>(shape)</tt>	Returns tensor's rank implied by a tensor shape.
<tt style='background-color:#E8E8E8;'> python.ops.distributions. <a href=' /python/ops/distributions/transformed_distribution.py#L119'>_is_scalar_from_shape</a>(shape)</tt>	Returns true tensor if tensor shape implies a scalar.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.TransformedDistribution <a href=' /python/ops/distributions/transformed_distribution.py#L234'>__init__</a>(distribution,bijector,batch_shape,event_shape)</tt>	Construct a transformed distribution.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.TransformedDistribution <a href=' /python/ops/distributions/transformed_distribution.py#L324'>distribution</a>()</tt>	Base distribution p x.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.TransformedDistribution <a href=' /python/ops/distributions/transformed_distribution.py#L329'>bijector</a>()</tt>	Function transforming x => y.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.TransformedDistribution <a href=' /python/ops/distributions/transformed_distribution.py#L472'>_maybe_validate_shape_override</a>(override_shape,base_is_scalar,validate_args,name)</tt>	Helper to __init__ which ensures override batch/event_shape are valid.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.TransformedDistribution <a href=' /python/ops/distributions/transformed_distribution.py#L521'>_maybe_rotate_dims</a>(x,rotate_right)</tt>	Helper which rolls left event_dims left or right event_dims right.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Exponential <a href=' /python/ops/distributions/exponential.py#L71'>__init__</a>(rate,validate_args,allow_nan_stats,name)</tt>	Construct exponential distribution with parameter rate.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Uniform <a href=' /python/ops/distributions/uniform.py#L76'>__init__</a>(low,high,validate_args,allow_nan_stats)</tt>	Initialize a batch of uniform distributions.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Uniform <a href=' /python/ops/distributions/uniform.py#L127'>low</a>()</tt>	Lower boundary of the output interval.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Uniform <a href=' /python/ops/distributions/uniform.py#L132'>high</a>()</tt>	Upper boundary of the output interval.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Uniform <a href=' /python/ops/distributions/uniform.py#L137'>range</a>(name)</tt>	High - low.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Multinomial <a href=' /python/ops/distributions/multinomial.py#L127'>__init__</a>(total_count,logits,probs,validate_args)</tt>	Initialize a batch of multinomial distributions.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Multinomial <a href=' /python/ops/distributions/multinomial.py#L184'>total_count</a>()</tt>	Number of trials used to construct a sample.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Multinomial <a href=' /python/ops/distributions/multinomial.py#L189'>logits</a>()</tt>	Vector of coordinatewise logits.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Multinomial <a href=' /python/ops/distributions/multinomial.py#L194'>probs</a>()</tt>	Probability of of drawing a 1 in that coordinate.
<tt style='background-color:#E8E8E8;'> python.ops.distributions.Multinomial <a href=' /python/ops/distributions/multinomial.py#L280'>_maybe_assert_valid_sample</a>(counts)</tt>	Check counts for proper shape values then return tensor version.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIO <a href=' /python/lib/io/file_io.py#L59'>name</a>()</tt>	Returns the file name.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIO <a href=' /python/lib/io/file_io.py#L64'>mode</a>()</tt>	Returns the mode in which the file was opened.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIO <a href=' /python/lib/io/file_io.py#L93'>size</a>()</tt>	Returns the size of the file.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIO <a href=' /python/lib/io/file_io.py#L97'>write</a>(file_content)</tt>	Writes file_content to the file appends to the end of the file.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIO <a href=' /python/lib/io/file_io.py#L104'>read</a>(n)</tt>	Returns the contents of a file as a string.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIO <a href=' /python/lib/io/file_io.py#L125'>seek</a>(offset,whence,position)</tt>	Seeks to the offset in the file.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIO <a href=' /python/lib/io/file_io.py#L172'>readline</a>()</tt>	Reads the next line from the file leaves the '\n' at the end.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIO <a href=' /python/lib/io/file_io.py#L177'>readlines</a>()</tt>	Returns all lines from the file in a list.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIO <a href=' /python/lib/io/file_io.py#L188'>tell</a>()</tt>	Returns the current position in the file.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIO <a href=' /python/lib/io/file_io.py#L193'>__enter__</a>()</tt>	Make usable with "with" statement.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIO <a href=' /python/lib/io/file_io.py#L197'>__exit__</a>(unused_type,unused_value,unused_traceback)</tt>	Make usable with "with" statement.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIO <a href=' /python/lib/io/file_io.py#L213'>flush</a>()</tt>	Flushes the writable file.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIO <a href=' /python/lib/io/file_io.py#L225'>close</a>()</tt>	Closes fileio should be called for the writablefile to be flushed.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L235'>file_exists</a>(filename)</tt>	Determines whether a path exists or not.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L256'>delete_file</a>(filename)</tt>	Deletes the file located at 'filename'.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L270'>read_file_to_string</a>(filename,binary_mode)</tt>	Reads the entire contents of a file to a string.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L292'>write_string_to_file</a>(filename,file_content)</tt>	Writes a string to a given file.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L306'>get_matching_files</a>(filename)</tt>	Returns a list of files that match the given pattern.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L326'>create_dir</a>(dirname)</tt>	Creates a directory with the name 'dirname'.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L343'>recursive_create_dir</a>(dirname)</tt>	Creates a directory and all parent/intermediate directories.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L358'>copy</a>(oldpath,newpath,overwrite)</tt>	Copies data from oldpath to newpath.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L375'>rename</a>(oldname,newname,overwrite)</tt>	Rename or move a file / directory.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L392'>atomic_write_string_to_file</a>(filename,contents)</tt>	Writes to filename atomically.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L410'>delete_recursively</a>(dirname)</tt>	Deletes everything under dirname recursively.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L423'>is_directory</a>(dirname)</tt>	Returns whether the path is a directory or not.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L439'>list_directory</a>(dirname)</tt>	Returns a list of entries contained within a directory.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L466'>walk</a>(top,in_order)</tt>	Recursive directory tree generator for directories.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/file_io.py#L509'>stat</a>(filename)</tt>	Returns file statistics for a given path.
<tt style='background-color:#E8E8E8;'> python.lib.io. <a href=' /python/lib/io/tf_record.py#L54'>tf_record_iterator</a>(path,options)</tt>	An iterator that read the records from a tfrecords file.
<tt style='background-color:#E8E8E8;'> python.lib.io.TFRecordWriter <a href=' /python/lib/io/tf_record.py#L92'>__init__</a>(path,options)</tt>	Opens file path and creates a tfrecordwriter writing to it.
<tt style='background-color:#E8E8E8;'> python.lib.io.TFRecordWriter <a href=' /python/lib/io/tf_record.py#L108'>__enter__</a>()</tt>	Enter a with block.
<tt style='background-color:#E8E8E8;'> python.lib.io.TFRecordWriter <a href=' /python/lib/io/tf_record.py#L112'>__exit__</a>(unused_type,unused_value,unused_traceback)</tt>	Exit a with block closing the file.
<tt style='background-color:#E8E8E8;'> python.lib.io.TFRecordWriter <a href=' /python/lib/io/tf_record.py#L116'>write</a>(record)</tt>	Write a string record to the file.
<tt style='background-color:#E8E8E8;'> python.lib.io.TFRecordWriter <a href=' /python/lib/io/tf_record.py#L124'>close</a>()</tt>	Close the file.
<tt style='background-color:#E8E8E8;'> python.lib.io.FileIoTest <a href=' /python/lib/io/file_io_test.py#L448'>testEof</a>()</tt>	Test that reading past eof does not raise an exception.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/server_lib.py#L28'>_make_server_def</a>(server_or_cluster_def,job_name,task_index,protocol)</tt>	Creates a tf train serverdef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.training.Server <a href=' /python/training/server_lib.py#L106'>__init__</a>(server_or_cluster_def,job_name,task_index,protocol)</tt>	Creates a new server with the given definition.
<tt style='background-color:#E8E8E8;'> python.training.Server <a href=' /python/training/server_lib.py#L149'>start</a>()</tt>	Starts this server.
<tt style='background-color:#E8E8E8;'> python.training.Server <a href=' /python/training/server_lib.py#L159'>join</a>()</tt>	Blocks until the server has shut down.
<tt style='background-color:#E8E8E8;'> python.training.Server <a href=' /python/training/server_lib.py#L171'>server_def</a>()</tt>	Returns the tf train serverdef for this server.
<tt style='background-color:#E8E8E8;'> python.training.Server <a href=' /python/training/server_lib.py#L181'>target</a>()</tt>	Returns the target for a tf session to connect to this server.
<tt style='background-color:#E8E8E8;'> python.training.Server <a href=' /python/training/server_lib.py#L200'>create_local_server</a>(config,start)</tt>	Creates a new single-process cluster running on the local host.
<tt style='background-color:#E8E8E8;'> python.training.ClusterSpec <a href=' /python/training/server_lib.py#L255'>__init__</a>(cluster)</tt>	Creates a clusterspec.
<tt style='background-color:#E8E8E8;'> python.training.ClusterSpec <a href=' /python/training/server_lib.py#L310'>as_dict</a>()</tt>	Returns a dictionary from job names to their tasks.
<tt style='background-color:#E8E8E8;'> python.training.ClusterSpec <a href=' /python/training/server_lib.py#L334'>as_cluster_def</a>()</tt>	Returns a tf train clusterdef protocol buffer based on this cluster.
<tt style='background-color:#E8E8E8;'> python.training.ClusterSpec <a href=' /python/training/server_lib.py#L338'>jobs</a>()</tt>	Returns a list of job names in this cluster.
<tt style='background-color:#E8E8E8;'> python.training.ClusterSpec <a href=' /python/training/server_lib.py#L347'>num_tasks</a>(job_name)</tt>	Returns the number of tasks defined in the given job.
<tt style='background-color:#E8E8E8;'> python.training.ClusterSpec <a href=' /python/training/server_lib.py#L365'>task_indices</a>(job_name)</tt>	Returns a list of valid task indices in the given job.
<tt style='background-color:#E8E8E8;'> python.training.ClusterSpec <a href=' /python/training/server_lib.py#L384'>task_address</a>(job_name,task_index)</tt>	Returns the address of the given task in the given job.
<tt style='background-color:#E8E8E8;'> python.training.ClusterSpec <a href=' /python/training/server_lib.py#L408'>job_tasks</a>(job_name)</tt>	Returns a mapping from task id to address in the given job.
<tt style='background-color:#E8E8E8;'> python.training.ClusterSpec <a href=' /python/training/server_lib.py#L437'>_make_cluster_def</a>()</tt>	Creates a tf train clusterdef based on the given cluster_spec.
<tt style='background-color:#E8E8E8;'> python.training.ProximalGradientDescentOptimizer <a href=' /python/training/proximal_gradient_descent.py#L36'>__init__</a>(learning_rate,l1_regularization_strength,l2_regularization_strength,use_locking)</tt>	Construct a new proximal gradient descent optimizer.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/tensorboard_logging.py#L92'>set_summary_writer</a>(summary_writer)</tt>	Sets the summary writer that events will be logged to.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/tensorboard_logging.py#L107'>_clear_summary_writer</a>()</tt>	Makes all subsequent log invocations error.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/tensorboard_logging.py#L117'>log</a>(level,message)</tt>	Conditionally logs message % args at the level level.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/saver.py#L65'>_set_cpu0</a>(device_string)</tt>	Creates a new device string based on device_string but using /cpu 0.
<tt style='background-color:#E8E8E8;'> python.training.BaseSaverBuilder <a href=' /python/training/saver.py#L183'>save_op</a>(filename_tensor,saveables)</tt>	Create an op to save 'saveables'.
<tt style='background-color:#E8E8E8;'> python.training.BaseSaverBuilder <a href=' /python/training/saver.py#L224'>restore_op</a>(filename_tensor,saveable,preferred_shard)</tt>	Create ops to restore 'saveable'.
<tt style='background-color:#E8E8E8;'> python.training.BaseSaverBuilder <a href=' /python/training/saver.py#L252'>sharded_filename</a>(filename_tensor,shard,num_shards)</tt>	Append sharding information to a filename.
<tt style='background-color:#E8E8E8;'> python.training.BaseSaverBuilder <a href=' /python/training/saver.py#L266'>_AddSaveOps</a>(filename_tensor,saveables)</tt>	Add ops to save variables that are on the same shard.
<tt style='background-color:#E8E8E8;'> python.training.BaseSaverBuilder <a href=' /python/training/saver.py#L279'>_AddShardedSaveOpsForV2</a>(checkpoint_prefix,per_device)</tt>	Add ops to save the params per shard for the v2 format.
<tt style='background-color:#E8E8E8;'> python.training.BaseSaverBuilder <a href=' /python/training/saver.py#L349'>_AddShardedSaveOps</a>(filename_tensor,per_device)</tt>	Add ops to save the params per shard.
<tt style='background-color:#E8E8E8;'> python.training.BaseSaverBuilder <a href=' /python/training/saver.py#L376'>_AddRestoreOps</a>(filename_tensor,saveables,restore_sequentially,reshape)</tt>	Add operations to restore saveables.
<tt style='background-color:#E8E8E8;'> python.training.BaseSaverBuilder <a href=' /python/training/saver.py#L424'>_AddShardedRestoreOps</a>(filename_tensor,per_device,restore_sequentially,reshape)</tt>	Add ops to restore variables from multiple devices.
<tt style='background-color:#E8E8E8;'> python.training.BaseSaverBuilder <a href=' /python/training/saver.py#L457'>_GroupByDevices</a>(saveables)</tt>	Group variable tensor slices per device.
<tt style='background-color:#E8E8E8;'> python.training.BaseSaverBuilder <a href=' /python/training/saver.py#L484'>OpListToDict</a>(op_list)</tt>	Create a dictionary of names to operation lists.
<tt style='background-color:#E8E8E8;'> python.training.BaseSaverBuilder <a href=' /python/training/saver.py#L540'>_ValidateAndSliceInputs</a>(names_to_saveables)</tt>	Returns the variables and names that will be used for a saver.
<tt style='background-color:#E8E8E8;'> python.training.BaseSaverBuilder <a href=' /python/training/saver.py#L611'>_AddSaveable</a>(saveables,seen_ops,saveable)</tt>	Adds the saveable to the saveables list.
<tt style='background-color:#E8E8E8;'> python.training.BaseSaverBuilder <a href=' /python/training/saver.py#L629'>build</a>(names_to_saveables,reshape,sharded,max_to_keep)</tt>	Adds save/restore nodes to the graph and creates a saverdef proto.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/saver.py#L715'>_get_saver_or_default</a>()</tt>	Returns the saver from savers collection or creates a default one.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/saver.py#L742'>_GetCheckpointFilename</a>(save_dir,latest_filename)</tt>	Returns a filename for storing the checkpointstate.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/saver.py#L758'>generate_checkpoint_state_proto</a>(save_dir,model_checkpoint_path,all_model_checkpoint_paths)</tt>	Generates a checkpoint state proto.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/saver.py#L833'>_update_checkpoint_state</a>(save_dir,model_checkpoint_path,all_model_checkpoint_paths,latest_filename)</tt>	Updates the content of the 'checkpoint' file.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/saver.py#L894'>get_checkpoint_state</a>(checkpoint_dir,latest_filename)</tt>	Returns checkpointstate proto from the "checkpoint" file.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1025'>__init__</a>(var_list,reshape,sharded,max_to_keep)</tt>	Creates a saver.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1199'>_CheckpointFilename</a>(p)</tt>	Returns the checkpoint filename given a filename time pair.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1211'>_MetaGraphFilename</a>(checkpoint_filename,meta_graph_suffix)</tt>	Returns the meta graph filename.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1228'>_MaybeDeleteOldCheckpoints</a>(latest_save_path,meta_graph_suffix)</tt>	Deletes old checkpoints if necessary.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1282'>as_saver_def</a>()</tt>	Generates a saverdef representation of this saver.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1290'>to_proto</a>(export_scope)</tt>	Converts this saver to a saverdef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1317'>from_proto</a>(saver_def,import_scope)</tt>	Returns a saver object created from saver_def.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1330'>last_checkpoints</a>()</tt>	List of not-yet-deleted checkpoint filenames.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1341'>set_last_checkpoints</a>(last_checkpoints)</tt>	Deprecated use set_last_checkpoints_with_time.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1358'>set_last_checkpoints_with_time</a>(last_checkpoints_with_time)</tt>	Sets the list of old checkpoint filenames and timestamps.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1371'>recover_last_checkpoints</a>(checkpoint_paths)</tt>	Recovers the internal saver state after a crash.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1498'>export_meta_graph</a>(filename,collection_list,as_text,export_scope)</tt>	Writes metagraphdef to save_path/filename.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1526'>restore</a>(sess,save_path)</tt>	Restores previously saved variables.
<tt style='background-color:#E8E8E8;'> python.training.Saver <a href=' /python/training/saver.py#L1547'>_add_collection_def</a>(meta_graph_def,key,export_scope)</tt>	Adds a collection to metagraphdef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/saver.py#L1560'>_prefix_to_checkpoint_path</a>(prefix,format_version)</tt>	Returns the pathname of a checkpoint file given the checkpoint prefix.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/saver.py#L1579'>latest_checkpoint</a>(checkpoint_dir,latest_filename)</tt>	Finds the filename of latest saved checkpoint file.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/saver.py#L1608'>import_meta_graph</a>(meta_graph_or_file,clear_devices,import_scope)</tt>	Recreates a graph saved in a metagraphdef proto.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/saver.py#L1697'>export_meta_graph</a>(filename,meta_info_def,graph_def,saver_def)</tt>	Returns metagraphdef proto optionally writes it to filename.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/saver.py#L1751'>checkpoint_exists</a>(checkpoint_prefix)</tt>	Checks whether a v1 or v2 checkpoint exists with the specified prefix.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/saver.py#L1775'>get_checkpoint_mtimes</a>(checkpoint_prefixes)</tt>	Returns the mtimes modification timestamps of the checkpoints.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/training_util.py#L36'>global_step</a>(sess,global_step_tensor)</tt>	Small helper to get the global step.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/training_util.py#L61'>get_global_step</a>(graph)</tt>	Get the global step tensor.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/training_util.py#L95'>create_global_step</a>(graph)</tt>	Create global step tensor in graph.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/training_util.py#L122'>get_or_create_global_step</a>(graph)</tt>	Returns and create if necessary the global step tensor.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/training_util.py#L139'>assert_global_step</a>(global_step_tensor)</tt>	Asserts global_step_tensor is a scalar int variable or tensor.
<tt style='background-color:#E8E8E8;'> python.training.SessionRunHook <a href=' /python/training/session_run_hook.py#L99'>begin</a>()</tt>	Called once before using the session.
<tt style='background-color:#E8E8E8;'> python.training.SessionRunHook <a href=' /python/training/session_run_hook.py#L110'>after_create_session</a>(session,coord)</tt>	Called when new tensorflow session is created.
<tt style='background-color:#E8E8E8;'> python.training.SessionRunHook <a href=' /python/training/session_run_hook.py#L127'>before_run</a>(run_context)</tt>	Called before each call to run().
<tt style='background-color:#E8E8E8;'> python.training.SessionRunHook <a href=' /python/training/session_run_hook.py#L150'>after_run</a>(run_context,run_values)</tt>	Called after each call to run().
<tt style='background-color:#E8E8E8;'> python.training.SessionRunHook <a href=' /python/training/session_run_hook.py#L169'>end</a>(session)</tt>	Called at the end of session.
<tt style='background-color:#E8E8E8;'> python.training.SessionRunContext <a href=' /python/training/session_run_hook.py#L226'>original_args</a>()</tt>	A sessionrunargs object holding the original arguments of run().
<tt style='background-color:#E8E8E8;'> python.training.SessionRunContext <a href=' /python/training/session_run_hook.py#L238'>session</a>()</tt>	A tensorflow session object which will execute the run.
<tt style='background-color:#E8E8E8;'> python.training.SessionRunContext <a href=' /python/training/session_run_hook.py#L243'>stop_requested</a>()</tt>	Returns whether a stop is requested or not.
<tt style='background-color:#E8E8E8;'> python.training.SessionRunContext <a href=' /python/training/session_run_hook.py#L253'>request_stop</a>()</tt>	Sets stop requested field.
<tt style='background-color:#E8E8E8;'> python.training.SyncReplicasOptimizer <a href=' /python/training/sync_replicas_optimizer.py#L136'>__init__</a>(opt,replicas_to_aggregate,total_num_replicas,variable_averages)</tt>	Construct a sync_replicas optimizer.
<tt style='background-color:#E8E8E8;'> python.training.SyncReplicasOptimizer <a href=' /python/training/sync_replicas_optimizer.py#L191'>compute_gradients</a>()</tt>	Compute gradients of "loss" for the variables in "var_list".
<tt style='background-color:#E8E8E8;'> python.training.SyncReplicasOptimizer <a href=' /python/training/sync_replicas_optimizer.py#L209'>apply_gradients</a>(grads_and_vars,global_step,name)</tt>	Apply gradients to variables.
<tt style='background-color:#E8E8E8;'> python.training.SyncReplicasOptimizer <a href=' /python/training/sync_replicas_optimizer.py#L338'>get_chief_queue_runner</a>()</tt>	Returns the queuerunner for the chief to execute.
<tt style='background-color:#E8E8E8;'> python.training.SyncReplicasOptimizer <a href=' /python/training/sync_replicas_optimizer.py#L358'>get_slot</a>()</tt>	Return a slot named "name" created for "var" by the optimizer.
<tt style='background-color:#E8E8E8;'> python.training.SyncReplicasOptimizer <a href=' /python/training/sync_replicas_optimizer.py#L372'>get_slot_names</a>()</tt>	Return a list of the names of slots created by the optimizer.
<tt style='background-color:#E8E8E8;'> python.training.SyncReplicasOptimizer <a href=' /python/training/sync_replicas_optimizer.py#L386'>get_init_tokens_op</a>(num_tokens)</tt>	Returns the op to fill the sync_token_queue with the tokens.
<tt style='background-color:#E8E8E8;'> python.training.SyncReplicasOptimizer <a href=' /python/training/sync_replicas_optimizer.py#L427'>make_session_run_hook</a>(is_chief,num_tokens)</tt>	Creates a hook to handle syncreplicashook ops such as initialization.
<tt style='background-color:#E8E8E8;'> python.training._SyncReplicasOptimizerHook <a href=' /python/training/sync_replicas_optimizer.py#L435'>__init__</a>(sync_optimizer,is_chief,num_tokens)</tt>	Creates hook to handle syncreplicaoptimizer initialization ops.
<tt style='background-color:#E8E8E8;'> python.training._SyncReplicasOptimizerHook <a href=' /python/training/sync_replicas_optimizer.py#L466'>after_create_session</a>(session,coord)</tt>	Runs syncreplicasoptimizer initialization ops.
<tt style='background-color:#E8E8E8;'> python.training.AdagradDAOptimizer <a href=' /python/training/adagrad_da.py#L43'>__init__</a>(learning_rate,global_step,initial_gradient_squared_accumulator_value,l1_regularization_strength)</tt>	Construct a new adagradda optimizer.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/moving_averages.py#L32'>assign_moving_average</a>(variable,value,decay,zero_debias)</tt>	Compute the moving average of a variable.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/moving_averages.py#L76'>weighted_moving_average</a>(value,decay,weight,truediv)</tt>	Compute the weighted moving average of value.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/moving_averages.py#L140'>_zero_debias</a>(unbiased_var,value,decay)</tt>	Compute the delta required for a debiased variable.
<tt style='background-color:#E8E8E8;'> python.training.ExponentialMovingAverage <a href=' /python/training/moving_averages.py#L287'>__init__</a>(decay,num_updates,zero_debias,name)</tt>	Creates a new exponentialmovingaverage object.
<tt style='background-color:#E8E8E8;'> python.training.ExponentialMovingAverage <a href=' /python/training/moving_averages.py#L316'>apply</a>(var_list)</tt>	Maintains moving averages of variables.
<tt style='background-color:#E8E8E8;'> python.training.ExponentialMovingAverage <a href=' /python/training/moving_averages.py#L395'>average</a>(var)</tt>	Returns the variable holding the average of var.
<tt style='background-color:#E8E8E8;'> python.training.ExponentialMovingAverage <a href=' /python/training/moving_averages.py#L407'>average_name</a>(var)</tt>	Returns the name of the variable holding the average for var.
<tt style='background-color:#E8E8E8;'> python.training.ExponentialMovingAverage <a href=' /python/training/moving_averages.py#L434'>variables_to_restore</a>(moving_avg_variables)</tt>	Returns a map of names to variables to restore.
<tt style='background-color:#E8E8E8;'> python.training.FtrlOptimizer <a href=' /python/training/ftrl.py#L34'>__init__</a>(learning_rate,learning_rate_power,initial_accumulator_value,l1_regularization_strength)</tt>	Construct a new ftrl optimizer.
<tt style='background-color:#E8E8E8;'> python.training._RoundRobinStrategy <a href=' /python/training/device_setter.py#L35'>__init__</a>(num_tasks)</tt>	Create a new _roundrobinstrategy.
<tt style='background-color:#E8E8E8;'> python.training._RoundRobinStrategy <a href=' /python/training/device_setter.py#L44'>__call__</a>(unused_op)</tt>	Choose a ps task index for the given operation.
<tt style='background-color:#E8E8E8;'> python.training._ReplicaDeviceChooser <a href=' /python/training/device_setter.py#L66'>__init__</a>(ps_tasks,ps_device,worker_device,merge_devices)</tt>	Create a new _replicadevicechooser.
<tt style='background-color:#E8E8E8;'> python.training._ReplicaDeviceChooser <a href=' /python/training/device_setter.py#L88'>device_function</a>(op)</tt>	Choose a device for op.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/device_setter.py#L124'>replica_device_setter</a>(ps_tasks,ps_device,worker_device,merge_devices)</tt>	Return a device function to use when building a graph for replicas.
<tt style='background-color:#E8E8E8;'> python.training.SaverTest <a href=' /python/training/saver_test.py#L172'>testSaveCopyRestoreWithSaveRelativePaths</a>()</tt>	Save copy checkpoint dir and restore from copied dir.
<tt style='background-color:#E8E8E8;'> python.training.QueueRunner <a href=' /python/training/queue_runner_impl.py#L47'>__init__</a>(queue,enqueue_ops,close_op,cancel_op)</tt>	Create a queuerunner.
<tt style='background-color:#E8E8E8;'> python.training.QueueRunner <a href=' /python/training/queue_runner_impl.py#L100'>_init_from_args</a>(queue,enqueue_ops,close_op,cancel_op)</tt>	Create a queuerunner from arguments.
<tt style='background-color:#E8E8E8;'> python.training.QueueRunner <a href=' /python/training/queue_runner_impl.py#L148'>_init_from_proto</a>(queue_runner_def,import_scope)</tt>	Create a queuerunner from queuerunnerdef.
<tt style='background-color:#E8E8E8;'> python.training.QueueRunner <a href=' /python/training/queue_runner_impl.py#L194'>exceptions_raised</a>()</tt>	Exceptions raised but not handled by the queuerunner threads.
<tt style='background-color:#E8E8E8;'> python.training.QueueRunner <a href=' /python/training/queue_runner_impl.py#L213'>name</a>()</tt>	The string name of the underlying queue.
<tt style='background-color:#E8E8E8;'> python.training.QueueRunner <a href=' /python/training/queue_runner_impl.py#L219'>_run</a>(sess,enqueue_op,coord)</tt>	Execute the enqueue op in a loop close the queue in case of error.
<tt style='background-color:#E8E8E8;'> python.training.QueueRunner <a href=' /python/training/queue_runner_impl.py#L265'>_close_on_stop</a>(sess,cancel_op,coord)</tt>	Close the queue when the coordinator requests stop.
<tt style='background-color:#E8E8E8;'> python.training.QueueRunner <a href=' /python/training/queue_runner_impl.py#L281'>create_threads</a>(sess,coord,daemon,start)</tt>	Create threads to run the enqueue ops for the given session.
<tt style='background-color:#E8E8E8;'> python.training.QueueRunner <a href=' /python/training/queue_runner_impl.py#L332'>to_proto</a>(export_scope)</tt>	Converts this queuerunner to a queuerunnerdef protocol buffer.
<tt style='background-color:#E8E8E8;'> python.training.QueueRunner <a href=' /python/training/queue_runner_impl.py#L361'>from_proto</a>(queue_runner_def,import_scope)</tt>	Returns a queuerunner object created from queue_runner_def.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/queue_runner_impl.py#L368'>add_queue_runner</a>(qr,collection)</tt>	Adds a queuerunner to a collection in the graph.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/queue_runner_impl.py#L386'>start_queue_runners</a>(sess,coord,daemon,start)</tt>	Starts all queue runners collected in the graph.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/checkpoint_utils.py#L37'>load_checkpoint</a>(ckpt_dir_or_file)</tt>	Returns checkpointreader for checkpoint found in ckpt_dir_or_file.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/checkpoint_utils.py#L61'>load_variable</a>(ckpt_dir_or_file,name)</tt>	Returns the tensor value of the given variable in the checkpoint.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/checkpoint_utils.py#L78'>list_variables</a>(ckpt_dir_or_file)</tt>	Returns list of all variables in the checkpoint.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/checkpoint_utils.py#L96'>init_from_checkpoint</a>(ckpt_dir_or_file,assignment_map)</tt>	Initializes current variables with tensors loaded from given checkpoint.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/checkpoint_utils.py#L258'>_get_checkpoint_filename</a>(ckpt_dir_or_file)</tt>	Returns checkpoint filename given directory or specific checkpoint file.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/checkpoint_utils.py#L265'>_set_checkpoint_initializer</a>(variable,ckpt_file,tensor_name,slice_spec)</tt>	Overrides given variable's initialization op.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/checkpoint_utils.py#L288'>_set_variable_or_list_initializer</a>(variable_or_list,ckpt_file,tensor_name)</tt>	Overrides initialization op of given variable or list of variables.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/checkpoint_utils.py#L319'>_collect_partitioned_variable</a>(name,all_vars)</tt>	Returns list of tf variable that comprise the partitioned variable.
<tt style='background-color:#E8E8E8;'> python.training.SummaryWriter <a href=' /python/training/summary_io.py#L31'>__init__</a>(logdir,graph,max_queue,flush_secs)</tt>	Creates a summarywriter and an event file.
<tt style='background-color:#E8E8E8;'> python.training.EvaluateOnceTest <a href=' /python/training/evaluation_test.py#L75'>_train_model</a>(checkpoint_dir,num_steps)</tt>	Trains a simple classification model.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/localhost_cluster_performance_test.py#L37'>create_local_cluster</a>(num_workers,num_ps,protocol)</tt>	Create local grpc servers and return their servers.
<tt style='background-color:#E8E8E8;'> python.training.SyncReplicasOptimizerHookTest <a href=' /python/training/sync_replicas_optimizer_test.py#L293'>testCanCreatedBeforeMinimizeCalled</a>()</tt>	This behavior is required to be integrated with estimators.
<tt style='background-color:#E8E8E8;'> python.training.EventLoggingTest <a href=' /python/training/tensorboard_logging_test.py#L109'>testNoSummaryWriter</a>()</tt>	Test that logging without a summarywriter succeeds.
<tt style='background-color:#E8E8E8;'> python.training.MomentumOptimizer <a href=' /python/training/momentum.py#L41'>__init__</a>(learning_rate,momentum,use_locking,name)</tt>	Construct a new momentum optimizer.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/slot_creator.py#L50'>_is_resource</a>(v)</tt>	Returns true if v is something you get from a resource variable.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/slot_creator.py#L55'>_create_slot_var</a>(primary,val,scope,validate_shape)</tt>	Helper function for creating a slot variable.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/slot_creator.py#L89'>create_slot</a>(primary,val,name,colocate_with_primary)</tt>	Create a slot initialized to the given value.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/slot_creator.py#L118'>create_slot_with_initializer</a>(primary,initializer,shape,dtype)</tt>	Creates a slot initialized using an initializer.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/slot_creator.py#L152'>create_zeros_slot</a>(primary,name,dtype,colocate_with_primary)</tt>	Create a slot initialized to 0 with same shape as the primary object.
<tt style='background-color:#E8E8E8;'> python.training.GrpcServerTest <a href=' /python/training/server_lib_test.py#L106'>_useRPCConfig</a>()</tt>	Return a tf configproto that ensures we use the rpc stack for tests.
<tt style='background-color:#E8E8E8;'> python.training.AdamOptimizer <a href=' /python/training/adam.py#L38'>__init__</a>(learning_rate,beta1,beta2,epsilon)</tt>	Construct a new adam optimizer.
<tt style='background-color:#E8E8E8;'> python.training.GradientDescentOptimizer <a href=' /python/training/gradient_descent.py#L32'>__init__</a>(learning_rate,use_locking,name)</tt>	Construct a new gradient descent optimizer.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/monitored_session_test.py#L151'>_test_dir</a>(temp_dir,test_name)</tt>	Create an empty dir to use for tests.
<tt style='background-color:#E8E8E8;'> python.training.MonitoredSessionTest <a href=' /python/training/monitored_session_test.py#L1096'>test_merge_run_options_from_hooks</a>()</tt>	Test for rewriting runoptions and observing runmetadata with hooks.
<tt style='background-color:#E8E8E8;'> python.training.MonitoredSessionTest <a href=' /python/training/monitored_session_test.py#L1138'>test_merge_caller_and_hook_run_options</a>()</tt>	Test that runoptions from caller and hooks can be merged properly.
<tt style='background-color:#E8E8E8;'> python.training.SecondOrStepTimer <a href=' /python/training/basic_session_run_hooks.py#L65'>should_trigger_for_step</a>(step)</tt>	Return true if the timer should trigger for the specified step.
<tt style='background-color:#E8E8E8;'> python.training.SecondOrStepTimer <a href=' /python/training/basic_session_run_hooks.py#L92'>update_last_triggered_step</a>(step)</tt>	Update the last triggered time and step number.
<tt style='background-color:#E8E8E8;'> python.training.LoggingTensorHook <a href=' /python/training/basic_session_run_hooks.py#L126'>__init__</a>(tensors,every_n_iter,every_n_secs,formatter)</tt>	Initializes a loggingtensorhook.
<tt style='background-color:#E8E8E8;'> python.training.StopAtStepHook <a href=' /python/training/basic_session_run_hooks.py#L195'>__init__</a>(num_steps,last_step)</tt>	Initializes a stopatstephook.
<tt style='background-color:#E8E8E8;'> python.training.CheckpointSaverHook <a href=' /python/training/basic_session_run_hooks.py#L298'>__init__</a>(checkpoint_dir,save_secs,save_steps,saver)</tt>	Initializes a checkpointsaverhook.
<tt style='background-color:#E8E8E8;'> python.training.CheckpointSaverHook <a href=' /python/training/basic_session_run_hooks.py#L377'>_save</a>(step,session)</tt>	Saves the latest checkpoint.
<tt style='background-color:#E8E8E8;'> python.training.NanTensorHook <a href=' /python/training/basic_session_run_hooks.py#L459'>__init__</a>(loss_tensor,fail_on_nan_loss)</tt>	Initializes a nantensorhook.
<tt style='background-color:#E8E8E8;'> python.training.SummarySaverHook <a href=' /python/training/basic_session_run_hooks.py#L487'>__init__</a>(save_steps,save_secs,output_dir,summary_writer)</tt>	Initializes a summarysaverhook.
<tt style='background-color:#E8E8E8;'> python.training.SummarySaverHook <a href=' /python/training/basic_session_run_hooks.py#L569'>_get_summary_op</a>()</tt>	Fetches the summary op either from self _summary_op or self _scaffold.
<tt style='background-color:#E8E8E8;'> python.training.GlobalStepWaiterHook <a href=' /python/training/basic_session_run_hooks.py#L598'>__init__</a>(wait_until_step)</tt>	Initializes a globalstepwaiterhook.
<tt style='background-color:#E8E8E8;'> python.training.FinalOpsHook <a href=' /python/training/basic_session_run_hooks.py#L639'>__init__</a>(final_ops,final_ops_feed_dict)</tt>	Initializes finalophook with ops to run at the end of the session.
<tt style='background-color:#E8E8E8;'> python.training.FeedFnHook <a href=' /python/training/basic_session_run_hooks.py#L665'>__init__</a>(feed_fn)</tt>	Initializes a feedfnhook.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/basic_session_run_hooks.py#L679'>_as_graph_element</a>(obj)</tt>	Retrieves graph element.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L200'>__init__</a>(graph,ready_op,ready_for_local_init_op,is_chief)</tt>	Create a supervisor.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L351'>_get_first_op_from_collection</a>(key)</tt>	Returns the first operation from a collection.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L483'>is_chief</a>()</tt>	Return true if this is a chief supervisor.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L492'>session_manager</a>()</tt>	Return the sessionmanager used by the supervisor.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L501'>coord</a>()</tt>	Return the coordinator used by the supervisor.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L513'>init_op</a>()</tt>	Return the init op used by the supervisor.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L522'>init_feed_dict</a>()</tt>	Return the feed dictionary used when evaluating the init_op.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L531'>ready_op</a>()</tt>	Return the ready op used by the supervisor.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L544'>summary_writer</a>()</tt>	Return the summarywriter used by the chief supervisor.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L553'>summary_op</a>()</tt>	Return the summary tensor used by the chief supervisor.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L562'>save_summaries_secs</a>()</tt>	Return the delay between summary computations.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L571'>global_step</a>()</tt>	Return the global_step tensor used by the supervisor.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L580'>saver</a>()</tt>	Return the saver used by the supervisor.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L589'>save_model_secs</a>()</tt>	Return the delay between checkpoints.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L598'>save_path</a>()</tt>	Return the save path used by the supervisor.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L607'>_write_graph</a>()</tt>	Writes graph_def to logdir and adds it to summary if applicable.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L618'>start_standard_services</a>(sess)</tt>	Start the standard services for 'sess'.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L671'>prepare_or_wait_for_session</a>(master,config,wait_for_checkpoint,max_wait_secs)</tt>	Make sure the model is ready to be used.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L722'>start_queue_runners</a>(sess,queue_runners)</tt>	Start threads for queuerunners.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L747'>loop</a>(timer_interval_secs,target,args,kwargs)</tt>	Start a looperthread that calls a function periodically.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L771'>stop</a>(threads,close_summary_writer)</tt>	Stop the services and the coordinator.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L802'>request_stop</a>(ex)</tt>	Request that the coordinator stop the threads.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L814'>should_stop</a>()</tt>	Check if the coordinator was told to stop.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L824'>stop_on_exception</a>()</tt>	Context handler to stop the supervisor when an exception is raised.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L834'>wait_for_stop</a>()</tt>	Block waiting for the coordinator to stop.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L838'>summary_computed</a>(sess,summary,global_step)</tt>	Indicate that a summary was computed.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L857'>_default_global_step_tensor</a>()</tt>	Returns the global_step from the default graph.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L873'>_verify_setup</a>()</tt>	Check that all is good.
<tt style='background-color:#E8E8E8;'> python.training.Supervisor <a href=' /python/training/supervisor.py#L888'>managed_session</a>(master,config,start_standard_services,close_summary_writer)</tt>	Returns a context manager for a managed session.
<tt style='background-color:#E8E8E8;'> python.training.SVSummaryThread <a href=' /python/training/supervisor.py#L980'>__init__</a>(sv,sess)</tt>	Create a svsummarythread.
<tt style='background-color:#E8E8E8;'> python.training.SVStepCounterThread <a href=' /python/training/supervisor.py#L1006'>__init__</a>(sv,sess,step_counter)</tt>	Create a svstepcounterthread.
<tt style='background-color:#E8E8E8;'> python.training.SVTimerCheckpointThread <a href=' /python/training/supervisor.py#L1054'>__init__</a>(sv,sess)</tt>	Create a svtimercheckpointthread.
<tt style='background-color:#E8E8E8;'> python.training.Coordinator <a href=' /python/training/coordinator.py#L128'>__init__</a>(clean_stop_exception_types)</tt>	Create a new coordinator.
<tt style='background-color:#E8E8E8;'> python.training.Coordinator <a href=' /python/training/coordinator.py#L159'>_filter_exception</a>(ex)</tt>	Check if the exception indicated in 'ex' should be ignored.
<tt style='background-color:#E8E8E8;'> python.training.Coordinator <a href=' /python/training/coordinator.py#L185'>request_stop</a>(ex)</tt>	Request that the threads stop.
<tt style='background-color:#E8E8E8;'> python.training.Coordinator <a href=' /python/training/coordinator.py#L244'>clear_stop</a>()</tt>	Clears the stop flag.
<tt style='background-color:#E8E8E8;'> python.training.Coordinator <a href=' /python/training/coordinator.py#L255'>should_stop</a>()</tt>	Check if stop was requested.
<tt style='background-color:#E8E8E8;'> python.training.Coordinator <a href=' /python/training/coordinator.py#L263'>stop_on_exception</a>()</tt>	Context manager to request stop when an exception is raised.
<tt style='background-color:#E8E8E8;'> python.training.Coordinator <a href=' /python/training/coordinator.py#L301'>wait_for_stop</a>(timeout)</tt>	Wait till the coordinator is told to stop.
<tt style='background-color:#E8E8E8;'> python.training.Coordinator <a href=' /python/training/coordinator.py#L313'>register_thread</a>(thread)</tt>	Register a thread to join.
<tt style='background-color:#E8E8E8;'> python.training.Coordinator <a href=' /python/training/coordinator.py#L322'>join</a>(threads,stop_grace_period_secs,ignore_live_threads)</tt>	Wait for threads to terminate.
<tt style='background-color:#E8E8E8;'> python.training.Coordinator <a href=' /python/training/coordinator.py#L403'>raise_requested_exception</a>()</tt>	If an exception has been passed to request_stop, this raises it.
<tt style='background-color:#E8E8E8;'> python.training.LooperThread <a href=' /python/training/coordinator.py#L428'>__init__</a>(coord,timer_interval_secs,target,args)</tt>	Create a looperthread.
<tt style='background-color:#E8E8E8;'> python.training.LooperThread <a href=' /python/training/coordinator.py#L458'>loop</a>(coord,timer_interval_secs,target,args)</tt>	Start a looperthread that calls a function periodically.
<tt style='background-color:#E8E8E8;'> python.training.LooperThread <a href=' /python/training/coordinator.py#L497'>start_loop</a>()</tt>	Called when the thread starts.
<tt style='background-color:#E8E8E8;'> python.training.LooperThread <a href=' /python/training/coordinator.py#L501'>stop_loop</a>()</tt>	Called when the thread stops.
<tt style='background-color:#E8E8E8;'> python.training.LooperThread <a href=' /python/training/coordinator.py#L505'>run_loop</a>()</tt>	Called at 'timer_interval_secs' boundaries.
<tt style='background-color:#E8E8E8;'> python.training.MomentumOptimizerTest <a href=' /python/training/momentum_test.py#L249'>_dbParamsMom01</a>()</tt>	Return dist-belief momentum values.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/evaluation.py#L34'>_get_or_create_eval_step</a>()</tt>	Gets or creates the eval step tensor.
<tt style='background-color:#E8E8E8;'> python.training._StopAfterNEvalsHook <a href=' /python/training/evaluation.py#L64'>__init__</a>(num_evals,log_progress)</tt>	Constructs the run hook.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/evaluation.py#L92'>_evaluate_once</a>(checkpoint_path,master,scaffold,eval_ops)</tt>	Evaluates the model at the given checkpoint path.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/optimizer.py#L38'>_get_variable_for</a>(v)</tt>	Returns the resourcevariable responsible for v or v if not necessary.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/optimizer.py#L49'>_deduplicate_indexed_slices</a>(values,indices)</tt>	Sums values associated with any non-unique indices.
<tt style='background-color:#E8E8E8;'> python.training._OptimizableVariable <a href=' /python/training/optimizer.py#L75'>target</a>()</tt>	Returns the optimization target for this variable.
<tt style='background-color:#E8E8E8;'> python.training._OptimizableVariable <a href=' /python/training/optimizer.py#L80'>update_op</a>(optimizer,g)</tt>	Returns the update ops for updating the variable.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/optimizer.py#L149'>_get_processor</a>(v)</tt>	The processor of v.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L252'>__init__</a>(use_locking,name)</tt>	Create a new optimizer.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L277'>minimize</a>(loss,global_step,var_list,gate_gradients)</tt>	Add operations to minimize loss by updating var_list.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L327'>compute_gradients</a>(loss,var_list,gate_gradients,aggregation_method)</tt>	Compute gradients of loss for the variables in var_list.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L395'>apply_gradients</a>(grads_and_vars,global_step,name)</tt>	Apply gradients to variables.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L470'>get_slot</a>(var,name)</tt>	Return a slot named name created for var by the optimizer.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L492'>get_slot_names</a>()</tt>	Return a list of the names of slots created by the optimizer.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L502'>_assert_valid_dtypes</a>(tensors)</tt>	Asserts tensors are all valid types (see _valid_dtypes).
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L523'>_valid_dtypes</a>()</tt>	Valid types for loss variables and gradients.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L533'>_create_slots</a>(var_list)</tt>	Create all slots needed by the variables.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L542'>_prepare</a>()</tt>	Create all needed tensors before applying gradients.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L550'>_apply_dense</a>(grad,var)</tt>	Add ops to apply dense gradients to var.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L562'>_resource_apply_dense</a>(grad,handle)</tt>	Add ops to apply dense gradients to the variable handle.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L575'>_resource_apply_sparse_duplicate_indices</a>(grad,handle,indices)</tt>	Add ops to apply sparse gradients to handle, with repeated indices.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L600'>_resource_apply_sparse</a>(grad,handle,indices)</tt>	Add ops to apply sparse gradients to the variable handle.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L620'>_apply_sparse_duplicate_indices</a>(grad,var)</tt>	Add ops to apply sparse gradients to var, with repeated sparse indices.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L656'>_apply_sparse</a>(grad,var)</tt>	Add ops to apply sparse gradients to var.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L675'>_finish</a>(update_ops,name_scope)</tt>	Do what is needed to finish the update.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L696'>_slot_dict</a>(slot_name)</tt>	Returns a dict for caching slots created under the given name.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L712'>_get_or_make_slot</a>(var,val,slot_name,op_name)</tt>	Find or create a slot for a variable.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L730'>_get_or_make_slot_with_initializer</a>(var,initializer,shape,dtype)</tt>	Find or create a slot for a variable using an initializer.
<tt style='background-color:#E8E8E8;'> python.training.Optimizer <a href=' /python/training/optimizer.py#L752'>_zeros_slot</a>(var,slot_name,op_name)</tt>	Find or create a slot initialized with 0 0.
<tt style='background-color:#E8E8E8;'> python.training.RMSPropOptimizer <a href=' /python/training/rmsprop.py#L56'>__init__</a>(learning_rate,decay,momentum,epsilon)</tt>	Construct a new rmsprop optimizer.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L55'>match_filenames_once</a>(pattern,name)</tt>	Save the list of files matching pattern so it is only computed once.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L72'>limit_epochs</a>(tensor,num_epochs,name)</tt>	Returns tensor num_epochs times and then raises an outofrange error.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L104'>input_producer</a>(input_tensor,element_shape,num_epochs,shuffle)</tt>	Output the rows of input_tensor to a queue for an input pipeline.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L175'>string_input_producer</a>(string_tensor,num_epochs,shuffle,seed)</tt>	Output strings e g filenames to a queue for an input pipeline.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L239'>range_input_producer</a>(limit,num_epochs,shuffle,seed)</tt>	Produces the integers from 0 to limit-1 in a queue.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L271'>slice_input_producer</a>(tensor_list,num_epochs,shuffle,seed)</tt>	Produces a slice of each tensor in tensor_list.
<tt style='background-color:#E8E8E8;'> python.training._SparseMetaData <a href=' /python/training/input.py#L327'>__init__</a>(sparse,map_op,rank)</tt>	Create the metadata.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L416'>_smart_cond</a>(pred,if_true,if_false)</tt>	A tf cond that does nothing when the condition is static.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L432'>_store_sparse_tensors</a>(tensor_list,enqueue_many,keep_input,shared_map_ops)</tt>	Store sparsetensors for feeding into batch etc.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L528'>_store_sparse_tensors_join</a>(tensor_list_list,enqueue_many,keep_input)</tt>	Store sparsetensors for feeding into batch_join etc.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L548'>_restore_sparse_tensors</a>(stored_list,sparse_info_list)</tt>	Restore sparsetensors after dequeue in batch batch_join etc.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L577'>_validate_keep_input</a>(keep_input,enqueue_many)</tt>	Validate keep_input argument to conditional batching functions.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L613'>_shapes</a>(tensor_list_list,shapes,enqueue_many)</tt>	Calculate and merge the shapes of incoming tensors.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L644'>_select_which_to_enqueue</a>(tensor_list,keep_input)</tt>	Select which examples to enqueue based on vector keep_input.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L653'>_enqueue_join</a>(queue,tensor_list_list,enqueue_many,keep_input)</tt>	Enqueue tensor_list_list in queue.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L670'>_enqueue</a>(queue,tensor_list,threads,enqueue_many)</tt>	Enqueue tensor_list in queue.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L692'>_batch</a>(tensors,batch_size,keep_input,num_threads)</tt>	Helper function for batch and maybe_batch.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L727'>_batch_join</a>(tensors_list,batch_size,keep_input,capacity)</tt>	Helper function for batch_join and maybe_batch_join.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L1126'>shuffle_batch</a>(tensors,batch_size,capacity,min_after_dequeue)</tt>	Creates batches by randomly shuffling tensors.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L1274'>shuffle_batch_join</a>(tensors_list,batch_size,capacity,min_after_dequeue)</tt>	Create batches by randomly shuffling tensors.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L833'>batch</a>(tensors,batch_size,num_threads,capacity)</tt>	Creates batches of tensors in tensors.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L922'>maybe_batch</a>(tensors,keep_input,batch_size,num_threads)</tt>	Conditionally creates batches of tensors based on keep_input.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L974'>batch_join</a>(tensors_list,batch_size,capacity,enqueue_many)</tt>	Runs a list of tensors to fill a queue to create batches of examples.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L1074'>maybe_batch_join</a>(tensors_list,keep_input,batch_size,capacity)</tt>	Runs a list of tensors to conditionally fill a queue to create batches.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L1220'>maybe_shuffle_batch</a>(tensors,batch_size,capacity,min_after_dequeue)</tt>	Creates batches by randomly shuffling conditionally-enqueued tensors.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/input.py#L1362'>maybe_shuffle_batch_join</a>(tensors_list,batch_size,capacity,min_after_dequeue)</tt>	Create batches by randomly shuffling conditionally-enqueued tensors.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/basic_loops.py#L23'>basic_train_loop</a>(supervisor,train_step_fn,args,kwargs)</tt>	Basic loop to train a model.
<tt style='background-color:#E8E8E8;'> python.training.AdagradOptimizer <a href=' /python/training/adagrad.py#L36'>__init__</a>(learning_rate,initial_accumulator_value,use_locking,name)</tt>	Construct a new adagrad optimizer.
<tt style='background-color:#E8E8E8;'> python.training.AdadeltaOptimizer <a href=' /python/training/adadelta.py#L34'>__init__</a>(learning_rate,rho,epsilon,use_locking)</tt>	Construct a new adadelta optimizer.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/learning_rate_decay.py#L27'>exponential_decay</a>(learning_rate,global_step,decay_steps,decay_rate)</tt>	Applies exponential decay to the learning rate.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/learning_rate_decay.py#L99'>piecewise_constant</a>(x,boundaries,values,name)</tt>	Piecewise constant from boundaries and interval values.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/learning_rate_decay.py#L167'>polynomial_decay</a>(learning_rate,global_step,decay_steps,end_learning_rate)</tt>	Applies a polynomial decay to the learning rate.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/learning_rate_decay.py#L266'>natural_exp_decay</a>(learning_rate,global_step,decay_steps,decay_rate)</tt>	Applies natural exponential decay to the initial learning rate.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/learning_rate_decay.py#L333'>inverse_time_decay</a>(learning_rate,global_step,decay_steps,decay_rate)</tt>	Applies inverse time decay to the initial learning rate.
<tt style='background-color:#E8E8E8;'> python.training.Scaffold <a href=' /python/training/monitored_session.py#L97'>__init__</a>(init_op,init_feed_dict,init_fn,ready_op)</tt>	Create a scaffold.
<tt style='background-color:#E8E8E8;'> python.training.Scaffold <a href=' /python/training/monitored_session.py#L145'>finalize</a>()</tt>	Creates operations if needed and finalizes the graph.
<tt style='background-color:#E8E8E8;'> python.training.Scaffold <a href=' /python/training/monitored_session.py#L221'>get_or_default</a>(arg_name,collection_key,default_constructor)</tt>	Get from cache or create a default operation.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/monitored_session.py#L244'>MonitoredTrainingSession</a>(master,is_chief,checkpoint_dir,scaffold)</tt>	Creates a monitoredsession for training.
<tt style='background-color:#E8E8E8;'> python.training.ChiefSessionCreator <a href=' /python/training/monitored_session.py#L346'>__init__</a>(scaffold,master,config,checkpoint_dir)</tt>	Initializes a chief session creator.
<tt style='background-color:#E8E8E8;'> python.training.WorkerSessionCreator <a href=' /python/training/monitored_session.py#L397'>__init__</a>(scaffold,master,config)</tt>	Initializes a worker session creator.
<tt style='background-color:#E8E8E8;'> python.training._MonitoredSession <a href=' /python/training/monitored_session.py#L433'>__init__</a>(session_creator,hooks,should_recover,stop_grace_period_secs)</tt>	Sets up a monitored or hooked session.
<tt style='background-color:#E8E8E8;'> python.training._MonitoredSession <a href=' /python/training/monitored_session.py#L460'>graph</a>()</tt>	The graph that was launched in this session.
<tt style='background-color:#E8E8E8;'> python.training._MonitoredSession <a href=' /python/training/monitored_session.py#L467'>run</a>(fetches,feed_dict,options,run_metadata)</tt>	Run ops in the monitored session.
<tt style='background-color:#E8E8E8;'> python.training._MonitoredSession <a href=' /python/training/monitored_session.py#L543'>_is_closed</a>()</tt>	Return true if the supervised session is closed for tests only.
<tt style='background-color:#E8E8E8;'> python.training.SingularMonitoredSession <a href=' /python/training/monitored_session.py#L682'>__init__</a>(hooks,scaffold,master,config)</tt>	Creates a singularmonitoredsession.
<tt style='background-color:#E8E8E8;'> python.training.SingularMonitoredSession <a href=' /python/training/monitored_session.py#L711'>raw_session</a>()</tt>	Returns underlying tensorflow session object.
<tt style='background-color:#E8E8E8;'> python.training._WrappedSession <a href=' /python/training/monitored_session.py#L728'>__init__</a>(sess)</tt>	Creates a _wrappedsession.
<tt style='background-color:#E8E8E8;'> python.training._WrappedSession <a href=' /python/training/monitored_session.py#L745'>should_stop</a>()</tt>	Return true if this session should not be used anymore.
<tt style='background-color:#E8E8E8;'> python.training._WrappedSession <a href=' /python/training/monitored_session.py#L759'>_check_stop</a>()</tt>	Hook for subclasses to provide their own stop condition.
<tt style='background-color:#E8E8E8;'> python.training._RecoverableSession <a href=' /python/training/monitored_session.py#L791'>__init__</a>(sess_creator)</tt>	Create a new _recoverablesession.
<tt style='background-color:#E8E8E8;'> python.training._CoordinatedSession <a href=' /python/training/monitored_session.py#L845'>__init__</a>(sess,coord,stop_grace_period_secs)</tt>	Create a new _coordinatedsession.
<tt style='background-color:#E8E8E8;'> python.training._HookedSession <a href=' /python/training/monitored_session.py#L894'>__init__</a>(sess,hooks)</tt>	Initializes a _hookedsession object.
<tt style='background-color:#E8E8E8;'> python.training._HookedSession <a href=' /python/training/monitored_session.py#L906'>_check_stop</a>()</tt>	See base class.
<tt style='background-color:#E8E8E8;'> python.training._HookedSession <a href=' /python/training/monitored_session.py#L910'>run</a>(fetches,feed_dict,options,run_metadata)</tt>	See base class.
<tt style='background-color:#E8E8E8;'> python.training._HookedSession <a href=' /python/training/monitored_session.py#L944'>_call_hook_before_run</a>(run_context,fetch_dict,user_feed_dict,options)</tt>	Calls hooks before_run and handles requests from hooks.
<tt style='background-color:#E8E8E8;'> python.training._HookedSession <a href=' /python/training/monitored_session.py#L978'>_merge_run_options</a>(options,incoming_options)</tt>	Merge two instances of runoptions into the first one.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/session_manager.py#L30'>_maybe_name</a>(obj)</tt>	Returns object name if it has one or a message otherwise.
<tt style='background-color:#E8E8E8;'> python.training.SessionManager <a href=' /python/training/session_manager.py#L91'>__init__</a>(local_init_op,ready_op,ready_for_local_init_op,graph)</tt>	Creates a sessionmanager.
<tt style='background-color:#E8E8E8;'> python.training.SessionManager <a href=' /python/training/session_manager.py#L148'>_restore_checkpoint</a>(master,saver,checkpoint_dir,checkpoint_filename_with_path)</tt>	Creates a session, and tries to restore a checkpoint.
<tt style='background-color:#E8E8E8;'> python.training.SessionManager <a href=' /python/training/session_manager.py#L209'>prepare_session</a>(master,init_op,saver,checkpoint_dir)</tt>	Creates a session makes sure the model is ready to be used.
<tt style='background-color:#E8E8E8;'> python.training.SessionManager <a href=' /python/training/session_manager.py#L299'>recover_session</a>(master,saver,checkpoint_dir,checkpoint_filename_with_path)</tt>	Creates a session, recovering if possible.
<tt style='background-color:#E8E8E8;'> python.training.SessionManager <a href=' /python/training/session_manager.py#L363'>wait_for_session</a>(master,config,max_wait_secs)</tt>	Creates a new session and waits for model to be ready.
<tt style='background-color:#E8E8E8;'> python.training.SessionManager <a href=' /python/training/session_manager.py#L422'>_safe_close</a>(sess)</tt>	Closes a session without raising an exception.
<tt style='background-color:#E8E8E8;'> python.training.SessionManager <a href=' /python/training/session_manager.py#L440'>_model_ready</a>(sess)</tt>	Checks if the model is ready or not.
<tt style='background-color:#E8E8E8;'> python.training.SessionManager <a href=' /python/training/session_manager.py#L453'>_model_ready_for_local_init</a>(sess)</tt>	Checks if the model is ready to run local_init_op.
<tt style='background-color:#E8E8E8;'> python.training.SessionManager <a href=' /python/training/session_manager.py#L468'>_try_run_local_init_op</a>(sess)</tt>	Tries to run _local_init_op if not none and is ready for local init.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/session_manager.py#L490'>_ready</a>(op,sess,msg)</tt>	Checks if the model is ready or not as determined by op.
<tt style='background-color:#E8E8E8;'> python.training. <a href=' /python/training/supervisor_test.py#L54'>_summary_iterator</a>(test_dir)</tt>	Reads events from test_dir/events.
<tt style='background-color:#E8E8E8;'> python.training.SupervisorTest <a href=' /python/training/supervisor_test.py#L75'>_wait_for_glob</a>(pattern,timeout_secs,for_checkpoint)</tt>	Wait for a checkpoint file to appear.
<tt style='background-color:#E8E8E8;'> python.training.ProximalAdagradOptimizer <a href=' /python/training/proximal_adagrad.py#L35'>__init__</a>(learning_rate,initial_accumulator_value,l1_regularization_strength,l2_regularization_strength)</tt>	Construct a new proximaladagrad optimizer.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpec <a href=' /python/estimator/model_fn.py#L68'>__new__</a>(cls,mode,predictions,loss)</tt>	Creates a validated estimatorspec instance.
<tt style='background-color:#E8E8E8;'> python.estimator. <a href=' /python/estimator/model_fn.py#L286'>_check_is_tensor</a>(x,tensor_name)</tt>	Returns x if it is a tensor, raises typeerror otherwise.
<tt style='background-color:#E8E8E8;'> python.estimator. <a href=' /python/estimator/model_fn.py#L293'>_prediction_values</a>(predictions)</tt>	Returns the values of the given predictions dict or tensor.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpecTrainTest <a href=' /python/estimator/model_fn_test.py#L49'>testRequiredArgumentsSet</a>()</tt>	Tests that no errors are raised when all required arguments are set.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpecTrainTest <a href=' /python/estimator/model_fn_test.py#L57'>testAllArgumentsSet</a>()</tt>	Tests that no errors are raised when all arguments are set.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpecTrainTest <a href=' /python/estimator/model_fn_test.py#L76'>testLossNumber</a>()</tt>	Tests that error is raised when loss is a number not tensor.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpecTrainTest <a href=' /python/estimator/model_fn_test.py#L85'>testLoss1DTensor</a>()</tt>	Tests that no errors are raised when loss is 1d tensor.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpecEvalTest <a href=' /python/estimator/model_fn_test.py#L198'>testRequiredArgumentsSet</a>()</tt>	Tests that no errors are raised when all required arguments are set.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpecEvalTest <a href=' /python/estimator/model_fn_test.py#L207'>testAllArgumentsSet</a>()</tt>	Tests that no errors are raised when all arguments are set.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpecEvalTest <a href=' /python/estimator/model_fn_test.py#L226'>testTupleMetric</a>()</tt>	Tests that no errors are raised when a metric is tuple-valued.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpecEvalTest <a href=' /python/estimator/model_fn_test.py#L237'>testLoss1DTensor</a>()</tt>	Tests that no errors are raised when loss is 1d tensor.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpecEvalTest <a href=' /python/estimator/model_fn_test.py#L246'>testLossNumber</a>()</tt>	Tests that error is raised when loss is a number not tensor.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpecEvalTest <a href=' /python/estimator/model_fn_test.py#L300'>testPredictionsTensor</a>()</tt>	Tests that no error is raised when predictions is tensor not dict.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpecInferTest <a href=' /python/estimator/model_fn_test.py#L406'>testRequiredArgumentsSet</a>()</tt>	Tests that no errors are raised when all required arguments are set.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpecInferTest <a href=' /python/estimator/model_fn_test.py#L413'>testAllArgumentsSet</a>()</tt>	Tests that no errors are raised when all arguments are set.
<tt style='background-color:#E8E8E8;'> python.estimator.EstimatorSpecInferTest <a href=' /python/estimator/model_fn_test.py#L437'>testPredictionsTensor</a>()</tt>	Tests that no error is raised when predictions is tensor not dict.
<tt style='background-color:#E8E8E8;'> python.estimator.Estimator <a href=' /python/estimator/estimator.py#L89'>__init__</a>(model_fn,model_dir,config,params)</tt>	Constructs an estimator instance.
<tt style='background-color:#E8E8E8;'> python.estimator.Estimator <a href=' /python/estimator/estimator.py#L187'>train</a>(input_fn,hooks,steps,max_steps)</tt>	Trains a model given training data input_fn.
<tt style='background-color:#E8E8E8;'> python.estimator.Estimator <a href=' /python/estimator/estimator.py#L243'>evaluate</a>(input_fn,steps,hooks,checkpoint_path)</tt>	Evaluates the model given evaluation data input_fn.
<tt style='background-color:#E8E8E8;'> python.estimator.Estimator <a href=' /python/estimator/estimator.py#L292'>predict</a>(input_fn,predict_keys,hooks,checkpoint_path)</tt>	Returns predictions for given features.
<tt style='background-color:#E8E8E8;'> python.estimator.Estimator <a href=' /python/estimator/estimator.py#L369'>export_savedmodel</a>(export_dir_base,serving_input_receiver_fn,assets_extra,as_text)</tt>	Exports inference graph as a savedmodel into given dir.
<tt style='background-color:#E8E8E8;'> python.estimator.Estimator <a href=' /python/estimator/estimator.py#L493'>_extract_batch_length</a>(preds_evaluated)</tt>	Extracts batch length of predictions.
<tt style='background-color:#E8E8E8;'> python.estimator.Estimator <a href=' /python/estimator/estimator.py#L503'>_extract_keys</a>(predictions,predict_keys)</tt>	Extracts predict_keys from predictions.
<tt style='background-color:#E8E8E8;'> python.estimator.Estimator <a href=' /python/estimator/estimator.py#L520'>_call_model_fn</a>(features,labels,mode)</tt>	Calls model function.
<tt style='background-color:#E8E8E8;'> python.estimator.Estimator <a href=' /python/estimator/estimator.py#L613'>_evaluate_model</a>(input_fn,hooks,checkpoint_path,name)</tt>	Evaluates the model using the training evaluation library.
<tt style='background-color:#E8E8E8;'> python.estimator. <a href=' /python/estimator/estimator.py#L672'>_check_hooks_type</a>(hooks)</tt>	Returns hooks if all are sessionrunhook raises typeerror otherwise.
<tt style='background-color:#E8E8E8;'> python.estimator. <a href=' /python/estimator/estimator.py#L681'>_get_replica_device_setter</a>(config)</tt>	Creates a replica device setter if required as a default device_fn.
<tt style='background-color:#E8E8E8;'> python.estimator. <a href=' /python/estimator/estimator.py#L715'>_model_fn_args</a>(fn)</tt>	Get argument names for function-like object.
<tt style='background-color:#E8E8E8;'> python.estimator. <a href=' /python/estimator/estimator.py#L738'>_verify_model_fn_args</a>(model_fn,params)</tt>	Verifies model fn arguments.
<tt style='background-color:#E8E8E8;'> python.estimator. <a href=' /python/estimator/estimator.py#L768'>_extract_metric_update_ops</a>(eval_dict)</tt>	Separate update operations from metric value operations.
<tt style='background-color:#E8E8E8;'> python.estimator. <a href=' /python/estimator/estimator.py#L785'>_dict_to_str</a>(dictionary)</tt>	Get a str representation of a dict.
<tt style='background-color:#E8E8E8;'> python.estimator. <a href=' /python/estimator/estimator.py#L798'>_write_dict_to_summary</a>(output_dir,dictionary,current_global_step)</tt>	Writes a dict into summary file in given output directory.
<tt style='background-color:#E8E8E8;'> python.estimator.export. <a href=' /python/estimator/export/export.py#L84'>build_parsing_serving_input_receiver_fn</a>(feature_spec,default_batch_size)</tt>	Build a serving_input_receiver_fn expecting fed tf examples.
<tt style='background-color:#E8E8E8;'> python.estimator.export. <a href=' /python/estimator/export/export.py#L113'>build_raw_serving_input_receiver_fn</a>(features,default_batch_size)</tt>	Build a serving_input_receiver_fn expecting feature tensors.
<tt style='background-color:#E8E8E8;'> python.estimator.export. <a href=' /python/estimator/export/export.py#L151'>build_all_signature_defs</a>(receiver_tensors,export_outputs)</tt>	Build signaturedefs for all export outputs.
<tt style='background-color:#E8E8E8;'> python.estimator.export. <a href=' /python/estimator/export/export.py#L166'>get_timestamped_export_dir</a>(export_dir_base)</tt>	Builds a path to a new subdirectory within the base directory.
<tt style='background-color:#E8E8E8;'> python.estimator.export.ExportOutputTest <a href=' /python/estimator/export/export_output_test.py#L95'>test_build_standardized_signature_def_classify_classes_only</a>()</tt>	Tests classification with one output tensor.
<tt style='background-color:#E8E8E8;'> python.estimator.export.ExportOutputTest <a href=' /python/estimator/export/export_output_test.py#L126'>test_build_standardized_signature_def_classify_both</a>()</tt>	Tests multiple output tensors that include classes and scores.
<tt style='background-color:#E8E8E8;'> python.estimator.export.ExportOutputTest <a href=' /python/estimator/export/export_output_test.py#L167'>test_build_standardized_signature_def_classify_scores_only</a>()</tt>	Tests classification without classes tensor.
<tt style='background-color:#E8E8E8;'> python.estimator.export.ExportOutputTest <a href=' /python/estimator/export/export_output_test.py#L202'>test_predict_output_constructor</a>()</tt>	Tests that no errors are raised when input is expected.
<tt style='background-color:#E8E8E8;'> python.estimator.export.ExportTest <a href=' /python/estimator/export/export_test.py#L44'>test_serving_input_receiver_constructor</a>()</tt>	Tests that no errors are raised when input is expected.
<tt style='background-color:#E8E8E8;'> python.estimator.export.ExportOutput <a href=' /python/estimator/export/export_output.py#L39'>as_signature_def</a>(receiver_tensors)</tt>	Generate a signaturedef proto for inclusion in a metagraphdef.
<tt style='background-color:#E8E8E8;'> python.estimator.export.ClassificationOutput <a href=' /python/estimator/export/export_output.py#L71'>__init__</a>(scores,classes)</tt>	Constructor for classifyoutput.
<tt style='background-color:#E8E8E8;'> python.estimator.export.RegressionOutput <a href=' /python/estimator/export/export_output.py#L124'>__init__</a>(value)</tt>	Constructor for regressionoutput.
<tt style='background-color:#E8E8E8;'> python.estimator.export.PredictOutput <a href=' /python/estimator/export/export_output.py#L161'>__init__</a>(outputs)</tt>	Constructor for predictoutput.
<tt style='background-color:#E8E8E8;'> python.estimator.inputs. <a href=' /python/estimator/inputs/pandas_io.py#L37'>pandas_input_fn</a>(x,y,batch_size,num_epochs)</tt>	Returns input function that would feed pandas dataframe into the model.
<tt style='background-color:#E8E8E8;'> python.estimator.inputs. <a href=' /python/estimator/inputs/numpy_io.py#L29'>_get_unique_target_key</a>(features)</tt>	Returns a key not existed in the input dict features.
<tt style='background-color:#E8E8E8;'> python.estimator.inputs. <a href=' /python/estimator/inputs/numpy_io.py#L45'>numpy_input_fn</a>(x,y,batch_size,num_epochs)</tt>	Returns input function that would feed dict of numpy arrays into the model.
<tt style='background-color:#E8E8E8;'> python.estimator.inputs.queues._FeedingQueueRunner <a href=' /python/estimator/inputs/queues/feeding_queue_runner.py#L32'>__init__</a>(queue,enqueue_ops,close_op,cancel_op)</tt>	Initialize the queue runner.
<tt style='background-color:#E8E8E8;'> python.estimator.inputs.queues._FeedingQueueRunner <a href=' /python/estimator/inputs/queues/feeding_queue_runner.py#L73'>_run</a>(sess,enqueue_op,feed_fn,coord)</tt>	Execute the enqueue op in a loop close the queue in case of error.
<tt style='background-color:#E8E8E8;'> python.estimator.inputs.queues._FeedingQueueRunner <a href=' /python/estimator/inputs/queues/feeding_queue_runner.py#L122'>create_threads</a>(sess,coord,daemon,start)</tt>	Create threads to run the enqueue ops for the given session.
<tt style='background-color:#E8E8E8;'> python.estimator.inputs.queues. <a href=' /python/estimator/inputs/queues/feeding_functions.py#L49'>_get_integer_indices_for_next_batch</a>(batch_indices_start,batch_size,epoch_end,array_length)</tt>	Returns the integer indices for next batch.
<tt style='background-color:#E8E8E8;'> python.estimator.inputs.queues. <a href=' /python/estimator/inputs/queues/feeding_functions.py#L271'>_enqueue_data</a>(data,capacity,shuffle,min_after_dequeue)</tt>	Creates a queue filled from a numpy array or pandas dataframe.
<tt style='background-color:#E8E8E8;'> tensorboard. <a href=' /tensorboard/tensorboard.py#L92'>create_tb_app</a>(plugins)</tt>	Read the flags and create a tensorboard wsgi application.
<tt style='background-color:#E8E8E8;'> tensorboard. <a href=' /tensorboard/tensorboard.py#L116'>make_simple_server</a>(tb_app,host,port)</tt>	Create an http server for tensorboard.
<tt style='background-color:#E8E8E8;'> tensorboard. <a href=' /tensorboard/tensorboard.py#L176'>run_simple_server</a>(tb_app)</tt>	Run a tensorboard http server and print some messages to the console.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.TBPlugin <a href=' /tensorboard/plugins/base_plugin.py#L39'>get_plugin_apps</a>(multiplexer,logdir)</tt>	Returns a set of wsgi applications that the plugin implements.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.TBPlugin <a href=' /tensorboard/plugins/base_plugin.py#L55'>is_active</a>()</tt>	Determines whether this plugin is active.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.projector.EmbeddingMetadata <a href=' /tensorboard/plugins/projector/projector_plugin.py#L107'>__init__</a>(num_points)</tt>	Constructs a metadata for an embedding of the specified size.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.projector.EmbeddingMetadata <a href=' /tensorboard/plugins/projector/projector_plugin.py#L117'>add_column</a>(column_name,column_values)</tt>	Adds a named column of metadata values.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.projector.ProjectorPluginAsset <a href=' /tensorboard/plugins/projector/projector_plugin.py#L156'>add_metadata_for_embedding_variable</a>(var_name,metadata,thumbnails,thumbnail_dim)</tt>	Adds metadata for an embedding variable stored in a checkpoint file.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.projector.ProjectorPluginAsset <a href=' /tensorboard/plugins/projector/projector_plugin.py#L185'>add_embedding</a>(name,values,metadata,thumbnails)</tt>	Adds an embedding asset to be visualized by the embedding projector.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.projector.ProjectorPluginAsset <a href=' /tensorboard/plugins/projector/projector_plugin.py#L219'>_convert_embedding_to_assets</a>(name,values,metadata,thumbnails)</tt>	Converts the data associated with embeddings into serializable assets.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.projector. <a href=' /tensorboard/plugins/projector/projector_plugin.py#L304'>_latest_checkpoints_changed</a>(configs,run_path_pairs)</tt>	Returns true if the latest checkpoint has changed in any of the runs.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.projector. <a href=' /tensorboard/plugins/projector/projector_plugin.py#L326'>_parse_positive_int_param</a>(request,param_name)</tt>	Parses and asserts a positive (>0) integer query parameter.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.projector.ProjectorPlugin <a href=' /tensorboard/plugins/projector/projector_plugin.py#L384'>is_active</a>()</tt>	Determines whether this plugin is active.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.projector.ProjectorPlugin <a href=' /tensorboard/plugins/projector/projector_plugin.py#L394'>configs</a>()</tt>	Returns a map of run paths to projectorconfig protos.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.projector.ProjectorPlugin <a href=' /tensorboard/plugins/projector/projector_plugin.py#L465'>_read_latest_config_files</a>(run_path_pairs)</tt>	Reads and returns the projector config files in every run directory.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.projector.ProjectorPlugin <a href=' /tensorboard/plugins/projector/projector_plugin.py#L551'>_serve_runs</a>(request)</tt>	Returns a list of runs that have embeddings.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.projector. <a href=' /tensorboard/plugins/projector/projector_plugin.py#L750'>_make_sprite_image</a>(thumbnails,thumbnail_dim)</tt>	Constructs a sprite image from thumbnails and returns the png bytes.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.text. <a href=' /tensorboard/plugins/text/text_plugin.py#L83'>markdown_and_sanitize</a>(markdown_string)</tt>	Takes a markdown string and converts it into sanitized html.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.text. <a href=' /tensorboard/plugins/text/text_plugin.py#L109'>make_table_row</a>(contents,tag)</tt>	Given an iterable of string contents make a table row.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.text. <a href=' /tensorboard/plugins/text/text_plugin.py#L130'>make_table</a>(contents,headers)</tt>	Given a numpy ndarray of strings concatenate them into a html table.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.text. <a href=' /tensorboard/plugins/text/text_plugin.py#L183'>reduce_to_2d</a>(arr)</tt>	Given a np npdarray with ndims > 2 reduce it to 2d.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.text. <a href=' /tensorboard/plugins/text/text_plugin.py#L210'>text_array_to_html</a>(text_arr)</tt>	Take a numpy ndarray containing strings and convert it into html.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.text. <a href=' /tensorboard/plugins/text/text_plugin.py#L240'>process_string_tensor_event</a>(event)</tt>	Convert a tensorevent into a json-compatible response.
<tt style='background-color:#E8E8E8;'> tensorboard.plugins.text.TextPlugin <a href=' /tensorboard/plugins/text/text_plugin.py#L296'>is_active</a>()</tt>	Determines whether this plugin is active.
<tt style='background-color:#E8E8E8;'> tensorboard.scripts. <a href=' /tensorboard/scripts/generate_testdata.py#L66'>_MakeHistogram</a>(values)</tt>	Convert values into a histogram proto using logic from histogram cc.
<tt style='background-color:#E8E8E8;'> tensorboard.scripts. <a href=' /tensorboard/scripts/generate_testdata.py#L89'>WriteScalarSeries</a>(writer,tag,f,n)</tt>	Write a series of scalar events to writer using f to create values.
<tt style='background-color:#E8E8E8;'> tensorboard.scripts. <a href=' /tensorboard/scripts/generate_testdata.py#L103'>WriteHistogramSeries</a>(writer,tag,mu_sigma_tuples,n)</tt>	Write a sequence of normally distributed histograms to writer.
<tt style='background-color:#E8E8E8;'> tensorboard.scripts. <a href=' /tensorboard/scripts/generate_testdata.py#L119'>WriteImageSeries</a>(writer,tag,n_images)</tt>	Write a few dummy images to writer.
<tt style='background-color:#E8E8E8;'> tensorboard.scripts. <a href=' /tensorboard/scripts/generate_testdata.py#L133'>WriteAudioSeries</a>(writer,tag,n_audio)</tt>	Write a few dummy audio clips to writer.
<tt style='background-color:#E8E8E8;'> tensorboard.scripts. <a href=' /tensorboard/scripts/generate_testdata.py#L169'>GenerateTestData</a>(path)</tt>	Generates the test data directory.
<tt style='background-color:#E8E8E8;'> tensorboard.backend. <a href=' /tensorboard/backend/json_util.py#L38'>Cleanse</a>(obj,encoding)</tt>	Makes python object appropriate for json serialization.
<tt style='background-color:#E8E8E8;'> tensorboard.backend. <a href=' /tensorboard/backend/http_util.py#L63'>Respond</a>(request,content,content_type,code)</tt>	Construct a werkzeug response.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.FakePlugin <a href=' /tensorboard/backend/application_test.py#L57'>__init__</a>(plugin_name,is_active_value,routes_mapping)</tt>	Constructs a fake plugin.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.FakePlugin <a href=' /tensorboard/backend/application_test.py#L70'>get_plugin_apps</a>(multiplexer,logdir)</tt>	Returns a mapping from routes to handlers offered by this plugin.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.FakePlugin <a href=' /tensorboard/backend/application_test.py#L82'>is_active</a>()</tt>	Returns whether this plugin is active.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L126'>_get</a>(path,headers)</tt>	Perform a get request for the given path.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L133'>_getJson</a>(path)</tt>	Perform a get request and decode the result as json.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L143'>testBasicStartup</a>()</tt>	Start the server up and then shut it down immediately.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L147'>testRequestMainPage</a>()</tt>	Navigate to the main page and verify that it returns a 200.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L152'>testRequestNonexistentPage</a>()</tt>	Request a page that doesn't exist it should 404.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L157'>testDirectoryTraversal</a>()</tt>	Attempt a directory traversal attack.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L162'>testLogdir</a>()</tt>	Test the format of the data/logdir endpoint.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L167'>testPluginsListing</a>()</tt>	Test the format of the data/plugins_listing endpoint.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L173'>testRuns</a>()</tt>	Test the format of the /data/runs endpoint.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L198'>testApplicationPaths_getCached</a>()</tt>	Test the format of the /data/runs endpoint.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L212'>testDataPaths_disableAllCaching</a>()</tt>	Test the format of the /data/runs endpoint.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L230'>testScalars</a>()</tt>	Test the format of /data/scalars.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L235'>testScalarsCsv</a>()</tt>	Test the csv format of /data/scalars.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L241'>testHistograms</a>()</tt>	Test the format of /data/histograms.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L247'>testImages</a>()</tt>	Test listing images and retrieving an individual image.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L262'>testAudio</a>()</tt>	Test listing audio and retrieving an individual audio clip.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L276'>testGraph</a>()</tt>	Test retrieving the graph definition.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L329'>testRunMetadata</a>()</tt>	Test retrieving the run metadata information.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorboardServerTest <a href=' /tensorboard/backend/application_test.py#L340'>_GenerateTestData</a>()</tt>	Generates the test data directory.
<tt style='background-color:#E8E8E8;'> tensorboard.backend. <a href=' /tensorboard/backend/process_graph.py#L25'>prepare_graph_for_ui</a>(graph,limit_attr_size,large_attrs_key)</tt>	Prepares modifies in-place the graph to be served to the front-end.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.FloatWrapperTest <a href=' /tensorboard/backend/json_util_test.py#L28'>_assertWrapsAs</a>(to_wrap,expected)</tt>	Asserts that |to_wrap| becomes |expected| when wrapped.
<tt style='background-color:#E8E8E8;'> tensorboard.backend. <a href=' /tensorboard/backend/application.py#L97'>standard_tensorboard_wsgi</a>(logdir,purge_orphaned_data,reload_interval,plugins)</tt>	Construct a tensorboardwsgiapp with standard plugins and multiplexer.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L131'>__init__</a>(logdir,plugins,multiplexer,reload_interval)</tt>	Constructs the tensorboard application.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L215'>_image_response_for_run</a>(run_images,run,tag)</tt>	Builds a json-serializable object with information about run_images.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L240'>_audio_response_for_run</a>(run_audio,run,tag)</tt>	Builds a json-serializable object with information about run_audio.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L262'>_path_is_safe</a>(path)</tt>	Check path is safe stays within current directory.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L280'>_serve_logdir</a>(request)</tt>	Respond with a json object containing this tensorboard's logdir.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L286'>_serve_scalars</a>(request)</tt>	Given a tag and single run return array of scalarevents.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L303'>_serve_graph</a>(request)</tt>	Given a single run return the graph definition in json format.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L335'>_serve_run_metadata</a>(request)</tt>	Given a tag and a tensorflow run return the session run() metadata.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L354'>_serve_histograms</a>(request)</tt>	Given a tag and single run return an array of histogram values.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L362'>_serve_compressed_histograms</a>(request)</tt>	Given a tag and single run return an array of compressed histograms.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L391'>_serve_images</a>(request)</tt>	Given a tag and list of runs serve a list of images.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L413'>_serve_image</a>(request)</tt>	Serves an individual image.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L424'>_query_for_individual_image</a>(run,tag,index)</tt>	Builds a url for accessing the specified image.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L447'>_serve_audio</a>(request)</tt>	Given a tag and list of runs serve a list of audio.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L469'>_serve_individual_audio</a>(request)</tt>	Serves an individual audio clip.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L479'>_query_for_individual_audio</a>(run,tag,index)</tt>	Builds a url for accessing the specified audio.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L502'>_serve_plugins_listing</a>(request)</tt>	Serves an object mapping plugin name to whether it is enabled.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L517'>_serve_runs</a>(request)</tt>	Wsgi app serving a json object about runs and tags.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L545'>_serve_index</a>(request)</tt>	Serves the index page (i e the tensorboard app itself).
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L550'>_serve_js</a>(request)</tt>	Serves the javascript for the index page.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L555'>_serve_static_file</a>(request,path)</tt>	Serves the static file located at the given path.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.TensorBoardWSGIApp <a href=' /tensorboard/backend/application.py#L602'>__call__</a>(environ,start_response)</tt>	Central entry point for the tensorboard application.
<tt style='background-color:#E8E8E8;'> tensorboard.backend. <a href=' /tensorboard/backend/application.py#L636'>parse_event_files_spec</a>(logdir)</tt>	Parses logdir into a map from paths to run group names.
<tt style='background-color:#E8E8E8;'> tensorboard.backend. <a href=' /tensorboard/backend/application.py#L677'>reload_multiplexer</a>(multiplexer,path_to_run)</tt>	Loads all runs into the multiplexer.
<tt style='background-color:#E8E8E8;'> tensorboard.backend. <a href=' /tensorboard/backend/application.py#L695'>start_reloading_multiplexer</a>(multiplexer,path_to_run,load_interval)</tt>	Starts a thread to automatically reload the given multiplexer.
<tt style='background-color:#E8E8E8;'> tensorboard.backend. <a href=' /tensorboard/backend/application.py#L725'>get_tensorboard_tag</a>()</tt>	Read the tensorboard tag number and return it or an empty string.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.DirectoryWatcherTest <a href=' /tensorboard/backend/event_processing/directory_watcher_test.py#L73'>_LoadAllEvents</a>()</tt>	Loads all events in the watcher.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.ReservoirTest <a href=' /tensorboard/backend/event_processing/reservoir_test.py#L55'>testDeterminism</a>()</tt>	Tests that the reservoir is deterministic.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.ReservoirTest <a href=' /tensorboard/backend/event_processing/reservoir_test.py#L66'>testBucketDeterminism</a>()</tt>	Tests that reservoirs are deterministic at a bucket level.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.ReservoirTest <a href=' /tensorboard/backend/event_processing/reservoir_test.py#L85'>testUsesSeed</a>()</tt>	Tests that reservoirs with different seeds keep different samples.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L71'>__init__</a>(run_path_map,size_guidance,purge_orphaned_data)</tt>	Constructor for the eventmultiplexer.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L101'>AddRun</a>(path,name)</tt>	Add a run to the multiplexer.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L142'>AddRunsFromDirectory</a>(path,name)</tt>	Load runs from a directory recursively walks subdirectories.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L178'>Reload</a>()</tt>	Call reload on every eventaccumulator.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L203'>PluginAssets</a>(plugin_name)</tt>	Get index of runs and assets for a given plugin.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L219'>RetrievePluginAsset</a>(run,plugin_name,asset_name)</tt>	Return the contents for a specific plugin asset from a run.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L236'>FirstEventTimestamp</a>(run)</tt>	Return the timestamp of the first event of the given run.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L256'>Scalars</a>(run,tag)</tt>	Retrieve the scalar events associated with a run and tag.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L273'>HealthPills</a>(run,node_name)</tt>	Retrieve the health pill events associated with a run and node name.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L290'>GetOpsWithHealthPills</a>(run)</tt>	Determines which ops have at least 1 health pill event for a given run.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L305'>Graph</a>(run)</tt>	Retrieve the graph associated with the provided run.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L321'>MetaGraph</a>(run)</tt>	Retrieve the metagraph associated with the provided run.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L337'>RunMetadata</a>(run,tag)</tt>	Get the session run() metadata associated with a tensorflow run and tag.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L354'>Histograms</a>(run,tag)</tt>	Retrieve the histogram events associated with a run and tag.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L371'>CompressedHistograms</a>(run,tag)</tt>	Retrieve the compressed histogram events associated with a run and tag.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L388'>Images</a>(run,tag)</tt>	Retrieve the image events associated with a run and tag.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L405'>Audio</a>(run,tag)</tt>	Retrieve the audio events associated with a run and tag.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L422'>Tensors</a>(run,tag)</tt>	Retrieve the tensor events associated with a run and tag.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L439'>Runs</a>()</tt>	Return all the run names in the eventmultiplexer.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexer <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L456'>RunPaths</a>()</tt>	Returns a dict mapping run names to event file paths.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_multiplexer.py#L465'>GetLogdirSubdirectories</a>(path)</tt>	Returns subdirectories with event files on path.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L124'>IsTensorFlowEventsFile</a>(path)</tt>	Check the path name to see if it is probably a tf events file.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L165'>__init__</a>(path,size_guidance,compression_bps,purge_orphaned_data)</tt>	Construct the eventaccumulator.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L229'>Reload</a>()</tt>	Loads all events added since the last call to reload.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L242'>PluginAssets</a>(plugin_name)</tt>	Return a list of all plugin assets for the given plugin.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L254'>RetrievePluginAsset</a>(plugin_name,asset_name)</tt>	Return the contents of a given plugin asset.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L269'>FirstEventTimestamp</a>()</tt>	Returns the timestamp in seconds of the first event.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L295'>_ProcessEvent</a>(event)</tt>	Called whenever an event is loaded.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L361'>_ProcessHealthPillSummary</a>(value,event)</tt>	Process summaries containing health pills.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L393'>Tags</a>()</tt>	Return all tags found in the value stream.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L413'>Scalars</a>(tag)</tt>	Given a summary tag return all associated scalarevents.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L427'>HealthPills</a>(node_name)</tt>	Returns all health pill values for a certain node.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L441'>GetOpsWithHealthPills</a>()</tt>	Determines which ops have at least 1 health pill event.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L449'>Graph</a>()</tt>	Return the graph definition if there is one.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L467'>MetaGraph</a>()</tt>	Return the metagraph definition if there is one.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L482'>RunMetadata</a>(tag)</tt>	Given a tag return the associated session run() metadata.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L501'>Histograms</a>(tag)</tt>	Given a summary tag return all associated histograms.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L515'>CompressedHistograms</a>(tag)</tt>	Given a summary tag return all associated compressed histograms.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L529'>Images</a>(tag)</tt>	Given a summary tag return all associated images.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L543'>Audio</a>(tag)</tt>	Given a summary tag return all associated audio.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L557'>Tensors</a>(tag)</tt>	Given a summary tag return all associated tensors.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L571'>_MaybePurgeOrphanedData</a>(event)</tt>	Maybe purge orphaned data due to a tensorflow crash.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L596'>_CheckForRestartAndMaybePurge</a>(event)</tt>	Check and discard expired events using sessionlog start.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L616'>_CheckForOutOfOrderStepAndMaybePurge</a>(event)</tt>	Check for out-of-order event step and discard expired events for tags.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L641'>_ProcessHistogram</a>(tag,wall_time,step,histo)</tt>	Processes a proto histogram by adding it to accumulated state.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L649'>_ProcessImage</a>(tag,wall_time,step,image)</tt>	Processes an image by adding it to accumulated state.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L658'>_ProcessAudio</a>(tag,wall_time,step,audio)</tt>	Processes a audio by adding it to accumulated state.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L668'>_ProcessScalar</a>(tag,wall_time,step,scalar)</tt>	Processes a simple value by adding it to accumulated state.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L677'>_ProcessHealthPill</a>(wall_time,step,node_name,output_slot)</tt>	Processes a health pill value by adding it to accumulated state.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulator <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L702'>_Purge</a>(event,by_tags)</tt>	Purge all events that have occurred after the given event step.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L747'>_GetPurgeMessage</a>(most_recent_step,most_recent_wall_time,event_step,event_wall_time)</tt>	Return the string message associated with tensorboard purges.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L764'>_GeneratorFromPath</a>(path)</tt>	Create an event generator for file or directory at given path string.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L775'>_ParseFileVersion</a>(file_version)</tt>	Convert the string file_version in event proto into a float.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L795'>_CompressHistogram</a>(histo_ev,bps)</tt>	Creates fixed size histogram by adding compression to accumulated state.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_accumulator.py#L848'>_Remap</a>(x,x0,x1,y0)</tt>	Linearly map from [x0 x1] unto [y0 y1].
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/io_wrapper.py#L29'>ListDirectoryAbsolute</a>(directory)</tt>	Yields all files in the given directory the paths are absolute.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/io_wrapper.py#L35'>ListRecursively</a>(top)</tt>	Walks a directory tree yielding (dir_path file_paths) tuples.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.DirectoryWatcher <a href=' /tensorboard/backend/event_processing/directory_watcher.py#L44'>__init__</a>(directory,loader_factory,path_filter)</tt>	Constructs a new directorywatcher.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.DirectoryWatcher <a href=' /tensorboard/backend/event_processing/directory_watcher.py#L70'>Load</a>()</tt>	Loads new values.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.DirectoryWatcher <a href=' /tensorboard/backend/event_processing/directory_watcher.py#L95'>_LoadInternal</a>()</tt>	Internal implementation of load().
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.DirectoryWatcher <a href=' /tensorboard/backend/event_processing/directory_watcher.py#L149'>OutOfOrderWritesDetected</a>()</tt>	Returns whether any out-of-order writes have been detected.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.DirectoryWatcher <a href=' /tensorboard/backend/event_processing/directory_watcher.py#L171'>_SetPath</a>(path)</tt>	Sets the current path to watch for new events.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.DirectoryWatcher <a href=' /tensorboard/backend/event_processing/directory_watcher.py#L193'>_GetNextPath</a>()</tt>	Gets the next path to load from.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.DirectoryWatcher <a href=' /tensorboard/backend/event_processing/directory_watcher.py#L230'>_HasOOOWrite</a>(path)</tt>	Returns whether the path has had an out-of-order write.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_file_inspector.py#L172'>get_field_to_observations_map</a>(generator,query_for_tag)</tt>	Return a field to observations dict for the event generator.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_file_inspector.py#L215'>get_unique_tags</a>(field_to_obs)</tt>	Returns a dictionary of tags that a user could query over.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_file_inspector.py#L231'>print_dict</a>(d,show_missing)</tt>	Prints a shallow dict to console.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_file_inspector.py#L254'>get_dict_to_print</a>(field_to_obs)</tt>	Transform the field-to-obs mapping into a printable dictionary.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_file_inspector.py#L290'>get_out_of_order</a>(list_of_numbers)</tt>	Returns elements that break the monotonically non-decreasing trend.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_file_inspector.py#L314'>generators_from_logdir</a>(logdir)</tt>	Returns a list of event generators for subdirectories with event files.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_file_inspector.py#L336'>generator_from_event_file</a>(event_file)</tt>	Returns a generator that yields events from an event file.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_file_inspector.py#L341'>get_inspection_units</a>(logdir,event_file,tag)</tt>	Returns a list of inspectionunit objects given either logdir or event_file.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/event_file_inspector.py#L389'>inspect</a>(logdir,event_file,tag)</tt>	Main function for inspector that prints out a digest of event files.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.Reservoir <a href=' /tensorboard/backend/event_processing/reservoir.py#L58'>__init__</a>(size,seed,always_keep_last)</tt>	Creates a new reservoir.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.Reservoir <a href=' /tensorboard/backend/event_processing/reservoir.py#L81'>Keys</a>()</tt>	Return all the keys in the reservoir.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.Reservoir <a href=' /tensorboard/backend/event_processing/reservoir.py#L90'>Items</a>(key)</tt>	Return items associated with given key.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.Reservoir <a href=' /tensorboard/backend/event_processing/reservoir.py#L108'>AddItem</a>(key,item,f)</tt>	Add a new item to the reservoir with the given tag.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.Reservoir <a href=' /tensorboard/backend/event_processing/reservoir.py#L134'>FilterItems</a>(filterFn,key)</tt>	Filter items within a reservoir using a filtering function.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing._ReservoirBucket <a href=' /tensorboard/backend/event_processing/reservoir.py#L162'>__init__</a>(_max_size,_random,always_keep_last)</tt>	Create the _reservoirbucket.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing._ReservoirBucket <a href=' /tensorboard/backend/event_processing/reservoir.py#L190'>AddItem</a>(item,f)</tt>	Add an item to the reservoirbucket replacing an old item if necessary.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing._ReservoirBucket <a href=' /tensorboard/backend/event_processing/reservoir.py#L220'>FilterItems</a>(filterFn)</tt>	Filter items in a reservoirbucket using a filtering function.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing._ReservoirBucket <a href=' /tensorboard/backend/event_processing/reservoir.py#L250'>Items</a>()</tt>	Get all the items in the bucket.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing._EventGenerator <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L154'>add_event</a>(event)</tt>	Match the eventwriter api.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing._EventGenerator <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L158'>get_logdir</a>()</tt>	Return a temp directory for asset writing.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L165'>assertTagsEqual</a>(actual,expected)</tt>	Utility method for checking the return value of the tags() call.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L227'>testTags</a>()</tt>	Tags should be found in eventaccumulator after adding some events.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L248'>testReload</a>()</tt>	Eventaccumulator contains suitable tags after calling reload.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L271'>testScalars</a>()</tt>	Tests whether eventaccumulator contains scalars after adding them.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L283'>_compareHealthPills</a>(expected_event,gotten_event)</tt>	Compares 2 health pills.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L298'>testHealthPills</a>()</tt>	Healthpills should be properly inserted into eventaccumulator.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L334'>testHistograms</a>()</tt>	Tests whether histograms are inserted into eventaccumulator.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L384'>testCompressedHistograms</a>()</tt>	Tests compressed histograms inserted into eventaccumulator.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L436'>testCompressedHistogramsWithEmptyHistogram</a>()</tt>	Tests that empty histograms compressed properly in eventaccumulator.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L490'>testImages</a>()</tt>	Tests 2 images inserted/accessed in eventaccumulator.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L524'>testAudio</a>()</tt>	Tests 2 audio events inserted/accessed in eventaccumulator.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L562'>testKeyError</a>()</tt>	Keyerror should be raised when accessing non-existing keys.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L586'>testNonValueEvents</a>()</tt>	Non-value events in the generator don't cause early exits.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L606'>testExpiredDataDiscardedAfterRestartForFileVersionLessThan2</a>()</tt>	Tests that events are discarded after a restart is detected.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L639'>testOrphanedDataNotDiscardedIfFlagUnset</a>()</tt>	Tests that events are not discarded if purge_orphaned_data is false.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L663'>testEventsDiscardedPerTagAfterRestartForFileVersionLessThan2</a>()</tt>	Tests that event discards after restart only affect the misordered tag.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L701'>testOnlySummaryEventsTriggerDiscards</a>()</tt>	Test that file version event does not trigger data purge.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L714'>testSessionLogStartMessageDiscardsExpiredEvents</a>()</tt>	Test that sessionlog start message discards expired events.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L741'>testFirstEventTimestamp</a>()</tt>	Test that firsteventtimestamp() returns wall_time of the first event.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L751'>testReloadPopulatesFirstEventTimestamp</a>()</tt>	Test that reload() means firsteventtimestamp() won't load events.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L767'>testFirstEventTimestampLoadsEvent</a>()</tt>	Test that firsteventtimestamp() doesn't discard the loaded event.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L779'>testTFSummaryScalar</a>()</tt>	Verify processing of tf summary scalar.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L813'>testTFSummaryImage</a>()</tt>	Verify processing of tf summary image.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.MockingEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L849'>testTFSummaryTensor</a>()</tt>	Verify processing of tf summary tensor.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.RealisticEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L887'>testScalarsRealistically</a>()</tt>	Test accumulator by writing values and then reading them.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.RealisticEventAccumulatorTest <a href=' /tensorboard/backend/event_processing/event_accumulator_test.py#L964'>testGraphFromMetaGraphBecomesAvailable</a>()</tt>	Test accumulator by writing values and then reading them.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing._FakeAccumulator <a href=' /tensorboard/backend/event_processing/event_multiplexer_test.py#L49'>__init__</a>(path,health_pill_mapping)</tt>	Constructs a fake accumulator with some fake events.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexerTest <a href=' /tensorboard/backend/event_processing/event_multiplexer_test.py#L126'>testEmptyLoader</a>()</tt>	Tests empty eventmultiplexer creation.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexerTest <a href=' /tensorboard/backend/event_processing/event_multiplexer_test.py#L131'>testRunNamesRespected</a>()</tt>	Tests two eventaccumulators inserted/accessed in eventmultiplexer.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexerTest <a href=' /tensorboard/backend/event_processing/event_multiplexer_test.py#L138'>testReload</a>()</tt>	Eventaccumulators should reload after eventmultiplexer call it.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexerTest <a href=' /tensorboard/backend/event_processing/event_multiplexer_test.py#L147'>testScalars</a>()</tt>	Tests scalars function returns suitable values.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexerTest <a href=' /tensorboard/backend/event_processing/event_multiplexer_test.py#L156'>testHealthPills</a>()</tt>	Tests healthpills() returns events associated with run1/add.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexerTest <a href=' /tensorboard/backend/event_processing/event_multiplexer_test.py#L179'>testExceptions</a>()</tt>	Keyerror should be raised when accessing non-existing keys.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexerTest <a href=' /tensorboard/backend/event_processing/event_multiplexer_test.py#L185'>testInitialization</a>()</tt>	Tests eventmultiplexer is created properly with its params.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventMultiplexerTest <a href=' /tensorboard/backend/event_processing/event_multiplexer_test.py#L194'>testAddRunsFromDirectory</a>()</tt>	Tests addrunsfromdirectory function.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/plugin_asset_util.py#L28'>_IsDirectory</a>(parent,item)</tt>	Helper that returns if parent/item is a directory.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/plugin_asset_util.py#L33'>ListPlugins</a>(logdir)</tt>	List all the plugins that have registered assets in logdir.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/plugin_asset_util.py#L52'>ListAssets</a>(logdir,plugin_name)</tt>	List all the assets that are available for given plugin in a logdir.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing. <a href=' /tensorboard/backend/event_processing/plugin_asset_util.py#L71'>RetrieveAsset</a>(logdir,plugin_name,asset_name)</tt>	Retrieve a particular plugin asset from a logdir.
<tt style='background-color:#E8E8E8;'> tensorboard.backend.event_processing.EventFileLoader <a href=' /tensorboard/backend/event_processing/event_file_loader.py#L46'>Load</a>()</tt>	Loads all new values from disk.
