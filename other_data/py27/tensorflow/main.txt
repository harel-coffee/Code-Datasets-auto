tools.graph_transforms		TransformGraph	input_graph_def inputs outputs transforms	python wrapper for the graph transform tool
tools.git		parse_branch_ref	filename	given a filename of a git/head file return ref path
tools.git		configure	src_base_path debug	configure src_base_path to embed git hashes if available
tools.git		get_git_version	git_base_path	get the git version from the repository
tools.git		write_version_info	filename git_version	write a c file that defines the version functions
tools.git		generate	arglist	generate version_info cc as given destination_file
tools.git		raw_generate	output_file	simple generator used for cmake/make build systems
tools.gcs_test.python		create_examples	num_examples input_mean	create exampleproto's containg data
tools.gcs_test.python		create_dir_test		verifies file_io directory handling methods
tools.gcs_test.python		create_object_test		verifies file_io's object manipulation methods
tools.docker		main	_	run an interactive console
tools.compatibility	TestUpgradeFiles	testInplace		check to make sure we don't have a file system race
tools.compatibility	FileEditRecorder	process	text	process a list of strings each corresponding to the recorded changes
tools.compatibility	FileEditRecorder	add	comment line start old	add a new change that is needed
tools.compatibility	TensorFlowCallVisitor	_get_attribute_full_path	node	traverse an attribute to generate a full name e g tf foo bar
tools.compatibility	TensorFlowCallVisitor	_find_true_position	node	return correct line number and column offset for a given node
tools.compatibility	TensorFlowCallVisitor	visit_Call	node	handle visiting a call node in the ast
tools.compatibility	TensorFlowCallVisitor	visit_Attribute	node	handle bare attributes i e [tf foo tf bar]
tools.compatibility	TensorFlowCodeUpgrader	process_file	in_filename out_filename	process the given python file for incompatible changes
tools.compatibility	TensorFlowCodeUpgrader	process_opened_file	in_filename in_file out_filename out_file	process the given python file for incompatible changes
tools.compatibility	TensorFlowCodeUpgrader	process_tree	root_directory output_root_directory copy_other_files	processes upgrades on an entire tree of python files in place
tools.common	PublicAPIVisitor	do_not_descend_map		a map from parents to symbols that should not be descended into
tools.common	PublicAPIVisitor	_isprivate	name	return whether a name is private
tools.common	PublicAPIVisitor	_do_not_descend	path name	safely queries if a specific fully qualified name should be excluded
tools.common	PublicAPIVisitor	__call__	path parent children	visitor interface see traverse for details
tools.common		_traverse_internal	root visit stack path	internal helper for traverse
tools.common		traverse	root visit	recursively enumerate all members of root
tools.quantization		node_name_from_input	node_name	strips off ports and other decorations to get the underlying node name
tools.quantization		ensure_tensor_name_has_port	node_name	makes sure that a tensor name has :0 if no explicit port exists
tools.quantization		unique_node_name_from_input	node_name	replaces invalid characters in input names to get a unique node name
tools.quantization		quantize_array	arr num_buckets	quantizes a numpy array
tools.quantization		quantize_weight_rounded	input_node	returns a replacement node for input_node containing bucketed floats
tools.quantization		quantize_weight_eightbit	input_node quantization_mode	returns replacement nodes for input_node using the dequantize op
tools.quantization	GraphRewriter	__init__	input_graph mode quantized_input_range fallback_quantization_range	sets up the class to rewrite a float graph
tools.quantization	GraphRewriter	create_nodes_map	graph	builds a mapping of node names to their defs from the graph
tools.quantization	GraphRewriter	rewrite	output_node_names	triggers rewriting of the float graph
tools.quantization	GraphRewriter	round_nodes_recursively	current_node	the entry point for simple rounding quantization
tools.quantization	GraphRewriter	quantize_nodes_recursively	current_node	the entry point for quantizing nodes to eight bit and back
tools.quantization	GraphRewriter	quantize_node	input_node	handles quantizing a single node
tools.quantization	GraphRewriter	should_merge_with_fake_quant_node		should the current node merge with self state output_node_stack[-1]?
tools.quantization	GraphRewriter	eightbitize_nodes_recursively	current_node	the entry point for transforming a graph into full eight bit
tools.quantization	GraphRewriter	add_eightbit_prologue_nodes	original_node	adds input conversion nodes to handle quantizing the underlying node
tools.quantization	GraphRewriter	add_common_quantization_nodes	namespace_prefix	builds constant nodes needed for quantization of inputs
tools.quantization	GraphRewriter	eightbitize_input_to_node	namespace_prefix original_input_name reshape_dims_name reduction_dims_name	takes one float input to an op and converts it to quantized form
tools.quantization	GraphRewriter	eightbitize_mat_mul_node	original_node	replaces a matmul node with the eight bit equivalent sub-graph
tools.quantization	GraphRewriter	eightbitize_conv_node	original_node	replaces a conv2d node with the eight bit equivalent sub-graph
tools.quantization	GraphRewriter	eightbitize_bias_add_node	original_node	replaces a biasadd node with the eight bit equivalent sub-graph
tools.quantization	GraphRewriter	eightbitize_single_input_tensor_node	original_node add_op_function	replaces a single-tensor node with the eight bit equivalent sub-graph
tools.quantization	GraphRewriter	eightbitize_concat_node	original_node	replaces a concat node with the eight bit equivalent sub-graph
tools.quantization	GraphRewriter	eightbitize_placeholder_node	current_node	replaces a placeholder node with a quint8 placeholder node+dequantize
tools.quantization	GraphRewriter	eightbitize_reshape_node	original_node	replaces a reshape node with the eight bit equivalent sub-graph
tools.quantization	GraphRewriter	eightbitize_batch_norm_node	original_node	replaces a matmul node with the eight bit equivalent sub-graph
tools.quantization	GraphRewriter	add_output_graph_node	output_node	inserts one node into the new graph
tools.quantization	GraphRewriter	remove_redundant_quantization	old_graph	removes unneeded pairs of quantize/dequantize ops from the graph
tools.quantization	GraphRewriter	apply_final_node_renames		applies node renames in self final_node_renames to self output_graph
tools.quantization	GraphRewriter	remove_dead_nodes	output_names	removes nodes that are no longer needed for inference from the graph
tools.quantization	GraphRewriter	quantize_weights	input_graph quantization_mode	quantize float const ops
tools.quantization		test_mat_mul	m n k a	tests a matmul replacement
tools.quantization		test_conv	depth image_width image_height image_batch_count	tests a conv replacement
tools.quantization		are_tensors_near	a b tolerance	tests whether two tensors are nearly identical
tools.quantization		test_graph	float_graph_def input_map output_names log_graph	runs the float graph through the rewriter and tests the results
tools.quantization	QuantizeGraphTest	test_odd_padding_problem		tests one error case we ran into in a real graph
tools.quantization	QuantizeGraphTest	test_reshape		tests that matmul->reshape->matmul avoids extra quantize/dequantize
tools.pip_package		main		this script runs the pip smoke test
tools.pip_package		main	_	run an interactive console
tools.pip_package		find_files	pattern root	return all the files matching pattern below root dir
tools.pip_package		main	_	run an interactive console
tools.docs	DocGeneratorVisitor	__init__	root_name	make a visitor
tools.docs	DocGeneratorVisitor	set_root_name	root_name	sets the root name for subsequent __call__s
tools.docs	DocGeneratorVisitor	index		a map from fully qualified names to objects to be documented
tools.docs	DocGeneratorVisitor	tree		a map from fully qualified names to all its child names for traversal
tools.docs	DocGeneratorVisitor	reverse_index		a map from id object to the preferred fully qualified name
tools.docs	DocGeneratorVisitor	duplicate_of		a map from duplicate full names to a preferred fully qualified name
tools.docs	DocGeneratorVisitor	duplicates		a map from preferred full names to a list of all names for this symbol
tools.docs	DocGeneratorVisitor	_add_prefix	name	adds the root name to a name
tools.docs	DocGeneratorVisitor	__call__	parent_name parent children	visitor interface see tensorflow/tools/common traverse for details
tools.docs	DocGeneratorVisitor	_maybe_find_duplicates		compute data structures containing information about duplicates
tools.docs		_is_free_function	py_object full_name index	check if input is a free function and not a class- or static method
tools.docs		write_docs	output_dir parser_config yaml_toc	write previously extracted docs to disk
tools.docs		extract	py_modules do_not_descend_map	extract docs from tf namespace and write them to disk
tools.docs		build_doc_index	src_dir	build an index from a keyword designating a doc to _docinfo objects
tools.docs	_GenerateGuideIndex	process	full_path base_name	index a file reading from full_path, with base_name as the link
tools.docs	_GenerateGuideIndex	process_line	_ line	index @{symbol} references as in the current file & section
tools.docs		_build_guide_index	guide_src_dir	return dict symbol name -> _guideref from the files in guide_src_dir
tools.docs		_other_docs	src_dir output_dir reference_resolver	convert all the files in src_dir and write results to output_dir
tools.docs	DocGenerator	build	flags	actually build the docs
tools.docs		md_files_in_dir	py_guide_src_dir	returns a list of filename (full_path base) pairs for guide files
tools.docs	PyGuideParser	process	full_path	read and process the file at full_path
tools.docs	PyGuideParser	replace_line	line_number line	replace the contents of line numbered line_number with line
tools.docs		build_md_page	page_info	given a pageinfo object return markdown for the page
tools.docs		_build_function_page	page_info	given a functionpageinfo object return the page as an md string
tools.docs		_build_class_page	page_info	given a classpageinfo object return the page as an md string
tools.docs		_build_module_page	page_info	given a classpageinfo object return the page as an md string
tools.docs		_build_signature	obj_info	returns a md code block showing the function signature
tools.docs		_build_compatibility	compatibility	return the compatibility section as an md string
tools.docs		_build_function_details	function_details	return the function details section as an md string
tools.docs		test_function		docstring for test_function
tools.docs		test_function	unused_arg unused_kwarg	docstring for test function
tools.docs		test_function_with_args_kwargs	unused_arg	docstring for second test function
tools.docs	TestClass	a_method	arg	docstring for a method
tools.docs	TestClass	a_property		docstring for a property
tools.docs		documentation_path	full_name	returns the file path for the documentation for the given api symbol
tools.docs		_get_raw_docstring	py_object	get the docs for a given python object
tools.docs	ReferenceResolver	from_visitor	cls visitor doc_index	a factory function for building a referenceresolver from a visitor
tools.docs	ReferenceResolver	to_json_file	filepath	converts the refenceresolver to json and writes it to the specified file
tools.docs	ReferenceResolver	replace_references	string relative_path_to_root	replace "@{symbol}" references with links to symbol's documentation page
tools.docs	ReferenceResolver	python_link	link_text ref_full_name relative_path_to_root code_ref	resolve a "@{python symbol}" reference to a markdown link
tools.docs	ReferenceResolver	py_master_name	full_name	return the master name for a python symbol name
tools.docs	ReferenceResolver	reference_to_url	ref_full_name relative_path_to_root	resolve a "@{python symbol}" reference to a relative path
tools.docs	ReferenceResolver	_one_ref	string relative_path_to_root	return a link for a single "@{symbol}" reference
tools.docs	ReferenceResolver	_doc_link	string link_text manual_link_text relative_path_to_root	generate a link for a @{$ } reference
tools.docs	ReferenceResolver	_doc_missing	string unused_hash_tag link_text unused_manual_link_text	generate an error for unrecognized @{$ } references
tools.docs	ReferenceResolver	_cc_link	string link_text unused_manual_link_text relative_path_to_root	generate a link for a @{tensorflow : } reference
tools.docs		_handle_compatibility	doc	parse and remove compatibility blocks from the main docstring
tools.docs		_gen_pairs	items	given an list of items [a b a b ], generate pairs [ a b a b ]
tools.docs	_FunctionDetail	__str__		return the original string that represents the function detail
tools.docs		_parse_function_details	docstring	given a docstring split off the header and parse the function details
tools.docs		_parse_md_docstring	py_object relative_path_to_root reference_resolver	parse the object's docstring and return a _docstringinfo
tools.docs		_get_arg_spec	func	extracts signature information from a function or functools partial object
tools.docs		_generate_signature	func reverse_index	given a function returns a list of strings representing its args
tools.docs	_FunctionPageInfo	set_signature	function reverse_index	attach the function's signature
tools.docs	_ClassPageInfo	collect_docs_for_class	py_class parser_config	collect information necessary specifically for a class's doc page
tools.docs	_ModulePageInfo	collect_docs_for_module	parser_config	collect information necessary specifically for a module's doc page
tools.docs	ParserConfig	__init__	reference_resolver duplicates duplicate_of tree	object with the common config for docs_for_object() calls
tools.docs	ParserConfig	py_name_to_object	full_name	return the python object for a python symbol name
tools.docs		docs_for_object	full_name py_object parser_config	return a pageinfo object describing a given object from the tf api
tools.docs		_get_defined_in	py_object parser_config	returns a description of where the passed in python object was defined
tools.docs		generate_global_index	library_name index reference_resolver	given a dict of full names to python objects generate an index page
tools.api.lib		_SanitizedArgSpec	obj	get an argspec string that is free of addresses
tools.api.lib		_SanitizedMRO	obj	get a list of superclasses with minimal amount of non-tf classes
tools.api.lib	PythonObjectToProtoVisitor	GetProtos		return the list of protos stored
tools.dist_test.python		census_model_config		configuration for the census wide & deep model
tools.dist_test.python	CensusDataSource	__init__	data_dir train_data_url test_data_url columns	constructor of censusdatasource
tools.dist_test.python	CensusDataSource	_input_fn	df	input data function
tools.dist_test.python		_create_experiment_fn	output_dir	experiment creation function
tools.dist_test.scripts		GenerateConfig	num_workers num_param_servers port request_load_balancer	generate configuration strings
tools.dist_test.scripts		WorkerClusterSpecString	num_workers num_param_servers port name_prefix	generates worker cluster spec
tools.dist_test.scripts		ParamServerClusterSpecString	num_workers num_param_servers port name_prefix	generates parameter server spec
tools.dist_test.scripts		ClusterSpecString	num_workers num_param_servers port name_prefix	generates general cluster spec
tools.dist_test.scripts		GetCommonArgs	num_workers num_param_servers port name_prefix	get arguments common to both worker and ps jobs
tools.dist_test.scripts		main		do arg parsing
tools.dist_test.server		parse_cluster_spec	cluster_spec cluster verbose	parse content of cluster_spec string and inject info into cluster protobuf
contrib.stateless.python.kernel_tests		invert_philox	key value	invert the philox bijection
contrib.batching.python.ops		_BatchGrad	op	gradient for batch op
contrib.batching.python.ops		batch_function	num_batch_threads max_batch_size batch_timeout_micros allowed_batch_sizes	batches the computation done by the decorated function
contrib.batching.python.ops		delayed_plus1	x	sleeps for 100ms then returns x+1
contrib.batching.python.ops	BatchOpsTest	testBasicBatch		tests that a single batched tensor executes together and only once
contrib.batching.python.ops	BatchOpsTest	testBatchWithPadding		test that batching with padding up to an allowed batch size works
contrib.batching.python.ops	BatchOpsTest	testMultipleBatch		tests that multiple batched tensors execute together
contrib.batching.python.ops	BatchOpsTest	testIllegalBatchDifferentDim0Sizes		tests illegally feeding tensors with different dim0 sizes
contrib.batching.python.ops	BatchOpsTest	testBasicUnbatch		tests that batch and unbatch work together
contrib.batching.python.ops	BatchOpsTest	testBasicUnbatchDecorated		tests that the batch_function decorator works
contrib.batching.python.ops	BatchOpsTest	testUnbatchTimeout		tests that the unbatch timeout works
contrib.batching.python.ops	BatchOpsTest	testUnbatchGrad		tests that batch and unbatch are differentiable
contrib.bayesflow.python.kernel_tests		_vimco	loss	python implementation of vimco
contrib.bayesflow.python.ops		expectation_importance_sampler	f log_p sampling_dist_q z	monte carlo estimate of e_p[f z ] = e_q[f z p z / q z ]
contrib.bayesflow.python.ops		expectation_importance_sampler_logspace	log_f log_p sampling_dist_q z	importance sampling with a positive function in log-space
contrib.bayesflow.python.ops		_logspace_mean	log_values	evaluate log[e[values]] in a stable manner
contrib.bayesflow.python.ops		expectation	f p z n	monte carlo estimate of an expectation e_p[f z ] with sample mean
contrib.bayesflow.python.ops		_sample_mean	values	mean over sample indices in this module this is always [0]
contrib.bayesflow.python.ops		_sample_max	values	max over sample indices in this module this is always [0]
contrib.bayesflow.python.ops		_get_samples	dist z n seed	check args and return samples
contrib.bayesflow.python.ops		score_function	stochastic_tensor value loss baseline	score function estimator
contrib.bayesflow.python.ops		get_score_function_with_advantage	advantage_fn name	score function estimator with advantage function
contrib.bayesflow.python.ops		get_score_function_with_constant_baseline	baseline name	score function estimator with constant baseline
contrib.bayesflow.python.ops		get_score_function_with_baseline	baseline_fn name	score function estimator with baseline function
contrib.bayesflow.python.ops		get_vimco_advantage_fn	have_log_loss	vimco variational inference for monte carlo objectives baseline
contrib.bayesflow.python.ops		_logexpm1	x	stably calculate log(exp x -1)
contrib.bayesflow.python.ops		_upstream_stochastic_nodes	tensors	map tensors to the stochastic tensors upstream of them
contrib.bayesflow.python.ops		_stochastic_dependencies_map	fixed_losses stochastic_tensors	map stochastic tensors to the fixed losses that depend on them
contrib.bayesflow.python.ops		surrogate_loss	sample_losses stochastic_tensors name	surrogate loss for stochastic graphs
contrib.bayesflow.python.ops	BaseStochasticTensor	loss	sample_loss	returns the term to add to the surrogate loss
contrib.bayesflow.python.ops	_StochasticValueType	stop_gradient		whether the value should be wrapped in stop_gradient
contrib.bayesflow.python.ops	SampleValue	__init__	shape stop_gradient	sample according to shape
contrib.bayesflow.python.ops		value_type	dist_value_type	creates a value type context for any stochastictensor created within
contrib.bayesflow.python.ops	StochasticTensor	__init__	dist name dist_value_type loss_fn	construct a stochastictensor
contrib.bayesflow.python.ops	StochasticTensor	_create_value		create the value tensor based on the value type store as self _value
contrib.bayesflow.python.ops	ObservedStochasticTensor	__init__	dist value name	construct an observedstochastictensor
contrib.bayesflow.python.ops		elbo_ratio	log_p q z n	estimate of the ratio appearing in the elbo and kl divergence
contrib.bayesflow.python.ops		entropy_shannon	p z n seed	monte carlo or deterministic computation of shannon's entropy
contrib.bayesflow.python.ops		renyi_ratio	log_p q alpha z	monte carlo estimate of the ratio appearing in renyi divergence
contrib.bayesflow.python.ops		renyi_alpha	step decay_time alpha_min alpha_max	exponentially decaying tensor appropriate for renyi ratios
contrib.bayesflow.python.ops		register_prior	variational prior	associate a variational stochastictensor with a distribution prior
contrib.bayesflow.python.ops		elbo	log_likelihood variational_with_prior keep_batch_dim form	evidence lower bound log p x >= elbo
contrib.bayesflow.python.ops		elbo_with_log_joint	log_joint variational keep_batch_dim form	evidence lower bound log p x >= elbo
contrib.bayesflow.python.ops		_elbo	form log_likelihood log_joint variational_with_prior	internal implementation of elbo users should use elbo
contrib.bayesflow.python.ops		_find_variational_and_priors	model variational_with_prior require_prior	find upstream stochastictensors and match with registered priors
contrib.bayesflow.python.ops		get_stochastic_variable	getter name shape dist_cls	custom variable getter for stochastic variables
contrib.bayesflow.python.ops		make_stochastic_variable_getter	dist_cls dist_kwargs param_initializers prior	get_stochastic_variable with args partially applied
contrib.bayesflow.examples.reinforce_simple		split_apply_merge	inp partitions fns	split input according to partitions pass results through fns and merge
contrib.bayesflow.examples.reinforce_simple		build_split_apply_merge_model		build the split-apply-merge model
contrib.copy_graph.python.util		copy_variable_to_graph	org_instance to_graph scope	given a variable instance from one graph, initializes and returns a copy of it from another graph, under the specified scope
contrib.copy_graph.python.util		copy_op_to_graph	org_instance to_graph variables scope	given an operation 'org_instance from one graph, initializes and returns a copy of it from another graph,
contrib.copy_graph.python.util		get_copied_op	org_instance graph scope	given an operation instance from some graph, returns its namesake from graph, under the specified scope
contrib.util		load_op_library	path	loads a contrib op library from the given path
contrib.nccl.python.ops		all_sum	tensors	returns a list of tensors with the all-reduce sum across tensors
contrib.nccl.python.ops		all_prod	tensors	returns a list of tensors with the all-reduce product across tensors
contrib.nccl.python.ops		all_min	tensors	returns a list of tensors with the all-reduce min across tensors
contrib.nccl.python.ops		all_max	tensors	returns a list of tensors with the all-reduce max across tensors
contrib.nccl.python.ops		broadcast	src_tensor dst_devices	returns a list of tensors on dst_devices, each with value tensor
contrib.factorization.python.kernel_tests	MaskedmatmulBenchmark	_make_sparse_mask	mask_shape nnz sort	creates a sparse tensor to be used as a mask in masked_matmul
contrib.factorization.python.kernel_tests	MaskedmatmulBenchmark	_run_graph	a_shape b_shape nnz num_iters	run the graph and return its average execution time
contrib.factorization.python.ops	KMeans	__init__	inputs num_clusters initial_clusters distance_metric	creates an object for generating kmeans clustering graph
contrib.factorization.python.ops	KMeans	_distance_graph	cls inputs clusters distance_metric	computes distance between each input and each cluster center
contrib.factorization.python.ops	KMeans	_compute_euclidean_distance	cls inputs clusters	computes euclidean distance between each input and each cluster center
contrib.factorization.python.ops	KMeans	_compute_cosine_distance	cls inputs clusters inputs_normalized	computes cosine distance between each input and each cluster center
contrib.factorization.python.ops	KMeans	_infer_graph	inputs clusters	maps input to closest cluster and the score
contrib.factorization.python.ops	KMeans	_init_clusters_random		does random initialization of clusters
contrib.factorization.python.ops	KMeans	_clusters_l2_normalized		returns true if clusters centers are kept normalized
contrib.factorization.python.ops	KMeans	_initialize_clusters	cluster_centers cluster_centers_initialized cluster_centers_updated	returns an op to initialize the cluster centers
contrib.factorization.python.ops	KMeans	_l2_normalize_data	cls inputs	normalized the input data
contrib.factorization.python.ops	KMeans	training_graph		generate a training graph for kmeans algorithm
contrib.factorization.python.ops	KMeans	_mini_batch_training_op	inputs cluster_idx_list cluster_centers total_counts	creates an op for training for mini batch case
contrib.factorization.python.ops	KMeans	_full_batch_training_op	inputs cluster_idx_list cluster_centers	creates an op for training for full batch case
contrib.factorization.python.ops	WALSModel	__init__	input_rows input_cols n_components unobserved_weight	creates model for wals matrix factorization
contrib.factorization.python.ops	WALSModel	row_factors		returns a list of tensors corresponding to row factor shards
contrib.factorization.python.ops	WALSModel	col_factors		returns a list of tensors corresponding to column factor shards
contrib.factorization.python.ops	WALSModel	row_weights		returns a list of tensors corresponding to row weight shards
contrib.factorization.python.ops	WALSModel	col_weights		returns a list of tensors corresponding to col weight shards
contrib.factorization.python.ops	WALSModel	initialize_op		returns an op for initializing tensorflow variables
contrib.factorization.python.ops	WALSModel	_shard_sizes	cls dims num_shards	helper function to split dims values into num_shards
contrib.factorization.python.ops	WALSModel	_create_factors	cls rows cols num_shards	helper function to create row and column factors
contrib.factorization.python.ops	WALSModel	_create_weights	cls wt_init num_wts num_shards	helper function to create sharded weight vector
contrib.factorization.python.ops	WALSModel	_create_gramian	n_components name	helper function to create the gramian variable
contrib.factorization.python.ops	WALSModel	_transient_var	name	helper function to create a variable
contrib.factorization.python.ops	WALSModel	_prepare_gramian	factors gramian	helper function to create ops to prepare/calculate gramian
contrib.factorization.python.ops	WALSModel	_cached_copy	var name pass_through	helper function to create a worker cached copy of a variable
contrib.factorization.python.ops	WALSModel	_create_transient_vars		creates local cache of factors weights and gramian for rows and columns
contrib.factorization.python.ops	WALSModel	worker_init		op to initialize worker state once before starting any updates
contrib.factorization.python.ops	WALSModel	row_update_prep_gramian_op		op to form the gramian before starting row updates
contrib.factorization.python.ops	WALSModel	col_update_prep_gramian_op		op to form the gramian before starting col updates
contrib.factorization.python.ops	WALSModel	initialize_row_update_op		op to initialize worker state before starting row updates
contrib.factorization.python.ops	WALSModel	initialize_col_update_op		op to initialize worker state before starting column updates
contrib.factorization.python.ops	WALSModel	_get_sharding_func	size num_shards	create sharding function for scatter update
contrib.factorization.python.ops	WALSModel	scatter_update	cls factor indices values	helper function for doing sharded scatter update
contrib.factorization.python.ops	WALSModel	update_row_factors	sp_input transpose_input	updates the row factors
contrib.factorization.python.ops	WALSModel	update_col_factors	sp_input transpose_input	updates the column factors
contrib.factorization.python.ops	WALSModel	project_row_factors	sp_input transpose_input projection_weights	projects the row factors
contrib.factorization.python.ops	WALSModel	project_col_factors	sp_input transpose_input projection_weights	projects the column factors
contrib.factorization.python.ops	WALSModel	_process_input_helper	update_row_factors sp_input transpose_input row_weights	creates the graph for processing a sparse slice of input
contrib.factorization.python.ops	GmmOpsTest	make_data	num_vectors	generates 2-dimensional data centered on 2 2 -1 -1
contrib.factorization.python.ops	GmmOpsTest	make_data_from_centers	num_vectors centers	generates 2-dimensional data with random centers
contrib.factorization.python.ops	GmmOpsTest	test_simple_cluster		tests that the clusters are correct
contrib.factorization.python.ops	GmmOpsTest	testParams		tests that the params work as intended
contrib.factorization.python.ops	WALSMatrixFactorizationTest	np_array_to_sparse	np_array	transforms an np array to a tf sparsetensor
contrib.factorization.python.ops	WALSMatrixFactorizationTest	calculate_loss		calculates the loss of the current trained model
contrib.factorization.python.ops	WALSMatrixFactorizationTest	remap_sparse_tensor_rows	sp_x row_ids shape	remaps the row ids of a tf sparsetensor
contrib.factorization.python.ops	WALSMatrixFactorizationTest	input_fn	np_matrix batch_size project_row projection_weights	returns an input_fn that selects row and col batches from np_matrix
contrib.factorization.python.ops		np_matrix_to_tf_sparse	np_matrix row_slices col_slices transpose	simple util to slice non-zero np matrix elements as tf sparsetensor
contrib.factorization.python.ops		calculate_loss	input_mat row_factors col_factors regularization	calculates the loss of a given factorization
contrib.factorization.python.ops		_streaming_sum	scalar_tensor	create a sum metric and update op
contrib.factorization.python.ops	GMM	__init__	num_clusters model_dir random_seed params	creates a model for running gmm training and inference
contrib.factorization.python.ops	GMM	predict_assignments	input_fn batch_size outputs	see baseestimator predict
contrib.factorization.python.ops	GMM	score	input_fn batch_size steps	predict total sum of distances to nearest clusters
contrib.factorization.python.ops	GMM	weights		returns the cluster weights
contrib.factorization.python.ops	GMM	clusters		returns cluster centers
contrib.factorization.python.ops	GMM	covariances		returns the covariances
contrib.factorization.python.ops	GMM	_model_builder		creates a model function
contrib.factorization.python.ops		_covariance	x diag	defines the covariance operation of a matrix
contrib.factorization.python.ops		_init_clusters_random	data num_clusters random_seed	does random initialization of clusters
contrib.factorization.python.ops	GmmAlgorithm	_create_variables	data initial_means	initializes gmm algorithm
contrib.factorization.python.ops	GmmAlgorithm	training_ops		returns the training operation
contrib.factorization.python.ops	GmmAlgorithm	clusters		returns the clusters with dimensions num_classes x 1 x num_dimensions
contrib.factorization.python.ops	GmmAlgorithm	covariances		returns the covariances matrices
contrib.factorization.python.ops	GmmAlgorithm	assignments		returns a list of tensors with the matrix of assignments per shard
contrib.factorization.python.ops	GmmAlgorithm	scores		returns the distances to each class
contrib.factorization.python.ops	GmmAlgorithm	_define_graph	data	define graph for a single iteration
contrib.factorization.python.ops	GmmAlgorithm	_define_full_covariance_probs	shard_id shard	defines the full covariance probabilties per example in a class
contrib.factorization.python.ops	GmmAlgorithm	_define_diag_covariance_probs	shard_id shard	defines the diagonal covariance probabilities per example in a class
contrib.factorization.python.ops	GmmAlgorithm	_define_log_prob_operation	shard_id shard	probability per example in a class
contrib.factorization.python.ops	GmmAlgorithm	_define_prior_log_prob_operation	shard_id	computes the prior probability of all samples
contrib.factorization.python.ops	GmmAlgorithm	_define_partial_maximization_operation	shard_id shard	computes the partial statistics of the means and covariances
contrib.factorization.python.ops	GmmAlgorithm	_define_distance_to_clusters	data	defines the mahalanobis distance to the assigned gaussian
contrib.factorization.python.ops	GmmAlgorithm	_define_loglikelihood_operation		defines the total log-likelihood of current iteration
contrib.factorization.python.ops		gmm	inp initial_clusters num_clusters random_seed	creates the graph for gaussian mixture model gmm clustering
contrib.factorization.python.ops	_SweepHook	_create_switch_ops	processed_row_indices processed_col_indices train_op	creates ops to update is_row_sweep_var and to increment global_step
contrib.factorization.python.ops	_SweepHook	before_run	run_context	runs the appropriate prep ops and requests running update ops
contrib.factorization.python.ops		_wals_factorization_model_function	features labels mode params	model function for the walsfactorization estimator
contrib.factorization.python.ops	WALSMatrixFactorization	__init__	num_rows num_cols embedding_dimension unobserved_weight	creates a model for matrix factorization using the wals method
contrib.factorization.python.ops	WALSMatrixFactorization	get_row_factors		returns the row factors of the model loading them from checkpoint
contrib.factorization.python.ops	WALSMatrixFactorization	get_col_factors		returns the column factors of the model loading them from checkpoint
contrib.factorization.python.ops	WALSMatrixFactorization	get_projections	input_fn	computes the projections of the rows or columns given in input_fn
contrib.factorization.python.ops	WalsModelTest	simple_train	model inp num_iterations	helper function to train model on inp for num_iterations
contrib.factorization.python.ops	GMMTest	test_weights		tests the shape of the weights
contrib.factorization.python.ops	GMMTest	test_clusters		tests the shape of the clusters
contrib.factorization.examples		placeholder_inputs		generate placeholder variables to represent the input tensors
contrib.factorization.examples		fill_feed_dict	data_set images_pl labels_pl batch_size	fills the feed_dict for training the given step
contrib.factorization.examples		do_eval	sess eval_correct images_placeholder labels_placeholder	runs one evaluation against the full epoch of data
contrib.factorization.examples		inference	inp num_clusters hidden1_units hidden2_units	build the mnist model up to where it may be used for inference
contrib.factorization.examples		run_training		train mnist for a number of steps
contrib.cudnn_rnn.python.kernel_tests	CudnnRNNTest	_create_params_savable	params model	create a rnnparamssaveable for the weight and bias parameters
contrib.cudnn_rnn.python.ops	RNNParamsSaveable	__init__	params_to_canonical canonical_to_params param_variables name	creates a rnnparamssaveable object
contrib.cudnn_rnn.python.ops	_CudnnRNN	__init__	rnn_mode num_layers num_units input_size	creates a cudnnrnn model from model spec
contrib.cudnn_rnn.python.ops	_CudnnRNN	params_size		calculates the size of the opaque parameter buffer needed for this model
contrib.cudnn_rnn.python.ops	_CudnnRNN	__call__	input_data input_h input_c params	runs the forward step for the rnn model
contrib.cudnn_rnn.python.ops	_CudnnRNN	params_to_canonical	params	converts params from a specific format of cudnn to the canonical format
contrib.cudnn_rnn.python.ops	_CudnnRNN	canonical_to_params	weights biases	converts params from the canonical format to a specific format of cudnn
contrib.cudnn_rnn.python.ops	CudnnLSTM	__init__	num_layers num_units input_size input_mode	creates a cudnn lstm model from model spec
contrib.cudnn_rnn.python.ops	CudnnLSTM	__call__	input_data input_h input_c params	runs the forward step for the cudnn lstm model
contrib.cudnn_rnn.python.ops	_CudnnRNNNoInputC	__init__	num_layers num_units input_size input_mode	creates a cudnn rnn model from model without hidden-state c
contrib.cudnn_rnn.python.ops	_CudnnRNNNoInputC	__call__	input_data input_h params is_training	runs the forward step for the cudnn lstm model
contrib.losses.python.losses	SparseSoftmaxCrossEntropyLossTest	testInconsistentWeightSizeRaisesException		the weight tensor has incorrect number of elements
contrib.losses.python.losses	SparseSoftmaxCrossEntropyLossTest	testInconsistentLabelSizeRaisesException		the label tensor has incorrect number of elements
contrib.losses.python.losses	SparseSoftmaxCrossEntropyLossTest	testInconsistentWeightShapeRaisesException		the weight tensor has incorrect shape
contrib.losses.python.losses	SparseSoftmaxCrossEntropyLossTest	testInconsistentLabelShapeRaisesException		the label tensor has incorrect shape
contrib.losses.python.losses		_scale_losses	losses weights	computes the scaled loss
contrib.losses.python.losses		_safe_div	numerator denominator name	computes a safe divide which returns 0 if the denominator is zero
contrib.losses.python.losses		_safe_mean	losses num_present	computes a safe mean of the losses
contrib.losses.python.losses		compute_weighted_loss	losses weights scope	computes the weighted loss
contrib.losses.python.losses		_num_present	losses weights per_batch	computes the number of elements in the loss function induced by weights
contrib.losses.python.losses		add_loss	loss loss_collection	adds a externally defined loss to the collection of losses
contrib.losses.python.losses		get_losses	scope loss_collection	gets the list of losses from the loss_collection
contrib.losses.python.losses		get_regularization_losses	scope	gets the regularization losses
contrib.losses.python.losses		get_total_loss	add_regularization_losses name	returns a tensor whose value represents the total loss
contrib.losses.python.losses		absolute_difference	predictions labels weights scope	adds an absolute difference loss to the training procedure
contrib.losses.python.losses		sigmoid_cross_entropy	logits multi_class_labels weights label_smoothing	creates a cross-entropy loss using tf nn sigmoid_cross_entropy_with_logits
contrib.losses.python.losses		softmax_cross_entropy	logits onehot_labels weights label_smoothing	creates a cross-entropy loss using tf nn softmax_cross_entropy_with_logits
contrib.losses.python.losses		sparse_softmax_cross_entropy	logits labels weights scope	cross-entropy loss using tf nn sparse_softmax_cross_entropy_with_logits
contrib.losses.python.losses		log_loss	predictions labels weights epsilon	adds a log loss term to the training procedure
contrib.losses.python.losses		hinge_loss	logits labels scope	method that returns the loss tensor for hinge loss
contrib.losses.python.losses		mean_squared_error	predictions labels weights scope	adds a sum-of-squares loss to the training procedure
contrib.losses.python.losses		mean_pairwise_squared_error	predictions labels weights scope	adds a pairwise-errors-squared loss to the training procedure
contrib.losses.python.losses		cosine_distance	predictions labels dim weights	adds a cosine-distance loss to the training procedure
contrib.testing.python.framework		assert_summary	expected_tags expected_simple_values summary_proto	asserts summary contains the specified tags and values
contrib.testing.python.framework		to_summary_proto	summary_str	create summary based on latest stats
contrib.testing.python.framework		latest_event_file	base_dir	find latest event file in base_dir
contrib.testing.python.framework		latest_events	base_dir	parse events from latest event file in base_dir
contrib.testing.python.framework		latest_summaries	base_dir	parse summary events from latest event file in base_dir
contrib.testing.python.framework		simple_values_from_events	events tags	parse summaries from events with simple_value
contrib.testing.python.framework	FakeSummaryWriter	assert_summaries	test_case expected_logdir expected_graph expected_summaries	assert expected items have been added to summary writer
contrib.rnn.python.tools		_split_sharded_vars	name_shape_map	split shareded variables
contrib.rnn.python.tools		convert_names	checkpoint_from_path checkpoint_to_path write_v1_checkpoint	migrates the names of variables within a checkpoint
contrib.rnn.python.kernel_tests	FusedRnnCellTest	testBasicRNNFusedWrapper		this test checks that using a wrapper for basicrnn works as expected
contrib.rnn.python.kernel_tests		time_taken_by_op	op sess num_runs	time taken by the op
contrib.rnn.python.kernel_tests		training_gru_block_vs_gru_cell	batch_size cell_size input_size time_steps	benchmark training speed between grublockcell vs grucell
contrib.rnn.python.kernel_tests		inference_gru_block_vs_gru_cell	batch_size cell_size input_size time_steps	benchmark inference speed between grublockcell vs grucell
contrib.rnn.python.kernel_tests		single_bprop_step_gru_block_vs_gru_cell	batch_size cell_size input_size use_gpu	benchmark single bprop step speed between grublockcell vs grucell
contrib.rnn.python.kernel_tests	LSTMBlockCellTest	testLSTMFusedSequenceLengths		verify proper support for sequence lengths in lstmblockfusedcell
contrib.rnn.python.kernel_tests	DummyMultiDimensionalLSTM	__init__	dims	initialize the multi-dimensional lstm cell
contrib.rnn.python.kernel_tests	LSTMTest	_testDoubleInputWithDropoutAndDynamicCalculation	use_gpu	smoke test for using lstm with doubles dropout dynamic calculation
contrib.rnn.python.ops	BasicRNNCell	call	inputs state	most basic rnn output = new_state = act(w * input + u * state + b)
contrib.rnn.python.ops	GRUCell	call	inputs state	gated recurrent unit gru with nunits cells
contrib.rnn.python.ops	BasicLSTMCell	__init__	num_units forget_bias input_size state_is_tuple	initialize the basic lstm cell
contrib.rnn.python.ops	BasicLSTMCell	call	inputs state	long short-term memory cell lstm
contrib.rnn.python.ops	LSTMCell	__init__	num_units input_size use_peepholes cell_clip	initialize the parameters for an lstm cell
contrib.rnn.python.ops	LSTMCell	call	inputs state	run one step of lstm
contrib.rnn.python.ops	OutputProjectionWrapper	__init__	cell output_size activation reuse	create a cell with output projection
contrib.rnn.python.ops	OutputProjectionWrapper	call	inputs state	run the cell and output projection on inputs starting from state
contrib.rnn.python.ops	InputProjectionWrapper	__init__	cell num_proj activation input_size	create a cell with input projection
contrib.rnn.python.ops	InputProjectionWrapper	call	inputs state	run the input projection and then the cell
contrib.rnn.python.ops	DropoutWrapper	__init__	cell input_keep_prob output_keep_prob state_keep_prob	create a cell with added input state and/or output dropout
contrib.rnn.python.ops	DropoutWrapper	_variational_recurrent_dropout_value	index value noise keep_prob	performs dropout given the pre-calculated noise tensor
contrib.rnn.python.ops	DropoutWrapper	_dropout	values salt_prefix recurrent_noise keep_prob	decides whether to perform standard dropout or recurrent dropout
contrib.rnn.python.ops	DropoutWrapper	__call__	inputs state scope	run the cell with the declared dropouts
contrib.rnn.python.ops	ResidualWrapper	__init__	cell	constructs a residualwrapper for cell
contrib.rnn.python.ops	ResidualWrapper	__call__	inputs state scope	run the cell and add its inputs to its outputs
contrib.rnn.python.ops	DeviceWrapper	__init__	cell device	construct a devicewrapper for cell with device device
contrib.rnn.python.ops	DeviceWrapper	__call__	inputs state scope	run the cell on specified device
contrib.rnn.python.ops	EmbeddingWrapper	__init__	cell embedding_classes embedding_size initializer	create a cell with an added input embedding
contrib.rnn.python.ops	EmbeddingWrapper	call	inputs state	run the cell on embedded inputs
contrib.rnn.python.ops	MultiRNNCell	__init__	cells state_is_tuple	create a rnn cell composed sequentially of a number of rnncells
contrib.rnn.python.ops	MultiRNNCell	call	inputs state	run this multi-layer cell on inputs starting from state
contrib.rnn.python.ops	_SlimRNNCell	__init__	cell_fn	create a slimrnncell from a cell_fn
contrib.rnn.python.ops		_linear	args output_size bias bias_start	linear map sum_i(args[i] * w[i]), where w[i] is a variable
contrib.rnn.python.ops		_get_concat_variable	name shape dtype num_shards	get a sharded variable concatenated into one tensor
contrib.rnn.python.ops		_get_sharded_variable	name shape dtype num_shards	get a list of sharded variables with the given dtype
contrib.rnn.python.ops	CoupledInputForgetGateLSTMCell	__init__	num_units use_peepholes initializer num_proj	initialize the parameters for an lstm cell
contrib.rnn.python.ops	CoupledInputForgetGateLSTMCell	call	inputs state	run one step of lstm
contrib.rnn.python.ops	TimeFreqLSTMCell	__init__	num_units use_peepholes cell_clip initializer	initialize the parameters for an lstm cell
contrib.rnn.python.ops	TimeFreqLSTMCell	call	inputs state	run one step of lstm
contrib.rnn.python.ops	TimeFreqLSTMCell	_make_tf_features	input_feat	make the frequency features
contrib.rnn.python.ops	GridLSTMCell	__init__	num_units use_peepholes share_time_frequency_weights cell_clip	initialize the parameters for an lstm cell
contrib.rnn.python.ops	GridLSTMCell	call	inputs state	run one step of lstm
contrib.rnn.python.ops	GridLSTMCell	_compute	freq_inputs block state batch_size	run the actual computation of one step lstm
contrib.rnn.python.ops	GridLSTMCell	_make_tf_features	input_feat slice_offset	make the frequency features
contrib.rnn.python.ops	BidirectionalGridLSTMCell	__init__	num_units use_peepholes share_time_frequency_weights cell_clip	initialize the parameters for an lstm cell
contrib.rnn.python.ops	BidirectionalGridLSTMCell	call	inputs state	run one step of lstm
contrib.rnn.python.ops	AttentionCellWrapper	__init__	cell attn_length attn_size attn_vec_size	create a cell with attention
contrib.rnn.python.ops	AttentionCellWrapper	call	inputs state	long short-term memory cell with attention lstma
contrib.rnn.python.ops	HighwayWrapper	__init__	cell couple_carry_transform_gates carry_bias_init	constructs a highwaywrapper for cell
contrib.rnn.python.ops	HighwayWrapper	__call__	inputs state scope	run the cell and add its inputs to its outputs
contrib.rnn.python.ops	LayerNormBasicLSTMCell	__init__	num_units forget_bias input_size activation	initializes the basic lstm cell
contrib.rnn.python.ops	LayerNormBasicLSTMCell	call	inputs state	lstm cell with layer normalization and recurrent dropout
contrib.rnn.python.ops	NASCell	__init__	num_units num_proj use_biases reuse	initialize the parameters for a nas cell
contrib.rnn.python.ops	NASCell	call	inputs state	run one step of nas cell
contrib.rnn.python.ops	UGRNNCell	__init__	num_units initializer forget_bias activation	initialize the parameters for an ugrnn cell
contrib.rnn.python.ops	UGRNNCell	call	inputs state	run one step of ugrnn
contrib.rnn.python.ops	IntersectionRNNCell	__init__	num_units num_in_proj initializer forget_bias	initialize the parameters for an +rnn cell
contrib.rnn.python.ops	IntersectionRNNCell	call	inputs state	run one step of the intersection rnn
contrib.rnn.python.ops	CompiledWrapper	__init__	cell compile_stateful	create compiledwrapper cell
contrib.rnn.python.ops		_random_exp_initializer	minval maxval seed dtype	returns an exponential distribution initializer
contrib.rnn.python.ops	PhasedLSTMCell	__init__	num_units use_peepholes leak ratio_on	initialize the phased lstm cell
contrib.rnn.python.ops	PhasedLSTMCell	_mod	x y	modulo function that propagates x gradients
contrib.rnn.python.ops	PhasedLSTMCell	_get_cycle_ratio	time phase period	compute the cycle ratio in the dtype of the time
contrib.rnn.python.ops	PhasedLSTMCell	call	inputs state	phased lstm cell
contrib.rnn.python.ops	GLSTMCell	__init__	num_units initializer num_proj number_of_groups	initialize the parameters of g-lstm cell
contrib.rnn.python.ops	GLSTMCell	_get_input_for_group	inputs group_id group_size	slices inputs into groups to prepare for processing by cell's groups
contrib.rnn.python.ops	GLSTMCell	call	inputs state	run one step of g-lstm
contrib.rnn.python.ops		static_rnn	cell inputs initial_state dtype	creates a recurrent neural network specified by rnncell cell
contrib.rnn.python.ops		static_state_saving_rnn	cell inputs state_saver state_name	rnn that accepts a state saver for time-truncated rnn calculation
contrib.rnn.python.ops		static_bidirectional_rnn	cell_fw cell_bw inputs initial_state_fw	creates a bidirectional recurrent neural network
contrib.rnn.python.ops		_GRUBlockCellGrad	op	gradient for grublockcell
contrib.rnn.python.ops	GRUBlockCell	__init__	cell_size	initialize the block gru cell
contrib.rnn.python.ops	FusedRNNCell	__call__	inputs initial_state dtype sequence_length	run this fused rnn on inputs starting from the given state
contrib.rnn.python.ops	FusedRNNCellAdaptor	__init__	cell use_dynamic_rnn	initialize the adaptor
contrib.rnn.python.ops	TimeReversedFusedRNN	_reverse	t lengths	time reverse the provided tensor or list of tensors
contrib.rnn.python.ops		_lstm_block_cell	x cs_prev h_prev w	computes the lstm cell forward propagation for 1 time step
contrib.rnn.python.ops		_block_lstm	seq_len_max x w b	todo williamchan : add doc
contrib.rnn.python.ops		_LSTMBlockCellGrad	op	gradient for lstmblockcell
contrib.rnn.python.ops		_BlockLSTMGrad	op	gradient for blocklstm
contrib.rnn.python.ops	LSTMBlockCell	__init__	num_units forget_bias use_peephole	initialize the basic lstm cell
contrib.rnn.python.ops	LSTMBlockCell	__call__	x states_prev scope	long short-term memory cell lstm
contrib.rnn.python.ops	LSTMBlockWrapper	num_units		number of units in this cell output dimension
contrib.rnn.python.ops	LSTMBlockWrapper	_call_cell	inputs initial_cell_state initial_output dtype	run this lstm on inputs starting from the given state
contrib.rnn.python.ops	LSTMBlockWrapper	__call__	inputs initial_state dtype sequence_length	run this lstm on inputs starting from the given state
contrib.rnn.python.ops	LSTMBlockWrapper	_gather_states	data indices batch_size	produce out, s t out i j = data(indices i i j)
contrib.rnn.python.ops	LSTMBlockFusedCell	__init__	num_units forget_bias cell_clip use_peephole	initialize the lstm cell
contrib.rnn.python.ops	LSTMBlockFusedCell	num_units		number of units in this cell output dimension
contrib.rnn.python.ops	LSTMBlockFusedCell	_call_cell	inputs initial_cell_state initial_output dtype	run this lstm on inputs starting from the given state
contrib.rnn.python.ops		stack_bidirectional_rnn	cells_fw cells_bw inputs initial_states_fw	creates a bidirectional recurrent neural network
contrib.rnn.python.ops		stack_bidirectional_dynamic_rnn	cells_fw cells_bw inputs initial_states_fw	creates a dynamic bidirectional recurrent neural network
contrib.labeled_tensor.python.ops		select	labeled_tensor selection name	slice out a subset of the tensor
contrib.labeled_tensor.python.ops		concat	labeled_tensors axis_name name	concatenate tensors along a dimension
contrib.labeled_tensor.python.ops		pack	labeled_tensors new_axis axis_position name	pack tensors along a new axis
contrib.labeled_tensor.python.ops		unpack	labeled_tensor axis_name name	unpack the tensor
contrib.labeled_tensor.python.ops		reshape	labeled_tensor existing_axes new_axes name	reshape specific axes of a labeledtensor
contrib.labeled_tensor.python.ops		rename_axis	labeled_tensor existing_name new_name name	rename an axis of labeledtensor
contrib.labeled_tensor.python.ops		batch	labeled_tensors batch_size num_threads capacity	rebatch a tensor
contrib.labeled_tensor.python.ops		shuffle_batch	labeled_tensors batch_size num_threads capacity	rebatch a tensor with shuffling
contrib.labeled_tensor.python.ops		random_crop	labeled_tensor shape_map seed name	randomly crops a tensor to a given size
contrib.labeled_tensor.python.ops		map_fn	fn labeled_tensor name	map on the list of tensors unpacked from labeled_tensor
contrib.labeled_tensor.python.ops		foldl	fn labeled_tensor initial_value name	left fold on the list of tensors unpacked from labeled_tensor
contrib.labeled_tensor.python.ops		squeeze	labeled_tensor axis_names name	remove size-1 dimensions
contrib.labeled_tensor.python.ops		matmul	a b name	matrix multiply two tensors with rank 1 or 2
contrib.labeled_tensor.python.ops		define_reduce_op	op_name reduce_fn	define a reduction op for labeled tensors
contrib.labeled_tensor.python.ops		tile	labeled_tensor multiples name	constructs a tensor by tiling a given tensor
contrib.labeled_tensor.python.ops		pad	labeled_tensor paddings mode name	pads a tensor
contrib.labeled_tensor.python.ops		constant	value dtype axes name	creates a constant tensor
contrib.labeled_tensor.python.ops		zeros_like	labeled_tensor dtype name	creates an identical tensor with all elements set to zero
contrib.labeled_tensor.python.ops		ones_like	labeled_tensor dtype name	creates an identical tensor with all elements set to one
contrib.labeled_tensor.python.ops		cast	labeled_tensor dtype name	casts a labeled tensor to a new type
contrib.labeled_tensor.python.ops		verify_tensor_all_finite	labeled_tensor message name	asserts a tensor doesn't contain nans or infs
contrib.labeled_tensor.python.ops		boolean_mask	labeled_tensor mask name	apply a boolean mask to a labeled tensor
contrib.labeled_tensor.python.ops		where	condition x y name	return elements from x or y depending on condition
contrib.labeled_tensor.python.ops	Axis	__init__	name value	construct an axis
contrib.labeled_tensor.python.ops	Axis	value		returns the tf dimension or tuple specifying axis ticks
contrib.labeled_tensor.python.ops	Axis	labels		returns the tuple containing coordinate labels else none
contrib.labeled_tensor.python.ops	Axis	index	value	returns the integer position of the given tick label
contrib.labeled_tensor.python.ops		as_axis	axis_data	convert an axislike object into an axis
contrib.labeled_tensor.python.ops	Axes	__init__	axes	construct an axes
contrib.labeled_tensor.python.ops	Axes	remove	axis_name	creates a new axes object without the given axis
contrib.labeled_tensor.python.ops	LabeledTensor	__init__	tensor axes	construct a labeledtenor
contrib.labeled_tensor.python.ops	LabeledTensor	_as_graph_element		support tf graph as_graph_element on labeledtensor objects
contrib.labeled_tensor.python.ops	LabeledTensor	get_shape		returns the tensorshape that represents the shape of this tensor
contrib.labeled_tensor.python.ops		convert_to_labeled_tensor	value dtype name	converts the given value to a labeledtensor
contrib.labeled_tensor.python.ops		concat_axes	axes	concatenate a list of axes
contrib.labeled_tensor.python.ops		identity	labeled_tensor name	the identity op
contrib.labeled_tensor.python.ops		slice_function	labeled_tensor selection name	slice out a subset of the tensor
contrib.labeled_tensor.python.ops		transpose	labeled_tensor axis_order name	permute a tensor's axes
contrib.labeled_tensor.python.ops		expand_dims	labeled_tensor axes name	insert dimensions of size 1
contrib.labeled_tensor.python.ops		get_axis_order		get the axis_order set by any containing axis_order_scope
contrib.labeled_tensor.python.ops		axis_order_scope	axis_order	set axis order for the result of broadcasting operations within a scope
contrib.labeled_tensor.python.ops		check_axis_order	labeled_tensor axis_order	verify that the given tensor has a consistent axis order
contrib.labeled_tensor.python.ops		impose_axis_order	labeled_tensor axis_order name	impose desired axis order on a labeled tensor
contrib.labeled_tensor.python.ops		_find_consistent_ordering	a b	find the left-most consistent ordering between two lists of unique items
contrib.labeled_tensor.python.ops		align	labeled_tensor_0 labeled_tensor_1 name	align the axes of two tensors so they may be broadcast to each other
contrib.labeled_tensor.python.ops		define_unary_op	op_name elementwise_function	define a unary operation for labeled tensors
contrib.labeled_tensor.python.ops		define_binary_op	op_name elementwise_function	define a binary operation that broadcasts labeled tensors
contrib.labeled_tensor.python.ops		_labeled_to_unlabeled_features	features	convert a dict of lt fixedlenfeature into a dict of tf fixedlenfeature
contrib.labeled_tensor.python.ops		parse_example	serialized features name example_names	parse example protos into a dict of labeled tensors
contrib.labeled_tensor.python.ops		parse_single_example	serialized features name example_names	parses a single example proto
contrib.labeled_tensor.python.ops		placeholder	dtype axes name	create a placeholder for a labeled tensor
contrib.labeled_tensor.python.ops		_replace_forward_references	t context	replace forward references in the given type
contrib.labeled_tensor.python.ops		register_type_abbreviation	name alias	register an abbreviation for a type in typecheck tracebacks
contrib.labeled_tensor.python.ops		_type_repr	t	a more succinct repr for typecheck tracebacks
contrib.labeled_tensor.python.ops		accepts		a decorator which checks the input types of a function
contrib.labeled_tensor.python.ops		returns		a decorator which checks the return types of a function
contrib.labeled_tensor.python.ops	ReshapeCoder	encode	labeled_tensor	reshape the input to the target shape
contrib.labeled_tensor.python.ops	ReshapeCoder	decode	labeled_tensor	reshape the input to the original shape
contrib.seq2seq.python.ops		sequence_loss	logits targets weights average_across_timesteps	weighted cross-entropy loss for a sequence of logits
contrib.seq2seq.python.ops		_prepare_memory	memory memory_sequence_length check_inner_dims_defined	convert to tensor and possibly mask memory
contrib.seq2seq.python.ops	_BaseAttentionMechanism	__init__	query_layer memory memory_sequence_length memory_layer	construct base attentionmechanism class
contrib.seq2seq.python.ops	LuongAttention	__init__	num_units memory memory_sequence_length scale	construct the attentionmechanism mechanism
contrib.seq2seq.python.ops	LuongAttention	__call__	query	score the query based on the keys and values
contrib.seq2seq.python.ops	BahdanauAttention	__init__	num_units memory memory_sequence_length normalize	construct the attention mechanism
contrib.seq2seq.python.ops	BahdanauAttention	__call__	query	score the query based on the keys and values
contrib.seq2seq.python.ops	AttentionWrapperState	clone		clone this object overriding components provided by kwargs
contrib.seq2seq.python.ops		hardmax	logits name	returns batched one-hot vectors
contrib.seq2seq.python.ops	AttentionWrapper	__init__	cell attention_mechanism attention_layer_size alignment_history	construct the attentionwrapper
contrib.seq2seq.python.ops	AttentionWrapper	call	inputs state	perform a step of attention-wrapped rnn
contrib.seq2seq.python.ops	BasicDecoder	initialize	name	initialize the decoder
contrib.seq2seq.python.ops	BasicDecoder	step	time inputs state name	perform a decoding step
contrib.seq2seq.python.ops	Decoder	batch_size		the batch size of input values
contrib.seq2seq.python.ops	Decoder	output_size		a possibly nested tuple of integer[s] or tensorshape object[s]
contrib.seq2seq.python.ops	Decoder	output_dtype		a possibly nested tuple of dtype[s]
contrib.seq2seq.python.ops	Decoder	initialize	name	called before any decoding iterations
contrib.seq2seq.python.ops	Decoder	step	time inputs state name	called per step of decoding but only once for dynamic decoding
contrib.seq2seq.python.ops		_create_zero_outputs	size dtype batch_size	create a zero outputs tensor structure
contrib.seq2seq.python.ops		dynamic_decode	decoder output_time_major impute_finished maximum_iterations	perform dynamic decoding with decoder
contrib.seq2seq.python.ops	Helper	batch_size		batch size of tensor returned by sample
contrib.seq2seq.python.ops	Helper	initialize	name	returns (initial_finished initial_inputs)
contrib.seq2seq.python.ops	Helper	next_inputs	time outputs state sample_ids	returns (finished next_inputs next_state)
contrib.seq2seq.python.ops	TrainingHelper	next_inputs	time outputs state name	next_inputs_fn for traininghelper
contrib.seq2seq.python.ops	GreedyEmbeddingHelper	sample	time outputs state name	sample for greedyembeddinghelper
contrib.seq2seq.python.ops	GreedyEmbeddingHelper	next_inputs	time outputs state sample_ids	next_inputs_fn for greedyembeddinghelper
contrib.seq2seq.python.ops		tile_batch	t multiplier name	tile the batch dimension of tensor t
contrib.seq2seq.python.ops	BeamSearchDecoder	initialize	name	initialize the decoder
contrib.seq2seq.python.ops	BeamSearchDecoder	finalize	outputs final_state sequence_lengths	finalize and return the predicted_ids
contrib.seq2seq.python.ops	BeamSearchDecoder	_merge_batch_beams	t s	merges the tensor from a batch of beams into a batch by beams
contrib.seq2seq.python.ops	BeamSearchDecoder	_split_batch_beams	t s	splits the tensor from a batch by beams into a batch of beams
contrib.seq2seq.python.ops	BeamSearchDecoder	_maybe_split_batch_beams	t s	maybe splits the tensor from a batch by beams into a batch of beams
contrib.seq2seq.python.ops	BeamSearchDecoder	_maybe_merge_batch_beams	t s	splits the tensor from a batch by beams into a batch of beams
contrib.seq2seq.python.ops	BeamSearchDecoder	step	time inputs state name	perform a decoding step
contrib.seq2seq.python.ops		_beam_search_step	time logits beam_state batch_size	performs a single step of beam search decoding
contrib.seq2seq.python.ops		_get_scores	log_probs sequence_lengths length_penalty_weight	calculates scores for beam search hypotheses
contrib.seq2seq.python.ops		_length_penalty	sequence_lengths penalty_factor	calculates the length penalty see https //arxiv org/abs/1609 08144
contrib.seq2seq.python.ops		_mask_probs	probs eos_token finished	masks log probabilities
contrib.saved_model.python.saved_model		read_saved_model	saved_model_dir	reads the savedmodel pb or savedmodel pbtxt file containing savedmodel
contrib.saved_model.python.saved_model		get_saved_model_tag_sets	saved_model_dir	retrieves all the tag-sets available in the savedmodel
contrib.saved_model.python.saved_model		get_signature_def_by_key	meta_graph_def signature_def_key	utility function to get a signaturedef protocol buffer by its key
contrib.opt.python.training	MovingAverageOptimizer	__init__	opt average_decay num_updates sequential_update	construct a new movingaverageoptimizer
contrib.opt.python.training	MovingAverageOptimizer	swapping_saver	var_list name	create a saver swapping moving averages and variables
contrib.opt.python.training	ExternalOptimizerInterface	__init__	loss var_list equalities inequalities	initialize a new interface instance
contrib.opt.python.training	ExternalOptimizerInterface	minimize	session feed_dict fetches step_callback	minimize a scalar tensor
contrib.opt.python.training	ExternalOptimizerInterface	_minimize	initial_val loss_grad_func equality_funcs equality_grad_funcs	wrapper for a particular optimization algorithm implementation
contrib.opt.python.training	ExternalOptimizerInterface	_pack	cls tensors	pack a list of tensors into a single flattened rank-1 tensor
contrib.opt.python.training	ExternalOptimizerInterface	_make_eval_func	tensors session feed_dict fetches	construct a function that evaluates a tensor or list of tensors
contrib.opt.python.training	MockOptimizerInterface	_minimize	initial_val loss_grad_func step_callback optimizer_kwargs	minimize x - x0 **2 / 2 with respect to x
contrib.opt.python.training	VariableClippingOptimizer	__init__	opt vars_to_clip_dims max_norm use_locking	construct a new clip-norm optimizer
contrib.opt.python.training	VariableClippingOptimizer	_maybe_colocate_with	var	context to colocate with var if colocate_clip_ops_with_vars
contrib.layers.python.layers	_FeatureColumn	name		returns the name of column or transformed column
contrib.layers.python.layers	_FeatureColumn	config		returns configuration of the base feature for tf parse_example
contrib.layers.python.layers	_FeatureColumn	key		returns a string which will be used as a key when we do sorting
contrib.layers.python.layers	_FeatureColumn	insert_transformed_feature	columns_to_tensors	apply transformation and inserts it into columns_to_tensors
contrib.layers.python.layers	_FeatureColumn	_to_dnn_input_layer	input_tensor weight_collection trainable output_rank	returns a tensor as an input to the first layer of neural network
contrib.layers.python.layers	_FeatureColumn	_deep_embedding_lookup_arguments	input_tensor	returns arguments to embedding lookup to build an input layer
contrib.layers.python.layers	_FeatureColumn	_wide_embedding_lookup_arguments	input_tensor	returns arguments to look up embeddings for this column
contrib.layers.python.layers	_FeatureColumn	_to_dense_tensor	input_tensor	returns a dense tensor representing this column's values
contrib.layers.python.layers	_FeatureColumn	_checkpoint_path		returns none or a (path tensor_name) to load a checkpoint from
contrib.layers.python.layers	_FeatureColumn	_key_without_properties	properties	helper method for self key() that omits particular properties
contrib.layers.python.layers	_SparseColumn	length		returns vocabulary or hash_bucket size
contrib.layers.python.layers	_SparseColumn	key		returns a string which will be used as a key when we do sorting
contrib.layers.python.layers	_SparseColumn	id_tensor	input_tensor	returns the id tensor from the given transformed input_tensor
contrib.layers.python.layers	_SparseColumn	weight_tensor	input_tensor	returns the weight tensor from the given transformed input_tensor
contrib.layers.python.layers	_SparseColumn	_get_input_sparse_tensor	columns_to_tensors	looks up the input tensor for transformation and sparsify it if dense
contrib.layers.python.layers	_SparseColumn	is_compatible	other_column	check compatability of two sparse columns
contrib.layers.python.layers	_SparseColumnIntegerized	insert_transformed_feature	columns_to_tensors	handles sparse column to id conversion
contrib.layers.python.layers		sparse_column_with_integerized_feature	column_name bucket_size combiner dtype	creates an integerized _sparsecolumn
contrib.layers.python.layers	_SparseColumnHashed	insert_transformed_feature	columns_to_tensors	handles sparse column to id conversion
contrib.layers.python.layers		sparse_column_with_hash_bucket	column_name hash_bucket_size combiner dtype	creates a _sparsecolumn with hashed bucket configuration
contrib.layers.python.layers	_SparseColumnKeys	insert_transformed_feature	columns_to_tensors	handles sparse column to id conversion
contrib.layers.python.layers		sparse_column_with_keys	column_name keys default_value combiner	creates a _sparsecolumn with keys
contrib.layers.python.layers	_SparseColumnVocabulary	insert_transformed_feature	columns_to_tensors	handles sparse column to id conversion
contrib.layers.python.layers		sparse_column_with_vocabulary_file	column_name vocabulary_file num_oov_buckets vocab_size	creates a _sparsecolumn with vocabulary file configuration
contrib.layers.python.layers	_WeightedSparseColumn	length		returns id size
contrib.layers.python.layers	_WeightedSparseColumn	key		returns a string which will be used as a key when we do sorting
contrib.layers.python.layers	_WeightedSparseColumn	insert_transformed_feature	columns_to_tensors	inserts a tuple with the id and weight tensors
contrib.layers.python.layers	_WeightedSparseColumn	id_tensor	input_tensor	returns the id tensor from the given transformed input_tensor
contrib.layers.python.layers	_WeightedSparseColumn	weight_tensor	input_tensor	returns the weight tensor from the given transformed input_tensor
contrib.layers.python.layers		weighted_sparse_column	sparse_id_column weight_column_name dtype	creates a _sparsecolumn by combining sparse_id_column with a weight column
contrib.layers.python.layers	_OneHotColumn	length		returns vocabulary or hash_bucket size
contrib.layers.python.layers	_OneHotColumn	config		returns the parsing config of the origin column
contrib.layers.python.layers	_OneHotColumn	key		returns a string which will be used as a key when we do sorting
contrib.layers.python.layers	_OneHotColumn	insert_transformed_feature	columns_to_tensors	used by the transformer to prevent double transformations
contrib.layers.python.layers	_OneHotColumn	_to_dnn_input_layer	transformed_input_tensor unused_weight_collections unused_trainable output_rank	returns a tensor as an input to the first layer of neural network
contrib.layers.python.layers	_EmbeddingColumn	length		returns id size
contrib.layers.python.layers	_EmbeddingColumn	key		returns a string which will be used as a key when we do sorting
contrib.layers.python.layers		one_hot_column	sparse_id_column	creates an _onehotcolumn for a one-hot or multi-hot repr in a dnn
contrib.layers.python.layers		embedding_column	sparse_id_column dimension combiner initializer	creates an _embeddingcolumn for feeding sparse data into a dnn
contrib.layers.python.layers		shared_embedding_columns	sparse_id_columns dimension combiner shared_embedding_name	creates a list of _embeddingcolumn sharing the same embedding
contrib.layers.python.layers	_ScatteredEmbeddingColumn	key		returns a string which will be used as a key when we do sorting
contrib.layers.python.layers		scattered_embedding_column	column_name size dimension hash_key	creates an embedding column of a sparse feature using parameter hashing
contrib.layers.python.layers		_reshape_real_valued_tensor	input_tensor output_rank column_name	reshaping logic for dense numeric tensors
contrib.layers.python.layers	_RealValuedVarLenColumn	key		returns a string which will be used as a key when we do sorting
contrib.layers.python.layers	_RealValuedVarLenColumn	normalizer_fn		returns the function used to normalize the column
contrib.layers.python.layers	_RealValuedVarLenColumn	_normalized_input_tensor	input_tensor	returns the input tensor after custom normalization is applied
contrib.layers.python.layers	_RealValuedVarLenColumn	insert_transformed_feature	columns_to_tensors	apply transformation and inserts it into columns_to_tensors
contrib.layers.python.layers		_real_valued_var_len_column	column_name default_value dtype normalizer	creates a _realvaluedvarlencolumn for variable-length numeric data
contrib.layers.python.layers	_RealValuedColumn	key		returns a string which will be used as a key when we do sorting
contrib.layers.python.layers	_RealValuedColumn	normalizer_fn		returns the function used to normalize the column
contrib.layers.python.layers	_RealValuedColumn	_normalized_input_tensor	input_tensor	returns the input tensor after custom normalization is applied
contrib.layers.python.layers	_RealValuedColumn	insert_transformed_feature	columns_to_tensors	apply transformation and inserts it into columns_to_tensors
contrib.layers.python.layers		real_valued_column	column_name dimension default_value dtype	creates a _realvaluedcolumn for dense numeric data
contrib.layers.python.layers	_BucketizedColumn	length		returns total number of buckets
contrib.layers.python.layers	_BucketizedColumn	key		returns a string which will be used as a key when we do sorting
contrib.layers.python.layers	_BucketizedColumn	to_sparse_tensor	input_tensor	creates a sparsetensor from the bucketized tensor
contrib.layers.python.layers		bucketized_column	source_column boundaries	creates a _bucketizedcolumn for discretizing dense input
contrib.layers.python.layers	_CrossedColumn	length		returns total number of buckets
contrib.layers.python.layers	_CrossedColumn	key		returns a string which will be used as a key when we do sorting
contrib.layers.python.layers	_CrossedColumn	id_tensor	input_tensor	returns the id tensor from the given transformed input_tensor
contrib.layers.python.layers	_CrossedColumn	weight_tensor	input_tensor	returns the weight tensor from the given transformed input_tensor
contrib.layers.python.layers	_CrossedColumn	insert_transformed_feature	columns_to_tensors	handles cross transformation
contrib.layers.python.layers		crossed_column	columns hash_bucket_size combiner ckpt_to_load_from	creates a _crossedcolumn for performing feature crosses
contrib.layers.python.layers	DataFrameColumn	key		returns a string which will be used as a key when we do sorting
contrib.layers.python.layers		_get_feature_config	feature_column	returns configuration for the base feature defined in feature_column
contrib.layers.python.layers		create_feature_spec_for_parsing	feature_columns	helper that prepares features config from input feature_columns
contrib.layers.python.layers		_create_sequence_feature_spec_for_parsing	sequence_feature_columns allow_missing_by_default	prepares a feature spec for parsing tf sequenceexamples
contrib.layers.python.layers		make_place_holder_tensors_for_base_features	feature_columns	returns placeholder tensors for inference
contrib.layers.python.layers	PartialFlattenTest	testDensePartialFlatten		test _inner_flatten on tensors
contrib.layers.python.layers	PartialFlattenTest	testSparsePartialFlatten		test _inner_flatten on sparsetensors
contrib.layers.python.layers	PartialFlattenTest	testIncompleteShape		test _inner_flatten shape inference for incomplete shapes
contrib.layers.python.layers	PartialFlattenTest	testDenseFlattenRankAssertion		test _inner_flatten rank assertion for dense tensors
contrib.layers.python.layers	PartialFlattenTest	testSparseFlattenRankAssertion		test _inner_flatten rank assertion for sparse tensors
contrib.layers.python.layers		avg_pool2d	inputs kernel_size stride padding	adds a 2d average pooling op
contrib.layers.python.layers		_fused_batch_norm	inputs decay center scale	adds a batch normalization layer from http //arxiv org/abs/1502 03167
contrib.layers.python.layers		batch_norm	inputs decay center scale	adds a batch normalization layer from http //arxiv org/abs/1502 03167
contrib.layers.python.layers		bias_add	inputs activation_fn initializer regularizer	adds a bias to the inputs
contrib.layers.python.layers		convolution	inputs num_outputs kernel_size stride	adds an n-d convolution followed by an optional batch_norm layer
contrib.layers.python.layers		convolution2d_in_plane	inputs kernel_size stride padding	performs the same in-plane convolution to each channel independently
contrib.layers.python.layers		convolution2d_transpose	inputs num_outputs kernel_size stride	adds a convolution2d_transpose with an optional batch normalization layer
contrib.layers.python.layers		dropout	inputs keep_prob noise_shape is_training	returns a dropout op applied to the input
contrib.layers.python.layers		flatten	inputs outputs_collections scope	flattens the input while maintaining the batch_size
contrib.layers.python.layers		_sparse_inner_flatten	inputs new_rank	helper function for inner_flatten
contrib.layers.python.layers		_dense_inner_flatten	inputs new_rank	helper function for inner_flatten
contrib.layers.python.layers		_inner_flatten	inputs new_rank output_collections scope	flattens inner dimensions of inputs, returns a tensor with new_rank
contrib.layers.python.layers		_model_variable_getter	getter name shape dtype	getter that uses model_variable for compatibility with core layers
contrib.layers.python.layers		_build_variable_getter	rename	build a model variable getter that respects scope getter and renames
contrib.layers.python.layers		_add_variable_to_collections	variable collections_set collections_name	adds variable or all its parts to all collections with that name
contrib.layers.python.layers		fully_connected	inputs num_outputs activation_fn normalizer_fn	adds a fully connected layer
contrib.layers.python.layers		layer_norm	inputs center scale activation_fn	adds a layer normalization layer from https //arxiv org/abs/1607 06450
contrib.layers.python.layers		max_pool2d	inputs kernel_size stride padding	adds a 2d max pooling op
contrib.layers.python.layers		pool	inputs kernel_size pooling_type padding	adds a pooling op
contrib.layers.python.layers		one_hot_encoding	labels num_classes on_value off_value	transform numeric labels into onehot_labels using tf one_hot
contrib.layers.python.layers		repeat	inputs repetitions layer	applies the same layer with the same arguments repeatedly
contrib.layers.python.layers		_scale_gradient_shape	op	shape helper function for scale_gradient function below
contrib.layers.python.layers		_scale_gradient_grad	op grad	python gradient helper function for scale_gradient function below
contrib.layers.python.layers		scale_gradient	inputs gradient_multiplier	identity operation but with the gradient multiplied by a tensor
contrib.layers.python.layers		separable_convolution2d	inputs num_outputs kernel_size depth_multiplier	adds a depth-separable 2d convolution with optional batch_norm layer
contrib.layers.python.layers		softmax	logits scope	performs softmax on nth dimension of n-dimensional logit tensor
contrib.layers.python.layers		stack	inputs layer stack_args	builds a stack of layers by applying layer repeatedly using stack_args
contrib.layers.python.layers		unit_norm	inputs dim epsilon scope	normalizes the given input across the specified dimension to unit length
contrib.layers.python.layers		legacy_fully_connected	x num_output_units activation_fn weight_init	adds the parameters for a fully connected layer and returns the output
contrib.layers.python.layers	TransformerTest	testSparseIntColumnWithHashBucket		tests a sparse column with int values
contrib.layers.python.layers	TransformerTest	testSparseIntColumnWithVocabulary		tests a sparse integer column with vocabulary
contrib.layers.python.layers	TransformerTest	testSparseIntColumnWithVocabularyWithDenseInputTensor		tests a sparse integer column with vocabulary
contrib.layers.python.layers	CreateInputLayersForDNNsTest	testEmbeddingColumnWithWeightedSparseColumnSucceedsForDNN		tests dnn input with embedded weighted sparse column
contrib.layers.python.layers	CreateInputLayersForDNNsTest	testEmbeddingColumnWithIntegerWeightedSparseColumnSucceedsForDNN		same as the previous test but with integer weights
contrib.layers.python.layers	WeightedSumTest	testSparseIntColumn		tests a sparse column with int values
contrib.layers.python.layers		regression_target	label_name weight_column_name label_dimension	creates a _targetcolumn for linear regression
contrib.layers.python.layers		multi_class_target	n_classes label_name weight_column_name	creates a _targetcolumn for multi class single label classification
contrib.layers.python.layers		binary_svm_target	label_name weight_column_name	creates a _targetcolumn for binary classification with svms
contrib.layers.python.layers	_TargetColumn	get_eval_ops	features logits labels metrics	returns eval op
contrib.layers.python.layers	_TargetColumn	_weighted_loss	loss weight_tensor	returns cumulative weighted loss
contrib.layers.python.layers	_TargetColumn	training_loss	logits target features name	returns training loss tensor for this head
contrib.layers.python.layers	_TargetColumn	loss	logits target features	returns loss tensor for this head
contrib.layers.python.layers		get_default_binary_metrics_for_eval	thresholds	returns a dictionary of basic metrics for logistic regression
contrib.layers.python.layers		_is_variable	v	returns true if v is a variable
contrib.layers.python.layers		_embeddings_from_arguments	column args weight_collections trainable	returns embeddings for a column based on the computed arguments
contrib.layers.python.layers		_maybe_reshape_input_tensor	tensor column_name output_rank	reshape the input tensor by the following rule
contrib.layers.python.layers		_input_from_feature_columns	columns_to_tensors feature_columns weight_collections trainable	implementation of input_from(_sequence)_feature_columns
contrib.layers.python.layers		input_from_feature_columns	columns_to_tensors feature_columns weight_collections trainable	a tf contrib layers style input layer builder based on featurecolumns
contrib.layers.python.layers		sequence_input_from_feature_columns	columns_to_tensors feature_columns weight_collections trainable	builds inputs for sequence models from featurecolumns
contrib.layers.python.layers		_create_embedding_lookup	column columns_to_tensors embedding_lookup_arguments num_outputs	creates variables and returns predictions for linear weights in a model
contrib.layers.python.layers		_create_joint_embedding_lookup	columns_to_tensors embedding_lookup_arguments num_outputs trainable	creates an embedding lookup for all columns sharing a single weight
contrib.layers.python.layers		joint_weighted_sum_from_feature_columns	columns_to_tensors feature_columns num_outputs weight_collections	a restricted linear prediction builder based on featurecolumns
contrib.layers.python.layers		weighted_sum_from_feature_columns	columns_to_tensors feature_columns num_outputs weight_collections	a tf contrib layers style linear prediction builder based on featurecolumn
contrib.layers.python.layers		parse_feature_columns_from_examples	serialized feature_columns name example_names	parses tf examples to extract tensors for given feature_columns
contrib.layers.python.layers		transform_features	features feature_columns	returns transformed features based on features columns passed in
contrib.layers.python.layers		parse_feature_columns_from_sequence_examples	serialized context_feature_columns sequence_feature_columns name	parses tf sequenceexamples to extract tensors for given featurecolumns
contrib.layers.python.layers		_infer_real_valued_column_for_tensor	name tensor	creates a real_valued_column for given tensor and name
contrib.layers.python.layers		check_feature_columns	feature_columns	checks the validity of the set of featurecolumns
contrib.layers.python.layers	_Transformer	transform	feature_column	returns a tensor which represents given feature_column
contrib.layers.python.layers		_check_supported_sequence_columns	feature_columns	asserts feature_columns are in _supported_sequence_columns
contrib.layers.python.layers		_get_parent_columns	feature_column	returns the tuple of featurecolumns that feature_column depends on
contrib.layers.python.layers		_gather_feature_columns	feature_columns	returns a list of all ancestor featurecolumns of feature_columns
contrib.layers.python.layers		_check_forbidden_sequence_columns	feature_columns	recursively cecks feature_columns for _forbidden_sequence_columns
contrib.layers.python.layers		l1_regularizer	scale scope	returns a function that can be used to apply l1 regularization to weights
contrib.layers.python.layers		l2_regularizer	scale scope	returns a function that can be used to apply l2 regularization to weights
contrib.layers.python.layers		l1_l2_regularizer	scale_l1 scale_l2 scope	returns a function that can be used to apply l1 l2 regularizations
contrib.layers.python.layers		sum_regularizer	regularizer_list scope	returns a function that applies the sum of multiple regularizers
contrib.layers.python.layers		apply_regularization	regularizer weights_list	returns the summed penalty by applying regularizer to the weights_list
contrib.layers.python.layers		optimize_loss	loss global_step learning_rate optimizer	given loss and parameters for optimizer returns a training op
contrib.layers.python.layers		_clip_gradients_by_norm	grads_and_vars clip_gradients	clips gradients by global norm
contrib.layers.python.layers		_adaptive_max_norm	norm std_factor decay global_step	find max_norm given norm and previous average
contrib.layers.python.layers		adaptive_clipping_fn	std_factor decay static_max_norm global_step	adapt the clipping value using statistics on the norms
contrib.layers.python.layers		_add_scaled_noise_to_gradients	grads_and_vars gradient_noise_scale	adds scaled noise from a 0-mean normal distribution to gradients
contrib.layers.python.layers		_multiply_gradients	grads_and_vars gradient_multipliers	multiply specified gradients
contrib.layers.python.layers		xavier_initializer	uniform seed dtype	returns an initializer performing "xavier" initialization for weights
contrib.layers.python.layers		variance_scaling_initializer	factor mode uniform seed	returns an initializer that generates tensors without scaling variance
contrib.layers.python.layers		collect_named_outputs	collections alias outputs	add tensor outputs tagged with alias to collections
contrib.layers.python.layers		append_tensor_alias	tensor alias	append an alias to the list of aliases of the tensor
contrib.layers.python.layers		gather_tensors_aliases	tensors	given a list of tensors gather their aliases
contrib.layers.python.layers		get_tensor_aliases	tensor	get a list with the aliases of the input tensor
contrib.layers.python.layers		convert_collection_to_dict	collection	returns an ordereddict of tensors with their aliases as keys
contrib.layers.python.layers		constant_value	value_or_tensor_or_var dtype	returns value if value_or_tensor_or_var has a constant value
contrib.layers.python.layers		static_cond	pred fn1 fn2	return either fn1() or fn2() based on the boolean value of pred
contrib.layers.python.layers		smart_cond	pred fn1 fn2 name	return either fn1() or fn2() based on the boolean predicate/value pred
contrib.layers.python.layers		first_dimension	shape min_rank	returns the first dimension of shape while checking it has min_rank
contrib.layers.python.layers		last_dimension	shape min_rank	returns the last dimension of shape while checking it has min_rank
contrib.layers.python.layers		two_element_tuple	int_or_tuple	converts int_or_tuple to height width
contrib.layers.python.layers		n_positive_integers	n value	converts value to a sequence of n positive integers
contrib.layers.python.layers		bow_encoder	ids vocab_size embed_dim sparse_lookup	maps a sequence of symbols to a vector per example by averaging embeddings
contrib.layers.python.layers		embed_sequence	ids vocab_size embed_dim unique	maps a sequence of symbols to a sequence of embeddings
contrib.layers.python.layers	FeatureColumnTest	testOneHotReshaping		tests reshaping behavior of onehotcolumn
contrib.layers.python.layers	FeatureColumnTest	testRealValuedColumnReshaping		tests reshaping behavior of realvaluedcolumn
contrib.layers.python.layers	FeatureColumnTest	testRealValuedColumnDensification		tests densification behavior of realvaluedcolumn
contrib.layers.python.layers	FeatureColumnTest	testBucketizedColumnDeepCopy		tests that we can do a deepcopy of a bucketized column
contrib.layers.python.layers	FeatureColumnTest	testSparseColumnAcceptsDenseScalar		tests that sparsecolumns accept dense scalar inputs
contrib.layers.python.layers	FeatureColumnTest	testSparseColumnIntegerizedDeepCopy		tests deepcopy of sparse_column_with_integerized_feature
contrib.layers.python.layers	FeatureColumnTest	testSparseColumnHashBucketDeepCopy		tests deepcopy of sparse_column_with_hash_bucket
contrib.layers.python.layers	FeatureColumnTest	testSparseColumnKeysDeepCopy		tests deepcopy of sparse_column_with_keys
contrib.layers.python.layers	FeatureColumnTest	testSparseColumnVocabularyDeepCopy		tests deepcopy of sparse_column_with_vocabulary_file
contrib.layers.python.layers	SampledScatteredEmbeddingLookupSparseTest	test_output_shape		verifies the shape of the output tensor
contrib.layers.python.layers	SampledScatteredEmbeddingLookupSparseTest	test_output_values		verifies the values in a trivial case
contrib.layers.python.layers	SampledScatteredEmbeddingLookupSparseTest	test_output_values_with_sampled_candidates		verifies the values for given sampled_candidates
contrib.layers.python.layers	SampledScatteredEmbeddingLookupSparseTest	test_output_values_with_sign_hash		verifies the values in a trivial case with hash_signs=true
contrib.layers.python.layers	SampledScatteredEmbeddingLookupSparseTest	test_distributive_property		verifies the distributive property of matrix multiplication
contrib.layers.python.layers		safe_embedding_lookup_sparse	embedding_weights sparse_ids sparse_weights combiner	lookup embedding results accounting for invalid ids and empty features
contrib.layers.python.layers		_prune_invalid_ids	sparse_ids sparse_weights	prune invalid ids (< 0) from the input ids and weights
contrib.layers.python.layers		scattered_embedding_lookup	params values dimension name	looks up embeddings using parameter hashing for each value in values
contrib.layers.python.layers		_sampled_scattered_embedding_lookup	params values dimension sampled_candidates	looks up embeddings using parameter hashing for each value in values
contrib.layers.python.layers		scattered_embedding_lookup_sparse	params sparse_values dimension combiner	looks up embeddings of a sparse feature using parameter hashing
contrib.layers.python.layers		embedding_lookup_unique	params ids name	version of embedding_lookup that avoids duplicate lookups
contrib.layers.python.layers		_sampled_scattered_embedding_lookup_sparse	params sp_values dimension sampled_candidates	looks up embeddings using parameter hashing for sparse values
contrib.layers.python.layers		embedding_lookup_sparse_with_distributed_aggregation	params sp_ids sp_weights partition_strategy	computes embeddings for the given ids and weights
contrib.layers.python.layers		_do_gather	params ids name	deals with doing gather differently for resource variables
contrib.layers.python.layers		_embedding_lookup_with_distributed_aggregation	params ids partition_strategy name	lookup helper for embedding_lookup_sparse_with_distributed_aggregation
contrib.layers.python.layers		_add_scalar_summary	tensor tag	add a scalar summary operation for the tensor
contrib.layers.python.layers		_add_histogram_summary	tensor tag	add a summary operation for the histogram of a tensor
contrib.layers.python.layers		summarize_activation	op	summarize an activation
contrib.layers.python.layers		summarize_tensor	tensor tag	summarize a tensor using a suitable summary type
contrib.layers.python.layers		summarize_tensors	tensors summarizer	summarize a set of tensors
contrib.layers.python.layers		summarize_collection	collection name_filter summarizer	summarize a graph collection of tensors possibly filtered by name
contrib.layers.python.layers		summarize_activations	name_filter summarizer	summarize activations using summarize_activation to summarize
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_simple		tests a simple scenario
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_dense		tests only dense inputs
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_integer_mixed_string_sparse		tests mixed type
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_integer_mixed_string_dense		tests mixed dense inputs
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_sparse_cross_dense		tests sparse and dense inputs
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_integer_sparse_input		tests mixed type sparse and dense inputs
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_permutation_3x3x3		tests 3x3x3 permutation
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_permutation_3x1x2		tests 3x1x2 permutation
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_large_batch		tests with large batch size to force multithreding
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_one_column_empty		tests when one column is empty
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_some_columns_empty		tests when more than one columns are empty
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_all_columns_empty		tests when all columns are empty
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_hashed_output_zero_bucket		tests a simple scenario
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_hashed_output_zero_bucket_v2		tests a simple scenario
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_hashed_output		tests a simple scenario
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_hashed_output_v2		tests a simple scenario
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_hashed_output_v1_has_collision		tests the old version of the fingerprint concatenation has collisions
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_hashed_output_v2_has_no_collision		tests the new version of the fingerprint concatenation has no collisions
contrib.layers.python.kernel_tests	SparseCrossOpTest	test_hashed_3x1x2		tests 3x1x2 permutation with hashed output
contrib.layers.python.kernel_tests	SparseCrossOpTest	_sparse_tensor	data batch_size	generates a sparsetensor
contrib.layers.python.ops		bucketize	input_tensor boundaries name	bucketizes input_tensor by given boundaries
contrib.layers.python.ops		sparse_feature_cross	inputs hashed_output num_buckets name	crosses a list of tensor or sparsetensor objects
contrib.layers.python.ops		_multiplier_helper	shape	returns moving offset for each dimension given shape
contrib.layers.python.ops		dense_to_sparse_tensor	dense_tensor ignore_value	converts a dense tensor to a sparsetensor dropping ignore_value cells
contrib.layers.python.ops		sparse_row_envelope	sparse_input row_axis col_axis name	returns the length of each 'row' in a sparsetensor
contrib.keras.python.keras		get_test_data	train_samples test_samples input_shape num_classes	generates test data to train a model on
contrib.keras.python.keras		layer_test	layer_cls kwargs input_shape input_dtype	test routine for a layer with a single input and single output
contrib.keras.python.keras		softmax	x axis	softmax activation function
contrib.keras.python.keras	Optimizer	set_weights	weights	sets the weights of the optimizer from numpy arrays
contrib.keras.python.keras	Optimizer	get_weights		returns the current value of the weights of the optimizer
contrib.keras.python.keras		deserialize	config custom_objects	inverse of the serialize function
contrib.keras.python.keras		get	identifier	retrieves a keras optimizer instance
contrib.keras.python.keras		lecun_uniform	seed	lecun uniform initializer
contrib.keras.python.keras		glorot_normal	seed	glorot normal initializer also called xavier normal initializer
contrib.keras.python.keras		glorot_uniform	seed	glorot uniform initializer also called xavier uniform initializer
contrib.keras.python.keras		he_normal	seed	he normal initializer
contrib.keras.python.keras		he_uniform	seed	he uniform variance scaling initializer
contrib.keras.python.keras		backend		publicly accessible method for determining the current backend
contrib.keras.python.keras		epsilon		returns the value of the fuzz factor used in numeric expressions
contrib.keras.python.keras		set_epsilon	value	sets the value of the fuzz factor used in numeric expressions
contrib.keras.python.keras		floatx		returns the default float type as a string
contrib.keras.python.keras		set_floatx	value	sets the default float type
contrib.keras.python.keras		cast_to_floatx	x	cast a numpy array to the default keras float type
contrib.keras.python.keras		image_data_format		returns the default image data format convention
contrib.keras.python.keras		set_image_data_format	data_format	sets the value of the image data format convention
contrib.keras.python.keras		get_uid	prefix	associates a string prefix with an integer counter in a tensorflow graph
contrib.keras.python.keras		clear_session		destroys the current tf graph and creates a new one
contrib.keras.python.keras		manual_variable_initialization	value	sets the manual variable initialization flag
contrib.keras.python.keras		learning_phase		returns the learning phase flag
contrib.keras.python.keras		set_learning_phase	value	sets the learning phase to a fixed value
contrib.keras.python.keras		get_session		returns the tf session to be used by the backend
contrib.keras.python.keras		set_session	session	sets the global tensorflow session
contrib.keras.python.keras		is_sparse	tensor	returns whether a tensor is a sparse tensor
contrib.keras.python.keras		to_dense	tensor	converts a sparse tensor into a dense tensor and returns it
contrib.keras.python.keras		variable	value dtype name	instantiates a variable and returns it
contrib.keras.python.keras		_initialize_variables		utility to initialize uninitialized variables on the fly
contrib.keras.python.keras		placeholder	shape ndim dtype sparse	instantiates a placeholder tensor and returns it
contrib.keras.python.keras		shape	x	returns the symbolic shape of a tensor or variable
contrib.keras.python.keras		int_shape	x	returns the shape tensor or variable as a tuple of int or none entries
contrib.keras.python.keras		ndim	x	returns the number of axes in a tensor as an integer
contrib.keras.python.keras		dtype	x	returns the dtype of a keras tensor or variable as a string
contrib.keras.python.keras		eval	x	evaluates the value of a variable
contrib.keras.python.keras		zeros	shape dtype name	instantiates an all-zeros variable and returns it
contrib.keras.python.keras		ones	shape dtype name	instantiates an all-ones tensor variable and returns it
contrib.keras.python.keras		eye	size dtype name	instantiate an identity matrix and returns it
contrib.keras.python.keras		zeros_like	x dtype name	instantiates an all-zeros variable of the same shape as another tensor
contrib.keras.python.keras		ones_like	x dtype name	instantiates an all-ones variable of the same shape as another tensor
contrib.keras.python.keras		random_uniform_variable	shape low high dtype	instantiates a variable with values drawn from a uniform distribution
contrib.keras.python.keras		random_normal_variable	shape mean scale dtype	instantiates a variable with values drawn from a normal distribution
contrib.keras.python.keras		count_params	x	returns the number of scalars in a keras variable
contrib.keras.python.keras		cast	x dtype	casts a tensor to a different dtype and returns it
contrib.keras.python.keras		dot	x y	multiplies 2 tensors (and/or variables) and returns a *tensor*
contrib.keras.python.keras		batch_dot	x y axes	batchwise dot product
contrib.keras.python.keras		transpose	x	transposes a tensor and returns it
contrib.keras.python.keras		gather	reference indices	retrieves the elements of indices indices in the tensor reference
contrib.keras.python.keras		_normalize_axis	axis ndim	converts negative axes to positive values
contrib.keras.python.keras		max	x axis keepdims	maximum value in a tensor
contrib.keras.python.keras		min	x axis keepdims	minimum value in a tensor
contrib.keras.python.keras		sum	x axis keepdims	sum of the values in a tensor alongside the specified axis
contrib.keras.python.keras		prod	x axis keepdims	multiplies the values in a tensor alongside the specified axis
contrib.keras.python.keras		cumsum	x axis	cumulative sum of the values in a tensor alongside the specified axis
contrib.keras.python.keras		cumprod	x axis	cumulative product of the values in a tensor alongside the specified axis
contrib.keras.python.keras		var	x axis keepdims	variance of a tensor alongside the specified axis
contrib.keras.python.keras		std	x axis keepdims	standard deviation of a tensor alongside the specified axis
contrib.keras.python.keras		mean	x axis keepdims	mean of a tensor alongside the specified axis
contrib.keras.python.keras		any	x axis keepdims	bitwise reduction logical or
contrib.keras.python.keras		all	x axis keepdims	bitwise reduction logical and
contrib.keras.python.keras		argmax	x axis	returns the index of the maximum value along an axis
contrib.keras.python.keras		argmin	x axis	returns the index of the minimum value along an axis
contrib.keras.python.keras		abs	x	element-wise absolute value
contrib.keras.python.keras		sqrt	x	element-wise square root
contrib.keras.python.keras		round	x	element-wise rounding to the closest integer
contrib.keras.python.keras		clip	x min_value max_value	element-wise value clipping
contrib.keras.python.keras		equal	x y	element-wise equality between two tensors
contrib.keras.python.keras		not_equal	x y	element-wise inequality between two tensors
contrib.keras.python.keras		greater	x y	element-wise truth value of (x > y)
contrib.keras.python.keras		greater_equal	x y	element-wise truth value of (x >= y)
contrib.keras.python.keras		less	x y	element-wise truth value of (x < y)
contrib.keras.python.keras		less_equal	x y	element-wise truth value of (x <= y)
contrib.keras.python.keras		maximum	x y	element-wise maximum of two tensors
contrib.keras.python.keras		minimum	x y	element-wise minimum of two tensors
contrib.keras.python.keras		sin	x	computes sin of x element-wise
contrib.keras.python.keras		cos	x	computes cos of x element-wise
contrib.keras.python.keras		normalize_batch_in_training	x gamma beta reduction_axes	computes mean and std for batch then apply batch_normalization on batch
contrib.keras.python.keras		batch_normalization	x mean var beta	applies batch normalization on x given mean var beta and gamma
contrib.keras.python.keras		concatenate	tensors axis	concatenates a list of tensors alongside the specified axis
contrib.keras.python.keras		reshape	x shape	reshapes a tensor to the specified shape
contrib.keras.python.keras		permute_dimensions	x pattern	permutes axes in a tensor
contrib.keras.python.keras		resize_images	x height_factor width_factor data_format	resizes the images contained in a 4d tensor
contrib.keras.python.keras		resize_volumes	x depth_factor height_factor width_factor	resizes the volume contained in a 5d tensor
contrib.keras.python.keras		repeat_elements	x rep axis	repeats the elements of a tensor along an axis like np repeat
contrib.keras.python.keras		repeat	x n	repeats a 2d tensor
contrib.keras.python.keras		arange	start stop step dtype	creates a 1d tensor containing a sequence of integers
contrib.keras.python.keras		tile	x n	creates a tensor by tiling x by n
contrib.keras.python.keras		flatten	x	flatten a tensor
contrib.keras.python.keras		batch_flatten	x	turn a nd tensor into a 2d tensor with same 0th dimension
contrib.keras.python.keras		expand_dims	x axis	adds a 1-sized dimension at index "dim"
contrib.keras.python.keras		squeeze	x axis	removes a 1-dimension from the tensor at index "axis"
contrib.keras.python.keras		temporal_padding	x padding	pads the middle dimension of a 3d tensor
contrib.keras.python.keras		spatial_2d_padding	x padding data_format	pads the 2nd and 3rd dimensions of a 4d tensor
contrib.keras.python.keras		spatial_3d_padding	x padding data_format	pads 5d tensor with zeros along the depth height width dimensions
contrib.keras.python.keras		stack	x axis	stacks a list of rank r tensors into a rank r+1 tensor
contrib.keras.python.keras		one_hot	indices num_classes	computes the one-hot representation of an integer tensor
contrib.keras.python.keras		reverse	x axes	reverse a tensor along the specified axes
contrib.keras.python.keras		get_value	x	returns the value of a variable
contrib.keras.python.keras		batch_get_value	tensors	returns the value of more than one tensor variable
contrib.keras.python.keras		set_value	x value	sets the value of a variable from a numpy array
contrib.keras.python.keras		batch_set_value	tuples	sets the values of many tensor variables at once
contrib.keras.python.keras		print_tensor	x message	prints message and the tensor value when evaluated
contrib.keras.python.keras		function	inputs outputs updates	instantiates a keras function
contrib.keras.python.keras		gradients	loss variables	returns the gradients of variables w r t loss
contrib.keras.python.keras		stop_gradient	variables	returns variables but with zero gradient w r t every other variable
contrib.keras.python.keras		rnn	step_function inputs initial_states go_backwards	iterates over the time dimension of a tensor
contrib.keras.python.keras		switch	condition then_expression else_expression	switches between two operations depending on a scalar value
contrib.keras.python.keras		in_train_phase	x alt training	selects x in train phase and alt otherwise
contrib.keras.python.keras		in_test_phase	x alt training	selects x in test phase and alt otherwise
contrib.keras.python.keras		relu	x alpha max_value	rectified linear unit
contrib.keras.python.keras		elu	x alpha	exponential linear unit
contrib.keras.python.keras		softmax	x	softmax of a tensor
contrib.keras.python.keras		softplus	x	softplus of a tensor
contrib.keras.python.keras		softsign	x	softsign of a tensor
contrib.keras.python.keras		categorical_crossentropy	output target from_logits	categorical crossentropy between an output tensor and a target tensor
contrib.keras.python.keras		sparse_categorical_crossentropy	output target from_logits	categorical crossentropy with integer targets
contrib.keras.python.keras		binary_crossentropy	output target from_logits	binary crossentropy between an output tensor and a target tensor
contrib.keras.python.keras		hard_sigmoid	x	segment-wise linear approximation of sigmoid
contrib.keras.python.keras		dropout	x level noise_shape seed	sets entries in x to zero at random while scaling the entire tensor
contrib.keras.python.keras		l2_normalize	x axis	normalizes a tensor wrt the l2 norm alongside the specified axis
contrib.keras.python.keras		in_top_k	predictions targets k	returns whether the targets are in the top k predictions
contrib.keras.python.keras		conv2d_transpose	x kernel output_shape strides	2d deconvolution (i e
contrib.keras.python.keras		separable_conv2d	x depthwise_kernel pointwise_kernel strides	2d convolution with separable filters
contrib.keras.python.keras		bias_add	x bias data_format	adds a bias vector to a tensor
contrib.keras.python.keras		random_normal	shape mean stddev dtype	returns a tensor with normal distribution of values
contrib.keras.python.keras		random_uniform	shape minval maxval dtype	returns a tensor with uniform distribution of values
contrib.keras.python.keras		random_binomial	shape p dtype seed	returns a tensor with random binomial distribution of values
contrib.keras.python.keras		truncated_normal	shape mean stddev dtype	returns a tensor with truncated random normal distribution of values
contrib.keras.python.keras		ctc_label_dense_to_sparse	labels label_lengths	converts ctc labels from dense to sparse
contrib.keras.python.keras		ctc_batch_cost	y_true y_pred input_length label_length	runs ctc loss algorithm on each batch element
contrib.keras.python.keras		ctc_decode	y_pred input_length greedy beam_width	decodes the output of a softmax
contrib.keras.python.keras		map_fn	fn elems name dtype	map the function fn over the elements elems and return the outputs
contrib.keras.python.keras		foldl	fn elems initializer name	reduce elems using fn to combine them from left to right
contrib.keras.python.keras		foldr	fn elems initializer name	reduce elems using fn to combine them from right to left
contrib.keras.python.keras		save_model	model filepath overwrite include_optimizer	save a model to a hdf5 file
contrib.keras.python.keras		load_model	filepath custom_objects	loads a model saved via save_model
contrib.keras.python.keras		model_from_config	config custom_objects	instantiates a keras model from its config
contrib.keras.python.keras		model_from_yaml	yaml_string custom_objects	parses a yaml model configuration file and returns a model instance
contrib.keras.python.keras		model_from_json	json_string custom_objects	parses a json model configuration file and returns a model instance
contrib.keras.python.keras	Sequential	add	layer	adds a layer instance on top of the layer stack
contrib.keras.python.keras	Sequential	pop		removes the last layer in the model
contrib.keras.python.keras	Sequential	get_layer	name index	retrieve a layer that is part of the model
contrib.keras.python.keras	Sequential	get_weights		retrieves the weights of the model
contrib.keras.python.keras	Sequential	set_weights	weights	sets the weights of the model
contrib.keras.python.keras	Sequential	compile	optimizer loss metrics sample_weight_mode	configures the learning process
contrib.keras.python.keras	Sequential	fit	x y batch_size epochs	trains the model for a fixed number of epochs
contrib.keras.python.keras	Sequential	evaluate	x y batch_size verbose	computes the loss on some input data batch by batch
contrib.keras.python.keras	Sequential	predict	x batch_size verbose	generates output predictions for the input samples
contrib.keras.python.keras	Sequential	predict_on_batch	x	returns predictions for a single batch of samples
contrib.keras.python.keras	Sequential	train_on_batch	x y class_weight sample_weight	single gradient update over one batch of samples
contrib.keras.python.keras	Sequential	test_on_batch	x y sample_weight	evaluates the model over a single batch of samples
contrib.keras.python.keras	Sequential	predict_proba	x batch_size verbose	generates class probability predictions for the input samples
contrib.keras.python.keras	Sequential	predict_classes	x batch_size verbose	generate class predictions for the input samples
contrib.keras.python.keras	Sequential	fit_generator	generator steps_per_epoch epochs verbose	fits the model on data generated batch-by-batch by a python generator
contrib.keras.python.keras	Sequential	evaluate_generator	generator steps max_q_size workers	evaluates the model on a data generator
contrib.keras.python.keras	Sequential	predict_generator	generator steps max_q_size workers	generates predictions for the input samples from a data generator
contrib.keras.python.keras	CallbackList	on_epoch_begin	epoch logs	called at the start of an epoch
contrib.keras.python.keras	CallbackList	on_epoch_end	epoch logs	called at the end of an epoch
contrib.keras.python.keras	CallbackList	on_batch_begin	batch logs	called right before processing a batch
contrib.keras.python.keras	CallbackList	on_batch_end	batch logs	called at the end of a batch
contrib.keras.python.keras	CallbackList	on_train_begin	logs	called at the beginning of training
contrib.keras.python.keras	CallbackList	on_train_end	logs	called at the end of training
contrib.keras.python.keras	ReduceLROnPlateau	_reset		resets wait counter and cooldown counter
contrib.keras.python.keras.applications		preprocess_input	x data_format	preprocesses a tensor encoding a batch of images
contrib.keras.python.keras.applications		decode_predictions	preds top	decodes the prediction of an imagenet model
contrib.keras.python.keras.applications		_obtain_input_shape	input_shape default_size min_size data_format	internal utility to compute/validate an imagenet model's input shape
contrib.keras.python.keras.applications		VGG16	include_top weights input_tensor input_shape	instantiates the vgg16 architecture
contrib.keras.python.keras.applications		identity_block	input_tensor kernel_size filters stage	the identity block is the block that has no conv layer at shortcut
contrib.keras.python.keras.applications		conv_block	input_tensor kernel_size filters stage	conv_block is the block that has a conv layer at shortcut
contrib.keras.python.keras.applications		ResNet50	include_top weights input_tensor input_shape	instantiates the resnet50 architecture
contrib.keras.python.keras.applications		conv2d_bn	x filters num_row num_col	utility function to apply conv + bn
contrib.keras.python.keras.applications		InceptionV3	include_top weights input_tensor input_shape	instantiates the inception v3 architecture
contrib.keras.python.keras.applications		VGG19	include_top weights input_tensor input_shape	instantiates the vgg19 architecture
contrib.keras.python.keras.applications		Xception	include_top weights input_tensor input_shape	instantiates the xception architecture
contrib.keras.python.keras.engine		_standardize_input_data	data names shapes check_batch_axis	normalizes inputs and targets provided by users
contrib.keras.python.keras.engine		_standardize_sample_or_class_weights	x_weight output_names weight_type	maps sample_weight or class_weight to model outputs
contrib.keras.python.keras.engine		_check_array_lengths	inputs targets weights	does user input validation for numpy arrays
contrib.keras.python.keras.engine		_check_loss_and_target_compatibility	targets loss_fns output_shapes	does validation on the compatiblity of targets and loss functions
contrib.keras.python.keras.engine		_collect_metrics	metrics output_names	maps metric functions to model outputs
contrib.keras.python.keras.engine		_batch_shuffle	index_array batch_size	shuffles an array in a batch-wise fashion
contrib.keras.python.keras.engine		_make_batches	size batch_size	returns a list of batch indices tuples of indices
contrib.keras.python.keras.engine		_slice_arrays	arrays start stop	slice an array or list of arrays
contrib.keras.python.keras.engine		_weighted_masked_objective	fn	adds support for masking and sample-weighting to an objective function
contrib.keras.python.keras.engine		_masked_objective	fn	adds support for masking to an objective function
contrib.keras.python.keras.engine		_standardize_weights	y sample_weight class_weight sample_weight_mode	performs sample weight validation and standardization
contrib.keras.python.keras.engine	GeneratorEnqueuer	start	workers max_q_size wait_time	kicks off threads which add data from the generator into the queue
contrib.keras.python.keras.engine	GeneratorEnqueuer	stop	timeout	stop running threads and wait for them to exit if necessary
contrib.keras.python.keras.engine	Model	compile	optimizer loss metrics loss_weights	configures the model for training
contrib.keras.python.keras.engine	Model	_fit_loop	f ins out_labels batch_size	abstract fit function for f ins
contrib.keras.python.keras.engine	Model	_predict_loop	f ins batch_size verbose	abstract method to loop over some data in batches
contrib.keras.python.keras.engine	Model	_test_loop	f ins batch_size verbose	abstract method to loop over some data in batches
contrib.keras.python.keras.engine	Model	fit	x y batch_size epochs	trains the model for a fixed number of epochs iterations on a dataset
contrib.keras.python.keras.engine	Model	evaluate	x y batch_size verbose	returns the loss value & metrics values for the model in test mode
contrib.keras.python.keras.engine	Model	predict	x batch_size verbose	generates output predictions for the input samples
contrib.keras.python.keras.engine	Model	train_on_batch	x y sample_weight class_weight	runs a single gradient update on a single batch of data
contrib.keras.python.keras.engine	Model	test_on_batch	x y sample_weight	test the model on a single batch of samples
contrib.keras.python.keras.engine	Model	predict_on_batch	x	returns predictions for a single batch of samples
contrib.keras.python.keras.engine	Model	fit_generator	generator steps_per_epoch epochs verbose	fits the model on data yielded batch-by-batch by a python generator
contrib.keras.python.keras.engine	Model	evaluate_generator	generator steps max_q_size workers	evaluates the model on a data generator
contrib.keras.python.keras.engine	Model	predict_generator	generator steps max_q_size workers	generates predictions for the input samples from a data generator
contrib.keras.python.keras.engine	Layer	add_weight	name shape dtype initializer	adds a weight variable to the layer
contrib.keras.python.keras.engine	Layer	assert_input_compatibility	inputs	checks compatibility between the layer and provided inputs
contrib.keras.python.keras.engine	Layer	call	inputs	this is where the layer's logic lives
contrib.keras.python.keras.engine	Layer	__call__	inputs	wrapper around self call(), for handling internal references
contrib.keras.python.keras.engine	Layer	_add_inbound_node	input_tensors output_tensors input_masks output_masks	internal method to create an inbound node for the layer
contrib.keras.python.keras.engine	Layer	_compute_output_shape	input_shape	computes the output shape of the layer
contrib.keras.python.keras.engine	Layer	compute_mask	inputs mask	computes an output mask tensor
contrib.keras.python.keras.engine	Layer	build	input_shape	creates the layer weights
contrib.keras.python.keras.engine	Layer	_get_node_attribute_at_index	node_index attr attr_name	retrieves an attribute (e g input_tensors) from a node
contrib.keras.python.keras.engine	Layer	get_input_shape_at	node_index	retrieves the input shape s of a layer at a given node
contrib.keras.python.keras.engine	Layer	get_output_shape_at	node_index	retrieves the output shape s of a layer at a given node
contrib.keras.python.keras.engine	Layer	get_input_at	node_index	retrieves the input tensor s of a layer at a given node
contrib.keras.python.keras.engine	Layer	get_output_at	node_index	retrieves the output tensor s of a layer at a given node
contrib.keras.python.keras.engine	Layer	get_input_mask_at	node_index	retrieves the input mask tensor s of a layer at a given node
contrib.keras.python.keras.engine	Layer	get_output_mask_at	node_index	retrieves the output mask tensor s of a layer at a given node
contrib.keras.python.keras.engine	Layer	input		retrieves the input tensor s of a layer
contrib.keras.python.keras.engine	Layer	output		retrieves the output tensor s of a layer
contrib.keras.python.keras.engine	Layer	input_mask		retrieves the input mask tensor s of a layer
contrib.keras.python.keras.engine	Layer	output_mask		retrieves the output mask tensor s of a layer
contrib.keras.python.keras.engine	Layer	input_shape		retrieves the input shape s of a layer
contrib.keras.python.keras.engine	Layer	output_shape		retrieves the output shape s of a layer
contrib.keras.python.keras.engine	Layer	set_weights	weights	sets the weights of the layer from numpy arrays
contrib.keras.python.keras.engine	Layer	get_weights		returns the current weights of the layer
contrib.keras.python.keras.engine	Layer	get_config		returns the config of the layer
contrib.keras.python.keras.engine	Layer	from_config	cls config	creates a layer from its config
contrib.keras.python.keras.engine	Layer	count_params		count the total number of scalars composing the weights
contrib.keras.python.keras.engine		Input	shape batch_shape name dtype	input() is used to instantiate a keras tensor
contrib.keras.python.keras.engine	Container	get_layer	name index	retrieves a layer based on either its name unique or index
contrib.keras.python.keras.engine	Container	updates		retrieve the model's updates
contrib.keras.python.keras.engine	Container	losses		retrieve the model's losses
contrib.keras.python.keras.engine	Container	state_updates		returns the updates from all layers that are stateful
contrib.keras.python.keras.engine	Container	get_weights		retrieves the weights of the model
contrib.keras.python.keras.engine	Container	set_weights	weights	sets the weights of the model
contrib.keras.python.keras.engine	Container	input_spec		gets the model's input specs
contrib.keras.python.keras.engine	Container	call	inputs mask	call the model on new inputs
contrib.keras.python.keras.engine	Container	run_internal_graph	inputs masks	computes output tensors for new inputs
contrib.keras.python.keras.engine	Container	from_config	cls config custom_objects	instantiates a model from its config (output of get_config())
contrib.keras.python.keras.engine	Container	save	filepath overwrite include_optimizer	save the model to a single hdf5 file
contrib.keras.python.keras.engine	Container	save_weights	filepath overwrite	dumps all layer weights to a hdf5 file
contrib.keras.python.keras.engine	Container	load_weights	filepath by_name	loads all layer weights from a hdf5 save file
contrib.keras.python.keras.engine	Container	_updated_config		util hared between different serialization methods
contrib.keras.python.keras.engine	Container	to_json		returns a json string containing the network configuration
contrib.keras.python.keras.engine	Container	to_yaml		returns a yaml string containing the network configuration
contrib.keras.python.keras.engine		get_source_inputs	tensor layer node_index	returns the list of input tensors necessary to compute tensor
contrib.keras.python.keras.engine		_to_list	x	normalizes a list/tensor into a list
contrib.keras.python.keras.engine		_collect_previous_mask	input_tensors	retrieves the output mask s of the previous node
contrib.keras.python.keras.engine		_collect_input_shape	input_tensors	collects the output shape s of a list of keras tensors
contrib.keras.python.keras.engine		preprocess_weights_for_loading	layer weights original_keras_version original_backend	converts layers weights from keras 1 format to keras 2
contrib.keras.python.keras.engine		load_weights_from_hdf5_group	f layers	implements topological order-based weight loading
contrib.keras.python.keras.engine		load_weights_from_hdf5_group_by_name	f layers	implements name-based weight loading
contrib.keras.python.keras.layers	Reshape	_fix_unknown_dimension	input_shape output_shape	find and replace a missing dimension in an output shape
contrib.keras.python.keras.layers	NoiseLayersTest	test_shared_batchnorm		test that a bn layer can be shared across different data streams
contrib.keras.python.keras.layers	_Merge	_compute_elemwise_op_output_shape	shape1 shape2	computes the shape of the resultant of an elementwise operation
contrib.keras.python.keras.layers		add	inputs	functional interface to the add layer
contrib.keras.python.keras.layers		multiply	inputs	functional interface to the multiply layer
contrib.keras.python.keras.layers		average	inputs	functional interface to the average layer
contrib.keras.python.keras.layers		maximum	inputs	functional interface to the maximum layer
contrib.keras.python.keras.layers		concatenate	inputs axis	functional interface to the concatenate layer
contrib.keras.python.keras.layers		dot	inputs axes normalize	functional interface to the dot layer
contrib.keras.python.keras.layers		_time_distributed_dense	x w b dropout	apply y w + b for every temporal slice y of x
contrib.keras.python.keras.layers		deserialize	config custom_objects	instantiates a layer from a config dictionary
contrib.keras.python.keras.datasets		load_data		loads cifar10 dataset
contrib.keras.python.keras.datasets		load_data	label_mode	loads cifar100 dataset
contrib.keras.python.keras.datasets		load_data	path num_words skip_top maxlen	loads the reuters newswire classification dataset
contrib.keras.python.keras.datasets		get_word_index	path	retrieves the dictionary mapping word indices back to words
contrib.keras.python.keras.datasets		load_batch	fpath label_key	internal utility for parsing cifar data
contrib.keras.python.keras.datasets		load_data	path	loads the mnist dataset
contrib.keras.python.keras.datasets		load_data	path seed test_split	loads the boston housing dataset
contrib.keras.python.keras.datasets		load_data	path num_words skip_top maxlen	loads the imdb dataset
contrib.keras.python.keras.datasets		get_word_index	path	retrieves the dictionary mapping word indices back to words
contrib.keras.python.keras.utils		ask_to_proceed_with_overwrite	filepath	produces a prompt asking about overwriting a file
contrib.keras.python.keras.utils		custom_object_scope		provides a scope that changes to _global_custom_objects cannot escape
contrib.keras.python.keras.utils		get_custom_objects		retrieves a live reference to the global dictionary of custom objects
contrib.keras.python.keras.utils		func_dump	func	serializes a user defined function
contrib.keras.python.keras.utils		func_load	code defaults closure globs	deserializes a user defined function
contrib.keras.python.keras.utils	Progbar	update	current values force	updates the progress bar
contrib.keras.python.keras.utils		normalize_tuple	value n name	transforms a single int or iterable of ints into an int tuple
contrib.keras.python.keras.utils		convert_kernel	kernel	converts a numpy kernel matrix from theano format to tensorflow format
contrib.keras.python.keras.utils		conv_output_length	input_length filter_size padding stride	determines output length of a convolution given input length
contrib.keras.python.keras.utils		conv_input_length	output_length filter_size padding stride	determines input length of a convolution given output length
contrib.keras.python.keras.utils		print_summary	model line_length positions	prints a summary of a model
contrib.keras.python.keras.utils		count_total_params	layers layer_set	counts the number of parameters in a list of layers
contrib.keras.python.keras.utils		convert_all_kernels_in_model	model	converts all convolution kernels in a model from theano to tensorflow
contrib.keras.python.keras.utils		convert_dense_weights_data_format	dense previous_feature_map_shape target_data_format	utility useful when changing a convnet's data_format
contrib.keras.python.keras.utils		_extract_archive	file_path path archive_format	extracts an archive if it matches tar tar gz tar bz or zip formats
contrib.keras.python.keras.utils		get_file	fname origin untar md5_hash	downloads a file from a url if it not already in the cache
contrib.keras.python.keras.utils		_hash_file	fpath algorithm chunk_size	calculates a file sha256 or md5 hash
contrib.keras.python.keras.utils		validate_file	fpath file_hash algorithm chunk_size	validates a file against a sha256 or md5 hash
contrib.keras.python.keras.utils		to_categorical	y num_classes	converts a class vector integers to binary class matrix
contrib.keras.python.keras.utils		normalize	x axis order	normalizes a numpy array
contrib.keras.python.keras.utils		model_to_dot	model show_shapes show_layer_names	converts a keras model to dot format
contrib.keras.python.keras.wrappers	BaseWrapper	check_params	params	checks for user typos in "params"
contrib.keras.python.keras.wrappers	BaseWrapper	get_params		gets parameters for this estimator
contrib.keras.python.keras.wrappers	BaseWrapper	set_params		sets the parameters of this estimator
contrib.keras.python.keras.wrappers	BaseWrapper	fit	x y	constructs a new model with build_fn & fit the model to x y
contrib.keras.python.keras.wrappers	BaseWrapper	filter_sk_params	fn override	filters sk_params and return those in fn's arguments
contrib.keras.python.keras.wrappers	KerasClassifier	fit	x y	constructs a new model with build_fn & fit the model to x y
contrib.keras.python.keras.wrappers	KerasClassifier	predict	x	returns the class predictions for the given test data
contrib.keras.python.keras.wrappers	KerasClassifier	predict_proba	x	returns class probability estimates for the given test data
contrib.keras.python.keras.wrappers	KerasClassifier	score	x y	returns the mean accuracy on the given test data and labels
contrib.keras.python.keras.wrappers	KerasRegressor	predict	x	returns predictions for the given test data
contrib.keras.python.keras.wrappers	KerasRegressor	score	x y	returns the mean loss on the given test data and labels
contrib.keras.python.keras.preprocessing		pad_sequences	sequences maxlen dtype padding	pads each sequence to the same length length of the longest sequence
contrib.keras.python.keras.preprocessing		make_sampling_table	size sampling_factor	generates a word rank-based probabilistic sampling table
contrib.keras.python.keras.preprocessing		skipgrams	sequence vocabulary_size window_size negative_samples	generates skipgram word pairs
contrib.keras.python.keras.preprocessing		text_to_word_sequence	text filters lower split	converts a text to a sequence of word indices
contrib.keras.python.keras.preprocessing	Tokenizer	fit_on_texts	texts	updates internal vocabulary based on a list of texts
contrib.keras.python.keras.preprocessing	Tokenizer	fit_on_sequences	sequences	updates internal vocabulary based on a list of sequences
contrib.keras.python.keras.preprocessing	Tokenizer	texts_to_sequences	texts	transforms each text in texts in a sequence of integers
contrib.keras.python.keras.preprocessing	Tokenizer	texts_to_sequences_generator	texts	transforms each text in texts in a sequence of integers
contrib.keras.python.keras.preprocessing	Tokenizer	texts_to_matrix	texts mode	convert a list of texts to a numpy matrix
contrib.keras.python.keras.preprocessing	Tokenizer	sequences_to_matrix	sequences mode	converts a list of sequences into a numpy matrix
contrib.keras.python.keras.preprocessing		random_rotation	x rg row_axis col_axis	performs a random rotation of a numpy image tensor
contrib.keras.python.keras.preprocessing		random_shift	x wrg hrg row_axis	performs a random spatial shift of a numpy image tensor
contrib.keras.python.keras.preprocessing		random_shear	x intensity row_axis col_axis	performs a random spatial shear of a numpy image tensor
contrib.keras.python.keras.preprocessing		random_zoom	x zoom_range row_axis col_axis	performs a random spatial zoom of a numpy image tensor
contrib.keras.python.keras.preprocessing		apply_transform	x transform_matrix channel_axis fill_mode	apply the image transformation specified by a matrix
contrib.keras.python.keras.preprocessing		array_to_img	x data_format scale	converts a 3d numpy array to a pil image instance
contrib.keras.python.keras.preprocessing		img_to_array	img data_format	converts a pil image instance to a numpy array
contrib.keras.python.keras.preprocessing		load_img	path grayscale target_size	loads an image into pil format
contrib.keras.python.keras.preprocessing	ImageDataGenerator	standardize	x	apply the normalization configuration to a batch of inputs
contrib.keras.python.keras.preprocessing	ImageDataGenerator	random_transform	x	randomly augment a single image tensor
contrib.keras.python.keras.preprocessing	ImageDataGenerator	fit	x augment rounds seed	fits internal statistics to some sample data
contrib.keras.python.keras.preprocessing	NumpyArrayIterator	next		for python 2 x
contrib.keras.python.keras.preprocessing	DirectoryIterator	next		for python 2 x
contrib.solvers.python.ops		lanczos_bidiag	operator k orthogonalize starting_vector	computes a lanczos bidiagonalization for a linear operator
contrib.solvers.python.ops		bidiag_matmul	matrix alpha beta adjoint_b	multiplies a matrix by a bidiagonal matrix
contrib.solvers.python.ops		create_operator	matrix	creates a linear operator from a rank-2 tensor
contrib.solvers.python.ops		conjugate_gradient	operator rhs tol max_iter	conjugate gradient solver
contrib.solvers.python.ops		cgls	operator rhs tol max_iter	conjugate gradient least squares solver
contrib.imperative	ImperativeGraph	__init__	parent_graph	initializes an imperativegraph
contrib.imperative	ImperativeGraph	op_in_graph	op	checks if op belongs in this graph or its ancestors
contrib.imperative	ImperativeGraph	is_child_graph	child_graph	checks if this graph is an ancestor of child_graph
contrib.imperative	ImperativeGraph	record_variable_inits		context manager to record variable initializations
contrib.imperative	ImperativeGraph	return_as_is		prevents adding the extra logic during create_op
contrib.imperative	ImperativeGraph	replace_outputs	op	replaces the outputs of op with values recorded in _outputs_map
contrib.imperative	ImperativeGraph	add_pending_init	init_op	records assign ops in _init_ops
contrib.imperative	ImperativeGraph	run_pending_inits	session	runs the pending variable initializations using session
contrib.imperative	ImperativeGraph	create_op		creates an operation
contrib.imperative	OperationProxy	__getattribute__	name	forwards to the methods in the current graph's operation object
contrib.imperative		add_session_attr	typename session	sets the session property on the typename for the duration of a context
contrib.imperative	ImperativeTest	testBasic		tests basic functionality
contrib.imperative	ImperativeTest	testLoopGrads		tests gradients in the presence of python loops
contrib.imperative	ImperativeTest	testVariable		makes sure that variables can be evaluated before running initializer
contrib.imperative	ImperativeTest	testNewStep		tests the new_step functionality
contrib.imperative	ImperativeTest	testEscape		makes sure that values don't escape a new_step scope
contrib.imperative	ImperativeTest	testZeroSized		tests evaluating zero-sized tensors
contrib.imperative	ImperativeMode	__init__	target parent_graph	initializes an imperativemode
contrib.imperative	ImperativeMode	run		runs the variable init ops before calling the original run method
contrib.imperative	ImperativeMode	__enter__		enters the runtime contexts of the _context_managers
contrib.imperative	ImperativeMode	__exit__	exec_type exec_value exec_tb	cleans up resources exits the runtime contexts in reverse order
contrib.imperative	ImperativeMode	new_step		returns a new 'child' imperativemode
contrib.imperative.examples	Model	__init__	hidden1_units hidden2_units	create the model parameters
contrib.imperative.examples	Model	__call__	images	run the model's forward prop on images
contrib.imperative.examples		get_test_accuracy		gets the model's classification accuracy on test data
contrib.distributions.python.kernel_tests	MatrixDiagTransformTest	check_off_diagonal_same	m1 m2	check the lower triangular part not upper or diag
contrib.distributions.python.kernel_tests	RelaxedBernoulliTest	testP		tests that parameter p is set correctly note that dist p != dist pdf
contrib.distributions.python.kernel_tests	RelaxedBernoulliTest	testZeroTemperature		if validate_args raises invalidargumenterror when temperature is 0
contrib.distributions.python.kernel_tests	RelaxedBernoulliTest	testSampleN		mean of quantized samples still approximates the bernoulli mean
contrib.distributions.python.kernel_tests	OperatorPDSqrtVDVTUpdateTest	_build_operator_and_mat	batch_shape k dtype	this method is called by base class enabling many standard tests
contrib.distributions.python.kernel_tests		_test_capture_mvndiag_sample_outputs		use monkey-patching to capture the output of an mvndiag _sample_n
contrib.distributions.python.kernel_tests		_test_capture_normal_sample_outputs		use monkey-patching to capture the output of an normal _sample_n
contrib.distributions.python.kernel_tests	MixtureTest	testCdfScalarUnivariate		tests cdf against scipy for a mixture of seven gaussians
contrib.distributions.python.kernel_tests	MixtureTest	testCdfBatchUnivariate		tests against scipy for a batch of mixture s of seven gaussians
contrib.distributions.python.kernel_tests		make_pd	start n	deterministically create a positive definite matrix
contrib.distributions.python.kernel_tests		chol	x	compute cholesky factorization
contrib.distributions.python.kernel_tests		wishart_var	df x	compute wishart variance for numpy scale matrix
contrib.distributions.python.kernel_tests		_compute_non_batch_kl	mu_a sigma_a mu_b sigma_b	non-batch kl for n(mu_a sigma_a), n(mu_b sigma_b)
contrib.distributions.python.kernel_tests	FillLowerTriangularTest	_fill_lower_triangular	x	numpy implementation of fill_lower_triangular
contrib.distributions.python.kernel_tests	DistributionShapeTest	_assertNdArrayEqual	expected actual	helper which properly compares two np ndarray-like objects
contrib.distributions.python.kernel_tests.bijectors	SoftplusBijectorTest	_softplus_ildj_before_reduction	y	inverse log det jacobian before being reduced
contrib.distributions.python.kernel_tests.bijectors	AffineBijectorTest	_makeScale	x scale_identity_multiplier scale_diag scale_tril	create a scale matrix return none if it can not be created
contrib.distributions.python.kernel_tests.bijectors	AffineBijectorTest	_matrix_diag	d	batch version of np diag
contrib.distributions.python.ops	NegativeBinomial	__init__	total_count logits probs validate_args	construct negativebinomial distributions
contrib.distributions.python.ops	NegativeBinomial	total_count		number of negative trials
contrib.distributions.python.ops	NegativeBinomial	logits		log-odds of a 1 outcome (vs 0)
contrib.distributions.python.ops	NegativeBinomial	probs		probability of a 1 outcome (vs 0)
contrib.distributions.python.ops	OperatorPDDerivedClassTest	_compare_results	expected actual static_shapes atol	compare expected value array to the actual value tensor
contrib.distributions.python.ops	OperatorPDDerivedClassTest	_build_operator_and_mat	batch_shape k dtype	build a batch matrix and an operator that should have similar behavior
contrib.distributions.python.ops	OperatorPDCholesky	__init__	chol verify_pd name	initialize an operatorpdcholesky
contrib.distributions.python.ops	OperatorPDCholesky	verify_pd		whether to verify that this operator is positive definite
contrib.distributions.python.ops	OperatorPDCholesky	_batch_log_det		log determinant of every batch member
contrib.distributions.python.ops	OperatorPDCholesky	inputs		list of tensors that were provided as initialization inputs
contrib.distributions.python.ops	OperatorPDCholesky	get_shape		tensorshape giving static shape
contrib.distributions.python.ops	OperatorPDCholesky	_check_chol	chol	verify that chol is proper
contrib.distributions.python.ops	MultivariateNormalTriL	__init__	loc scale_tril validate_args allow_nan_stats	construct multivariate normal distribution on r^k
contrib.distributions.python.ops	OneHotCategorical	__init__	logits probs dtype validate_args	initialize onehotcategorical distributions using class log-probabilities
contrib.distributions.python.ops	OneHotCategorical	event_size		scalar int32 tensor the number of classes
contrib.distributions.python.ops	OneHotCategorical	logits		vector of coordinatewise logits
contrib.distributions.python.ops	OneHotCategorical	probs		vector of coordinatewise probabilities
contrib.distributions.python.ops		_kl_categorical_categorical	a b name	calculate the batched kl divergence kl(a || b) with a b onehotcategorical
contrib.distributions.python.ops	MultivariateNormalDiagPlusLowRank	__init__	loc scale_diag scale_identity_multiplier scale_perturb_factor	construct multivariate normal distribution on r^k
contrib.distributions.python.ops	OperatorPDBase	name		string name identifying this operator
contrib.distributions.python.ops	OperatorPDBase	verify_pd		whether to verify that this operator is positive definite
contrib.distributions.python.ops	OperatorPDBase	dtype		data type of matrix elements of a
contrib.distributions.python.ops	OperatorPDBase	add_to_tensor	mat name	add matrix represented by this operator to mat equiv to a + mat
contrib.distributions.python.ops	OperatorPDBase	_dispatch_based_on_batch	batch_method singleton_method	helper to automatically call batch or singleton operation
contrib.distributions.python.ops	OperatorPDBase	inv_quadratic_form_on_vectors	x name	compute the quadratic form x^t a^{-1} x where x is a batch vector
contrib.distributions.python.ops	OperatorPDBase	_iqfov_via_sqrt_solve	x	get the inverse quadratic form on vectors via a sqrt_solve
contrib.distributions.python.ops	OperatorPDBase	_iqfov_via_solve	x	get the inverse quadratic form on vectors via a solve
contrib.distributions.python.ops	OperatorPDBase	det	name	determinant for every batch member
contrib.distributions.python.ops	OperatorPDBase	log_det	name	log of the determinant for every batch member
contrib.distributions.python.ops	OperatorPDBase	sqrt_log_abs_det	name	log absolute value determinant of the sqrt s for every batch member
contrib.distributions.python.ops	OperatorPDBase	sqrt_log_det	name	log of the determinant of the sqrt s for every batch member
contrib.distributions.python.ops	OperatorPDBase	inputs		list of tensors that were provided as initialization inputs
contrib.distributions.python.ops	OperatorPDBase	get_shape		static tensorshape of entire operator
contrib.distributions.python.ops	OperatorPDBase	get_batch_shape		tensorshape with batch shape statically determined if possible
contrib.distributions.python.ops	OperatorPDBase	get_vector_shape		tensorshape of vectors this operator will work with
contrib.distributions.python.ops	OperatorPDBase	shape	name	equivalent to tf shape a equal to [n1 ,nn k k], n >= 0
contrib.distributions.python.ops	OperatorPDBase	rank	name	tensor rank equivalent to tf rank a will equal n + 2
contrib.distributions.python.ops	OperatorPDBase	batch_shape	name	shape of batches associated with this operator
contrib.distributions.python.ops	OperatorPDBase	vector_shape	name	shape of batch vectors that this batch matrix will multiply
contrib.distributions.python.ops	OperatorPDBase	vector_space_dimension	name	dimension of vector space on which this acts the k in r^k
contrib.distributions.python.ops	OperatorPDBase	matmul	x transpose_x name	left batch matmul x by this matrix ax
contrib.distributions.python.ops	OperatorPDBase	sqrt_matmul	x transpose_x name	left batch matmul x by a sqrt of this matrix sx where a = s s^t
contrib.distributions.python.ops	OperatorPDBase	solve	rhs name	solve r batch systems a x = rhs
contrib.distributions.python.ops	OperatorPDBase	sqrt_solve	rhs name	solve r batch systems involving sqrt s x = rhs where a = ss^t
contrib.distributions.python.ops	OperatorPDBase	to_dense	name	return a dense batch matrix representing this operator
contrib.distributions.python.ops	OperatorPDBase	sqrt_to_dense	name	return a dense batch matrix representing sqrt of this operator
contrib.distributions.python.ops		flip_matrix_to_vector	mat batch_shape static_batch_shape	flip dims to reshape batch matrix mat to a vector with given batch shape
contrib.distributions.python.ops		_flip_matrix_to_vector_static	mat static_batch_shape	flip matrix to vector with static shapes
contrib.distributions.python.ops		_flip_matrix_to_vector_dynamic	mat batch_shape	flip matrix to vector with dynamic shapes
contrib.distributions.python.ops		flip_vector_to_matrix	vec batch_shape static_batch_shape	flip dims to reshape batch vector x to a matrix with given batch shape
contrib.distributions.python.ops		_flip_vector_to_matrix_dynamic	vec batch_shape	flip_vector_to_matrix with dynamic shapes
contrib.distributions.python.ops		_flip_vector_to_matrix_static	vec batch_shape	flip_vector_to_matrix with static shapes
contrib.distributions.python.ops		extract_batch_shape	x num_event_dims name	extract the batch shape from x
contrib.distributions.python.ops		_broadcast_shape	shape1 shape2	convenience function which statically broadcasts shape when possible
contrib.distributions.python.ops	MultivariateNormalLinearOperator	__init__	loc scale validate_args allow_nan_stats	construct multivariate normal distribution on r^k
contrib.distributions.python.ops	MultivariateNormalLinearOperator	loc		the loc tensor in y = scale @ x + loc
contrib.distributions.python.ops	MultivariateNormalLinearOperator	scale		the scale linearoperator in y = scale @ x + loc
contrib.distributions.python.ops	MultivariateNormalLinearOperator	log_det_covariance	name	log of determinant of covariance matrix
contrib.distributions.python.ops	MultivariateNormalLinearOperator	det_covariance	name	determinant of covariance matrix
contrib.distributions.python.ops		_kl_brute_force	a b name	batched kl divergence kl(a || b) for multivariate normals
contrib.distributions.python.ops	OperatorPDIdentity	__init__	shape dtype scale verify_pd	initialize an operatorpdidentity
contrib.distributions.python.ops	OperatorPDIdentity	_check_shape	shape	check that the init arg shape defines a valid operator
contrib.distributions.python.ops	OperatorPDIdentity	_check_scale	scale dtype	check that the init arg scale defines a valid operator
contrib.distributions.python.ops	OperatorPDIdentity	_check_x	x	static check that the argument x is proper shape, dtype
contrib.distributions.python.ops	OperatorPDIdentity	name		string name identifying this operator
contrib.distributions.python.ops	OperatorPDIdentity	verify_pd		whether to verify that this operator is positive definite
contrib.distributions.python.ops	OperatorPDIdentity	dtype		data type of matrix elements of a
contrib.distributions.python.ops	OperatorPDIdentity	inputs		list of tensors that were provided as initialization inputs
contrib.distributions.python.ops	OperatorPDIdentity	get_shape		static tensorshape of entire operator
contrib.distributions.python.ops	_DistributionShape	__init__	batch_ndims event_ndims validate_args name	construct distributionshape with fixed batch_ndims, event_ndims
contrib.distributions.python.ops	_DistributionShape	name		name given to ops created by this class
contrib.distributions.python.ops	_DistributionShape	batch_ndims		returns number of dimensions corresponding to non-identical draws
contrib.distributions.python.ops	_DistributionShape	event_ndims		returns number of dimensions needed to index a sample's coordinates
contrib.distributions.python.ops	_DistributionShape	validate_args		returns true if graph-runtime tensor checks are enabled
contrib.distributions.python.ops	_DistributionShape	get_ndims	x name	get tensor number of dimensions rank
contrib.distributions.python.ops	_DistributionShape	get_sample_ndims	x name	returns number of dimensions corresponding to iid draws ("sample")
contrib.distributions.python.ops	_DistributionShape	get_dims	x name	returns dimensions indexing sample_shape, batch_shape, event_shape
contrib.distributions.python.ops	_DistributionShape	get_shape	x name	returns tensor's shape partitioned into sample, batch, event
contrib.distributions.python.ops	_DistributionShape	make_batch_of_event_sample_matrices	x expand_batch_dim name	reshapes/transposes distribution tensor from s+b+e to b_+e_+s_
contrib.distributions.python.ops	_DistributionShape	undo_make_batch_of_event_sample_matrices	x sample_shape expand_batch_dim name	reshapes/transposes distribution tensor from b_+e_+s_ to s+b+e
contrib.distributions.python.ops	_DistributionShape	_name_scope	name values	helper function to standardize op scope
contrib.distributions.python.ops	_DistributionShape	_is_all_constant_helper		helper which returns true if all inputs are constant_value
contrib.distributions.python.ops	_DistributionShape	_assert_non_negative_int32_scalar	x	helper which ensures that input is a non-negative int32 scalar
contrib.distributions.python.ops	_DistributionShape	_introspect_ndims	ndims	helper to establish some properties of input ndims args
contrib.distributions.python.ops		normal_conjugates_known_scale_posterior	prior scale s n	posterior normal distribution with conjugate prior on the mean
contrib.distributions.python.ops		normal_conjugates_known_scale_predictive	prior scale s n	posterior predictive normal distribution w conjugate prior on the mean
contrib.distributions.python.ops		_infer_shapes	scale_oppd shift	helper which returns batch_shape event_shape from affine properties
contrib.distributions.python.ops	_VectorStudentT	__init__	df loc scale_identity_multiplier scale_diag	instantiates the vector student's t-distributions on r^k
contrib.distributions.python.ops	_VectorStudentT	df		degrees of freedom in these student's t distribution s
contrib.distributions.python.ops	_VectorStudentT	loc		locations of these student's t distribution s
contrib.distributions.python.ops	_VectorStudentT	scale		dense batch covariance matrix if available
contrib.distributions.python.ops	Poisson	__init__	rate validate_args allow_nan_stats name	initialize a batch of poisson distributions
contrib.distributions.python.ops	Geometric	__init__	logits probs validate_args allow_nan_stats	construct geometric distributions
contrib.distributions.python.ops	Geometric	logits		log-odds of a 1 outcome (vs 0)
contrib.distributions.python.ops	Geometric	probs		probability of a 1 outcome (vs 0)
contrib.distributions.python.ops		_logsum_expbig_minus_expsmall	big small	stable evaluation of log[exp{big} - exp{small}]
contrib.distributions.python.ops	QuantizedDistribution	__init__	distribution low high validate_args	construct a quantized distribution representing y = ceiling x
contrib.distributions.python.ops	QuantizedDistribution	_log_prob_with_logsf_and_logcdf	y	compute log_prob y using log survival_function and cdf together
contrib.distributions.python.ops	QuantizedDistribution	distribution		base distribution p x
contrib.distributions.python.ops		_bdtr	k n p	the binomial cumulative distribution function
contrib.distributions.python.ops	Binomial	__init__	total_count logits probs validate_args	initialize a batch of binomial distributions
contrib.distributions.python.ops	Binomial	total_count		number of trials
contrib.distributions.python.ops	Binomial	logits		log-odds of drawing a 1
contrib.distributions.python.ops	Binomial	probs		probability of of drawing a 1
contrib.distributions.python.ops	Binomial	_maybe_assert_valid_sample	counts check_integer	check counts for proper shape values then return tensor version
contrib.distributions.python.ops	MultivariateNormalDiag	__init__	loc scale_diag scale_identity_multiplier validate_args	construct multivariate normal distribution on r^k
contrib.distributions.python.ops	_BaseDeterministic	__init__	loc atol rtol is_vector	initialize a batch of _basedeterministic distributions
contrib.distributions.python.ops	_BaseDeterministic	loc		point or batch of points at which this distribution is supported
contrib.distributions.python.ops	_BaseDeterministic	atol		absolute tolerance for comparing points to self loc
contrib.distributions.python.ops	_BaseDeterministic	rtol		relative tolerance for comparing points to self loc
contrib.distributions.python.ops	Deterministic	__init__	loc atol rtol validate_args	initialize a scalar deterministic distribution
contrib.distributions.python.ops	VectorDeterministic	__init__	loc atol rtol validate_args	initialize a vectordeterministic distribution on r^k, for k >= 0
contrib.distributions.python.ops	ExpRelaxedOneHotCategorical	__init__	temperature logits probs dtype	initialize exprelaxedonehotcategorical using class log-probabilities
contrib.distributions.python.ops	ExpRelaxedOneHotCategorical	event_size		scalar int32 tensor the number of classes
contrib.distributions.python.ops	ExpRelaxedOneHotCategorical	temperature		batchwise temperature tensor of a relaxedcategorical
contrib.distributions.python.ops	ExpRelaxedOneHotCategorical	logits		vector of coordinatewise logits
contrib.distributions.python.ops	ExpRelaxedOneHotCategorical	probs		vector of probabilities summing to one
contrib.distributions.python.ops	RelaxedOneHotCategorical	__init__	temperature logits probs dtype	initialize relaxedonehotcategorical using class log-probabilities
contrib.distributions.python.ops	Mixture	__init__	cat components validate_args allow_nan_stats	initialize a mixture distribution
contrib.distributions.python.ops	Mixture	entropy_lower_bound	name	a lower bound on the entropy of this mixture model
contrib.distributions.python.ops	Mixture	_cat_probs	log_probs	get a list of num_components batchwise probabilities
contrib.distributions.python.ops		make_diag_scale	loc scale_diag scale_identity_multiplier validate_args	creates a linop from scale_diag, scale_identity_multiplier kwargs
contrib.distributions.python.ops	InverseGamma	__init__	concentration rate validate_args allow_nan_stats	construct inversegamma with concentration and rate parameters
contrib.distributions.python.ops	OperatorPDSqrtVDVTUpdate	__init__	operator v diag verify_pd	initialize an operatorpdsqrtvdvtupdate
contrib.distributions.python.ops	OperatorPDSqrtVDVTUpdate	_get_identity_operator	v	get an operatorpdidentity to play the role of d in vdv^t
contrib.distributions.python.ops	OperatorPDSqrtVDVTUpdate	_check_shapes_static	operator v diag	true if they are compatible raise if not false if could not check
contrib.distributions.python.ops	OperatorPDSqrtVDVTUpdate	_check_shapes_dynamic	operator v diag	return v diag with assert dependencies which check shape
contrib.distributions.python.ops	OperatorPDSqrtVDVTUpdate	name		string name identifying this operator
contrib.distributions.python.ops	OperatorPDSqrtVDVTUpdate	verify_pd		whether to verify that this operator is positive definite
contrib.distributions.python.ops	OperatorPDSqrtVDVTUpdate	dtype		data type of matrix elements of a
contrib.distributions.python.ops	OperatorPDSqrtVDVTUpdate	inputs		list of tensors that were provided as initialization inputs
contrib.distributions.python.ops	OperatorPDSqrtVDVTUpdate	get_shape		static tensorshape of entire operator
contrib.distributions.python.ops	OperatorPDSqrtVDVTUpdate	_chol_capacitance	batch_mode	cholesky factorization of the capacitance term
contrib.distributions.python.ops	OperatorPDSqrtVDVTUpdate	_sqrt_log_det_core	diag_chol_c	finish computation of sqrt[log[det]]
contrib.distributions.python.ops	OperatorPDDiagBase	_check_diag	diag	verify that diag is positive
contrib.distributions.python.ops	OperatorPDDiagBase	name		string name identifying this operator
contrib.distributions.python.ops	OperatorPDDiagBase	verify_pd		whether to verify that this operator is positive definite
contrib.distributions.python.ops	OperatorPDDiagBase	dtype		data type of matrix elements of a
contrib.distributions.python.ops	OperatorPDDiagBase	get_shape		tensorshape giving static shape
contrib.distributions.python.ops	OperatorPDDiag	__init__	diag verify_pd name	initialize an operatorpddiag
contrib.distributions.python.ops	OperatorPDSqrtDiag	__init__	diag verify_pd name	initialize an operatorpdsqrtdiag
contrib.distributions.python.ops	_WishartOperatorPD	__init__	df scale_operator_pd cholesky_input_output_matrices validate_args	construct wishart distributions
contrib.distributions.python.ops	_WishartOperatorPD	df		wishart distribution degree s of freedom
contrib.distributions.python.ops	_WishartOperatorPD	scale		wishart distribution scale matrix
contrib.distributions.python.ops	_WishartOperatorPD	scale_operator_pd		wishart distribution scale matrix as an operatorpd
contrib.distributions.python.ops	_WishartOperatorPD	cholesky_input_output_matrices		boolean indicating if tensor input/outputs are cholesky factorized
contrib.distributions.python.ops	_WishartOperatorPD	dimension		dimension of underlying vector space the p in r^(p*p)
contrib.distributions.python.ops	_WishartOperatorPD	mean_log_det	name	computes e[log(det x )] under this wishart distribution
contrib.distributions.python.ops	_WishartOperatorPD	log_normalization	name	computes the log normalizing constant log z
contrib.distributions.python.ops	_WishartOperatorPD	_multi_gamma_sequence	a p name	creates sequence used in multivariate di gamma shape = shape a +[p]
contrib.distributions.python.ops	_WishartOperatorPD	_multi_lgamma	a p name	computes the log multivariate gamma function log(gamma_p a
contrib.distributions.python.ops	_WishartOperatorPD	_multi_digamma	a p name	computes the multivariate digamma function psi_p a
contrib.distributions.python.ops	WishartCholesky	__init__	df scale cholesky_input_output_matrices validate_args	construct wishart distributions
contrib.distributions.python.ops	WishartFull	__init__	df scale cholesky_input_output_matrices validate_args	construct wishart distributions
contrib.distributions.python.ops	Logistic	__init__	loc scale validate_args allow_nan_stats	construct logistic distributions with mean and scale loc and scale
contrib.distributions.python.ops	Logistic	loc		distribution parameter for the location
contrib.distributions.python.ops	Logistic	scale		distribution parameter for scale
contrib.distributions.python.ops	Logistic	_z	x	standardize input x to a unit logistic
contrib.distributions.python.ops	OperatorPDFull	__init__	matrix verify_pd name	initialize an operatorpdfull
contrib.distributions.python.ops	_Gumbel	__init__	loc scale validate_args allow_nan_stats	construct gumbel distributions with location and scale loc and scale
contrib.distributions.python.ops	_Gumbel	loc		distribution parameter for the location
contrib.distributions.python.ops	_Gumbel	scale		distribution parameter for scale
contrib.distributions.python.ops	_Gumbel	_z	x	standardize input x to a unit logistic
contrib.distributions.python.ops	RelaxedBernoulli	__init__	temperature logits probs validate_args	construct relaxedbernoulli distributions
contrib.distributions.python.ops	RelaxedBernoulli	temperature		distribution parameter for the location
contrib.distributions.python.ops	RelaxedBernoulli	logits		log-odds of 1
contrib.distributions.python.ops	RelaxedBernoulli	probs		probability of 1
contrib.distributions.python.ops	Chi2	__init__	df validate_args allow_nan_stats name	construct chi2 distributions with parameter df
contrib.distributions.python.ops		percentile	x q axis interpolation	compute the q-th percentile of x
contrib.distributions.python.ops		_get_static_ndims	x expect_static expect_ndims expect_ndims_no_more_than	get static number of dimensions and assert that some expectations are met
contrib.distributions.python.ops		_get_best_effort_ndims	x expect_ndims expect_ndims_at_least expect_ndims_no_more_than	get static ndims if possible fallback on tf rank x
contrib.distributions.python.ops		_insert_back_keep_dims	x axis	insert the dims in axis back as singletons after being removed
contrib.distributions.python.ops		_make_static_axis_non_negative	axis ndims	convert possibly negatively indexed axis to non-negative
contrib.distributions.python.ops		_move_dims_to_flat_end	x axis x_ndims	move dims corresponding to axis in x to the end then flatten
contrib.distributions.python.ops		_sort_tensor	tensor	use top_k to sort a tensor along the last dimension
contrib.distributions.python.ops.bijectors		_as_tensor	x name	convenience to convert to tensor or leave as none
contrib.distributions.python.ops.bijectors	_TriLPlusVDVTLightweightOperatorPD	__init__	tril v diag validate_args	creates an instance of _trilplusvdvtlightweightoperatorpd
contrib.distributions.python.ops.bijectors	_TriLPlusVDVTLightweightOperatorPD	rank		returns rank self
contrib.distributions.python.ops.bijectors	_TriLPlusVDVTLightweightOperatorPD	sqrt_matmul	x	computes matmul self x
contrib.distributions.python.ops.bijectors	_TriLPlusVDVTLightweightOperatorPD	sqrt_solve	x	computes solve self x
contrib.distributions.python.ops.bijectors	_TriLPlusVDVTLightweightOperatorPD	sqrt_log_abs_det		computes log o abs o det x for matrix x
contrib.distributions.python.ops.bijectors	_TriLPlusVDVTLightweightOperatorPD	_woodbury_sandwiched_term		computes the sandwiched term in the woodbury identity
contrib.distributions.python.ops.bijectors	Affine	__init__	shift scale_identity_multiplier scale_diag scale_tril	instantiates the affine bijector
contrib.distributions.python.ops.bijectors	Affine	_create_scale_operator	identity_multiplier diag tril perturb_diag	construct scale from various components
contrib.distributions.python.ops.bijectors	Affine	_maybe_validate_identity_multiplier	identity_multiplier validate_args	check that the init arg identity_multiplier is valid
contrib.distributions.python.ops.bijectors	Affine	_preprocess_tril	identity_multiplier diag tril event_ndims	helper to preprocess a lower triangular matrix
contrib.distributions.python.ops.bijectors	Affine	_preprocess_diag	identity_multiplier diag event_ndims	helper to preprocess a diagonal matrix
contrib.distributions.python.ops.bijectors	Affine	_process_matrix	matrix min_rank event_ndims	helper to __init__ which gets matrix in batch-ready form
contrib.distributions.python.ops.bijectors	Affine	shift		the shift tensor in y = scale @ x + shift
contrib.distributions.python.ops.bijectors	Affine	scale		the scale linearoperator in y = scale @ x + shift
contrib.distributions.python.ops.bijectors	Inline	__init__	forward_fn inverse_fn inverse_log_det_jacobian_fn forward_log_det_jacobian_fn	creates a bijector from callables
contrib.distributions.python.ops.bijectors	Exp	__init__	event_ndims validate_args name	instantiates the exp bijector
contrib.distributions.python.ops.bijectors	CholeskyOuterProduct	__init__	event_ndims validate_args name	instantiates the choleskyouterproduct bijector
contrib.distributions.python.ops.bijectors	CholeskyOuterProduct	_make_columnar	x	ensures non-scalar input has at least one column
contrib.distributions.python.ops.bijectors	Invert	__init__	bijector validate_args name	creates a bijector which swaps the meaning of inverse and forward
contrib.distributions.python.ops.bijectors	Chain	__init__	bijectors validate_args name	instantiates chain bijector
contrib.distributions.python.ops.bijectors	AffineLinearOperator	__init__	shift scale event_ndims validate_args	instantiates the affinelinearoperator bijector
contrib.distributions.python.ops.bijectors	AffineLinearOperator	shift		the shift tensor in y = scale @ x + shift
contrib.distributions.python.ops.bijectors	AffineLinearOperator	scale		the scale linearoperator in y = scale @ x + shift
contrib.distributions.python.ops.bijectors	PowerTransform	__init__	power event_ndims validate_args name	instantiates the powertransform bijector
contrib.distributions.python.ops.bijectors	PowerTransform	power		the c in y = g x = (1 + x * c)**(1 / c)
contrib.tfprof.python.tools.tfprof		print_model_analysis	graph run_meta op_log tfprof_cmd	print model statistics
contrib.tfprof.python.tools.tfprof		_fill_missing_graph_shape	graph run_meta	fill tensor shapes in 'graph' with run time shape from 'run_meta'
contrib.tfprof.python.tools.tfprof		_get_logged_ops	graph run_meta	extract trainable model parameters and flops for ops from a graph
contrib.tfprof.python.tools.tfprof		_merge_default_with_oplog	graph op_log run_meta	merge the tfprof default extra info with caller's op_log
contrib.tfprof.python.tools.tfprof		write_op_log	graph log_dir op_log run_meta	log provided 'op_log', and add additional model information below
contrib.linear_optimizer.python	SDCAOptimizer	get_train_step	columns_to_variables weight_column_name loss_type features	returns the training operation of an sdcamodel optimizer
contrib.linear_optimizer.python	SDCALogisticClassifierTest	testRealValuedFeatures		tests sdcalogisticclassifier works with real valued features
contrib.linear_optimizer.python	SDCALogisticClassifierTest	testRealValuedFeatureWithHigherDimension		tests sdcalogisticclassifier with high-dimension real valued features
contrib.linear_optimizer.python	SDCALogisticClassifierTest	testBucketizedFeatures		tests sdcalogisticclassifier with bucketized features
contrib.linear_optimizer.python	SDCALogisticClassifierTest	testSparseFeatures		tests sdcalogisticclassifier with sparse features
contrib.linear_optimizer.python	SDCALogisticClassifierTest	testWeightedSparseFeatures		tests sdcalogisticclassifier with weighted sparse features
contrib.linear_optimizer.python	SDCALogisticClassifierTest	testCrossedFeatures		tests sdcalogisticclassifier with crossed features
contrib.linear_optimizer.python	SDCALogisticClassifierTest	testMixedFeatures		tests sdcalogisticclassifier with a mix of features
contrib.linear_optimizer.python	SDCALinearRegressorTest	testRealValuedLinearFeatures		tests sdcalinearregressor works with real valued features
contrib.linear_optimizer.python	SDCALinearRegressorTest	testMixedFeaturesArbitraryWeights		tests sdcalinearregressor works with a mix of features
contrib.linear_optimizer.python	SDCALinearRegressorTest	testSdcaOptimizerSparseFeaturesWithL1Reg		sdcalinearregressor works with sparse features and l1 regularization
contrib.linear_optimizer.python	SDCALinearRegressorTest	testBiasOnly		tests sdcalinearregressor has a valid bias weight
contrib.linear_optimizer.python	SDCALinearRegressorTest	testBiasAndOtherColumns		sdcalinearregressor has valid bias weight with other columns present
contrib.linear_optimizer.python	SDCALinearRegressorTest	testBiasAndOtherColumnsFabricatedCentered		sdcalinearregressor has valid bias weight when instances are centered
contrib.linear_optimizer.python		_head_is_valid_for_sdca	head	returns true if the provided head is supported by sdcaoptimizer
contrib.linear_optimizer.python		_add_bias_column	feature_columns columns_to_tensors bias_variable columns_to_variables	adds a fake bias feature column filled with all 1s
contrib.linear_optimizer.python		_get_sdca_train_step	optimizer columns_to_variables weight_column_name loss_type	returns the training operation of an sdcamodel optimizer
contrib.linear_optimizer.python		sdca_model_fn	features labels mode params	a model_fn for linear models that use the sdca optimizer
contrib.linear_optimizer.python	_SdcaUpdateWeightsHook	begin		construct the update_weights op
contrib.linear_optimizer.python	_SdcaUpdateWeightsHook	before_run	run_context	return the update_weights op so that it is executed during this run
contrib.linear_optimizer.python	_SDCAEstimator	__init__	example_id_column feature_columns weight_column_name model_dir	construct a _sdcaestimator estimator object
contrib.linear_optimizer.python	SDCALogisticClassifier	__init__	example_id_column feature_columns weight_column_name model_dir	construct a sdcalogisticclassifier object
contrib.linear_optimizer.python	SDCALogisticClassifier	predict_classes	input_fn	runs inference to determine the predicted class
contrib.linear_optimizer.python	SDCALogisticClassifier	predict_proba	input_fn	runs inference to determine the class probability predictions
contrib.linear_optimizer.python	SDCALinearRegressor	__init__	example_id_column feature_columns weight_column_name model_dir	construct a sdcalinearregressor estimator object
contrib.linear_optimizer.python	SDCALinearRegressor	predict_scores	input_fn	returns predicted scores for given features
contrib.linear_optimizer.python.kernel_tests		make_dense_examples_and_variables_dicts	dense_features_values weights labels	creates examples and variables dictionaries for dense features
contrib.linear_optimizer.python.ops	ShardedMutableDenseHashTable	export_sharded	name	returns lists of the keys and values tensors in the sharded table
contrib.linear_optimizer.python.ops	SparseFeatureColumn	__init__	example_indices feature_indices feature_values	creates a sparsefeaturecolumn representation
contrib.linear_optimizer.python.ops	SparseFeatureColumn	example_indices		the example indices represented as a dense tensor
contrib.linear_optimizer.python.ops	SparseFeatureColumn	feature_indices		the feature indices represented as a dense tensor
contrib.linear_optimizer.python.ops	SparseFeatureColumn	feature_values		the feature values represented as a dense tensor
contrib.linear_optimizer.python.ops	SdcaModel	__init__	examples variables options	create a new sdca optimizer
contrib.linear_optimizer.python.ops	SdcaModel	_l1_loss		computes the un-normalized l1 loss of the model
contrib.linear_optimizer.python.ops	SdcaModel	_l2_loss	l2	computes the un-normalized l2 loss of the model
contrib.linear_optimizer.python.ops	SdcaModel	_convert_n_to_tensor	input_list as_ref	converts input list to a set of tensors
contrib.linear_optimizer.python.ops	SdcaModel	_linear_predictions	examples	returns predictions of the form w*x
contrib.linear_optimizer.python.ops	SdcaModel	predictions	examples	add operations to compute predictions by the model
contrib.linear_optimizer.python.ops	SdcaModel	minimize	global_step name	add operations to train a linear model by minimizing the loss function
contrib.linear_optimizer.python.ops	SdcaModel	update_weights	train_op	updates the model weights
contrib.linear_optimizer.python.ops	SdcaModel	approximate_duality_gap		add operations to compute the approximate duality gap
contrib.linear_optimizer.python.ops	SdcaModel	unregularized_loss	examples	add operations to compute the loss without the regularization loss
contrib.linear_optimizer.python.ops	SdcaModel	regularized_loss	examples	add operations to compute the loss with regularization loss included
contrib.ffmpeg	EncodeAudioOpTest	_compareWavFiles	original encoded	compares the important bits of two wav files
contrib.ffmpeg	EncodeAudioOpTest	testRoundTrip		reads a wav file writes it and compares them
contrib.ffmpeg	DecodeAudioOpTest	_loadFileAndTest	filename file_format duration_sec samples_per_second	loads an audio file and validates the output tensor
contrib.ffmpeg		decode_audio	contents file_format samples_per_second channel_count	create an op that decodes the contents of an audio file
contrib.ffmpeg		encode_audio	audio file_format samples_per_second	creates an op that encodes an audio file using sampled audio from a tensor
contrib.memory_stats.python.ops		BytesLimit		generates an op that measures the total memory in bytes of a device
contrib.memory_stats.python.ops		MaxBytesInUse		generates an op that computes the peak memory of a device
contrib.tensor_forest.python	ForestHParams	fill		intelligently sets any non-specific parameters
contrib.tensor_forest.python		get_epoch_variable		returns the epoch variable or [0] if not defined
contrib.tensor_forest.python	ForestStats	__init__	tree_stats params	a simple container for stats about a forest
contrib.tensor_forest.python	RandomForestGraphs	training_graph	input_data input_labels num_trainers trainer_id	constructs a tf graph for training a random forest
contrib.tensor_forest.python	RandomForestGraphs	inference_graph	input_data	constructs a tf graph for evaluating a random forest
contrib.tensor_forest.python	RandomForestGraphs	average_size		constructs a tf graph for evaluating the average size of a forest
contrib.tensor_forest.python	RandomForestGraphs	average_impurity		constructs a tf graph for evaluating the leaf impurity of a forest
contrib.tensor_forest.python		one_hot_wrapper	num_classes loss_fn	some loss functions take one-hot labels
contrib.tensor_forest.python	TrainingLossForest	_get_loss	features labels	constructs caches and returns the inference-based loss
contrib.tensor_forest.python	RandomTreeGraphs	_gini	class_counts	calculate the gini impurity
contrib.tensor_forest.python	RandomTreeGraphs	_weighted_gini	class_counts	our split score is the gini impurity times the number of examples
contrib.tensor_forest.python	RandomTreeGraphs	_variance	sums squares	calculate the variance for each row of the input tensors
contrib.tensor_forest.python	RandomTreeGraphs	training_graph	input_data input_labels random_seed data_spec	constructs a tf graph for training a random tree
contrib.tensor_forest.python	RandomTreeGraphs	finish_iteration		perform any operations that should be done at the end of an iteration
contrib.tensor_forest.python	RandomTreeGraphs	inference_graph	input_data data_spec sparse_features	constructs a tf graph for evaluating a random tree
contrib.tensor_forest.python	RandomTreeGraphs	average_impurity		constructs a tf graph for evaluating the average leaf impurity of a tree
contrib.tensor_forest.python	RandomTreeGraphs	size		constructs a tf graph for evaluating the current number of nodes
contrib.tensor_forest.python.ops		ParseDataTensorOrDict	data	return a tensor to use for input data
contrib.tensor_forest.python.ops		ParseLabelTensorOrDict	labels	return a tensor to use for input labels to tensor_forest
contrib.tensor_forest.hybrid.python	HybridLayer	_define_vars	params	override to define the tensorflow variables for the layer
contrib.tensor_forest.hybrid.python	HybridModel	_base_inference	data data_spec	returns an op that performs inference without a softmax
contrib.tensor_forest.hybrid.python	HybridModel	inference_graph	data data_spec	returns the op that performs inference on a batch of data
contrib.tensor_forest.hybrid.python	HybridModel	training_inference_graph	data data_spec	returns an inference-without-softmax op for training purposes
contrib.tensor_forest.hybrid.python	HybridModel	training_graph	data labels data_spec epoch	returns the op that trains the hybrid model
contrib.tensor_forest.hybrid.python	HybridModel	loss	data labels	the loss to minimize while training
contrib.tensor_forest.hybrid.python.models	DecisionsToDataThenNNTest	testConstructionPollution		ensure that graph building doesn't modify the params in a bad way
contrib.tensor_forest.hybrid.python.models	HardDecisionsToDataThenNN	inference_graph	data data_spec	returns the op that performs inference on a batch of data
contrib.tensor_forest.hybrid.python.ops		_RoutingFunctionGradient	op grad	the gradient of routingfunction
contrib.tensor_forest.hybrid.python.ops		_StochasticHardRoutingFunctionGradient	op routing_grad unused_path_grad	the gradient of routingfunction
contrib.tensor_forest.hybrid.python.ops		_KFeatureRoutingFunctionGradient	op grad	the gradient of routingfunction
contrib.tensor_forest.hybrid.python.ops		Load		load training ops library and return the loaded module
contrib.tensor_forest.client		get_metric	metric_name	given a metric name return the corresponding metric function
contrib.tensor_forest.client		_assert_float32	tensors	assert all tensors are float32
contrib.tensor_forest.client	EveryCheckpointPreSaveListener	__init__	op	initializes the object
contrib.tensor_forest.client		get_model_fn	params graph_builder_class device_assigner weights_name	return a model function given a way to construct a graph builder
contrib.tensor_forest.client	TensorForestEstimator	__init__	params device_assigner model_dir graph_builder_class	initializes a tensorforestestimator instance
contrib.tensor_forest.client	TensorForestTrainerTests	testClassification		tests multi-class classification using matrix data as input
contrib.tensor_forest.client	TensorForestTrainerTests	testClassificationTrainingLoss		tests multi-class classification using matrix data as input
contrib.tensor_forest.client	TensorForestTrainerTests	testRegression		tests multi-class classification using matrix data as input
contrib.slim.python.slim		clip_gradient_norms	gradients_to_variables max_norm	clips the gradients by the given value
contrib.slim.python.slim		multiply_gradients	grads_and_vars gradient_multipliers	multiply specified gradients
contrib.slim.python.slim		add_gradients_summaries	grads_and_vars	add summaries to gradients
contrib.slim.python.slim		create_train_op	total_loss optimizer global_step update_ops	creates an operation that evaluates the gradients and returns the loss
contrib.slim.python.slim		_wait_for_step	sess global_step step	wait till the global step has reached at least 'step'
contrib.slim.python.slim		train_step	sess train_op global_step train_step_kwargs	function that takes a gradient step and specifies whether to stop
contrib.slim.python.slim		train	train_op logdir train_step_fn train_step_kwargs	runs a training loop using a tensorflow supervisor
contrib.slim.python.slim		tensor_description	var	returns a compact and informative string about a tensor
contrib.slim.python.slim		analyze_ops	graph print_info	compute the estimated size of the ops outputs in the graph
contrib.slim.python.slim		analyze_vars	variables print_info	prints the names and shapes of the variables
contrib.slim.python.slim	EvaluationTest	_verify_summaries	output_dir names_to_values	verifies that the given names_to_values are found in the summaries
contrib.slim.python.slim		evaluate_once	master checkpoint_path logdir num_evals	evaluates the model at the given checkpoint path
contrib.slim.python.slim		evaluation_loop	master checkpoint_dir logdir num_evals	runs tf-slim's evaluation loop
contrib.slim.python.slim		QueueRunners	session	creates a context manager that handles starting and stopping queue runners
contrib.slim.python.slim.nets		create_test_input	batch_size height width channels	create test input tensor
contrib.slim.python.slim.nets	ResnetUtilsTest	_resnet_plain	inputs blocks output_stride scope	a plain resnet without extra layers before or after the resnet blocks
contrib.slim.python.slim.nets	ResnetUtilsTest	testEndPointsV2		test the end points of a tiny v2 bottleneck network
contrib.slim.python.slim.nets	ResnetUtilsTest	_stack_blocks_nondense	net blocks	a simplified resnet block stacker without output stride control
contrib.slim.python.slim.nets	ResnetUtilsTest	testAtrousValuesBottleneck		verify the values of dense feature extraction by atrous convolution
contrib.slim.python.slim.nets	ResnetCompleteNetworkTest	_resnet_small	inputs num_classes is_training global_pool	a shallow and thin resnet v2 for faster tests
contrib.slim.python.slim.nets	ResnetCompleteNetworkTest	testAtrousFullyConvolutionalValues		verify dense feature extraction with atrous convolution
contrib.slim.python.slim.nets		bottleneck	inputs depth depth_bottleneck stride	bottleneck residual unit variant with bn before convolutions
contrib.slim.python.slim.nets		resnet_v2	inputs blocks num_classes is_training	generator for v2 preactivation resnet models
contrib.slim.python.slim.nets		resnet_v2_block	scope base_depth num_units stride	helper function for creating a resnet_v2 bottleneck block
contrib.slim.python.slim.nets		resnet_v2_50	inputs num_classes is_training global_pool	resnet-50 model of [1] see resnet_v2() for arg and return description
contrib.slim.python.slim.nets		resnet_v2_101	inputs num_classes global_pool is_training	resnet-101 model of [1] see resnet_v2() for arg and return description
contrib.slim.python.slim.nets		resnet_v2_152	inputs num_classes is_training global_pool	resnet-152 model of [1] see resnet_v2() for arg and return description
contrib.slim.python.slim.nets		resnet_v2_200	inputs num_classes is_training global_pool	resnet-200 model of [2] see resnet_v2() for arg and return description
contrib.slim.python.slim.nets		subsample	inputs factor scope	subsamples the input along the spatial dimensions
contrib.slim.python.slim.nets		conv2d_same	inputs num_outputs kernel_size stride	strided 2-d convolution with 'same' padding
contrib.slim.python.slim.nets		stack_blocks_dense	net blocks output_stride outputs_collections	stacks resnet blocks and controls output feature density
contrib.slim.python.slim.nets		resnet_arg_scope	is_training weight_decay batch_norm_decay batch_norm_epsilon	defines the default resnet arg scope
contrib.slim.python.slim.nets		inception_v2_base	inputs final_endpoint min_depth depth_multiplier	inception v2 6a2
contrib.slim.python.slim.nets		inception_v2	inputs num_classes is_training dropout_keep_prob	inception v2 model for classification
contrib.slim.python.slim.nets		_reduced_kernel_size_for_small_input	input_tensor kernel_size	define kernel size which is automatically reduced for small input
contrib.slim.python.slim.nets		inception_v2_arg_scope	weight_decay batch_norm_var_collection	defines the default inceptionv2 arg scope
contrib.slim.python.slim.nets		vgg_arg_scope	weight_decay	defines the vgg arg scope
contrib.slim.python.slim.nets		vgg_a	inputs num_classes is_training dropout_keep_prob	oxford net vgg 11-layers version a example
contrib.slim.python.slim.nets		vgg_16	inputs num_classes is_training dropout_keep_prob	oxford net vgg 16-layers version d example
contrib.slim.python.slim.nets		vgg_19	inputs num_classes is_training dropout_keep_prob	oxford net vgg 19-layers version e example
contrib.slim.python.slim.nets		create_test_input	batch height width channels	create test input tensor
contrib.slim.python.slim.nets		overfeat	inputs num_classes is_training dropout_keep_prob	contains the model definition for the overfeat network
contrib.slim.python.slim.nets		create_test_input	batch_size height width channels	create test input tensor
contrib.slim.python.slim.nets	ResnetUtilsTest	_resnet_plain	inputs blocks output_stride scope	a plain resnet without extra layers before or after the resnet blocks
contrib.slim.python.slim.nets	ResnetUtilsTest	testEndPointsV1		test the end points of a tiny v1 bottleneck network
contrib.slim.python.slim.nets	ResnetUtilsTest	_stack_blocks_nondense	net blocks	a simplified resnet block stacker without output stride control
contrib.slim.python.slim.nets	ResnetUtilsTest	testAtrousValuesBottleneck		verify the values of dense feature extraction by atrous convolution
contrib.slim.python.slim.nets	ResnetCompleteNetworkTest	_resnet_small	inputs num_classes is_training global_pool	a shallow and thin resnet v1 for faster tests
contrib.slim.python.slim.nets	ResnetCompleteNetworkTest	testAtrousFullyConvolutionalValues		verify dense feature extraction with atrous convolution
contrib.slim.python.slim.nets		bottleneck	inputs depth depth_bottleneck stride	bottleneck residual unit variant with bn after convolutions
contrib.slim.python.slim.nets		resnet_v1	inputs blocks num_classes is_training	generator for v1 resnet models
contrib.slim.python.slim.nets		resnet_v1_block	scope base_depth num_units stride	helper function for creating a resnet_v1 bottleneck block
contrib.slim.python.slim.nets		resnet_v1_50	inputs num_classes is_training global_pool	resnet-50 model of [1] see resnet_v1() for arg and return description
contrib.slim.python.slim.nets		resnet_v1_101	inputs num_classes is_training global_pool	resnet-101 model of [1] see resnet_v1() for arg and return description
contrib.slim.python.slim.nets		resnet_v1_152	inputs num_classes is_training global_pool	resnet-152 model of [1] see resnet_v1() for arg and return description
contrib.slim.python.slim.nets		resnet_v1_200	inputs num_classes is_training global_pool	resnet-200 model of [2] see resnet_v1() for arg and return description
contrib.slim.python.slim.nets		inception_v3_base	inputs final_endpoint min_depth depth_multiplier	inception model from http //arxiv org/abs/1512 00567
contrib.slim.python.slim.nets		inception_v3	inputs num_classes is_training dropout_keep_prob	inception model from http //arxiv org/abs/1512 00567
contrib.slim.python.slim.nets		_reduced_kernel_size_for_small_input	input_tensor kernel_size	define kernel size which is automatically reduced for small input
contrib.slim.python.slim.nets		inception_v3_arg_scope	weight_decay stddev batch_norm_var_collection	defines the default inceptionv3 arg scope
contrib.slim.python.slim.nets		alexnet_v2	inputs num_classes is_training dropout_keep_prob	alexnet version 2
contrib.slim.python.slim.nets		inception_v1_base	inputs final_endpoint scope	defines the inception v1 base architecture
contrib.slim.python.slim.nets		inception_v1	inputs num_classes is_training dropout_keep_prob	defines the inception v1 architecture
contrib.slim.python.slim.nets		inception_v1_arg_scope	weight_decay use_batch_norm batch_norm_var_collection	defines the default inceptionv1 arg scope
contrib.slim.python.slim.data	Dataset	__init__	data_sources reader decoder num_samples	initializes the dataset
contrib.slim.python.slim.data	TFExampleDecoderTest	GenerateImage	image_format image_shape	generates an image and an example containing the encoded image
contrib.slim.python.slim.data	TFExampleDecoderTest	DecodeExample	serialized_example item_handler image_format	decodes the given serialized example with the specified item handler
contrib.slim.python.slim.data	DataDecoder	decode	data items	decodes the data to returns the tensors specified by the list of items
contrib.slim.python.slim.data	DataDecoder	list_items		lists the names of the items that the decoder can decode
contrib.slim.python.slim.data		generate_image	image_shape image_format label	generates an image and an example containing the encoded image
contrib.slim.python.slim.data		create_tfrecord_files	output_dir num_files num_records_per_file	creates tfrecords files
contrib.slim.python.slim.data	DataProvider	__init__	items_to_tensors num_samples	constructs the data provider
contrib.slim.python.slim.data	DataProvider	get	items	returns a list of tensors specified by the given list of items
contrib.slim.python.slim.data	DataProvider	list_items		returns the list of item names that can be provided by the data provider
contrib.slim.python.slim.data	DataProvider	num_samples		returns the number of data samples in the dataset
contrib.slim.python.slim.data	DataProvider	_validate_items	items	verifies that each given item is a member of the list from listitems()
contrib.slim.python.slim.data	ParallelReader	__init__	reader_class common_queue num_readers reader_kwargs	parallelreader creates num_readers instances of the reader_class
contrib.slim.python.slim.data	ParallelReader	read	queue name	returns the next record key value pair produced by the reader
contrib.slim.python.slim.data	ParallelReader	num_records_produced	name	returns the number of records this reader has produced
contrib.slim.python.slim.data	ParallelReader	num_work_units_completed	name	returns the number of work units this reader has finished processing
contrib.slim.python.slim.data		parallel_read	data_sources reader_class num_epochs num_readers	reads multiple records in parallel from data_sources using n readers
contrib.slim.python.slim.data		single_pass_read	data_sources reader_class reader_kwargs scope	reads sequentially the data_sources using the reader doing a single pass
contrib.slim.python.slim.data		get_data_files	data_sources	get data_files from data_sources
contrib.slim.python.slim.data	ItemHandler	__init__	keys	constructs the handler with the name of the tf feature keys to use
contrib.slim.python.slim.data	ItemHandler	tensors_to_item	keys_to_tensors	maps the given dictionary of tensors to the requested item
contrib.slim.python.slim.data	ItemHandlerCallback	__init__	keys func	initializes the itemhandler
contrib.slim.python.slim.data	BoundingBox	__init__	keys prefix	initialize the bounding box handler
contrib.slim.python.slim.data	BoundingBox	tensors_to_item	keys_to_tensors	maps the given dictionary of tensors to a contatenated list of bboxes
contrib.slim.python.slim.data	Tensor	__init__	tensor_key shape_keys shape default_value	initializes the tensor handler
contrib.slim.python.slim.data	SparseTensor	__init__	indices_key values_key shape_key shape	initializes the tensor handler
contrib.slim.python.slim.data	Image	__init__	image_key format_key shape channels	initializes the image
contrib.slim.python.slim.data	Image	tensors_to_item	keys_to_tensors	see base class
contrib.slim.python.slim.data	Image	_decode	image_buffer image_format	decodes the image buffer
contrib.slim.python.slim.data	TFExampleDecoder	__init__	keys_to_features items_to_handlers	constructs the decoder
contrib.slim.python.slim.data	TFExampleDecoder	list_items		see base class
contrib.slim.python.slim.data	TFExampleDecoder	decode	serialized_example items	decodes the given serialized tf-example
contrib.slim.python.slim.data	DatasetDataProvider	__init__	dataset num_readers reader_kwargs shuffle	creates a datasetdataprovider
contrib.slim.python.slim.data		prefetch_queue	tensors capacity num_threads shared_name	creates a queue to prefetech tensors from tensors
contrib.compiler	JITTest	testJITCreateOpsLambda		test several ways of customizing the compilation attribute
contrib.compiler	JITTest	testJITVariableSeed		test that the stateful initializer is not marked for compilation
contrib.compiler		experimental_jit_scope	compile_ops separate_compiled_gradients	enable or disable jit compilation of operators within the scope
contrib.input_pipeline.python.ops		obtain_next	string_list_tensor counter	basic wrapper for the obtainnextop
contrib.input_pipeline.python.ops		seek_next	string_list shuffle seed num_epochs	returns an op that seeks the next element in a list of strings
contrib.image.python.ops		single_image_random_dot_stereograms	depth_values hidden_surface_removal convergence_dots_size dots_per_inch	output a randomdotstereogram tensor for export via encode_png/jpg op
contrib.image.python.ops		rotate	images angles	rotate image s by the passed angle s in radians
contrib.image.python.ops		angles_to_projective_transforms	angles image_height image_width	returns projective transform s for the given angle s
contrib.image.python.ops		transform	images transforms	applies the given transform s to the image s
contrib.image.python.ops		compose_transforms		composes the transforms tensors
contrib.framework.python.framework		reduce_sum_n	tensors name	reduce tensors to a scalar sum
contrib.framework.python.framework		remove_squeezable_dimensions	predictions labels name	squeeze last dim if ranks of predictions and labels differ by 1
contrib.framework.python.framework		_is_rank	expected_rank actual_tensor	returns whether actual_tensor's rank is expected_rank
contrib.framework.python.framework		_is_shape	expected_shape actual_tensor actual_shape	returns whether actual_tensor's shape is expected_shape
contrib.framework.python.framework		_assert_shape_op	expected_shape actual_tensor	asserts actual_tensor's shape is expected_shape
contrib.framework.python.framework		with_same_shape	expected_tensor tensor	assert tensors are the same shape from the same graph
contrib.framework.python.framework		with_shape	expected_shape tensor	asserts tensor has expected shape
contrib.framework.python.framework		assert_scalar_int	tensor name	assert tensor is 0-d of type tf int32 or tf int64
contrib.framework.python.framework		_get_checkpoint_filename	filepattern	returns checkpoint filename given directory or specific filepattern
contrib.framework.python.framework		load_checkpoint	filepattern	returns checkpointreader for latest checkpoint
contrib.framework.python.framework		load_variable	checkpoint_dir name	returns a tensor with the contents of the given variable in the checkpoint
contrib.framework.python.framework		list_variables	checkpoint_dir	returns list of all variables in the latest checkpoint
contrib.framework.python.framework		_set_checkpoint_initializer	variable file_pattern tensor_name slice_spec	sets variable initializer to assign op form value in checkpoint's tensor
contrib.framework.python.framework		init_from_checkpoint	checkpoint_dir assignment_map	using assignment map initializes current variables with loaded tensors
contrib.framework.python.framework		_add_experimental_function_notice_to_docstring	doc	adds an experimental notice to a docstring for experimental functions
contrib.framework.python.framework		experimental	func	decorator for marking functions or methods experimental
contrib.framework.python.ops		zero_initializer	ref use_locking name	initialize 'ref' with all zeros ref tensor should be uninitialized
contrib.framework.python.ops		assert_or_get_global_step	graph global_step_tensor	verifies that a global step tensor is valid or gets one if none is given
contrib.framework.python.ops		create_global_step	graph	create global step tensor in graph
contrib.framework.python.ops		get_or_create_global_step	graph	returns and create if necessary the global step tensor
contrib.framework.python.ops		local_variable	initial_value validate_shape name	create variable and add it to graphkeys local_variables collection
contrib.framework.python.ops		variable	name shape dtype initializer	gets an existing variable with these parameters or creates a new one
contrib.framework.python.ops		model_variable	name shape dtype initializer	gets an existing model variable with these parameters or creates a new one
contrib.framework.python.ops		add_model_variable	var	adds a variable to the graphkeys model_variables collection
contrib.framework.python.ops		get_variables	scope suffix collection	gets the list of variables filtered by scope and/or suffix
contrib.framework.python.ops		get_model_variables	scope suffix	gets the list of model variables filtered by scope and/or suffix
contrib.framework.python.ops		get_local_variables	scope suffix	gets the list of local variables filtered by scope and/or suffix
contrib.framework.python.ops		get_trainable_variables	scope suffix	gets the list of trainable variables filtered by scope and/or suffix
contrib.framework.python.ops		get_variables_to_restore	include exclude	gets the list of the variables to restore
contrib.framework.python.ops		get_variables_by_suffix	suffix scope	gets the list of variables that end with the given suffix
contrib.framework.python.ops		get_variables_by_name	given_name scope	gets the list of variables that were given that name
contrib.framework.python.ops		get_unique_variable	var_op_name	gets the variable uniquely identified by that var_op_name
contrib.framework.python.ops		assign_from_values	var_names_to_values	creates an assignment operation from a given mapping
contrib.framework.python.ops		assign_from_values_fn	var_names_to_values	returns a function that assigns specific variables from the given values
contrib.framework.python.ops		get_variable_full_name	var	returns the full name of a variable
contrib.framework.python.ops		assign_from_checkpoint	model_path var_list	creates an operation to assign specific variables from a checkpoint
contrib.framework.python.ops		assign_from_checkpoint_fn	model_path var_list ignore_missing_vars reshape_variables	returns a function that assigns specific variables from a checkpoint
contrib.framework.python.ops		filter_variables	var_list include_patterns exclude_patterns reg_search	filter a list of variables using regular expressions
contrib.framework.python.ops		func3	args a b c	some cool doc string
contrib.framework.python.ops		get_graph_from_inputs	op_input_list graph	returns the appropriate graph to use for the given inputs
contrib.framework.python.ops		get_name_scope		returns the current name scope of the default graph
contrib.framework.python.ops		arg_scope	list_ops_or_scope	stores the default arguments for the given set of list_ops
contrib.framework.python.ops		add_arg_scope	func	decorates a function with args so it can be used within an arg_scope
contrib.framework.python.ops		has_arg_scope	func	checks whether a func has been decorated with @add_arg_scope or not
contrib.framework.python.ops		arg_scoped_arguments	func	returns the list kwargs that arg_scope can set for a func
contrib.framework.python.ops	AssignFromCheckpointTest	create_checkpoint_from_values	var_names_to_values checkpoint_dir global_step	creates a checkpoint from a mapping of name to values in model_dir
contrib.framework.python.ops	AssignFromCheckpointFnTest	create_checkpoint_from_values	var_names_to_values checkpoint_dir global_step	creates a checkpoint from a mapping of name to values in model_dir
contrib.framework.python.ops		_get_tensor_repr	t print_tensor_name print_tensor_type print_shape	return a list of tensors that summarize the given tensor t
contrib.framework.python.ops		print_op	input_ data message first_n	creates a print op that will print when a tensor is accessed
contrib.legacy_seq2seq.python.kernel_tests	Seq2SeqTest	testModelWithBuckets		larger tests that does full sequence-to-sequence model training
contrib.legacy_seq2seq.python.kernel_tests	Seq2SeqTest	testModelWithBooleanFeedPrevious		test the model behavior when feed_previous is true
contrib.legacy_seq2seq.python.ops		_extract_argmax_and_embed	embedding output_projection update_embedding	get a loop_function that extracts the previous symbol and embeds it
contrib.legacy_seq2seq.python.ops		rnn_decoder	decoder_inputs initial_state cell loop_function	rnn decoder for the sequence-to-sequence model
contrib.legacy_seq2seq.python.ops		basic_rnn_seq2seq	encoder_inputs decoder_inputs cell dtype	basic rnn sequence-to-sequence model
contrib.legacy_seq2seq.python.ops		tied_rnn_seq2seq	encoder_inputs decoder_inputs cell loop_function	rnn sequence-to-sequence model with tied encoder and decoder parameters
contrib.legacy_seq2seq.python.ops		embedding_rnn_decoder	decoder_inputs initial_state cell num_symbols	rnn decoder with embedding and a pure-decoding option
contrib.legacy_seq2seq.python.ops		embedding_rnn_seq2seq	encoder_inputs decoder_inputs cell num_encoder_symbols	embedding rnn sequence-to-sequence model
contrib.legacy_seq2seq.python.ops		embedding_tied_rnn_seq2seq	encoder_inputs decoder_inputs cell num_symbols	embedding rnn sequence-to-sequence model with tied shared parameters
contrib.legacy_seq2seq.python.ops		attention_decoder	decoder_inputs initial_state attention_states cell	rnn decoder with attention for the sequence-to-sequence model
contrib.legacy_seq2seq.python.ops		embedding_attention_decoder	decoder_inputs initial_state attention_states cell	rnn decoder with embedding and attention and a pure-decoding option
contrib.legacy_seq2seq.python.ops		embedding_attention_seq2seq	encoder_inputs decoder_inputs cell num_encoder_symbols	embedding sequence-to-sequence model with attention
contrib.legacy_seq2seq.python.ops		one2many_rnn_seq2seq	encoder_inputs decoder_inputs_dict enc_cell dec_cells_dict	one-to-many rnn sequence-to-sequence model multi-task
contrib.legacy_seq2seq.python.ops		sequence_loss_by_example	logits targets weights average_across_timesteps	weighted cross-entropy loss for a sequence of logits per example
contrib.legacy_seq2seq.python.ops		sequence_loss	logits targets weights average_across_timesteps	weighted cross-entropy loss for a sequence of logits batch-collapsed
contrib.legacy_seq2seq.python.ops		model_with_buckets	encoder_inputs decoder_inputs targets weights	create a sequence-to-sequence model with support for bucketing
contrib.tensorboard.plugins.trace		store_trace_info	output_file_path graph ignore_regex_fpaths	collects and stores trace information for a tensorflow model
contrib.tensorboard.plugins.trace		find_multiline_statements	source	parses the python source and finds multiline statements
contrib.tensorboard.plugins.projector		visualize_embeddings	summary_writer config	stores a config file used by the embedding projector
contrib.cloud.python.ops		_ConvertRowToExampleProto	row	converts the input row to an example proto
contrib.cloud.python.ops	FakeBigQueryServer	__init__	address port	creates a fakebigqueryserver
contrib.cloud.python.ops		_SetUpQueue	reader	sets up a queue for a reader
contrib.cloud.python.ops	BigQueryReader	__init__	project_id dataset_id table_id timestamp_millis	creates a bigqueryreader
contrib.cloud.python.ops	BigQueryReader	partitions	name	returns serialized bigquerytablepartition messages
contrib.hooks.python.training	ProfilerHook	__init__	save_steps save_secs output_dir show_dataflow	initializes a hook that takes periodic profiling snapshots
contrib.linalg.python.ops	LinearOperatorTriL	__init__	tril is_non_singular is_self_adjoint is_positive_definite	initialize a linearoperatortril
contrib.linalg.python.ops	LinearOperatorTriL	_check_tril	tril	static check of the tril argument
contrib.linalg.python.ops	LinearOperatorUDVHUpdate	__init__	base_operator u diag_update v	initialize a linearoperatorudvhupdate
contrib.linalg.python.ops	LinearOperatorUDVHUpdate	_check_shapes		static check that shapes are compatible
contrib.linalg.python.ops	LinearOperatorUDVHUpdate	_set_diag_operators	diag_update is_diag_update_positive	set attributes self _diag_update and self _diag_operator
contrib.linalg.python.ops	LinearOperatorUDVHUpdate	u		if this operator is a = l + u d v^h, this is the u
contrib.linalg.python.ops	LinearOperatorUDVHUpdate	v		if this operator is a = l + u d v^h, this is the v
contrib.linalg.python.ops	LinearOperatorUDVHUpdate	is_diag_update_positive		if this operator is a = l + u d v^h, this hints d > 0 elementwise
contrib.linalg.python.ops	LinearOperatorUDVHUpdate	diag_update		if this operator is a = l + u d v^h, this is the diagonal of d
contrib.linalg.python.ops	LinearOperatorUDVHUpdate	diag_operator		if this operator is a = l + u d v^h, this is d
contrib.linalg.python.ops	LinearOperatorUDVHUpdate	base_operator		if this operator is a = l + u d v^h, this is the l
contrib.linalg.python.ops		assert_no_entries_with_modulus_zero	x message name	returns op that asserts tensor x has no entries with modulus zero
contrib.linalg.python.ops		assert_zero_imag_part	x message name	returns op that asserts tensor x has no non-zero imaginary parts
contrib.linalg.python.ops		assert_compatible_matrix_dimensions	operator x	assert that an argument to solve/apply has proper domain dimension
contrib.linalg.python.ops		assert_is_batch_matrix	tensor	static assert that tensor has rank 2 or higher
contrib.linalg.python.ops		broadcast_matrix_batch_dims	batch_matrices name	broadcast leading dimensions of zero or more [batch] matrices
contrib.linalg.python.ops		matmul_with_broadcast	a b transpose_a transpose_b	multiplies matrix a by matrix b, producing a @ b
contrib.linalg.python.ops		matrix_adjoint	a name	transposes last two dimensions of tensor a, and takes complex conjugate
contrib.linalg.python.ops		shape_tensor	shape name	convert tensor using default type unless empty list or tuple
contrib.linalg.python.ops	BaseLinearOperatorIdentity	_check_num_rows_possibly_add_asserts		static check of init arg num_rows, possibly add asserts
contrib.linalg.python.ops	BaseLinearOperatorIdentity	_ones_diag		returns the diagonal of this operator as all ones
contrib.linalg.python.ops	LinearOperatorIdentity	__init__	num_rows batch_shape dtype is_non_singular	initialize a linearoperatoridentity
contrib.linalg.python.ops	LinearOperatorIdentity	_possibly_broadcast_batch_shape	x	return 'x', possibly after broadcasting the leading dimensions
contrib.linalg.python.ops	LinearOperatorIdentity	add_to_tensor	mat name	add matrix represented by this operator to mat equiv to i + mat
contrib.linalg.python.ops	LinearOperatorIdentity	_check_num_rows_possibly_add_asserts		static check of init arg num_rows, possibly add asserts
contrib.linalg.python.ops	LinearOperatorIdentity	_check_batch_shape_possibly_add_asserts		static check of init arg batch_shape, possibly add asserts
contrib.linalg.python.ops	LinearOperatorScaledIdentity	__init__	num_rows multiplier is_non_singular is_self_adjoint	initialize a linearoperatorscaledidentity
contrib.linalg.python.ops	LinearOperatorScaledIdentity	add_to_tensor	mat name	add matrix represented by this operator to mat equiv to i + mat
contrib.linalg.python.ops	LinearOperatorScaledIdentity	multiplier		the [batch] scalar tensor, c in ci
contrib.linalg.python.ops	LinearOperatorComposition	__init__	operators is_non_singular is_self_adjoint is_positive_definite	initialize a linearoperatorcomposition
contrib.linalg.python.ops	LinearOperatorDerivedClassTest	assertAC	x y	derived classes can set _atol _rtol to get different tolerance
contrib.linalg.python.ops	LinearOperatorDerivedClassTest	_shapes_to_test		returns list of tuples each is one shape that will be tested
contrib.linalg.python.ops	LinearOperatorDerivedClassTest	_operator_and_mat_and_feed_dict	shape dtype use_placeholder	build a batch matrix and an operator that should have similar behavior
contrib.linalg.python.ops	LinearOperatorDerivedClassTest	_make_rhs	operator adjoint	make a rhs appropriate for calling operator solve rhs
contrib.linalg.python.ops	LinearOperatorDerivedClassTest	_make_x	operator adjoint	make an 'x' appropriate for calling operator apply x
contrib.linalg.python.ops	LinearOperatorDerivedClassTest	_tests_to_skip		list of test names to skip
contrib.linalg.python.ops	LinearOperatorDerivedClassTest	_skip_if_tests_to_skip_contains	test_name	if self _tests_to_skip contains test_name raise skiptest exception
contrib.linalg.python.ops	SquareLinearOperatorDerivedClassTest	_get_num_systems	operator	get some number either 1 or 2 depending on operator
contrib.linalg.python.ops	NonSquareLinearOperatorDerivedClassTest	_tests_to_skip		list of test names to skip
contrib.linalg.python.ops	NonSquareLinearOperatorDerivedClassTest	_get_num_systems	operator	get some number either 1 or 2 depending on operator
contrib.linalg.python.ops		random_positive_definite_matrix	shape dtype force_well_conditioned	[batch] positive definite matrix
contrib.linalg.python.ops		random_tril_matrix	shape dtype force_well_conditioned remove_upper	[batch] lower triangular matrix
contrib.linalg.python.ops		random_normal	shape mean stddev dtype	tensor with possibly complex gaussian entries
contrib.linalg.python.ops		random_uniform	shape minval maxval dtype	tensor with possibly complex uniform entries
contrib.linalg.python.ops		random_sign_uniform	shape minval maxval dtype	tensor with possibly complex random entries from a "sign uniform"
contrib.linalg.python.ops		random_normal_correlated_columns	shape mean stddev dtype	batch matrix with possibly complex gaussian entries and correlated cols
contrib.linalg.python.ops		add_operators	operators operator_name addition_tiers name	efficiently add one or more linear operators
contrib.linalg.python.ops		_infer_hints_allowing_override	op1 op2 hints	infer hints from op1 and op2 hints argument is an override
contrib.linalg.python.ops		_static_check_for_same_dimensions	operators	valueerror if operators determined to have different dimensions
contrib.linalg.python.ops		_static_check_for_broadcastable_batch_shape	operators	valueerror if operators determined to have non-broadcastable shapes
contrib.linalg.python.ops	_Adder	can_add	op1 op2	returns true if this adder can add op1 and op2 else false
contrib.linalg.python.ops	_Adder	add	op1 op2 operator_name hints	return new linearoperator acting like op1 + op2
contrib.linalg.python.ops		_type	operator	returns the type name constant (e g _tril) for operator
contrib.linalg.python.ops	LinearOperator	__init__	dtype graph_parents is_non_singular is_self_adjoint	initialize the linearoperator
contrib.linalg.python.ops	LinearOperator	_name_scope	name values	helper function to standardize op scope
contrib.linalg.python.ops	LinearOperator	dtype		the dtype of tensors handled by this linearoperator
contrib.linalg.python.ops	LinearOperator	name		name prepended to all ops created by this linearoperator
contrib.linalg.python.ops	LinearOperator	graph_parents		list of graph dependencies of this linearoperator
contrib.linalg.python.ops	LinearOperator	is_square		return true/false depending on if this operator is square
contrib.linalg.python.ops	LinearOperator	shape		tensorshape of this linearoperator
contrib.linalg.python.ops	LinearOperator	shape_tensor	name	shape of this linearoperator, determined at runtime
contrib.linalg.python.ops	LinearOperator	batch_shape		tensorshape of batch dimensions of this linearoperator
contrib.linalg.python.ops	LinearOperator	batch_shape_tensor	name	shape of batch dimensions of this operator determined at runtime
contrib.linalg.python.ops	LinearOperator	tensor_rank	name	rank in the sense of tensors of matrix corresponding to this operator
contrib.linalg.python.ops	LinearOperator	tensor_rank_tensor	name	rank in the sense of tensors of matrix corresponding to this operator
contrib.linalg.python.ops	LinearOperator	domain_dimension		dimension in the sense of vector spaces of the domain of this operator
contrib.linalg.python.ops	LinearOperator	domain_dimension_tensor	name	dimension in the sense of vector spaces of the domain of this operator
contrib.linalg.python.ops	LinearOperator	range_dimension		dimension in the sense of vector spaces of the range of this operator
contrib.linalg.python.ops	LinearOperator	range_dimension_tensor	name	dimension in the sense of vector spaces of the range of this operator
contrib.linalg.python.ops	LinearOperator	assert_non_singular	name	returns an op that asserts this operator is non singular
contrib.linalg.python.ops	LinearOperator	assert_positive_definite	name	returns an op that asserts this operator is positive definite
contrib.linalg.python.ops	LinearOperator	assert_self_adjoint	name	returns an op that asserts this operator is self-adjoint
contrib.linalg.python.ops	LinearOperator	_check_input_dtype	arg	check that arg dtype == self dtype
contrib.linalg.python.ops	LinearOperator	apply	x adjoint adjoint_arg name	transform x with left multiplication x --> ax
contrib.linalg.python.ops	LinearOperator	determinant	name	determinant for every batch member
contrib.linalg.python.ops	LinearOperator	log_abs_determinant	name	log absolute value of determinant for every batch member
contrib.linalg.python.ops	LinearOperator	solve	rhs adjoint adjoint_arg name	solve r batch systems of equations with best effort a x = rhs
contrib.linalg.python.ops	LinearOperator	_to_dense		generic and often inefficient implementation override often
contrib.linalg.python.ops	LinearOperator	to_dense	name	return a dense batch matrix representing this operator
contrib.linalg.python.ops	LinearOperator	_diag_part		generic and often inefficient implementation override often
contrib.linalg.python.ops	LinearOperator	diag_part	name	efficiently get the [batch] diagonal part of this operator
contrib.linalg.python.ops	LinearOperator	add_to_tensor	x name	add matrix represented by this operator to x equivalent to a + x
contrib.linalg.python.ops	LinearOperatorFullMatrix	__init__	matrix is_non_singular is_self_adjoint is_positive_definite	initialize a linearoperatorfullmatrix
contrib.linalg.python.ops	LinearOperatorFullMatrix	_check_matrix	matrix	static check of the matrix argument
contrib.linalg.python.ops	LinearOperatorDiag	__init__	diag is_non_singular is_self_adjoint is_positive_definite	initialize a linearoperatordiag
contrib.linalg.python.ops	LinearOperatorDiag	_check_diag	diag	static check of diag
contrib.crf.python.ops		_lengths_to_masks	lengths max_length	creates a binary matrix that can be used to mask away padding
contrib.crf.python.ops		crf_sequence_score	inputs tag_indices sequence_lengths transition_params	computes the unnormalized score for a tag sequence
contrib.crf.python.ops		crf_log_norm	inputs sequence_lengths transition_params	computes the normalization for a crf
contrib.crf.python.ops		crf_log_likelihood	inputs tag_indices sequence_lengths transition_params	computes the log-likelihood of tag sequences in a crf
contrib.crf.python.ops		crf_unary_score	tag_indices sequence_lengths inputs	computes the unary scores of tag sequences
contrib.crf.python.ops		crf_binary_score	tag_indices sequence_lengths transition_params	computes the binary scores of tag sequences
contrib.crf.python.ops	CrfForwardRnnCell	__init__	transition_params	initialize the crfforwardrnncell
contrib.crf.python.ops	CrfForwardRnnCell	__call__	inputs state scope	build the crfforwardrnncell
contrib.crf.python.ops		viterbi_decode	score transition_params	decode the highest scoring sequence of tags outside of tensorflow
contrib.learn.python.learn	Trainable	fit	x y input_fn steps	trains a model given training data x predictions and y labels
contrib.learn.python.learn	ExportStrategy	export	estimator export_path checkpoint_path eval_result	exports the given estimator to a specific format
contrib.learn.python.learn	BaseMonitor	set_estimator	estimator	a setter called automatically by the target estimator
contrib.learn.python.learn	BaseMonitor	begin	max_steps	called at the beginning of training
contrib.learn.python.learn	BaseMonitor	end	session	callback at the end of training/evaluation
contrib.learn.python.learn	BaseMonitor	step_begin	step	callback before training step begins
contrib.learn.python.learn	BaseMonitor	step_end	step output	callback after training step finished
contrib.learn.python.learn	BaseMonitor	post_step	step session	callback after the step is finished
contrib.learn.python.learn	EveryN	__init__	every_n_steps first_n_steps	initializes an everyn monitor
contrib.learn.python.learn	EveryN	every_n_step_begin	step	callback before every n'th step begins
contrib.learn.python.learn	EveryN	every_n_step_end	step outputs	callback after every n'th step finished
contrib.learn.python.learn	EveryN	every_n_post_step	step session	callback after a step is finished or end() is called
contrib.learn.python.learn	EveryN	step_begin	step	overrides basemonitor step_begin
contrib.learn.python.learn	EveryN	step_end	step output	overrides basemonitor step_end
contrib.learn.python.learn	StopAtStep	__init__	num_steps last_step	create a stopatstep monitor
contrib.learn.python.learn	PrintTensor	__init__	tensor_names every_n first_n	initializes a printtensor monitor
contrib.learn.python.learn	LoggingTrainable	__init__	scope every_n first_n	initializes loggingtrainable monitor
contrib.learn.python.learn	SummarySaver	__init__	summary_op save_steps output_dir summary_writer	initializes a summarysaver monitor
contrib.learn.python.learn	ValidationMonitor	__init__	x y input_fn batch_size	initializes a validationmonitor
contrib.learn.python.learn	ValidationMonitor	early_stopped		returns true if this monitor caused an early stop
contrib.learn.python.learn	ValidationMonitor	best_step		returns the step at which the best early stopping metric was found
contrib.learn.python.learn	ValidationMonitor	best_value		returns the best early stopping metric value found so far
contrib.learn.python.learn	CaptureVariable	__init__	var_name every_n first_n	initializes a capturevariable monitor
contrib.learn.python.learn	CaptureVariable	values		returns the values captured so far
contrib.learn.python.learn		get_default_monitors	loss_op summary_op save_summary_steps output_dir	returns a default set of typically-used monitors
contrib.learn.python.learn	GraphDump	__init__	ignore_ops	initializes graphdump monitor
contrib.learn.python.learn	GraphDump	compare	other_dump step atol	compares two graphdump monitors and returns differences
contrib.learn.python.learn	ExportMonitor	last_export_dir		returns the directory containing the last completed export
contrib.learn.python.learn	CheckpointSaver	__init__	checkpoint_dir save_secs save_steps saver	initialize checkpointsaver monitor
contrib.learn.python.learn	CheckpointSaver	_save	step session	saves the latest checkpoint
contrib.learn.python.learn	NanLoss	__init__	loss_tensor every_n_steps fail_on_nan_loss	initializes nanloss monitor
contrib.learn.python.learn		replace_monitors_with_hooks	monitors_or_hooks estimator	wraps monitors with a hook
contrib.learn.python.learn		_as_graph_element	obj	retrieves graph element
contrib.learn.python.learn	Experiment	__init__	estimator train_input_fn eval_input_fn eval_metrics	constructor for experiment
contrib.learn.python.learn	Experiment	extend_train_hooks	additional_hooks	extends the hooks for training
contrib.learn.python.learn	Experiment	reset_export_strategies	new_export_strategies	resets the export strategies with the new_export_strategies
contrib.learn.python.learn	Experiment	train	delay_secs	fit the estimator using the training data
contrib.learn.python.learn	Experiment	evaluate	delay_secs	evaluate on the evaluation data
contrib.learn.python.learn	Experiment	_continuous_eval	input_fn name delay_secs throttle_delay_secs	run continuous eval
contrib.learn.python.learn	Experiment	_has_training_stopped	eval_result	determines whether the training has stopped
contrib.learn.python.learn	Experiment	train_and_evaluate		interleaves training and evaluation
contrib.learn.python.learn	Experiment	continuous_train_and_eval	continuous_eval_predicate_fn	interleaves training and evaluation
contrib.learn.python.learn	Experiment	_maybe_export	eval_result checkpoint_path	export the estimator using export_fn if defined
contrib.learn.python.learn	Experiment	run_std_server		starts a tensorflow server and joins the serving thread
contrib.learn.python.learn	Experiment	test		tests training evaluating and exporting the estimator for a single step
contrib.learn.python.learn	Experiment	_start_server		creates starts and returns a server_lib server
contrib.learn.python.learn		_new_attr_context	obj attr	creates a new context in which an object's attribute can be changed
contrib.learn.python.learn		_execute_schedule	experiment schedule	execute the method named schedule of experiment
contrib.learn.python.learn		_wrapped_experiment_fn_with_uid_check	experiment_fn require_hparams	wraps the runconfig uid check with experiment_fn
contrib.learn.python.learn		run	experiment_fn output_dir schedule run_config	make and run an experiment
contrib.learn.python.learn		tune	experiment_fn tuner	tune an experiment with hyper-parameters
contrib.learn.python.learn		_is_distributed	config	returns true if this is a distributed job
contrib.learn.python.learn		_get_default_schedule	config	returns the default schedule for the provided runconfig
contrib.learn.python.learn	Evaluable	model_dir		returns a path in which the eval process will look for checkpoints
contrib.learn.python.learn	Evaluable	evaluate	x y input_fn feed_fn	evaluates given model with provided evaluation data
contrib.learn.python.learn	GraphActionsTest	_build_inference_graph		build simple inference graph
contrib.learn.python.learn	GraphActionsTrainTest	_build_inference_graph		build simple inference graph
contrib.learn.python.learn		_args	fn	get argument names for function-like object
contrib.learn.python.learn		_matching_arg	fn_name fn_args candidate_args canonical_arg	find single argument in args from candidate_args
contrib.learn.python.learn		_adapt_metric_fn	metric_fn metric_fn_name is_labels_required is_weights_required	adapt metric_fn to take only named args
contrib.learn.python.learn	MetricSpec	create_metric_ops	inputs labels predictions	connect our metric_fn to the specified members of the given dicts
contrib.learn.python.learn		clear_summary_writers		clear cached summary writers currently only used for unit tests
contrib.learn.python.learn		get_summary_writer	logdir	returns single summarywriter per logdir in current run
contrib.learn.python.learn		_run_with_monitors	session step tensors feed_dict	runs session for given tensors with monitor callbacks
contrib.learn.python.learn		train	graph output_dir train_op loss_op	train a model
contrib.learn.python.learn		_get_saver		lazy init and return saver
contrib.learn.python.learn		_get_local_init_op		returns the local init ops to initialize tables and local variables
contrib.learn.python.learn		_write_summary_results	output_dir eval_results current_global_step	writes eval results into summary file in given dir
contrib.learn.python.learn		evaluate	graph output_dir checkpoint_path eval_dict	evaluate a model loaded from a checkpoint
contrib.learn.python.learn		run_n	output_dict feed_dict restore_checkpoint_path n	run output_dict tensors n times with the same feed_dict each run
contrib.learn.python.learn		run_feeds_iter	output_dict feed_dicts restore_checkpoint_path	run output_dict tensors with each input in feed_dicts
contrib.learn.python.learn		run_feeds		see run_feeds_iter() returns a list instead of an iterator
contrib.learn.python.learn		infer	restore_checkpoint_path output_dict feed_dict	restore graph from restore_checkpoint_path and run output_dict tensors
contrib.learn.python.learn		linear_regression_zero_init	x y	linear regression subgraph with zero-value initial weights and bias
contrib.learn.python.learn		logistic_regression_zero_init	x y	logistic regression subgraph with zero-value initial weights and bias
contrib.learn.python.learn		linear_regression	x y init_mean init_stddev	creates linear regression tensorflow subgraph
contrib.learn.python.learn		logistic_regression	x y class_weight init_mean	creates logistic regression tensorflow subgraph
contrib.learn.python.learn		_reverse_seq	input_seq lengths	reverse a list of tensors up to specified lengths
contrib.learn.python.learn		bidirectional_rnn	cell_fw cell_bw inputs initial_state_fw	creates a bidirectional recurrent neural network
contrib.learn.python.learn		get_rnn_model	rnn_size cell_type num_layers input_op_fn	returns a function that creates a rnn tensorflow subgraph
contrib.learn.python.learn.learn_io		_get_in_out_shape	x_shape y_shape n_classes batch_size	returns shape for input and output of the data feeder
contrib.learn.python.learn.learn_io		_data_type_filter	x y	filter data types into acceptable format
contrib.learn.python.learn.learn_io		setup_train_data_feeder	x y n_classes batch_size	create data feeder to sample inputs from dataset
contrib.learn.python.learn.learn_io		setup_predict_data_feeder	x batch_size	returns an iterable for feeding into predict step
contrib.learn.python.learn.learn_io		setup_processor_data_feeder	x	sets up processor iterable
contrib.learn.python.learn.learn_io		check_array	array dtype	checks array on dtype and converts it if different
contrib.learn.python.learn.learn_io		_access	data iloc	accesses an element from collection using integer location based indexing
contrib.learn.python.learn.learn_io	DataFeeder	__init__	x y n_classes batch_size	initializes a datafeeder instance
contrib.learn.python.learn.learn_io	DataFeeder	make_epoch_variable		adds a placeholder variable for the epoch to the graph
contrib.learn.python.learn.learn_io	DataFeeder	input_builder		builds inputs in the graph
contrib.learn.python.learn.learn_io	DataFeeder	set_placeholders	input_placeholder output_placeholder	sets placeholders for this data feeder
contrib.learn.python.learn.learn_io	DataFeeder	get_feed_params		function returns a dict with data feed params while training
contrib.learn.python.learn.learn_io	DataFeeder	get_feed_dict_fn		returns a function that samples data into given placeholders
contrib.learn.python.learn.learn_io	StreamingDataFeeder	__init__	x y n_classes batch_size	initializes a streamingdatafeeder instance
contrib.learn.python.learn.learn_io	StreamingDataFeeder	get_feed_params		function returns a dict with data feed params while training
contrib.learn.python.learn.learn_io	StreamingDataFeeder	get_feed_dict_fn		returns a function that will sample data and provide it to placeholders
contrib.learn.python.learn.learn_io	DaskDataFeeder	__init__	x y n_classes batch_size	initializes a daskdatafeeder instance
contrib.learn.python.learn.learn_io	DaskDataFeeder	get_feed_params		function returns a dict with data feed params while training
contrib.learn.python.learn.learn_io	DaskDataFeeder	get_feed_dict_fn	input_placeholder output_placeholder	returns a function that will sample data and provide it to placeholders
contrib.learn.python.learn.learn_io		generator_input_fn	x target_key batch_size num_epochs	returns input function that would dicts of numpy arrays yielded from a generator
contrib.learn.python.learn.learn_io		pandas_input_fn	x y batch_size num_epochs	this input_fn diffs from the core version with default shuffle
contrib.learn.python.learn.learn_io		extract_pandas_data	data	extract data from pandas dataframe for predictors
contrib.learn.python.learn.learn_io		extract_pandas_matrix	data	extracts numpy matrix from pandas dataframe
contrib.learn.python.learn.learn_io		extract_pandas_labels	labels	extract data from pandas dataframe for labels
contrib.learn.python.learn.learn_io		read_batch_examples	file_pattern batch_size reader randomize_input	adds operations to read queue batch example protos
contrib.learn.python.learn.learn_io		read_keyed_batch_examples	file_pattern batch_size reader randomize_input	adds operations to read queue batch example protos
contrib.learn.python.learn.learn_io		read_keyed_batch_examples_shared_queue	file_pattern batch_size reader randomize_input	adds operations to read queue batch example protos
contrib.learn.python.learn.learn_io		_get_file_names	file_pattern randomize_input	parse list of file names from pattern optionally shuffled
contrib.learn.python.learn.learn_io		_read_keyed_batch_examples_helper	file_pattern batch_size reader randomize_input	adds operations to read queue batch example protos
contrib.learn.python.learn.learn_io		read_keyed_batch_features	file_pattern batch_size features reader	adds operations to read queue batch and parse example protos
contrib.learn.python.learn.learn_io		read_keyed_batch_features_shared_queue	file_pattern batch_size features reader	adds operations to read queue batch and parse example protos
contrib.learn.python.learn.learn_io		queue_parsed_features	parsed_features keys feature_queue_capacity num_enqueue_threads	speeds up parsing by using queues to do it asynchronously
contrib.learn.python.learn.learn_io		read_batch_features	file_pattern batch_size features reader	adds operations to read queue batch and parse example protos
contrib.learn.python.learn.learn_io		read_batch_record_features	file_pattern batch_size features randomize_input	reads tfrecord queues batches and parses example proto
contrib.learn.python.learn.learn_io		_add_to_index	df start	new dask dataframe with values added to index of each subdataframe
contrib.learn.python.learn.learn_io		_get_divisions	df	number of rows in each sub-dataframe
contrib.learn.python.learn.learn_io		_construct_dask_df_with_divisions	df	construct the new task graph and make a new dask dataframe around it
contrib.learn.python.learn.learn_io		extract_dask_data	data	extract data from dask series or dask dataframe for predictors
contrib.learn.python.learn.learn_io		extract_dask_labels	labels	extract data from dask series or dask dataframe for labels
contrib.learn.python.learn.learn_io		numpy_input_fn	x y batch_size num_epochs	this input_fn diffs from the core version with default shuffle
contrib.learn.python.learn.estimators	SVM	__init__	example_id_column feature_columns weight_column_name model_dir	constructs an svm estimator object
contrib.learn.python.learn.estimators	SVM	predict_classes	x input_fn batch_size as_iterable	runs inference to determine the predicted class
contrib.learn.python.learn.estimators	SVM	predict_proba	x input_fn batch_size outputs	runs inference to determine the class probability predictions
contrib.learn.python.learn.estimators	SVM	export	export_dir signature_fn input_fn default_batch_size	see baseestimator export
contrib.learn.python.learn.estimators	SVM	export_with_defaults	export_dir signature_fn input_fn default_batch_size	same as baseestimator export but uses some defaults
contrib.learn.python.learn.estimators	_BaseEstimator	get_params	deep	get parameters for this estimator
contrib.learn.python.learn.estimators	_BaseEstimator	set_params		set the parameters of this estimator
contrib.learn.python.learn.estimators		_dnn_model_fn	features labels mode params	deep neural net model_fn
contrib.learn.python.learn.estimators	DNNClassifier	__init__	hidden_units feature_columns model_dir n_classes	initializes a dnnclassifier instance
contrib.learn.python.learn.estimators	DNNClassifier	predict	x input_fn batch_size outputs	returns predictions for given features
contrib.learn.python.learn.estimators	DNNClassifier	predict_classes	x input_fn batch_size as_iterable	returns predicted classes for given features
contrib.learn.python.learn.estimators	DNNClassifier	predict_proba	x input_fn batch_size as_iterable	returns predicted probabilities for given features
contrib.learn.python.learn.estimators	DNNClassifier	export	export_dir input_fn input_feature_key use_deprecated_input_fn	see baseestimator export
contrib.learn.python.learn.estimators	DNNRegressor	__init__	hidden_units feature_columns model_dir weight_column_name	initializes a dnnregressor instance
contrib.learn.python.learn.estimators	DNNRegressor	evaluate	x y input_fn feed_fn	see evaluable evaluable
contrib.learn.python.learn.estimators	DNNRegressor	predict	x input_fn batch_size outputs	returns predictions for given features
contrib.learn.python.learn.estimators	DNNRegressor	predict_scores	x input_fn batch_size as_iterable	returns predicted scores for given features
contrib.learn.python.learn.estimators	DNNRegressor	export	export_dir input_fn input_feature_key use_deprecated_input_fn	see baseestimator export
contrib.learn.python.learn.estimators	DNNEstimator	__init__	head hidden_units feature_columns model_dir	initializes a dnnestimator instance
contrib.learn.python.learn.estimators		_parse_tensor_or_dict	features	helper function to parse features
contrib.learn.python.learn.estimators		_kmeans_clustering_model_fn	features labels mode params	model function for kmeansclustering estimator
contrib.learn.python.learn.estimators	KMeansClustering	__init__	num_clusters model_dir initial_clusters distance_metric	creates a model for running kmeans training and inference
contrib.learn.python.learn.estimators	KMeansClustering	predict_cluster_idx	input_fn	yields predicted cluster indices
contrib.learn.python.learn.estimators	KMeansClustering	score	input_fn steps	predict total sum of distances to nearest clusters
contrib.learn.python.learn.estimators	KMeansClustering	transform	input_fn as_iterable	transforms each element to distances to cluster centers
contrib.learn.python.learn.estimators	KMeansClustering	clusters		returns cluster centers
contrib.learn.python.learn.estimators		_get_model_fn_with_logistic_metrics	model_fn	returns a model_fn with additional logistic metrics
contrib.learn.python.learn.estimators		LogisticRegressor	model_fn thresholds model_dir config	builds a logistic regression estimator for binary classification
contrib.learn.python.learn.estimators		_make_logistic_eval_metric_ops	labels predictions thresholds	returns a dictionary of evaluation metric ops for logistic regression
contrib.learn.python.learn.estimators	ComposableModelTest	testLinearModel		tests that loss goes down with training
contrib.learn.python.learn.estimators	ComposableModelTest	testJointLinearModel		tests that loss goes down with training
contrib.learn.python.learn.estimators	ComposableModelTest	testDNNModel		tests multi-class classification using matrix data as input
contrib.learn.python.learn.estimators	DynamicRnnEstimatorTest	GetColumnsToTensors		get columns_to_tensors matching setup(), in the current default graph
contrib.learn.python.learn.estimators	DynamicRnnEstimatorTest	GetClassificationTargetsOrNone	mode	get targets matching setup() and mode in the current default graph
contrib.learn.python.learn.estimators	DynamicRnnEstimatorTest	_GetModelFnOpsForMode	mode	helper for testgetdynamicrnnmodelfn{train eval infer}()
contrib.learn.python.learn.estimators	DynamicRnnEstimatorTest	testStateTupleDictConversion		test state_tuple_to_dict and dict_to_state_tuple
contrib.learn.python.learn.estimators	DynamicRnnEstimatorTest	testMultiRNNState		test that state flattening/reconstruction works for multirnncell
contrib.learn.python.learn.estimators	DynamicRnnEstimatorTest	testMultipleRuns		tests resuming training by feeding state
contrib.learn.python.learn.estimators	DynamicRNNEstimatorLearningTest	testLearnSineFunction		tests learning a sine function
contrib.learn.python.learn.estimators	DynamicRNNEstimatorLearningTest	testLearnShiftByOne		tests that learning a 'shift-by-one' example
contrib.learn.python.learn.estimators	DynamicRNNEstimatorLearningTest	testLearnMean		test learning to calculate a mean
contrib.learn.python.learn.estimators	DynamicRNNEstimatorLearningTest	testLearnMajority		test learning the 'majority' function
contrib.learn.python.learn.estimators		linear_model_fn_with_model_fn_ops	features labels mode	same as linear_model_fn but returns modelfnops
contrib.learn.python.learn.estimators	EstimatorTest	testWithModelFnOps		test for model_fn that returns modelfnops
contrib.learn.python.learn.estimators		construct_state_saving_rnn	cell inputs num_label_columns state_saver	build a state saving rnn and apply a fully connected layer
contrib.learn.python.learn.estimators		_multi_value_loss	activations labels sequence_length target_column	maps activations from the rnn to loss for multi value models
contrib.learn.python.learn.estimators		_get_name_or_parent_names	column	gets the name of a column or its parent columns' names
contrib.learn.python.learn.estimators		_prepare_features_for_sqss	features labels mode sequence_feature_columns	prepares features for batching by the sqss
contrib.learn.python.learn.estimators		_get_state_names	cell	gets the state names for an rnncell
contrib.learn.python.learn.estimators		_get_initial_states	cell	gets the initial state of the rnncell used in the rnn
contrib.learn.python.learn.estimators		_read_batch	cell features labels mode	reads a batch from a state saving sequence queue
contrib.learn.python.learn.estimators		_get_state_name	i	constructs the name string for state component i
contrib.learn.python.learn.estimators		state_tuple_to_dict	state	returns a dict containing flattened state
contrib.learn.python.learn.estimators		_prepare_inputs_for_rnn	sequence_features context_features sequence_feature_columns num_unroll	prepares features batched by the sqss for input to a state-saving rnn
contrib.learn.python.learn.estimators		_get_rnn_model_fn	cell_type target_column problem_type optimizer	creates a state saving rnn model function for an estimator
contrib.learn.python.learn.estimators	StateSavingRnnEstimator	__init__	problem_type num_unroll batch_size sequence_feature_columns	initializes a statesavingrnnestimator
contrib.learn.python.learn.estimators	LinearClassifierTest	testTrain		tests that loss goes down with training
contrib.learn.python.learn.estimators	LinearClassifierTest	testJointTrain		tests that loss goes down with training with joint weights
contrib.learn.python.learn.estimators	LinearClassifierTest	testMultiClass_MatrixData		tests multi-class classification using matrix data as input
contrib.learn.python.learn.estimators	LinearClassifierTest	testMultiClass_MatrixData_Labels1D		same as the last test but labels shape is [150] instead of [150 1]
contrib.learn.python.learn.estimators	LinearClassifierTest	testMultiClass_NpMatrixData		tests multi-class classification using numpy matrix data as input
contrib.learn.python.learn.estimators	LinearClassifierTest	testMultiClassLabelKeys		tests n_classes > 2 with label_keys vocabulary for labels
contrib.learn.python.learn.estimators	LinearClassifierTest	testLogisticRegression_MatrixData		tests binary classification using matrix data as input
contrib.learn.python.learn.estimators	LinearClassifierTest	testLogisticRegression_MatrixData_Labels1D		same as the last test but labels shape is [100] instead of [100 1]
contrib.learn.python.learn.estimators	LinearClassifierTest	testLogisticRegression_NpMatrixData		tests binary classification using numpy matrix data as input
contrib.learn.python.learn.estimators	LinearClassifierTest	testWeightAndBiasNames		tests that weight and bias names haven't changed
contrib.learn.python.learn.estimators	LinearClassifierTest	testCustomOptimizerByObject		tests multi-class classification using matrix data as input
contrib.learn.python.learn.estimators	LinearClassifierTest	testCustomOptimizerByString		tests multi-class classification using matrix data as input
contrib.learn.python.learn.estimators	LinearClassifierTest	testCustomOptimizerByFunction		tests multi-class classification using matrix data as input
contrib.learn.python.learn.estimators	LinearClassifierTest	testCustomMetrics		tests custom evaluation metrics
contrib.learn.python.learn.estimators	LinearClassifierTest	testLogisticFractionalLabels		tests logistic training with fractional labels
contrib.learn.python.learn.estimators	LinearClassifierTest	testTrainWithPartitionedVariables		tests training with partitioned variables
contrib.learn.python.learn.estimators	LinearClassifierTest	testTrainSaveLoad		tests that insures you can save and reload a trained model
contrib.learn.python.learn.estimators	LinearClassifierTest	testWeightColumn		tests training with given weight column
contrib.learn.python.learn.estimators	LinearClassifierTest	testWeightColumnLoss		test ensures that you can specify per-example weights for loss
contrib.learn.python.learn.estimators	LinearClassifierTest	testExport		tests that export model for servo works
contrib.learn.python.learn.estimators	LinearClassifierTest	testDisableCenteredBias		tests that we can disable centered bias
contrib.learn.python.learn.estimators	LinearClassifierTest	testEnableCenteredBias		tests that we can enable centered bias
contrib.learn.python.learn.estimators	LinearClassifierTest	testTrainOptimizerWithL1Reg		tests l1 regularized model has higher loss
contrib.learn.python.learn.estimators	LinearClassifierTest	testTrainWithMissingFeature		tests that training works with missing features
contrib.learn.python.learn.estimators	LinearClassifierTest	testSdcaOptimizerRealValuedFeatures		tests linearclasssifier with sdcaoptimizer and real valued features
contrib.learn.python.learn.estimators	LinearClassifierTest	testSdcaOptimizerRealValuedFeatureWithHigherDimension		tests sdcaoptimizer with real valued features of higher dimension
contrib.learn.python.learn.estimators	LinearClassifierTest	testSdcaOptimizerBucketizedFeatures		tests linearclasssifier with sdcaoptimizer and bucketized features
contrib.learn.python.learn.estimators	LinearClassifierTest	testSdcaOptimizerSparseFeatures		tests linearclasssifier with sdcaoptimizer and sparse features
contrib.learn.python.learn.estimators	LinearClassifierTest	testSdcaOptimizerWeightedSparseFeatures		linearclasssifier with sdcaoptimizer and weighted sparse features
contrib.learn.python.learn.estimators	LinearClassifierTest	testSdcaOptimizerCrossedFeatures		tests linearclasssifier with sdcaoptimizer and crossed features
contrib.learn.python.learn.estimators	LinearClassifierTest	testSdcaOptimizerMixedFeatures		tests linearclasssifier with sdcaoptimizer and a mix of features
contrib.learn.python.learn.estimators	LinearClassifierTest	testEval		tests that eval produces correct metrics
contrib.learn.python.learn.estimators	LinearRegressorTest	testRegression		tests that loss goes down with training
contrib.learn.python.learn.estimators	LinearRegressorTest	testRegression_MatrixData		tests regression using matrix data as input
contrib.learn.python.learn.estimators	LinearRegressorTest	testRegression_TensorData		tests regression using tensor data as input
contrib.learn.python.learn.estimators	LinearRegressorTest	testLoss		tests loss calculation
contrib.learn.python.learn.estimators	LinearRegressorTest	testLossWithWeights		tests loss calculation with weights
contrib.learn.python.learn.estimators	LinearRegressorTest	testTrainWithWeights		tests training with given weight column
contrib.learn.python.learn.estimators	LinearRegressorTest	testPredict_AsIterableFalse		tests predict method with as_iterable=false
contrib.learn.python.learn.estimators	LinearRegressorTest	testPredict_AsIterable		tests predict method with as_iterable=true
contrib.learn.python.learn.estimators	LinearRegressorTest	testCustomMetrics		tests custom evaluation metrics
contrib.learn.python.learn.estimators	LinearRegressorTest	testTrainSaveLoad		tests that insures you can save and reload a trained model
contrib.learn.python.learn.estimators	LinearRegressorTest	testTrainWithPartitionedVariables		tests training with partitioned variables
contrib.learn.python.learn.estimators	LinearRegressorTest	testDisableCenteredBias		tests that we can disable centered bias
contrib.learn.python.learn.estimators	LinearRegressorTest	testSdcaOptimizerRealValuedLinearFeatures		tests linearregressor with sdcaoptimizer and real valued features
contrib.learn.python.learn.estimators	LinearRegressorTest	testSdcaOptimizerMixedFeaturesArbitraryWeights		tests linearregressor with sdcaoptimizer and a mix of features
contrib.learn.python.learn.estimators	LinearRegressorTest	testSdcaOptimizerSparseFeaturesWithL1Reg		tests linearclasssifier with sdcaoptimizer and sparse features
contrib.learn.python.learn.estimators	LinearRegressorTest	testSdcaOptimizerBiasOnly		tests linearclasssifier with sdcaoptimizer and validates bias weight
contrib.learn.python.learn.estimators	LinearRegressorTest	testSdcaOptimizerBiasAndOtherColumns		tests linearclasssifier with sdcaoptimizer and validates bias weight
contrib.learn.python.learn.estimators	LinearRegressorTest	testSdcaOptimizerBiasAndOtherColumnsFabricatedCentered		tests linearclasssifier with sdcaoptimizer and validates bias weight
contrib.learn.python.learn.estimators	LinearEstimatorTest	testLinearRegression		tests that loss goes down with training
contrib.learn.python.learn.estimators	LinearEstimatorTest	testPoissonRegression		tests that loss goes down with training
contrib.learn.python.learn.estimators	LinearEstimatorTest	testSDCANotSupported		tests that we detect error for sdca
contrib.learn.python.learn.estimators		_linear_learning_rate	num_linear_feature_columns	returns the default learning rate of the linear model
contrib.learn.python.learn.estimators		_extract_embedding_lr_multipliers	embedding_lr_multipliers collection_key input_layer_scope	converts embedding lr multipliers to variable based gradient multiplier
contrib.learn.python.learn.estimators		_dnn_linear_combined_model_fn	features labels mode params	deep neural net and linear combined model_fn
contrib.learn.python.learn.estimators	DNNLinearCombinedEstimator	__init__	head model_dir linear_feature_columns linear_optimizer	initializes a dnnlinearcombinedestimator instance
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifier	__init__	model_dir n_classes weight_column_name linear_feature_columns	constructs a dnnlinearcombinedclassifier instance
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifier	predict	x input_fn batch_size outputs	returns predictions for given features
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifier	predict_classes	x input_fn batch_size as_iterable	returns predicted classes for given features
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifier	predict_proba	x input_fn batch_size as_iterable	returns prediction probabilities for given features
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifier	export	export_dir input_fn input_feature_key use_deprecated_input_fn	see basestimator export
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressor	__init__	model_dir weight_column_name linear_feature_columns linear_optimizer	initializes a dnnlinearcombinedregressor instance
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressor	evaluate	x y input_fn feed_fn	see evaluable evaluable
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressor	predict	x input_fn batch_size outputs	returns predictions for given features
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressor	predict_scores	x input_fn batch_size as_iterable	returns predicted scores for given features
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressor	export	export_dir input_fn input_feature_key use_deprecated_input_fn	see baseestimator export
contrib.learn.python.learn.estimators		linear_model_fn_with_model_fn_ops	features labels mode	same as linear_model_fn but returns modelfnops
contrib.learn.python.learn.estimators	TensorSignature	is_compatible_with	other	returns true if signatures are compatible
contrib.learn.python.learn.estimators		tensors_compatible	tensors signatures	check that tensors are compatible with signatures
contrib.learn.python.learn.estimators		create_signatures	tensors	creates tensorsignature objects for given tensors
contrib.learn.python.learn.estimators		create_placeholders_from_signatures	signatures	creates placeholders from given signatures
contrib.learn.python.learn.estimators		create_example_parser_from_signatures	signatures examples_batch single_feature_name	creates example parser from given signatures
contrib.learn.python.learn.estimators		_get_state_name	i	constructs the name string for state component i
contrib.learn.python.learn.estimators		state_tuple_to_dict	state	returns a dict containing flattened state
contrib.learn.python.learn.estimators		dict_to_state_tuple	input_dict cell	reconstructs nested state from a dict containing state tensors
contrib.learn.python.learn.estimators		_concatenate_context_input	sequence_input context_input	replicates context_input accross all timesteps of sequence_input
contrib.learn.python.learn.estimators		build_sequence_input	features sequence_feature_columns context_feature_columns weight_collections	combine sequence and context features into input for an rnn
contrib.learn.python.learn.estimators		construct_rnn	initial_state sequence_input cell num_label_columns	build an rnn and apply a fully connected layer to get the desired output
contrib.learn.python.learn.estimators		_single_value_predictions	activations sequence_length target_column problem_type	maps activations from the rnn to predictions for single value models
contrib.learn.python.learn.estimators		_multi_value_loss	activations labels sequence_length target_column	maps activations from the rnn to loss for multi value models
contrib.learn.python.learn.estimators		_single_value_loss	activations labels sequence_length target_column	maps activations from the rnn to loss for multi value models
contrib.learn.python.learn.estimators		_get_output_alternatives	prediction_type problem_type prediction_dict	constructs output alternatives dict for modelfnops
contrib.learn.python.learn.estimators		_get_dynamic_rnn_model_fn	cell_type num_units target_column problem_type	creates an rnn model function for an estimator
contrib.learn.python.learn.estimators	DynamicRnnEstimator	__init__	problem_type prediction_type sequence_feature_columns context_feature_columns	initializes a dynamicrnnestimator
contrib.learn.python.learn.estimators		_add_bias_column	feature_columns columns_to_tensors bias_variable columns_to_variables	adds a fake bias feature column filled with all 1s
contrib.learn.python.learn.estimators		_linear_model_fn	features labels mode params	a model_fn for linear models that use a gradient-based optimizer
contrib.learn.python.learn.estimators		sdca_model_fn	features labels mode params	a model_fn for linear models that use the sdca optimizer
contrib.learn.python.learn.estimators	_SdcaUpdateWeightsHook	begin		construct the update_weights op
contrib.learn.python.learn.estimators	_SdcaUpdateWeightsHook	before_run	run_context	return the update_weights op so that it is executed during this run
contrib.learn.python.learn.estimators	LinearClassifier	__init__	feature_columns model_dir n_classes weight_column_name	construct a linearclassifier estimator object
contrib.learn.python.learn.estimators	LinearClassifier	predict	x input_fn batch_size outputs	returns predictions for given features
contrib.learn.python.learn.estimators	LinearClassifier	predict_classes	x input_fn batch_size as_iterable	returns predicted classes for given features
contrib.learn.python.learn.estimators	LinearClassifier	predict_proba	x input_fn batch_size as_iterable	returns predicted probabilities for given features
contrib.learn.python.learn.estimators	LinearClassifier	export	export_dir input_fn input_feature_key use_deprecated_input_fn	see baseestimator export
contrib.learn.python.learn.estimators	LinearRegressor	__init__	feature_columns model_dir weight_column_name optimizer	construct a linearregressor estimator object
contrib.learn.python.learn.estimators	LinearRegressor	predict	x input_fn batch_size outputs	returns predictions for given features
contrib.learn.python.learn.estimators	LinearRegressor	predict_scores	x input_fn batch_size as_iterable	returns predicted scores for given features
contrib.learn.python.learn.estimators	LinearRegressor	export	export_dir input_fn input_feature_key use_deprecated_input_fn	see baseestimator export
contrib.learn.python.learn.estimators	LinearEstimator	__init__	feature_columns head model_dir weight_column_name	construct a linearestimator object
contrib.learn.python.learn.estimators	SVMTest	testRealValuedFeaturesPerfectlySeparable		tests svm classifier with real valued features
contrib.learn.python.learn.estimators	SVMTest	testRealValuedFeaturesWithL2Regularization		tests svm classifier with real valued features and l2 regularization
contrib.learn.python.learn.estimators	SVMTest	testMultiDimensionalRealValuedFeaturesWithL2Regularization		tests svm with multi-dimensional real features and l2 regularization
contrib.learn.python.learn.estimators	SVMTest	testRealValuedFeaturesWithMildL1Regularization		tests svm classifier with real valued features and l2 regularization
contrib.learn.python.learn.estimators	SVMTest	testRealValuedFeaturesWithBigL1Regularization		tests svm classifier with real valued features and l2 regularization
contrib.learn.python.learn.estimators	SVMTest	testSparseFeatures		tests svm classifier with hashed sparse features
contrib.learn.python.learn.estimators	SVMTest	testBucketizedFeatures		tests svm classifier with bucketized features
contrib.learn.python.learn.estimators	SVMTest	testMixedFeatures		tests svm classifier with a mix of features
contrib.learn.python.learn.estimators	DNNClassifierBenchmark	benchmarkMultiClassMatrixData		tests multi-class classification using matrix data as input
contrib.learn.python.learn.estimators	DNNEstimatorTest	testTrainWithWeights		tests training with given weight column
contrib.learn.python.learn.estimators	DNNClassifierTest	testLogisticRegression_MatrixData		tests binary classification using matrix data as input
contrib.learn.python.learn.estimators	DNNClassifierTest	testLogisticRegression_MatrixData_Labels1D		same as the last test but label shape is [100] instead of [100 1]
contrib.learn.python.learn.estimators	DNNClassifierTest	testLogisticRegression_NpMatrixData		tests binary classification using numpy matrix data as input
contrib.learn.python.learn.estimators	DNNClassifierTest	testLogisticRegression_TensorData		tests binary classification using tensor data as input
contrib.learn.python.learn.estimators	DNNClassifierTest	testLogisticRegression_FloatLabel		tests binary classification with float labels
contrib.learn.python.learn.estimators	DNNClassifierTest	testMultiClass_MatrixData		tests multi-class classification using matrix data as input
contrib.learn.python.learn.estimators	DNNClassifierTest	testMultiClass_MatrixData_Labels1D		same as the last test but label shape is [150] instead of [150 1]
contrib.learn.python.learn.estimators	DNNClassifierTest	testMultiClass_NpMatrixData		tests multi-class classification using numpy matrix data as input
contrib.learn.python.learn.estimators	DNNClassifierTest	testMultiClassLabelKeys		tests n_classes > 2 with label_keys vocabulary for labels
contrib.learn.python.learn.estimators	DNNClassifierTest	testLoss		tests loss calculation
contrib.learn.python.learn.estimators	DNNClassifierTest	testLossWithWeights		tests loss calculation with weights
contrib.learn.python.learn.estimators	DNNClassifierTest	testTrainWithWeights		tests training with given weight column
contrib.learn.python.learn.estimators	DNNClassifierTest	testPredict_AsIterableFalse		tests predict and predict_prob methods with as_iterable=false
contrib.learn.python.learn.estimators	DNNClassifierTest	testPredict_AsIterable		tests predict and predict_prob methods with as_iterable=true
contrib.learn.python.learn.estimators	DNNClassifierTest	testCustomMetrics		tests custom evaluation metrics
contrib.learn.python.learn.estimators	DNNClassifierTest	testTrainSaveLoad		tests that insures you can save and reload a trained model
contrib.learn.python.learn.estimators	DNNClassifierTest	testTrainWithPartitionedVariables		tests training with partitioned variables
contrib.learn.python.learn.estimators	DNNClassifierTest	testExport		tests export model for servo
contrib.learn.python.learn.estimators	DNNClassifierTest	testEnableCenteredBias		tests that we can enable centered bias
contrib.learn.python.learn.estimators	DNNClassifierTest	testDisableCenteredBias		tests that we can disable centered bias
contrib.learn.python.learn.estimators	DNNRegressorTest	testRegression_MatrixData		tests regression using matrix data as input
contrib.learn.python.learn.estimators	DNNRegressorTest	testRegression_MatrixData_Labels1D		same as the last test but label shape is [100] instead of [100 1]
contrib.learn.python.learn.estimators	DNNRegressorTest	testRegression_NpMatrixData		tests binary classification using numpy matrix data as input
contrib.learn.python.learn.estimators	DNNRegressorTest	testRegression_TensorData		tests regression using tensor data as input
contrib.learn.python.learn.estimators	DNNRegressorTest	testLoss		tests loss calculation
contrib.learn.python.learn.estimators	DNNRegressorTest	testLossWithWeights		tests loss calculation with weights
contrib.learn.python.learn.estimators	DNNRegressorTest	testTrainWithWeights		tests training with given weight column
contrib.learn.python.learn.estimators	DNNRegressorTest	testPredict_AsIterableFalse		tests predict method with as_iterable=false
contrib.learn.python.learn.estimators	DNNRegressorTest	testPredict_AsIterable		tests predict method with as_iterable=true
contrib.learn.python.learn.estimators	DNNRegressorTest	testCustomMetrics		tests custom evaluation metrics
contrib.learn.python.learn.estimators	DNNRegressorTest	testCustomMetricsWithMetricSpec		tests custom evaluation metrics that use metricspec
contrib.learn.python.learn.estimators	DNNRegressorTest	testTrainSaveLoad		tests that insures you can save and reload a trained model
contrib.learn.python.learn.estimators	DNNRegressorTest	testTrainWithPartitionedVariables		tests training with partitioned variables
contrib.learn.python.learn.estimators	DNNRegressorTest	testEnableCenteredBias		tests that we can enable centered bias
contrib.learn.python.learn.estimators	DNNRegressorTest	testDisableCenteredBias		tests that we can disable centered bias
contrib.learn.python.learn.estimators	DNNLinearCombinedEstimatorTest	testCheckCallsHead		tests binary classification using matrix data as input
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testLogisticRegression_MatrixData		tests binary classification using matrix data as input
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testLogisticRegression_TensorData		tests binary classification using tensor data as input
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testTrainWithPartitionedVariables		tests training with partitioned variables
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testMultiClass		tests multi-class classification using matrix data as input
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testMultiClassLabelKeys		tests n_classes > 2 with label_keys vocabulary for labels
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testLoss		tests loss calculation
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testLossWithWeights		tests loss calculation with weights
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testTrainWithWeights		tests training with given weight column
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testCustomOptimizerByObject		tests binary classification using matrix data as input
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testCustomOptimizerByString		tests binary classification using matrix data as input
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testCustomOptimizerByFunction		tests binary classification using matrix data as input
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testPredict		tests weight column in evaluation
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testCustomMetrics		tests custom evaluation metrics
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testVariableQuery		tests get_variable_names and get_variable_value
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testExport		tests export model for servo
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testCenteredBias		tests bias is centered or not
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testDisableCenteredBias		tests bias is centered or not
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testGlobalStepLinearOnly		tests global step update for linear-only model
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testGlobalStepDNNOnly		tests global step update for dnn-only model
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testGlobalStepDNNLinearCombinedBug		tests global step update for dnn-linear combined model
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testGlobalStepDNNLinearCombinedBugFixed		tests global step update for dnn-linear combined model
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testLinearOnly		tests that linear-only instantiation works
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testLinearOnlyOneFeature		tests that linear-only instantiation works for one feature only
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testDNNOnly		tests that dnn-only instantiation works
contrib.learn.python.learn.estimators	DNNLinearCombinedClassifierTest	testDNNWeightsBiasesNames		tests the names of dnn weights and biases in the checkpoints
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testRegression_MatrixData		tests regression using matrix data as input
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testRegression_TensorData		tests regression using tensor data as input
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testLoss		tests loss calculation
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testLossWithWeights		tests loss calculation with weights
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testTrainWithWeights		tests training with given weight column
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testPredict_AsIterableFalse		tests predict method with as_iterable=false
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testPredict_AsIterable		tests predict method with as_iterable=true
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testCustomMetrics		tests custom evaluation metrics
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testCustomMetricsWithMetricSpec		tests custom evaluation metrics
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testExport		tests export model for servo
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testTrainSaveLoad		tests regression with restarting training / evaluate
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testTrainWithPartitionedVariables		tests training with partitioned variables
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testDisableCenteredBias		tests that we can disable centered bias
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testLinearOnly		tests linear-only instantiation and training
contrib.learn.python.learn.estimators	DNNLinearCombinedRegressorTest	testDNNOnly		tests dnn-only instantiation and training
contrib.learn.python.learn.estimators		assert_estimator_contract	tester estimator_class	asserts whether given estimator satisfies the expected contract
contrib.learn.python.learn.estimators	Head	logits_dimension		size of the last dimension of the logits tensor
contrib.learn.python.learn.estimators	Head	create_model_fn_ops	features mode labels train_op_fn	returns modelfnops that a model_fn can return
contrib.learn.python.learn.estimators		regression_head	label_name weight_column_name label_dimension enable_centered_bias	creates a head for linear regression
contrib.learn.python.learn.estimators		poisson_regression_head	label_name weight_column_name label_dimension enable_centered_bias	creates a head for poisson regression
contrib.learn.python.learn.estimators		multi_class_head	n_classes label_name weight_column_name enable_centered_bias	creates a head for multi class single label classification
contrib.learn.python.learn.estimators		binary_svm_head	label_name weight_column_name enable_centered_bias head_name	creates a head for binary classification with svms
contrib.learn.python.learn.estimators		multi_label_head	n_classes label_name weight_column_name enable_centered_bias	creates a head for multi label classification
contrib.learn.python.learn.estimators		multi_head	heads loss_weights	creates a multihead stemming from same logits/hidden layer
contrib.learn.python.learn.estimators	_SingleHead	_create_output_alternatives	predictions	creates output alternative for the head
contrib.learn.python.learn.estimators		_poisson_loss	labels logits weights	computes poisson loss from logits
contrib.learn.python.learn.estimators		_logits	logits_input logits logits_dimension	validate logits args and create logits if necessary
contrib.learn.python.learn.estimators		_create_model_fn_ops	features mode loss_fn logits_to_predictions_fn	returns a modelfnops object
contrib.learn.python.learn.estimators	_RegressionHead	__init__	label_dimension loss_fn link_fn label_name	head for regression
contrib.learn.python.learn.estimators	_RegressionHead	_transform_labels	mode labels	applies transformations to labels tensor
contrib.learn.python.learn.estimators	_RegressionHead	_logits_to_predictions	logits	returns a dict of predictions
contrib.learn.python.learn.estimators	_RegressionHead	_metrics	eval_loss predictions labels weights	returns a dict of metrics keyed by name
contrib.learn.python.learn.estimators	_BinaryLogisticHead	__init__	label_name weight_column_name enable_centered_bias head_name	head for binary classification with logistic regression
contrib.learn.python.learn.estimators	_BinaryLogisticHead	_transform_labels	mode labels	applies transformations to labels tensor
contrib.learn.python.learn.estimators	_BinaryLogisticHead	_logits_to_predictions	logits	returns a dict of predictions
contrib.learn.python.learn.estimators	_BinaryLogisticHead	_metrics	eval_loss predictions labels weights	returns a dict of metrics keyed by name
contrib.learn.python.learn.estimators	_MultiClassHead	__init__	n_classes label_name weight_column_name enable_centered_bias	'head' for multi class classification
contrib.learn.python.learn.estimators	_MultiClassHead	_transform_labels	mode labels	returns a dict that contains both the original labels and label ids
contrib.learn.python.learn.estimators	_MultiClassHead	_labels	labels_dict	returns labels tensor of the same type as classes
contrib.learn.python.learn.estimators	_MultiClassHead	_label_ids	labels_dict	returns integer label id tensor
contrib.learn.python.learn.estimators	_MultiClassHead	_logits_to_predictions	logits	returns a dict of predictions
contrib.learn.python.learn.estimators	_MultiClassHead	_metrics	eval_loss predictions labels weights	returns a dict of metrics keyed by name
contrib.learn.python.learn.estimators		_to_labels_tensor	labels label_name	returns label as a tensor
contrib.learn.python.learn.estimators		_check_no_sparse_tensor	x	raises valueerror if the given tensor is sparsetensor
contrib.learn.python.learn.estimators		_sparse_labels_to_indicator	labels num_classes	if labels is sparsetensor, converts it to indicator tensor
contrib.learn.python.learn.estimators	_BinarySvmHead	_transform_labels	mode labels	applies transformations to labels tensor
contrib.learn.python.learn.estimators	_MultiLabelHead	_transform_labels	mode labels	applies transformations to labels tensor
contrib.learn.python.learn.estimators	_MultiLabelHead	_metrics	eval_loss predictions labels weights	returns a dict of metrics keyed by name
contrib.learn.python.learn.estimators	_MultiHead	__init__	heads loss_merger	_head to merges multiple _head objects
contrib.learn.python.learn.estimators	_MultiHead	create_model_fn_ops	features mode labels train_op_fn	see _head create_model_fn_ops
contrib.learn.python.learn.estimators	_MultiHead	_split_logits	logits	splits logits for heads
contrib.learn.python.learn.estimators	_MultiHead	_merge_train	all_model_fn_ops train_op_fn	merges list of modelfnops for training
contrib.learn.python.learn.estimators	_MultiHead	_merge_infer	all_model_fn_ops	merges list of modelfnops for inference
contrib.learn.python.learn.estimators	_MultiHead	_merge_eval	all_model_fn_ops	merges list of modelfnops for eval
contrib.learn.python.learn.estimators		_weight_tensor	features weight_column_name	returns weights as 1d tensor
contrib.learn.python.learn.estimators		_compute_weighted_loss	loss_unweighted weight name	returns a tuple of (loss_train loss_report)
contrib.learn.python.learn.estimators		_check_mode_valid	mode	raises valueerror if the given mode is invalid
contrib.learn.python.learn.estimators		_get_arguments	func	returns a spec of given func
contrib.learn.python.learn.estimators		_centered_bias	logits_dimension head_name	returns centered_bias variable
contrib.learn.python.learn.estimators		_centered_bias_step	centered_bias batch_size labels loss_fn	creates and returns training op for centered bias
contrib.learn.python.learn.estimators		_train_op	loss labels train_op_fn centered_bias	returns op for the training step
contrib.learn.python.learn.estimators		_assert_class_id	class_id num_classes	average label value for class class_id
contrib.learn.python.learn.estimators		_classification_output_alternatives	head_name problem_type label_keys	creates a func to generate output alternatives for classification
contrib.learn.python.learn.estimators	LogisticRegressorTest	test_fit_and_evaluate_metrics		tests basic fit and evaluate and checks the evaluation metrics
contrib.learn.python.learn.estimators		_get_single_cell	cell_type num_units	constructs and return a single rnncell
contrib.learn.python.learn.estimators		construct_rnn_cell	num_units cell_type dropout_keep_probabilities	constructs cells applies dropout and assembles a multirnncell
contrib.learn.python.learn.estimators		apply_dropout	cells dropout_keep_probabilities random_seed	applies dropout to the outputs and inputs of cell
contrib.learn.python.learn.estimators		get_eval_metric_ops	problem_type prediction_type sequence_length prediction_dict	returns eval metric ops for given problem_type and prediction_type
contrib.learn.python.learn.estimators		select_last_activations	activations sequence_lengths	selects the nth set of activations for each n in sequence_length
contrib.learn.python.learn.estimators		mask_activations_and_labels	activations labels sequence_lengths	remove entries outside sequence_lengths and returned flattened results
contrib.learn.python.learn.estimators		multi_value_predictions	activations target_column problem_type predict_probabilities	maps activations from the rnn to predictions for multi value models
contrib.learn.python.learn.estimators	ModelFnOps	__new__	cls mode predictions loss	creates a validated modelfnops instance
contrib.learn.python.learn.estimators	ModelFnOps	estimator_spec	default_serving_output_alternative_key	creates an equivalent estimatorspec
contrib.learn.python.learn.estimators		_verify_input_args	x y input_fn feed_fn	verifies validity of co-existance of input arguments
contrib.learn.python.learn.estimators		_get_input_fn	x y input_fn feed_fn	make inputs into input and feed functions
contrib.learn.python.learn.estimators		infer_real_valued_columns_from_input_fn	input_fn	creates featurecolumn objects for inputs defined by input_fn
contrib.learn.python.learn.estimators		infer_real_valued_columns_from_input	x	creates featurecolumn objects for inputs defined by input x
contrib.learn.python.learn.estimators		_model_fn_args	fn	get argument names for function-like object
contrib.learn.python.learn.estimators		_get_replica_device_setter	config	creates a replica device setter if required
contrib.learn.python.learn.estimators		_make_metrics_ops	metrics features labels predictions	add metrics based on features, labels, and predictions
contrib.learn.python.learn.estimators		_dict_to_str	dictionary	get a str representation of a dict
contrib.learn.python.learn.estimators		_write_dict_to_summary	output_dir dictionary current_global_step	writes a dict into summary file in given output directory
contrib.learn.python.learn.estimators	BaseEstimator	__init__	model_dir config	initializes a baseestimator instance
contrib.learn.python.learn.estimators	BaseEstimator	partial_fit	x y input_fn steps	incremental fit on a batch of samples
contrib.learn.python.learn.estimators	BaseEstimator	predict	x input_fn batch_size outputs	returns predictions for given features
contrib.learn.python.learn.estimators	BaseEstimator	get_variable_value	name	returns value of the variable given by name
contrib.learn.python.learn.estimators	BaseEstimator	get_variable_names		returns list of all variable names in this model
contrib.learn.python.learn.estimators	BaseEstimator	export	export_dir input_fn input_feature_key use_deprecated_input_fn	exports inference graph into given dir
contrib.learn.python.learn.estimators	BaseEstimator	_get_train_ops	features labels	method that builds model graph and returns trainer ops
contrib.learn.python.learn.estimators	BaseEstimator	_get_predict_ops	features	method that builds model graph and returns prediction ops
contrib.learn.python.learn.estimators	BaseEstimator	_get_eval_ops	features labels metrics	method that builds model graph and returns evaluation ops
contrib.learn.python.learn.estimators	BaseEstimator	_get_feature_ops_from_example	examples_batch	returns feature parser for given example batch using features info
contrib.learn.python.learn.estimators	BaseEstimator	_extract_metric_update_ops	eval_dict	separate update operations from metric value operations
contrib.learn.python.learn.estimators	Estimator	__init__	model_fn model_dir config params	constructs an estimator instance
contrib.learn.python.learn.estimators	Estimator	_call_model_fn	features labels mode	calls model function with support of 2 3 or 4 arguments
contrib.learn.python.learn.estimators	Estimator	_get_train_ops	features labels	method that builds model graph and returns trainer ops
contrib.learn.python.learn.estimators	Estimator	_get_eval_ops	features labels metrics	method that builds model graph and returns evaluation ops
contrib.learn.python.learn.estimators	Estimator	_get_predict_ops	features	method that builds model graph and returns prediction ops
contrib.learn.python.learn.estimators	Estimator	export_savedmodel	export_dir_base serving_input_fn default_output_alternative_key assets_extra	exports inference graph as a savedmodel into given dir
contrib.learn.python.learn.estimators	_ComposableModel	__init__	num_label_columns optimizer gradient_clip_norm num_ps_replicas	common initialization for all _composablemodel objects
contrib.learn.python.learn.estimators	_ComposableModel	get_scope_name		returns the scope name used by this model for variables
contrib.learn.python.learn.estimators	_ComposableModel	build_model	features feature_columns is_training	builds the model that can calculate the logits
contrib.learn.python.learn.estimators	_ComposableModel	get_train_step	loss	returns the ops to run to perform a training step on this estimator
contrib.learn.python.learn.estimators	LinearComposableModel	__init__	num_label_columns optimizer _joint_weights gradient_clip_norm	initializes linearcomposablemodel objects
contrib.learn.python.learn.estimators	LinearComposableModel	get_weights	model_dir	returns weights per feature of the linear part
contrib.learn.python.learn.estimators	LinearComposableModel	get_bias	model_dir	returns bias of the model
contrib.learn.python.learn.estimators	LinearComposableModel	build_model	features feature_columns is_training	see base class
contrib.learn.python.learn.estimators	DNNComposableModel	__init__	num_label_columns hidden_units optimizer activation_fn	initializes dnncomposablemodel objects
contrib.learn.python.learn.estimators	DNNComposableModel	get_weights	model_dir	returns the weights of the model
contrib.learn.python.learn.estimators	DNNComposableModel	get_bias	model_dir	returns the bias of the model
contrib.learn.python.learn.estimators	DNNComposableModel	build_model	features feature_columns is_training	see base class
contrib.learn.python.learn.estimators	ClusterConfig	get_task_id		returns task index from tf_config environmental variable
contrib.learn.python.learn.estimators	RunConfig	replace		returns a new instance of runconfig replacing specified properties
contrib.learn.python.learn.estimators	RunConfig	uid	whitelist	generates a 'unique identifier' based on all internal fields
contrib.learn.python.learn.estimators		_count_ps	cluster_spec	counts the number of parameter servers in cluster_spec
contrib.learn.python.learn.estimators		_count_worker	cluster_spec	counts the number of workers in cluster_spec
contrib.learn.python.learn.estimators		_get_master	cluster_spec task_type task_id	returns the appropriate string for the tensorflow master
contrib.learn.python.learn.estimators		_get_model_dir	model_dir	returns model_dir based user provided model_dir or tf_config
contrib.learn.python.learn.estimators	StateSavingRnnEstimatorTest	_getModelFnOpsForMode	mode	helper for testgetrnnmodelfn{train eval infer}()
contrib.learn.python.learn.estimators	StateSavingRNNEstimatorLearningTest	testLearnSineFunction		tests learning a sine function
contrib.learn.python.learn.estimators	StateSavingRNNEstimatorLearningTest	testLearnShiftByOne		tests that learning a 'shift-by-one' example
contrib.learn.python.learn.estimators	KMeansTestBase	input_fn	batch_size points randomize num_epochs	returns an input_fn that randomly selects batches from given points
contrib.learn.python.learn.datasets	SyntheticTest	test_make_dataset		test if the synthetic routine wrapper complains about the name
contrib.learn.python.learn.datasets	SyntheticTest	test_all_datasets_callable		test if all methods inside the synthetic are callable
contrib.learn.python.learn.datasets	SyntheticTest	test_circles		test if the circles are generated correctly
contrib.learn.python.learn.datasets	SyntheticTest	test_circles_replicable		test if the data generation is replicable with a specified seed
contrib.learn.python.learn.datasets	SyntheticTest	test_spirals		test if the circles are generated correctly
contrib.learn.python.learn.datasets	SyntheticTest	test_spirals_replicable		test if the data generation is replicable with a specified seed
contrib.learn.python.learn.datasets		circles	n_samples noise seed factor	create circles separated by some value args
contrib.learn.python.learn.datasets		spirals	n_samples noise seed mode	create spirals currently only binary classification is supported for spiral generation
contrib.learn.python.learn.datasets		_archimedes_spiral	theta theta_offset	return archimedes spiral
contrib.learn.python.learn.datasets		_bernoulli_spiral	theta theta_offset	return equiangular (bernoulli's) spiral
contrib.learn.python.learn.datasets		_fermat_spiral	theta theta_offset	return parabolic (fermat's) spiral
contrib.learn.python.learn.datasets		maybe_download_dbpedia	data_dir	download if dbpedia data is not present
contrib.learn.python.learn.datasets		load_dbpedia	size test_with_fake_data	get dbpedia datasets from csv files
contrib.learn.python.learn.datasets		load_csv_with_header	filename target_dtype features_dtype target_column	load dataset from csv file with a header row
contrib.learn.python.learn.datasets		load_csv_without_header	filename target_dtype features_dtype target_column	load dataset from csv file without a header row
contrib.learn.python.learn.datasets		shrink_csv	filename ratio	create a smaller dataset of only 1/ratio of original data
contrib.learn.python.learn.datasets		load_iris	data_path	load iris dataset
contrib.learn.python.learn.datasets		load_boston	data_path	load boston housing dataset
contrib.learn.python.learn.datasets		retry	initial_delay max_delay factor jitter	simple decorator for wrapping retriable functions
contrib.learn.python.learn.datasets		maybe_download	filename work_directory source_url	download the data from source url unless it's already here
contrib.learn.python.learn.datasets		extract_images	f	extract the images into a 4d uint8 numpy array [index y x depth]
contrib.learn.python.learn.datasets		dense_to_one_hot	labels_dense num_classes	convert class labels from scalars to one-hot vectors
contrib.learn.python.learn.datasets		extract_labels	f one_hot num_classes	extract the labels into a 1d uint8 numpy array [index]
contrib.learn.python.learn.datasets	DataSet	__init__	images labels fake_data one_hot	construct a dataset
contrib.learn.python.learn.datasets	DataSet	next_batch	batch_size fake_data shuffle	return the next batch_size examples from this data set
contrib.learn.python.learn.datasets		load_dataset	name size test_with_fake_data	loads dataset by name
contrib.learn.python.learn.datasets		make_dataset	name n_samples noise seed	creates binary synthetic datasets args
contrib.learn.python.learn.utils		build_parsing_serving_input_fn	feature_spec default_batch_size	build an input_fn appropriate for serving expecting fed tf examples
contrib.learn.python.learn.utils		build_default_serving_input_fn	features default_batch_size	build an input_fn appropriate for serving expecting feature tensors
contrib.learn.python.learn.utils	SavedModelExportUtilsTest	test_build_standardized_signature_def_classification		tests classification with one output tensor
contrib.learn.python.learn.utils	SavedModelExportUtilsTest	test_build_standardized_signature_def_classification2		tests multiple output tensors that include classes and probabilites
contrib.learn.python.learn.utils	SavedModelExportUtilsTest	test_build_standardized_signature_def_classification3		tests multiple output tensors that include classes and scores
contrib.learn.python.learn.utils	SavedModelExportUtilsTest	test_build_standardized_signature_def_classification4		tests classification without classes tensor
contrib.learn.python.learn.utils	SavedModelExportUtilsTest	test_build_standardized_signature_def_classification5		tests multiple output tensors that include integer classes and scores
contrib.learn.python.learn.utils	SavedModelExportUtilsTest	test_build_standardized_signature_def_classification6		tests multiple output tensors that with integer classes and no scores
contrib.learn.python.learn.utils	SavedModelExportUtilsTest	test_build_all_signature_defs_legacy_input_fn_not_supported		tests that legacy input_fn returning features labels raises error
contrib.learn.python.learn.utils	SavedModelExportUtilsTest	test_make_export_strategy		only tests that an exportstrategy instance is created
contrib.learn.python.learn.utils	SavedModelExportUtilsTest	test_make_parsing_export_strategy		only tests that an exportstrategy instance is created
contrib.learn.python.learn.utils		build_standardized_signature_def	input_tensors output_tensors problem_type	build a signaturedef using problem type and input and output tensors
contrib.learn.python.learn.utils		get_input_alternatives	input_ops	obtain all input alternatives using the input_fn output and heuristics
contrib.learn.python.learn.utils		get_output_alternatives	model_fn_ops default_output_alternative_key	obtain all output alternatives using the model_fn output and heuristics
contrib.learn.python.learn.utils		build_all_signature_defs	input_alternatives output_alternatives actual_default_output_alternative_key	build signaturedefs from all pairs of input and output alternatives
contrib.learn.python.learn.utils		get_timestamped_export_dir	export_dir_base	builds a path to a new subdirectory within the base directory
contrib.learn.python.learn.utils		get_most_recent_export	export_dir_base	locate the most recent savedmodel export in a directory of many exports
contrib.learn.python.learn.utils		garbage_collect_exports	export_dir_base exports_to_keep	deletes older exports retaining only a given number of the most recent
contrib.learn.python.learn.utils		make_export_strategy	serving_input_fn default_output_alternative_key assets_extra as_text	create an exportstrategy for use with experiment
contrib.learn.python.learn.utils		make_parsing_export_strategy	feature_columns exports_to_keep	create an exportstrategy for use with experiment using featurecolumns
contrib.learn.python.learn.utils		largest_export_versions	n	creates a filter that keeps the largest n export versions
contrib.learn.python.learn.utils		one_of_every_n_export_versions	n	creates a filter that keeps one of every n export versions
contrib.learn.python.learn.utils		mod_export_version	n	creates a filter that keeps every export that is a multiple of n
contrib.learn.python.learn.utils		union	lf rf	creates a filter that keeps the union of two filters
contrib.learn.python.learn.utils		negation	f	negate a filter
contrib.learn.python.learn.utils		get_paths	base_dir parser	gets a list of paths in a given directory
contrib.learn.python.learn.utils		_get_first_op_from_collection	collection_name	get first element from the collection
contrib.learn.python.learn.utils		_get_saver		lazy init and return saver
contrib.learn.python.learn.utils		_export_graph	graph saver checkpoint_path export_dir	exports graph via session_bundle by creating a session
contrib.learn.python.learn.utils		generic_signature_fn	examples unused_features predictions	creates generic signature from given examples and predictions
contrib.learn.python.learn.utils		classification_signature_fn	examples unused_features predictions	creates classification signature from given examples and predictions
contrib.learn.python.learn.utils		classification_signature_fn_with_prob	examples unused_features predictions	classification signature from given examples and predicted probabilities
contrib.learn.python.learn.utils		regression_signature_fn	examples unused_features predictions	creates regression signature from given examples and predictions
contrib.learn.python.learn.utils		logistic_regression_signature_fn	examples unused_features predictions	creates logistic regression signature from given examples and predictions
contrib.learn.python.learn.utils		_default_input_fn	estimator examples	creates default input parsing using estimator's feature signatures
contrib.learn.python.learn.utils		export_estimator	estimator export_dir signature_fn input_fn	deprecated please use estimator export_savedmodel()
contrib.learn.python.learn.utils	ExportTest	_get_default_signature	export_meta_filename	gets the default signature from the export meta file
contrib.learn.python.learn.utils		print_tensors_in_checkpoint_file	file_name tensor_name	prints tensors in a checkpoint file
contrib.learn.python.learn.ops		sequence_classifier	decoding labels sampling_decoding name	returns predictions and loss for sequence of predictions
contrib.learn.python.learn.ops		seq2seq_inputs	x y input_length output_length	processes inputs for sequence to sequence models
contrib.learn.python.learn.ops		rnn_decoder	decoder_inputs initial_state cell scope	rnn decoder that creates training and sampling sub-graphs
contrib.learn.python.learn.ops		rnn_seq2seq	encoder_inputs decoder_inputs encoder_cell decoder_cell	rnn sequence to sequence model
contrib.learn.python.learn.ops		mean_squared_error_regressor	tensor_in labels weights biases	returns prediction and loss for mean squared error regression
contrib.learn.python.learn.ops		softmax_classifier	tensor_in labels weights biases	returns prediction and loss for softmax classifier
contrib.learn.python.learn.ops		embedding_lookup	params ids name	provides a n dimensional version of tf embedding_lookup
contrib.learn.python.learn.ops		categorical_variable	tensor_in n_classes embedding_size name	creates an embedding for categorical variable with given number of classes
contrib.learn.python.learn.dataframe		_make_list_of_series	x	converts x into a list of series if possible
contrib.learn.python.learn.dataframe		_make_tuple_of_string	x	converts x into a list of str if possible
contrib.learn.python.learn.dataframe		parameter	func	tag functions annotated with @parameter for later retrieval
contrib.learn.python.learn.dataframe	Transform	name		name of the transform
contrib.learn.python.learn.dataframe	Transform	parameters		a dict of names to values of properties marked with @parameter
contrib.learn.python.learn.dataframe	Transform	input_valency		the number of series that the transform should expect as input
contrib.learn.python.learn.dataframe	Transform	output_names		the names of series output by the transform
contrib.learn.python.learn.dataframe	Transform	_output_names		the names of series output by the transform
contrib.learn.python.learn.dataframe	Transform	return_type		provides a namedtuple type which will be used for output
contrib.learn.python.learn.dataframe	Transform	__call__	input_series	apply this transform to the provided series, producing 'series'
contrib.learn.python.learn.dataframe	Transform	_produce_output_series	input_series	applies the transformation to the transform_input
contrib.learn.python.learn.dataframe	TensorFlowTransform	_check_output_tensors	output_tensors	helper for build ; verifies the output of _build_transform
contrib.learn.python.learn.dataframe	TensorFlowTransform	_produce_output_series	input_series	apply this transform to the provided series, producing series
contrib.learn.python.learn.dataframe	TensorFlowTransform	build_transitive	input_series cache	apply this transform to the provided series, producing 'tensor's
contrib.learn.python.learn.dataframe	TensorFlowTransform	_apply_transform	input_tensors	applies the transformation to the transform_input
contrib.learn.python.learn.dataframe	DataFrame	columns		set of the column names
contrib.learn.python.learn.dataframe	DataFrame	__len__		the number of columns in the dataframe
contrib.learn.python.learn.dataframe	DataFrame	assign		adds columns to dataframe
contrib.learn.python.learn.dataframe	DataFrame	select_columns	keys	returns a new dataframe with a subset of columns
contrib.learn.python.learn.dataframe	DataFrame	exclude_columns	exclude_keys	returns a new dataframe with all columns not excluded via exclude_keys
contrib.learn.python.learn.dataframe	DataFrame	__getitem__	key	indexing functionality for dataframes
contrib.learn.python.learn.dataframe		_expand_file_names	filepatterns	takes a list of file patterns and returns a list of resolved file names
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	run	num_batches graph session start_queues	builds and runs the columns of the dataframe and yields batches
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	select_rows	boolean_series	returns a dataframe with only the rows indicated by boolean_series
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	split	index_series proportion batch_size	deterministically split a dataframe into two dataframes
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	split_fast	index_series proportion batch_size base_batch_size	deterministically split a dataframe into two dataframes
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	run_one_batch		creates a new 'graph and session and runs a single batch
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	run_one_epoch		creates a new 'graph and session and runs a single epoch
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	batch	batch_size shuffle num_threads queue_capacity	resize the batches in the dataframe to the given batch_size
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	_from_csv_base	cls filepatterns get_default_values has_header	create a dataframe from csv files
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	from_csv	cls filepatterns default_values has_header	create a dataframe from csv files
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	from_csv_with_feature_spec	cls filepatterns feature_spec has_header	create a dataframe from csv files given a feature_spec
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	from_examples	cls filepatterns features reader_cls	create a dataframe from tensorflow examples
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	from_pandas	cls pandas_dataframe num_threads enqueue_size	create a tf learn dataframe from a pandas dataframe
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	from_numpy	cls numpy_array num_threads enqueue_size	creates a tf learn dataframe from a numpy ndarray
contrib.learn.python.learn.dataframe	TensorFlowDataFrame	from_ordereddict	cls ordered_dict_of_arrays num_threads enqueue_size	creates a tf learn dataframe from an ordereddict of numpy ndarray
contrib.learn.python.learn.dataframe		_build_alternate_universe	dataframe base_input_keys_with_defaults feature_keys	create an alternate universe assuming that the base series are defined
contrib.learn.python.learn.dataframe		to_feature_columns_and_input_fn	dataframe base_input_keys_with_defaults feature_keys label_keys	build a list of featurecolumns and an input_fn for use with estimator
contrib.learn.python.learn.dataframe	Series	register_unary_op	cls series_method_name	a decorator that registers transforms as series member functions
contrib.learn.python.learn.dataframe	Series	register_binary_op	cls series_method_name	a decorator that registers transforms as series member functions
contrib.learn.python.learn.dataframe	Series	build	cache	returns a tensor
contrib.learn.python.learn.dataframe	TransformedSeries	make_repr	input_series transform output_name	generate a key for caching tensors produced for a transformedseries
contrib.learn.python.learn.dataframe.transforms	Densify	_apply_transform	input_tensors	applies the transformation to the transform_input
contrib.learn.python.learn.dataframe.transforms	HashFast	_apply_transform	input_tensors	applies the transformation to the transform_input
contrib.learn.python.learn.dataframe.transforms		register_binary_op	method_name operation	registers series member functions for binary operations
contrib.learn.python.learn.dataframe.transforms		sparse_boolean_mask	sparse_tensor mask name	boolean mask for sparsetensors
contrib.learn.python.learn.dataframe.transforms	BooleanMask	_apply_transform	input_tensors	applies the transformation to the transform_input
contrib.learn.python.learn.dataframe.transforms	ReaderSource	__init__	reader_cls work_units reader_kwargs enqueue_size	initializes a readersource
contrib.learn.python.learn.dataframe.transforms		register_unary_op	registered_name operation ignore_dtype	creates a transform that wraps a unary tensorflow operation
contrib.learn.python.learn.dataframe.transforms	Sparsify	_apply_transform	input_tensors	applies the transformation to the transform_input
contrib.learn.python.learn.dataframe.transforms	SplitMask	_produce_output_series	input_series	deterministically generate a boolean series for partitioning rows
contrib.learn.python.learn.preprocessing	CategoricalProcessor	__init__	min_frequency share vocabularies	initializes a categoricalprocessor instance
contrib.learn.python.learn.preprocessing	CategoricalProcessor	freeze	freeze	freeze or unfreeze all vocabularies
contrib.learn.python.learn.preprocessing	CategoricalProcessor	fit	x unused_y	learn a vocabulary dictionary of all categories in x
contrib.learn.python.learn.preprocessing	CategoricalProcessor	fit_transform	x unused_y	learn the vocabulary dictionary and return indexies of categories
contrib.learn.python.learn.preprocessing	CategoricalProcessor	transform	x	transform documents to category-id matrix
contrib.learn.python.learn.preprocessing	ByteProcessor	fit	x	does nothing no fitting required
contrib.learn.python.learn.preprocessing	ByteProcessor	reverse	x	reverses output of transform back to text
contrib.learn.python.learn.preprocessing	ByteProcessor	transform	x	transforms input documents into sequence of ids
contrib.learn.python.learn.preprocessing	VocabularyProcessor	__init__	max_document_length min_frequency vocabulary tokenizer_fn	initializes a vocabularyprocessor instance
contrib.learn.python.learn.preprocessing	VocabularyProcessor	fit	raw_documents unused_y	learn a vocabulary dictionary of all tokens in the raw documents
contrib.learn.python.learn.preprocessing	VocabularyProcessor	fit_transform	raw_documents unused_y	learn the vocabulary dictionary and return indexies of words
contrib.learn.python.learn.preprocessing	VocabularyProcessor	transform	raw_documents	transform documents to word-id matrix
contrib.learn.python.learn.preprocessing	VocabularyProcessor	reverse	documents	reverses output of vocabulary mapping to words
contrib.learn.python.learn.preprocessing	VocabularyProcessor	save	filename	saves vocabulary processor into given file
contrib.learn.python.learn.preprocessing	VocabularyProcessor	restore	cls filename	restores vocabulary processor from given file
contrib.learn.python.learn.preprocessing	CategoricalVocabulary	__len__		returns total count of mappings including unknown token
contrib.learn.python.learn.preprocessing	CategoricalVocabulary	freeze	freeze	freezes the vocabulary after which new words return unknown token id
contrib.learn.python.learn.preprocessing	CategoricalVocabulary	get	category	returns word's id in the vocabulary
contrib.learn.python.learn.preprocessing	CategoricalVocabulary	add	category count	adds count of the category to the frequency table
contrib.learn.python.learn.preprocessing	CategoricalVocabulary	trim	min_frequency max_frequency	trims vocabulary for minimum frequency
contrib.learn.python.learn.preprocessing	CategoricalVocabulary	reverse	class_id	given class id reverse to original class name
contrib.integrate.python.ops		_scaled_dot_product	scale xs ys name	calculate a scaled vector inner product between lists of tensors
contrib.integrate.python.ops		_dot_product	xs ys name	calculate the vector inner product between two lists of tensors
contrib.integrate.python.ops		_runge_kutta_step	func y0 f0 t0	take an arbitrary runge-kutta step and estimate error
contrib.integrate.python.ops		_interp_fit	y0 y1 y_mid f0	fit coefficients for 4th order polynomial interpolation
contrib.integrate.python.ops		_interp_fit_rk	y0 y1 k dt	fit an interpolating polynomial to the results of a runge-kutta step
contrib.integrate.python.ops		_interp_evaluate	coefficients t0 t1 t	evaluate polynomial interpolation at the given time point
contrib.integrate.python.ops		_optimal_step_size	last_step error_ratio safety ifactor	calculate the optimal size for the next runge-kutta step
contrib.integrate.python.ops		_ta_append	tensor_array value	append a value to the end of a tf tensorarray
contrib.integrate.python.ops		_dopri5	func y0 t rtol	solve an ode for odeint using method='dopri5'
contrib.integrate.python.ops		odeint	func y0 t rtol	integrate a system of ordinary differential equations
contrib.ndlstm.python		ndlstm_base_unrolled	inputs noutput scope reverse	run an lstm either forward or backward
contrib.ndlstm.python		ndlstm_base_dynamic	inputs noutput scope reverse	run an lstm either forward or backward
contrib.ndlstm.python		ndlstm_base	inputs noutput scope reverse	implements a 1d lstm either forward or backward
contrib.ndlstm.python		sequence_to_final	inputs noutput scope name	run an lstm across all steps and returns only the final state
contrib.ndlstm.python		sequence_softmax	inputs noutput scope name	run a softmax layer over all the time steps of an input sequence
contrib.ndlstm.python		_shape	tensor	get the shape of a tensor as an int list
contrib.ndlstm.python		images_to_sequence	tensor	convert a batch of images into a batch of sequences
contrib.ndlstm.python		sequence_to_images	tensor num_image_batches	convert a batch of sequences into a batch of images
contrib.ndlstm.python		horizontal_lstm	images num_filters_out scope	run an lstm bidirectionally over all the rows of each image
contrib.ndlstm.python		separable_lstm	images num_filters_out nhidden scope	run bidirectional lstms first horizontally then vertically
contrib.ndlstm.python		reduce_to_sequence	images num_filters_out scope	reduce an image to a sequence by scanning an lstm vertically
contrib.ndlstm.python		reduce_to_final	images num_filters_out nhidden scope	reduce an image to a final state by running two lstms
contrib.ndlstm.python		_shape	tensor	get the shape of a tensor as an int list
contrib.ndlstm.python		pixels_as_vector	images scope	reduce images to vectors by combining all pixels
contrib.ndlstm.python		pool_as_vector	images scope	reduce images to vectors by averaging all pixels
contrib.ndlstm.python		one_hot_planes	labels num_classes scope	compute 1-hot encodings for planes
contrib.ndlstm.python		one_hot_mask	labels num_classes scope	compute 1-hot encodings for masks
contrib.signal.python.ops		frames	signal frame_length frame_step name	frame a signal into overlapping frames
contrib.cmake.tools		get_args		parse command line
contrib.grid_rnn.python.kernel_tests	GridRNNCellTest	testGrid2LSTMCellWithRNNAndDynamicBatchSize		test for #4296
contrib.grid_rnn.python.kernel_tests	GridRNNCellTest	testGrid2LSTMCellLegacy		test for legacy case (when state_is_tuple=false)
contrib.grid_rnn.python.ops	GridRNNCell	__init__	num_units num_dims input_dims output_dims	initialize the parameters of a grid rnn cell args
contrib.grid_rnn.python.ops	GridRNNCell	__call__	inputs state scope	run one step of gridrnn
contrib.grid_rnn.python.ops	GridRNNCell	_extract_states	state	extract the cell and previous output tensors from the given state
contrib.grid_rnn.python.ops	GridRNNCell	_project_input	inputs c_prev m_prev with_c	fills in c_prev and m_prev with projected input for input dimensions
contrib.grid_rnn.python.ops	GridRNNCell	_cell_state_size		total size of the state of the inner cell used in this grid
contrib.grid_rnn.python.ops		_propagate	dim_indices conf cells c_prev	propagates through all the cells in dim_indices dimensions
contrib.training.python.training	GreedyLoadBalancingStrategy	__init__	num_tasks load_fn	create a new loadbalancingstrategy
contrib.training.python.training	GreedyLoadBalancingStrategy	__call__	op	choose a ps task index for the given operation
contrib.training.python.training		byte_size_load_fn	op	load function that computes the byte size of a single-output operation
contrib.training.python.training		bucket	tensors which_bucket batch_size num_buckets	lazy bucketing of input tensors according to which_bucket
contrib.training.python.training		bucket_by_sequence_length	input_length tensors batch_size bucket_boundaries	lazy bucketing of inputs according to their length
contrib.training.python.training	EvaluateOnceTest	_train_model	checkpoint_dir num_steps	trains a simple classification model
contrib.training.python.training	EvaluateRepeatedlyTest	_train_model	checkpoint_dir num_steps	trains a simple classification model
contrib.training.python.training	EvaluateRepeatedlyTest	_verify_summaries	output_dir names_to_values	verifies that the given names_to_values are found in the summaries
contrib.training.python.training		rejection_sample	tensors accept_prob_fn batch_size queue_threads	stochastically creates batches by rejection sampling
contrib.training.python.training		stratified_sample	tensors labels target_probs batch_size	stochastically creates batches based on per-class probabilities
contrib.training.python.training		_estimate_data_distribution	labels num_classes smoothing_constant	estimate data distribution as labels are seen
contrib.training.python.training		_verify_data_inputs	tensor_list	verify that batched data inputs are well-formed
contrib.training.python.training		_verify_input	tensor_list labels probs_list	verify that batched inputs are well-formed
contrib.training.python.training		_calculate_acceptance_probabilities	init_probs target_probs	calculate the per-class acceptance rates
contrib.training.python.training		parse_values	values type_map	parses hyperparameter values from a string into a python map
contrib.training.python.training	HParams	__init__	hparam_def model_structure	create an instance of hparams from keyword arguments
contrib.training.python.training	HParams	_init_from_proto	hparam_def	creates a new hparams from hparamdef protocol buffer
contrib.training.python.training	HParams	add_hparam	name value	adds {name value} pair to hyperparameters
contrib.training.python.training	HParams	parse	values	override hyperparameter values parsing new values from a string
contrib.training.python.training	HParams	_set_from_map	values_map	override hyperparameter values parsing new values from a dictionary
contrib.training.python.training	HParams	to_json		serializes the hyperparameters into json
contrib.training.python.training	HParams	parse_json	values_json	override hyperparameter values parsing new values from a json object
contrib.training.python.training	HParams	values		return the hyperparameter values as a python dictionary
contrib.training.python.training	HParams	_get_kind_name	param_type is_list	returns the field name given parameter type and is_list
contrib.training.python.training	HParams	to_proto	export_scope	converts a hparams object to a hparamdef protocol buffer
contrib.training.python.training		_which_bucket	bucket_edges v	identify which bucket v falls into
contrib.training.python.training		_check_multiple_of	value multiple_of	checks that value value is a non-zero multiple of multiple_of
contrib.training.python.training		_check_rank	value expected_rank	check the rank of tensor value, via shape inference and assertions
contrib.training.python.training		_check_shape	value expected_shape	check the shape of tensor value, via shape inference and assertions
contrib.training.python.training		_check_dimensions	value dimensions expected_sizes debug_prefix	check the dimensions of tensor value, via shape inference and assertions
contrib.training.python.training		_prepare_sequence_inputs	inputs states	convert input to tensors and validate shape information
contrib.training.python.training	NextQueuedSequenceBatch	total_length		the lengths of the original non-truncated unrolled examples
contrib.training.python.training	NextQueuedSequenceBatch	length		the lengths of the given truncated unrolled examples
contrib.training.python.training	NextQueuedSequenceBatch	batch_size		the batch_size of the given batch
contrib.training.python.training	NextQueuedSequenceBatch	insertion_index		the insertion indices of the examples when they were first added
contrib.training.python.training	NextQueuedSequenceBatch	key		the key names of the given truncated unrolled examples
contrib.training.python.training	NextQueuedSequenceBatch	next_key		the key names of the next in iteration truncated unrolled examples
contrib.training.python.training	NextQueuedSequenceBatch	sequence		an int32 vector length batch_size: the sequence index of each entry
contrib.training.python.training	NextQueuedSequenceBatch	sequence_count		an int32 vector length batch_size: the sequence count of each entry
contrib.training.python.training	NextQueuedSequenceBatch	context		a dict mapping keys of input_context to batched context
contrib.training.python.training	NextQueuedSequenceBatch	sequences		a dict mapping keys of input_sequences to split and rebatched data
contrib.training.python.training	NextQueuedSequenceBatch	state	state_name	returns batched state tensors
contrib.training.python.training	NextQueuedSequenceBatch	save_state	state_name value name	returns an op to save the current batch of state state_name
contrib.training.python.training	SequenceQueueingStateSaver	__init__	batch_size num_unroll input_length input_key	creates the sequencequeueingstatesaver
contrib.training.python.training	SequenceQueueingStateSaver	prefetch_op		the op used to prefetch new data into the state saver
contrib.training.python.training	SequenceQueueingStateSaver	next_batch		the nextqueuedsequencebatch providing access to batched output data
contrib.training.python.training	SequenceQueueingStateSaver	close	cancel_pending_enqueues name	closes the barrier and the fifoqueue
contrib.training.python.training	SequenceQueueingStateSaver	_store_index_maps	sequences context states	prepares the internal dictionaries _name_to_index and _index_to_name
contrib.training.python.training	SequenceQueueingStateSaver	_create_barrier		create the barrier
contrib.training.python.training	SequenceQueueingStateSaver	_create_prefetch_op		group insert_many ops and create prefetch_op
contrib.training.python.training	SequenceQueueingStateSaver	_prepare_barrier_reads		creates ops for reading the barrier as used by properties like length
contrib.training.python.training		batch_sequences_with_states	input_key input_sequences input_context input_length	creates batches of segments of sequential input
contrib.training.python.training		_padding	sequences num_unroll	for a dictionary of sequences pads tensors to a multiple of num_unroll
contrib.training.python.training		_move_sparse_tensor_out_context	input_context input_sequences num_unroll	moves sparsetensors from input_context into input_sequences as seq
contrib.training.python.training		_deconstruct_sparse_tensor_seq	input_sequence shared_name	converts sparsetensor values into tensors of ids and meta data
contrib.training.python.training		_reconstruct_sparse_tensor_seq	sequence sparse_tensor_keys tensor_op_list batch_size	inverse of _deconstruct_sparse_tensor_seq
contrib.training.python.training		_process_yielded_dict	feature_values keys features dtypes	read feature_values from the generator and emit a proper output dict
contrib.training.python.training		python_input	generator features name	easily feed data from a python generator into tensorflow queues
contrib.training.python.training	Feeder	get_fed_tensors		returns fed tensor values
contrib.training.python.training	Feeder	get_many_fed_tensors	batch_size	returns a batch of fed tensor values
contrib.training.python.training	Feeder	set_fed_tensors	tensors	sets fed tensors
contrib.training.python.training	Feeder	set_many_fed_tensors	tensors	sets batches fed tensors
contrib.training.python.training	Feeder	add_remote_device	remote_device	requests that fed values are sent to remote_device
contrib.training.python.training	Feeder	add_remote_replicas	job_name replica_count feeder_task_num replicas_per_feeder	adds feeding for a range of replicas from job_name
contrib.training.python.training	Feeder	run_feeding_forever	sess_callback outer_coordinator tolerator start_queue_runners	runs feeding forever
contrib.training.python.training	Feeder	wait_until_feeding	timeout	waits until run_feeding_forever() is entered
contrib.training.python.training	Feeder	_add_remote_queue_runner	queue enq_ops	adds a remote queue runner to the graph
contrib.training.python.training		_link_coordinators	inner_coord outer_coord start wait_time	returns a thread which stops inner_coord whenever outer_coord stops
contrib.training.python.training		_pick_unused_port		for some reason portpicker returns the same port sometimes
contrib.training.python.training	FeederTest	_create_local_cluster		creates a local cluster
contrib.training.python.training		wait_for_new_checkpoint	checkpoint_dir last_checkpoint seconds_to_sleep timeout	waits until a new checkpoint file is found
contrib.training.python.training		checkpoints_iterator	checkpoint_dir min_interval_secs timeout timeout_fn	continuously yield new checkpoint files as they appear
contrib.training.python.training	SummaryAtEndHook	__init__	log_dir summary_writer summary_op feed_dict	constructs the summary hook
contrib.training.python.training		_scaffold_with_init	scaffold saver checkpoint_path	creates a scaffold that loads the given checkpoint using an init_fn
contrib.training.python.training		evaluate_repeatedly	checkpoint_dir master scaffold eval_ops	repeatedly searches for a checkpoint in checkpoint_dir and evaluates it
contrib.training.python.training		add_gradients_summaries	grads_and_vars	add summaries to gradients
contrib.training.python.training		clip_gradient_norms	gradients_to_variables max_norm	clips the gradients by the given value
contrib.training.python.training		multiply_gradients	grads_and_vars gradient_multipliers	multiply specified gradients
contrib.training.python.training		create_train_op	total_loss optimizer global_step update_ops	creates an operation that evaluates the gradients and returns the loss
contrib.training.python.training		train	train_op logdir master is_chief	runs the training loop
contrib.training.python.training	ResampleTest	testRoundtrip	rate count n	tests resample x weights and resample(resample x rate 1/rate)
contrib.training.python.training	ResampleTest	testCorrectRates	rate count n rtol	tests that the rates returned by weighted_resample are correct
contrib.training.python.training	ResampleTest	testZeroRateUnknownShapes	count	tests that resampling runs with completely runtime shapes
contrib.training.python.training	ResampleTest	testDtypes	count	test that we can define the ops with float64 weights
contrib.training.python.training	ResampleTest	get_weights	n mean stddev	returns random positive weight values
contrib.training.python.training	Tuner	next_trial		switch to the next trial
contrib.training.python.training	Tuner	run_experiment	experiment_fn	creates an experiment by calling experiment_fn and executes it
contrib.training.python.training	FailureTolerator	__init__	limit init_delay backoff_factor forgive_after_seconds	creates a failuretolerator
contrib.training.python.training	FailureTolerator	_adjusted_now		returns what the current time would be if no delays had occurred
contrib.training.python.training		_repeat_range	counts name	repeat integers given by range(len counts each the given number of times
contrib.training.python.training		resample_at_rate	inputs rates scope seed	given inputs tensors stochastically resamples each at a given rate
contrib.training.python.training		weighted_resample	inputs weights overall_rate scope	performs an approximate weighted resampling of inputs
contrib.metrics.python.kernel_tests	AUCUsingHistogramTest	_check_auc	nbins desired_auc score_range num_records	check auc accuracy against synthetic data
contrib.metrics.python.kernel_tests		synthetic_data	desired_auc score_range num_records rng	create synthetic boolean_labels and scores with adjustable auc
contrib.metrics.python.ops		confusion_matrix	labels predictions num_classes dtype	deprecated use tf confusion_matrix instead
contrib.metrics.python.ops		_safe_div	numerator denominator name	divides two values returning 0 if the denominator is <= 0
contrib.metrics.python.ops		_create_local	name shape collections validate_shape	creates a new local variable
contrib.metrics.python.ops		_assert_weights_rank	weights values	weights rank must be either 0, or the same as 'values'
contrib.metrics.python.ops		_count_condition	values weights metrics_collections updates_collections	sums the weights of cases where the given values are true
contrib.metrics.python.ops		streaming_true_positives	predictions labels weights metrics_collections	sum the weights of true_positives
contrib.metrics.python.ops		streaming_true_negatives	predictions labels weights metrics_collections	sum the weights of true_negatives
contrib.metrics.python.ops		streaming_false_positives	predictions labels weights metrics_collections	sum the weights of false positives
contrib.metrics.python.ops		streaming_false_negatives	predictions labels weights metrics_collections	computes the total number of false negatives
contrib.metrics.python.ops		_broadcast_weights	weights values	broadcast weights to the same shape as values
contrib.metrics.python.ops		streaming_mean	values weights metrics_collections updates_collections	computes the weighted mean of the given values
contrib.metrics.python.ops		streaming_mean_tensor	values weights metrics_collections updates_collections	computes the element-wise weighted mean of the given tensors
contrib.metrics.python.ops		streaming_accuracy	predictions labels weights metrics_collections	calculates how often predictions matches labels
contrib.metrics.python.ops		streaming_precision	predictions labels weights metrics_collections	computes the precision of the predictions with respect to the labels
contrib.metrics.python.ops		streaming_recall	predictions labels weights metrics_collections	computes the recall of the predictions with respect to the labels
contrib.metrics.python.ops		_streaming_confusion_matrix_at_thresholds	predictions labels thresholds weights	computes true_positives false_negatives true_negatives false_positives
contrib.metrics.python.ops		streaming_auc	predictions labels weights num_thresholds	computes the approximate auc via a riemann sum
contrib.metrics.python.ops		streaming_specificity_at_sensitivity	predictions labels sensitivity weights	computes the specificity at a given sensitivity
contrib.metrics.python.ops		streaming_sensitivity_at_specificity	predictions labels specificity weights	computes the specificity at a given sensitivity
contrib.metrics.python.ops		streaming_precision_at_thresholds	predictions labels thresholds weights	computes precision values for different thresholds on predictions
contrib.metrics.python.ops		streaming_recall_at_thresholds	predictions labels thresholds weights	computes various recall values for different thresholds on predictions
contrib.metrics.python.ops		streaming_recall_at_k	predictions labels k weights	computes the recall@k of the predictions with respect to dense labels
contrib.metrics.python.ops		streaming_sparse_recall_at_k	predictions labels k class_id	computes recall@k of the predictions with respect to sparse labels
contrib.metrics.python.ops		streaming_sparse_precision_at_k	predictions labels k class_id	computes precision@k of the predictions with respect to sparse labels
contrib.metrics.python.ops		streaming_sparse_precision_at_top_k	top_k_predictions labels class_id weights	computes precision@k of top-k predictions with respect to sparse labels
contrib.metrics.python.ops		sparse_recall_at_top_k	labels top_k_predictions class_id weights	computes recall@k of top-k predictions with respect to sparse labels
contrib.metrics.python.ops		streaming_sparse_average_precision_at_k	predictions labels k weights	computes average precision@k of predictions with respect to sparse labels
contrib.metrics.python.ops		streaming_sparse_average_precision_at_top_k	top_k_predictions labels weights metrics_collections	computes average precision@k of predictions with respect to sparse labels
contrib.metrics.python.ops		streaming_mean_absolute_error	predictions labels weights metrics_collections	computes the mean absolute error between the labels and predictions
contrib.metrics.python.ops		streaming_mean_relative_error	predictions labels normalizer weights	computes the mean relative error by normalizing with the given values
contrib.metrics.python.ops		streaming_mean_squared_error	predictions labels weights metrics_collections	computes the mean squared error between the labels and predictions
contrib.metrics.python.ops		streaming_root_mean_squared_error	predictions labels weights metrics_collections	computes the root mean squared error between the labels and predictions
contrib.metrics.python.ops		streaming_covariance	predictions labels weights metrics_collections	computes the unbiased sample covariance between predictions and labels
contrib.metrics.python.ops		streaming_pearson_correlation	predictions labels weights metrics_collections	computes pearson correlation coefficient between predictions, labels
contrib.metrics.python.ops		streaming_mean_cosine_distance	predictions labels dim weights	computes the cosine distance between the labels and predictions
contrib.metrics.python.ops		streaming_percentage_less	values threshold weights metrics_collections	computes the percentage of values less than the given threshold
contrib.metrics.python.ops		streaming_mean_iou	predictions labels num_classes weights	calculate per-step mean intersection-over-union miou
contrib.metrics.python.ops		_next_array_size	required_size growth_factor	calculate the next size for reallocating a dynamic array
contrib.metrics.python.ops		streaming_concat	values axis max_size metrics_collections	concatenate values along an axis across batches
contrib.metrics.python.ops		aggregate_metrics		aggregates the metric value tensors and update ops into two lists
contrib.metrics.python.ops		aggregate_metric_map	names_to_tuples	aggregates the metric names to tuple dictionary
contrib.metrics.python.ops		_remove_squeezable_dimensions	predictions labels weights	squeeze last dim if needed
contrib.metrics.python.ops		_binary_2d_label_to_sparse_value	labels	convert dense 2d binary indicator tensor to sparse tensor
contrib.metrics.python.ops		_binary_2d_label_to_sparse	labels	convert dense 2d binary indicator tensor to sparse tensor
contrib.metrics.python.ops		_binary_3d_label_to_sparse_value	labels	convert dense 3d binary indicator tensor to sparse tensor
contrib.metrics.python.ops		_binary_3d_label_to_sparse	labels	convert dense 3d binary indicator tensor to sparse tensor
contrib.metrics.python.ops	StreamingAUCTest	np_auc	predictions labels weights	computes the auc explicitely using numpy
contrib.metrics.python.ops	StreamingSparsePrecisionTest	test_average_precision_some_labels_out_of_range		tests that labels outside the [0 n_classes) range are ignored
contrib.metrics.python.ops	StreamingSparsePrecisionTest	test_three_labels_at_k5_some_out_of_range		tests that labels outside the [0 n_classes) range are ignored
contrib.metrics.python.ops	StreamingSparseRecallTest	test_three_labels_at_k5_some_out_of_range		tests that labels outside the [0 n_classes) count in denominator
contrib.metrics.python.ops		auc_using_histogram	boolean_labels scores score_range nbins	auc computed by maintaining histograms
contrib.metrics.python.ops		_check_labels_and_scores	boolean_labels scores check_shape	check the rank of labels/scores return tensor versions
contrib.metrics.python.ops		_make_auc_histograms	boolean_labels scores score_range nbins	create histogram tensors from one batch of labels/scores
contrib.metrics.python.ops		_auc_hist_accumulate	hist_true hist_false nbins collections	accumulate histograms in new variables
contrib.metrics.python.ops		_auc_convert_hist_to_auc	hist_true_acc hist_false_acc nbins	convert histograms to auc
contrib.metrics.python.ops		_strict_1d_cumsum	tensor len_tensor	cumsum of a 1d tensor with defined shape by padding and convolving
contrib.metrics.python.ops		_strict_conv1d	x h	return x * h for rank 1 tensors x and h
contrib.metrics.python.metrics		accuracy	predictions labels weights name	computes the percentage of times that predictions matches labels
contrib.sparsemax.python.kernel_tests	SparsemaxLossTest	_test_sparsemax_loss_against_numpy	dtype random use_gpu	check sparsemax-loss kernel against numpy
contrib.sparsemax.python.kernel_tests	SparsemaxLossTest	_test_constant_add	dtype random use_gpu	check sparsemax-loss proposition 3
contrib.sparsemax.python.kernel_tests	SparsemaxLossTest	_test_sparsemax_loss_positive	dtype random use_gpu	check sparsemax-loss proposition 4
contrib.sparsemax.python.kernel_tests	SparsemaxLossTest	_test_sparsemax_loss_zero	dtype random use_gpu	check sparsemax-loss proposition 5
contrib.sparsemax.python.kernel_tests	SparsemaxLossTest	_test_gradient_against_estimate	dtype random use_gpu	check sparsemax-loss rop aginst estimated-loss rop
contrib.sparsemax.python.kernel_tests	SparsemaxLossTest	_test_gradient_against_numpy	dtype random use_gpu	check sparsemax-loss rop aginst numpy rop
contrib.sparsemax.python.kernel_tests	SparsemaxTest	_test_sparsemax_against_numpy	dtype random use_gpu	check sparsemax kernel against numpy
contrib.sparsemax.python.kernel_tests	SparsemaxTest	_test_sparsemax_of_zero	dtype random use_gpu	check sparsemax proposition 1 part 1
contrib.sparsemax.python.kernel_tests	SparsemaxTest	_test_sparsemax_of_inf	dtype random use_gpu	check sparsemax proposition 1 part 2
contrib.sparsemax.python.kernel_tests	SparsemaxTest	_test_constant_add	dtype random use_gpu	check sparsemax proposition 2
contrib.sparsemax.python.kernel_tests	SparsemaxTest	_test_permutation	dtype random use_gpu	check sparsemax proposition 3
contrib.sparsemax.python.kernel_tests	SparsemaxTest	_test_diffrence	dtype random use_gpu	check sparsemax proposition 4
contrib.sparsemax.python.kernel_tests	SparsemaxTest	_test_two_dimentional	dtype random use_gpu	check two dimentation sparsemax case
contrib.sparsemax.python.kernel_tests	SparsemaxTest	_test_gradient_against_estimate	dtype random use_gpu	check sparsemax rop aginst estimated rop
contrib.sparsemax.python.kernel_tests	SparsemaxTest	_test_gradient_against_numpy	dtype random use_gpu	check sparsemax rop aginst numpy rop
contrib.sparsemax.python.ops		sparsemax_loss	logits sparsemax labels name	computes sparsemax loss function [1]
contrib.sparsemax.python.ops		sparsemax	logits name	computes sparsemax activations [1]
contrib.kernel_methods.python		_linearly_separable_binary_input_fn		returns linearly-separable data points binary classification
contrib.kernel_methods.python		_linearly_inseparable_binary_input_fn		returns non-linearly-separable data points binary classification
contrib.kernel_methods.python	KernelLinearClassifierTest	testNoFeatureColumnsOrKernelMappers		tests that at least one of feature columns or kernels is provided
contrib.kernel_methods.python	KernelLinearClassifierTest	testInvalidKernelMapper		valueerror raised when the kernel mappers provided have invalid type
contrib.kernel_methods.python	KernelLinearClassifierTest	testInvalidNumberOfClasses		valueerror raised when the kernel mappers provided have invalid type
contrib.kernel_methods.python	KernelLinearClassifierTest	testLinearlySeparableBinaryDataNoKernels		tests classifier w/o kernels log regression for lin-separable data
contrib.kernel_methods.python	KernelLinearClassifierTest	testLinearlyInseparableBinaryDataWithAndWithoutKernels		tests classifier w/ and w/o kernels on non-linearly-separable data
contrib.kernel_methods.python	KernelLinearClassifierTest	testVariablesWithAndWithoutKernels		tests variables w/ and w/o kernel
contrib.kernel_methods.python	KernelLinearClassifierTest	testClassifierWithAndWithoutKernelsNoRealValuedColumns		tests kernels have no effect for non-real valued columns
contrib.kernel_methods.python	KernelLinearClassifierTest	testMulticlassDataWithAndWithoutKernels		tests classifier w/ and w/o kernels on multiclass data
contrib.kernel_methods.python		_check_valid_kernel_mappers	kernel_mappers	checks that the input kernel_mappers are valid
contrib.kernel_methods.python		_check_valid_head	head	returns true if the provided head is supported
contrib.kernel_methods.python		_update_features_and_columns	features feature_columns kernel_mappers_dict	updates features and feature_columns based on provided kernel mappers
contrib.kernel_methods.python		_kernel_model_fn	features labels mode params	model_fn for the estimator using kernel methods
contrib.kernel_methods.python	_KernelEstimator	__init__	feature_columns model_dir weight_column_name head	constructs a _kernelestimator object
contrib.kernel_methods.python	KernelLinearClassifier	__init__	feature_columns model_dir n_classes weight_column_name	construct a kernellinearclassifier estimator object
contrib.kernel_methods.python	KernelLinearClassifier	predict_classes	input_fn	runs inference to determine the predicted class per instance
contrib.kernel_methods.python	KernelLinearClassifier	predict_proba	input_fn	runs inference to determine the class probability predictions
contrib.kernel_methods.python.mappers		_inner_product	x y	inner product between tensors x and y
contrib.kernel_methods.python.mappers		_compute_exact_rbf_kernel	x y stddev	computes exact rbf kernel given input tensors x and y and stddev
contrib.kernel_methods.python.mappers	RandomFourierFeatureMapper	__init__	input_dim output_dim stddev seed	constructs a randomfourierfeaturemapper instance
contrib.kernel_methods.python.mappers	RandomFourierFeatureMapper	name		returns a name for the randomfourierfeaturemapper instance
contrib.kernel_methods.python.mappers	RandomFourierFeatureMapper	map	input_tensor	maps each row of input_tensor using random fourier features
contrib.kernel_methods.python.mappers	DenseKernelMapper	map	input_tensor	main dense-tensor-in-dense-tensor-out dtidto map method
contrib.kernel_methods.python.mappers	DenseKernelMapper	name		returns the name of the kernel mapper
contrib.kernel_methods.python.mappers	DenseKernelMapper	output_dim		returns the output dimension of the mapping
contrib.specs.python		Uf	lo hi	uniformly distributed floating number
contrib.specs.python		Ui	lo hi	uniformly distributed integer inclusive limits
contrib.specs.python		Lf	lo hi	log-uniform distributed floatint point number
contrib.specs.python		Li	lo hi	log-uniform distributed integer inclusive limits
contrib.specs.python		Nt	mu sigma limit	normally distributed floating point number with truncation
contrib.specs.python	Conc	__init__	dim	concatenates tensors along the given dimension
contrib.specs.python		Clstm2	n	2d lstm with 3x3 pre-convolution
contrib.specs.python		Dws	n	depth-wise convolution + sigmoid used after lstm
contrib.specs.python		Dwm	n	depth-wise convolution + softmax used after lstm
contrib.specs.python		Var	name	implements an operator that generates a variable
contrib.specs.python	Shared	__init__	subnet name scope	create the shared operator
contrib.specs.python	Shared	funcall	x	apply the shared operator to an input
contrib.specs.python		check_keywords	spec	check for common python keywords in spec
contrib.specs.python		get_positional	args kw kw_overrides	interpolates keyword arguments into argument lists
contrib.specs.python		External	module_name function_name	import a function from an external module
contrib.specs.python		Import	statements	import a function by exec
contrib.specs.python		debug	mode	turn on/off debugging mode
contrib.specs.python		_truncate_structure	x	a helper function that disables recursion in tf_structure
contrib.specs.python		tf_structure	x include_shapes finished	a postfix expression summarizing the tf graph
contrib.specs.python		tf_print	x depth finished printer	a simple print function for a tensorflow graph
contrib.specs.python		tf_num_params	x	number of parameters in a tensorflow subgraph
contrib.specs.python		tf_left_split	op	split the parameters of op for left recursion
contrib.specs.python		tf_parameter_iter	x	iterate over the left branches of a graph and yield sizes
contrib.specs.python		_combine_filter	x	a filter for combining successive layers with similar names
contrib.specs.python		tf_parameter_summary	x printer combine	summarize parameters by depth
contrib.specs.python		tf_spec_structure	spec inputs input_shape input_type	return a postfix representation of the specification
contrib.specs.python		tf_spec_summary	spec inputs input_shape input_type	output a summary of the specification
contrib.specs.python		tf_spec_print	spec inputs input_shape input_type	print a tree representing the spec
contrib.specs.python		eval_params	params environment	evaluates a parameter specification and returns the environment
contrib.specs.python		eval_spec	spec environment	evaluates a spec and returns the environment
contrib.specs.python		create_net_fun	spec environment	evaluates a spec and returns the binding of net
contrib.specs.python		create_net	spec inputs environment	evaluates a spec and creates a network instance given the inputs
contrib.specs.python	LocalImport	__init__	names	create a context manager that binds the names in values
contrib.session_bundle		_add_input_to_signature_def	tensor_name map_key signature_def	add input tensor to signature_def
contrib.session_bundle		_add_output_to_signature_def	tensor_name map_key signature_def	add output tensor to signature_def
contrib.session_bundle		_convert_default_signature_to_signature_def	signatures	convert default signature to object of type signaturedef
contrib.session_bundle		_convert_named_signatures_to_signature_def	signatures	convert named signatures to object of type signaturedef
contrib.session_bundle		_convert_signatures_to_signature_defs	metagraph_def	produce default and named upconverted signaturedef objects from signatures
contrib.session_bundle		_load_saved_model_from_session_bundle_path	export_dir target config	load legacy tf exporter/sessionbundle checkpoint
contrib.session_bundle		load_session_bundle_or_saved_model_bundle_from_path	export_dir tags target config	load session bundle from the given path
contrib.session_bundle		maybe_session_bundle_dir	export_dir	checks if the model path contains session bundle model
contrib.session_bundle		load_session_bundle_from_path	export_dir target config meta_graph_def	load session bundle from the given path
contrib.session_bundle		largest_export_versions	n	creates a filter that keeps the largest n export versions
contrib.session_bundle		one_of_every_n_export_versions	n	creates a filter that keeps one of every n export versions
contrib.session_bundle		mod_export_version	n	creates a filter that keeps every export that is a multiple of n
contrib.session_bundle		union	lf rf	creates a filter that keeps the union of two filters
contrib.session_bundle		negation	f	negate a filter
contrib.session_bundle		get_paths	base_dir parser	gets a list of paths in a given directory
contrib.session_bundle		gfile_copy_callback	files_to_copy export_dir_path	callback to copy files using gfile copy to an export directory
contrib.session_bundle		regression_signature	input_tensor output_tensor	creates a regression signature
contrib.session_bundle		classification_signature	input_tensor classes_tensor scores_tensor	creates a classification signature
contrib.session_bundle		generic_signature	name_tensor_map	creates a generic signature of name to tensor name
contrib.session_bundle	Exporter	export	export_dir_base global_step_tensor sess exports_to_keep	exports the model
contrib.session_bundle	Exporter	_file_path_value	path_tensor	returns the filepath value stored in constant path_tensor
contrib.graph_editor		replace_t_with_placeholder_handler	info t	transform a tensor into a placeholder tensor
contrib.graph_editor		keep_t_if_possible_handler	info t	transform a tensor into itself identity if possible
contrib.graph_editor		assign_renamed_collections_handler	info elem elem_	add the transformed elem to the renamed collections of elem
contrib.graph_editor		transform_op_if_inside_handler	info op keep_if_possible	transform an optional op only if it is inside the subgraph
contrib.graph_editor		copy_op_handler	info op copy_shape	copy a tf operation
contrib.graph_editor	TransformerInfo	_get_transformed_map	top	return the correct container depending on the type of top
contrib.graph_editor	TransformerInfo	_transformed_elem	original_top missing_fn	return the transformed op/tensor corresponding to the original one
contrib.graph_editor	TransformerInfo	_original_elem	transformed_top missing_fn	return the original op/tensor corresponding to the transformed one
contrib.graph_editor	TransformerInfo	transformed	original missing_fn	return the transformed op/tensor corresponding to the original one
contrib.graph_editor	TransformerInfo	original	transformed missing_fn	return the original op/tensor corresponding to the transformed one
contrib.graph_editor	_TmpInfo	new_name	name	compute a destination name from a source name
contrib.graph_editor	Transformer	__call__	sgv dst_graph dst_scope src_scope	execute the transformation
contrib.graph_editor	Transformer	_copy_ops	info	copy ops without connecting them
contrib.graph_editor	Transformer	_connect_ops	info	connect the previously copied ops
contrib.graph_editor	Transformer	_transform_sgv	info sgv	transform a subgraph view
contrib.graph_editor	Transformer	_transformed_t	info t	return tre transformed tensor of t
contrib.graph_editor		copy	sgv dst_graph dst_scope src_scope	copy a subgraph
contrib.graph_editor		copy_with_input_replacements	sgv replacement_ts dst_graph dst_scope	copy a subgraph replacing some of its inputs
contrib.graph_editor		graph_replace	target_ts replacement_ts dst_scope src_scope	create a new graph which compute the targets from the replaced tensors
contrib.graph_editor		concatenate_unique	la lb	add all the elements of lb to la if they are not there already
contrib.graph_editor		is_iterable	obj	return true if the object is iterable
contrib.graph_editor		flatten_tree	tree leaves	flatten a tree into a list
contrib.graph_editor		transform_tree	tree fn iterable_type	transform all the nodes of a tree
contrib.graph_editor		check_graphs		check that all the element in args belong to the same graph
contrib.graph_editor		get_unique_graph	tops check_types none_if_empty	return the unique graph used by the all the elements in tops
contrib.graph_editor		make_list_of_op	ops check_graph allow_graph ignore_ts	convert ops to a list of tf operation
contrib.graph_editor		get_tensors	graph	get all the tensors which are input or output of an op in the graph
contrib.graph_editor		make_list_of_t	ts check_graph allow_graph ignore_ops	convert ts to a list of tf tensor
contrib.graph_editor		get_generating_ops	ts	return all the generating ops of the tensors in ts
contrib.graph_editor		get_consuming_ops	ts	return all the consuming ops of the tensors in ts
contrib.graph_editor	ControlOutputs	__init__	graph	create a dictionary of control-output dependencies
contrib.graph_editor	ControlOutputs	update		update the control outputs if the graph has changed
contrib.graph_editor	ControlOutputs	_build		build the control outputs dictionary
contrib.graph_editor	ControlOutputs	get	op	return the control outputs of op
contrib.graph_editor		placeholder_name	t scope	create placeholder name for the graph editor
contrib.graph_editor		make_placeholder_from_tensor	t scope	create a tf placeholder for the graph editor
contrib.graph_editor		make_placeholder_from_dtype_and_shape	dtype shape scope	create a tf placeholder for the graph editor
contrib.graph_editor		get_predefined_collection_names		return all the predefined collection names
contrib.graph_editor		find_corresponding_elem	target dst_graph dst_scope src_scope	find corresponding op/tensor in a different graph
contrib.graph_editor		find_corresponding	targets dst_graph dst_scope src_scope	find corresponding ops/tensors in a different graph
contrib.graph_editor		_check_ts_compatibility	ts0 ts1	make sure the shape and dtype of the two tensor's lists are compatible
contrib.graph_editor	_RerouteMode	check	cls mode	check swap mode
contrib.graph_editor		_reroute_t	t0 t1 consumers1 can_modify	reroute the end of the tensors t0 t1
contrib.graph_editor		_reroute_ts	ts0 ts1 mode can_modify	reroute the end of the tensors in each pair t0 t1 in ts0 x ts1
contrib.graph_editor		swap_ts	ts0 ts1 can_modify cannot_modify	for each tensor's pair swap the end of t0 t1
contrib.graph_editor		reroute_ts	ts0 ts1 can_modify cannot_modify	for each tensor's pair replace the end of t1 by the end of t0
contrib.graph_editor		_reroute_sgv_remap	sgv0 sgv1 mode	remap in place the inputs of two subgraph views to mimic the reroute
contrib.graph_editor		_reroute_sgv_inputs	sgv0 sgv1 mode	re-route all the inputs of two subgraphs
contrib.graph_editor		_reroute_sgv_outputs	sgv0 sgv1 mode	re-route all the outputs of two operations
contrib.graph_editor		_reroute_sgv	sgv0 sgv1 mode	re-route both the inputs and the outputs of the two subgraph views
contrib.graph_editor		swap_inputs	sgv0 sgv1	swap all the inputs of sgv0 and sgv1 (see reroute_inputs)
contrib.graph_editor		reroute_inputs	sgv0 sgv1	re-route all the inputs of sgv0 to sgv1 (see reroute_inputs)
contrib.graph_editor		swap_outputs	sgv0 sgv1	swap all the outputs of sgv0 and sgv1 (see _reroute_outputs)
contrib.graph_editor		reroute_outputs	sgv0 sgv1	re-route all the outputs of sgv0 to sgv1 (see _reroute_outputs)
contrib.graph_editor		swap_ios	sgv0 sgv1	swap the inputs and outputs of sgv1 to sgv0 (see _reroute)
contrib.graph_editor		reroute_ios	sgv0 sgv1	re-route the inputs and outputs of sgv0 to sgv1 (see _reroute)
contrib.graph_editor		remove_control_inputs	op cops	remove the control inputs cops from co
contrib.graph_editor		add_control_inputs	op cops	add the control inputs cops to op
contrib.graph_editor		detach_control_inputs	sgv	detach all the external control inputs of the subgraph sgv
contrib.graph_editor		detach_control_outputs	sgv control_outputs	detach all the external control outputs of the subgraph sgv
contrib.graph_editor		detach_inputs	sgv control_inputs	detach the inputs of a subgraph view
contrib.graph_editor		detach_outputs	sgv control_outputs	detach the output of a subgraph view
contrib.graph_editor		detach	sgv control_inputs control_outputs control_ios	detach both the inputs and the outputs of a subgraph view
contrib.graph_editor		connect	sgv0 sgv1 disconnect_first	connect the outputs of sgv0 to the inputs of sgv1
contrib.graph_editor		bypass	sgv	bypass the given subgraph by connecting its inputs to its outputs
contrib.graph_editor		_finalize_index	index_or_t ts	returns index as is or return index of tensor in ts
contrib.graph_editor		_finalize_indices	list_of_index_or_t ts	returns index in indices as is or replace with tensor's index
contrib.graph_editor		_check_within_range	mapping n repetition	check is the mapping is valid
contrib.graph_editor	SubGraphView	__init__	inside_ops passthrough_ts	create a subgraph containing the given ops and the "passthrough" tensors
contrib.graph_editor	SubGraphView	__copy__		create a copy of this subgraph
contrib.graph_editor	SubGraphView	_assign_from	other	assign other to itself
contrib.graph_editor	SubGraphView	copy		return a copy of itself
contrib.graph_editor	SubGraphView	_remap_default	remove_input_map remove_output_map	remap in the place the inputs and/or outputs to the default mapping
contrib.graph_editor	SubGraphView	remap_default	remove_input_map remove_output_map	remap the inputs and/or outputs to the default mapping
contrib.graph_editor	SubGraphView	_remap_inputs	new_input_indices	remap the inputs of the subgraph in-place
contrib.graph_editor	SubGraphView	_remap_outputs	new_output_indices	remap the outputs of the subgraph in-place
contrib.graph_editor	SubGraphView	_remap_outputs_make_unique		remap the outputs in place so that all the tensors appears only once
contrib.graph_editor	SubGraphView	_remap_outputs_to_consumers		remap the outputs in place to match the number of consumers
contrib.graph_editor	SubGraphView	remap_outputs_make_unique		remap the outputs so that all the tensors appears only once
contrib.graph_editor	SubGraphView	remap_outputs_to_consumers		remap the outputs to match the number of consumers
contrib.graph_editor	SubGraphView	_remove_unused_ops	control_inputs	remove unused ops in place
contrib.graph_editor	SubGraphView	remove_unused_ops	control_inputs	remove unused ops
contrib.graph_editor	SubGraphView	remap_inputs	new_input_indices	remap the inputs of the subgraph
contrib.graph_editor	SubGraphView	remap_outputs	new_output_indices	remap the output of the subgraph
contrib.graph_editor	SubGraphView	remap	new_input_indices new_output_indices	remap the inputs and outputs of the subgraph
contrib.graph_editor	SubGraphView	find_op_by_name	op_name	return the op named op_name
contrib.graph_editor	SubGraphView	graph		the underlying tf graph
contrib.graph_editor	SubGraphView	ops		the operations in this subgraph view
contrib.graph_editor	SubGraphView	inputs		the input tensors of this subgraph view
contrib.graph_editor	SubGraphView	connected_inputs		the connected input tensors of this subgraph view
contrib.graph_editor	SubGraphView	outputs		the output tensors of this subgraph view
contrib.graph_editor	SubGraphView	connected_outputs		the connected output tensors of this subgraph view
contrib.graph_editor	SubGraphView	passthroughs		the passthrough tensors going straight from input to output
contrib.graph_editor	SubGraphView	__bool__		allows for implicit boolean conversion
contrib.graph_editor	SubGraphView	op	op_id	get an op by its index
contrib.graph_editor	SubGraphView	is_passthrough	t	check whether a tensor is passthrough
contrib.graph_editor	SubGraphView	__enter__		allow python context to minimize the life time of a subgraph view
contrib.graph_editor	SubGraphView	input_index	t	find the input index corresponding to the given input tensor t
contrib.graph_editor	SubGraphView	output_index	t	find the output index corresponding to given output tensor t
contrib.graph_editor	SubGraphView	consumers		return a python set of all the consumers of this subgraph view
contrib.graph_editor		_check_graph	sgv graph	check if sgv belongs to the given graph
contrib.graph_editor		make_view		create a subgraphview from selected operations and passthrough tensors
contrib.graph_editor		make_view_from_scope	scope graph	make a subgraph from a name scope
contrib.graph_editor		can_be_regex	obj	return true if obj can be turned into a regular expression
contrib.graph_editor		make_regex	obj	return a compiled regular expression
contrib.graph_editor		_get_input_ts	ops	compute the list of unique input tensors of all the op in ops
contrib.graph_editor		_get_output_ts	ops	compute the list of unique output tensors of all the op in ops
contrib.graph_editor		filter_ts	ops positive_filter	get all the tensors which are input or output of an op in ops
contrib.graph_editor		filter_ts_from_regex	ops regex	get all the tensors linked to ops that match the given regex
contrib.graph_editor		filter_ops	ops positive_filter	get the ops passing the given filter
contrib.graph_editor		filter_ops_from_regex	ops regex	get all the operations that match the given regex
contrib.graph_editor		get_name_scope_ops	ops scope	get all the operations under the given scope path
contrib.graph_editor		check_cios	control_inputs control_outputs control_ios	do various check on control_inputs and control_outputs
contrib.graph_editor		get_ops_ios	ops control_inputs control_outputs control_ios	return all the tf operation which are connected to an op in ops
contrib.graph_editor		compute_boundary_ts	ops	compute the tensors at the boundary of a set of ops
contrib.graph_editor		get_within_boundary_ops	ops seed_ops boundary_ops inclusive	return all the tf operation within the given boundary
contrib.graph_editor		get_forward_walk_ops	seed_ops inclusive within_ops stop_at_ts	do a forward graph walk and return all the visited ops
contrib.graph_editor		get_backward_walk_ops	seed_ops inclusive within_ops stop_at_ts	do a backward graph walk and return all the visited ops
contrib.graph_editor		get_walks_intersection_ops	forward_seed_ops backward_seed_ops forward_inclusive backward_inclusive	return the intersection of a forward and a backward walk
contrib.graph_editor		get_walks_union_ops	forward_seed_ops backward_seed_ops forward_inclusive backward_inclusive	return the union of a forward and a backward walk
contrib.graph_editor		select_ops		helper to select operations
contrib.graph_editor		select_ts		helper to select tensors
contrib.graph_editor		select_ops_and_ts		helper to select operations and tensors
contrib.nn.python.ops		deprecated_flipped_softmax_cross_entropy_with_logits	logits labels dim name	computes softmax cross entropy between logits and labels
contrib.nn.python.ops		deprecated_flipped_sparse_softmax_cross_entropy_with_logits	logits labels name	computes sparse softmax cross entropy between logits and labels
contrib.nn.python.ops		deprecated_flipped_sigmoid_cross_entropy_with_logits	logits targets name	computes sigmoid cross entropy given logits
python.util		test_decorated_function	x	test decorated function docstring
python.util		test_decorated_function_with_defaults	a b c	test decorated function with defaults docstring
python.util		keyword_args_only	func	decorator for marking specific function accepting keyword args only
python.util		extract_example_parser_configuration	parse_example_op sess	returns an exampleparserconfig proto
python.util		test_decorator_increment_first_int_arg	target	this test decorator skips past self as args[0] in the bound case
python.util		test_function	x	test function docstring
python.util		test_decorated_function	x	test decorated function docstring
python.util		make_all	module_name doc_string_modules	generates __all__ from the docstring of one or more modules
python.util		reveal_undocumented	symbol_name target_module	reveals a symbol that was previously removed by remove_undocumented
python.util		remove_undocumented	module_name allowed_exception_list doc_string_modules	removes symbols in a module that are not referenced by a docstring
python.util		_add_deprecated_function_notice_to_docstring	doc date instructions	adds a deprecation notice to a docstring for deprecated functions
python.util		_add_deprecated_arg_notice_to_docstring	doc date instructions	adds a deprecation notice to a docstring for deprecated arguments
python.util		_call_location		returns call location given level up from current call
python.util		deprecated	date instructions	decorator for marking functions or methods deprecated
python.util		deprecated_args	date instructions	decorator for marking specific function arguments as deprecated
python.util		deprecated_arg_values	date instructions	decorator for marking specific function argument values as deprecated
python.util		deprecated_argument_lookup	new_name new_value old_name old_value	looks up deprecated argument name and ensures both are not used
python.util		contextmanager	target	a tf_decorator-aware wrapper for contextlib contextmanager
python.util		_sequence_like	instance args	converts the sequence args to the same type as instance
python.util		is_sequence	seq	returns a true if its input is a collections sequence except strings
python.util		flatten	nest	returns a flat sequence from a given nested structure
python.util		assert_same_structure	nest1 nest2 check_types	asserts that two structures are nested in the same way
python.util		flatten_dict_items	dictionary	returns a dictionary with flattened keys and values
python.util		_packed_nest_with_indices	structure flat index	helper function for pack_nest_as
python.util		pack_sequence_as	structure flat_sequence	returns a given flattened sequence packed into a nest
python.util		map_structure	func	applies func to each entry in structure and returns a new structure
python.util		_yield_flat_up_to	shallow_tree input_tree	yields elements input_tree partially flattened up to shallow_tree
python.util		assert_shallow_structure	shallow_tree input_tree check_types	asserts that shallow_tree is a shallow structure of input_tree
python.util		flatten_up_to	shallow_tree input_tree	flattens input_tree up to shallow_tree
python.util		map_structure_up_to	shallow_tree func	applies a function or op to a number of partially flattened inputs
python.util		_add_should_use_warning	x fatal_error	wraps object x so that if it is never used a warning is logged
python.util		should_use_result	fn	function wrapper that ensures the function's output is used
python.util		must_use_result_or_fatal	fn	function wrapper that ensures the function's output is used
python.util		as_bytes	bytes_or_text encoding	converts either bytes or unicode to bytes, using utf-8 encoding for text
python.util		as_text	bytes_or_text encoding	returns the given argument as a unicode string
python.util		as_str_any	value	converts to str as str value , but use as_str for bytes
python.util		currentframe		tfdecorator-aware replacement for inspect currentframe
python.util		getargspec	object	tfdecorator-aware replacement for inspect getargspec
python.util		getcallargs	func	tfdecorator-aware replacement for inspect getcallargs
python.util		getdoc	object	tfdecorator-aware replacement for inspect getdoc
python.util		getfile	object	tfdecorator-aware replacement for inspect getfile
python.util		getmembers	object predicate	tfdecorator-aware replacement for inspect getmembers
python.util		getmro	cls	tfdecorator-aware replacement for inspect getmro
python.util		getsource	object	tfdecorator-aware replacement for inspect getsource
python.util		isclass	object	tfdecorator-aware replacement for inspect isclass
python.util		isfunction	object	tfdecorator-aware replacement for inspect isfunction
python.util		ismethod	object	tfdecorator-aware replacement for inspect ismethod
python.util		ismodule	object	tfdecorator-aware replacement for inspect ismodule
python.util		isroutine	object	tfdecorator-aware replacement for inspect isroutine
python.util		stack	context	tfdecorator-aware replacement for inspect stack
python.util		reroute_error	captured	temporarily reroute errors written to tf_logging error into captured
python.util		_normalize_docstring	docstring	normalizes the docstring
python.util		add_notice_to_docstring	doc instructions no_doc_str suffix_str	adds a deprecation notice to a docstring
python.util		make_decorator	target decorator_func decorator_name decorator_doc	make a decorator from a wrapper and a target
python.util		unwrap	maybe_tf_decorator	unwraps an object into a list of tfdecorators and a final target
python.util.protobuf		assertProtoEqual	a b check_initialized normalize_numbers	fails with a useful error if a and b aren't equal
python.util.protobuf		NormalizeNumberFields	pb	normalizes types and precisions of number fields in a protocol buffer
python.util.protobuf		ProtoEq	a b	compares two proto2 objects for equality
python.util.protobuf		LargePbs		converts ascii string large pbs to messages
python.util.protobuf	ProtoEqTest	assertNotEquals	a b	asserts that protoeq says a != b
python.util.protobuf	ProtoEqTest	assertEquals	a b	asserts that protoeq says a == b
python.util.protobuf	ProtoEqTest	testTagOrder		tests that different fields are ordered by tag number
python.util.protobuf	AssertTest	assertAll	a	checks that all possible asserts pass
python.util.protobuf	AssertTest	assertSameNotEqual	a b	checks that assertprotoequal() fails
python.util.protobuf	AssertTest	assertNone	a b message	checks that all possible asserts fail with the given message
python.tools		optimize_for_inference	input_graph_def input_node_names output_node_names placeholder_type_enum	applies a series of inference optimizations on the input graph
python.tools		ensure_graph_is_valid	graph_def	makes sure that the graph is internally consistent
python.tools		node_name_from_input	node_name	strips off ports and other decorations to get the underlying node name
python.tools		node_from_map	node_map name	pulls a node def from a dictionary for a given name
python.tools		values_from_const	node_def	extracts the values from a const nodedef as a numpy ndarray
python.tools		fold_batch_norms	input_graph_def	removes batch normalization ops by folding them into convolutions
python.tools		fuse_resize_and_conv	input_graph_def output_node_names	merges preceding resize and mirror pad ops into a specialized convolution
python.tools		parse_args		parses command line arguments
python.tools		freeze_graph	input_graph input_saver input_binary input_checkpoint	converts all variables in a graph and checkpoint into constants
python.tools		import_to_tensorboard	model_dir log_dir	view an imported protobuf model ( pb file) as a graph in tensorboard
python.tools		_show_tag_sets	saved_model_dir	prints the tag-sets stored in savedmodel directory
python.tools		_show_signature_def_map_keys	saved_model_dir tag_set	prints the keys for each signaturedef in the signaturedef map
python.tools		_get_inputs_tensor_info_from_meta_graph_def	meta_graph_def signature_def_key	gets tensorinfo for all inputs of the signaturedef
python.tools		_get_outputs_tensor_info_from_meta_graph_def	meta_graph_def signature_def_key	gets tensorinfos for all outputs of the signaturedef
python.tools		_show_inputs_outputs	saved_model_dir tag_set signature_def_key	prints input and output tensorinfos
python.tools		_print_tensor_info	tensor_info	prints details of the given tensor_info
python.tools		_show_all	saved_model_dir	prints tag-set signaturedef and inputs/outputs information in savedmodel
python.tools		get_meta_graph_def	saved_model_dir tag_set	gets metagraphdef from savedmodel
python.tools		get_signature_def_map	saved_model_dir tag_set	gets signaturedef map from a metagraphdef in a savedmodel
python.tools		run_saved_model_with_feed_dict	saved_model_dir tag_set signature_def_key input_tensor_key_feed_dict	runs savedmodel and fetch all outputs
python.tools		preprocess_inputs_arg_string	inputs_str	parses input arg into dictionary that maps input to file/variable tuple
python.tools		preprocess_input_exprs_arg_string	input_exprs_str	parses input arg into dictionary that maps input key to python expression
python.tools		load_inputs_from_input_arg_string	inputs_str input_exprs_str	parses input arg strings and create inputs feed_dict
python.tools		show	args	function triggered by show command
python.tools		run	args	function triggered by run command
python.tools		create_parser		creates a parser that parse the command line arguments
python.tools		get_ops_and_kernels	proto_fileformat proto_files default_ops_str	gets the ops and kernels needed from the model files
python.tools		get_header_from_ops_and_kernels	ops_and_kernels include_all_ops_and_kernels	returns a header for use with tensorflow selective_registration
python.tools		get_header	graphs proto_fileformat default_ops	computes a header for use with tensorflow selective_registration
python.tools		print_tensors_in_checkpoint_file	file_name tensor_name all_tensors	prints tensors in a checkpoint file
python.tools		parse_numpy_printoption	kv_str	sets a single numpy printoption from a string of the form 'x=y'
python.tools		strip_unused	input_graph_def input_node_names output_node_names placeholder_type_enum	removes unused nodes from a graphdef
python.tools		strip_unused_from_files	input_graph input_binary output_graph output_binary	removes unused nodes from a graph file
python.saved_model		build_tensor_info	tensor	utility function to build tensorinfo proto
python.saved_model	SavedModelBuilder	_asset_path_from_tensor	path_tensor	returns the filepath value stored in constant path_tensor
python.saved_model	SavedModelBuilder	_add_asset_to_collection	asset_filename asset_tensor	builds an asset proto and adds it to the asset collection of the graph
python.saved_model	SavedModelBuilder	_save_and_write_assets	assets_collection_to_add	saves asset to the meta graph and writes asset files to disk
python.saved_model	SavedModelBuilder	_maybe_add_legacy_init_op	legacy_init_op	add legacy init op to the savedmodel
python.saved_model	SavedModelBuilder	_add_main_op	main_op	add main op to the savedmodel
python.saved_model	SavedModelBuilder	_maybe_save_assets	assets_collection_to_add	saves assets to the meta graph
python.saved_model	SavedModelBuilder	_tag_and_add_meta_graph	meta_graph_def tags signature_def_map	tags the meta graph def and adds it to the savedmodel
python.saved_model	SavedModelBuilder	_validate_tensor_info	tensor_info	validates the tensorinfo proto
python.saved_model	SavedModelBuilder	_validate_signature_def_map	signature_def_map	validates the signaturedef entries in the signature def map
python.saved_model	SavedModelBuilder	add_meta_graph	tags signature_def_map assets_collection legacy_init_op	adds the current meta graph to the savedmodel
python.saved_model	SavedModelBuilder	add_meta_graph_and_variables	sess tags signature_def_map assets_collection	adds the current meta graph to the savedmodel and saves variables
python.saved_model	SavedModelBuilder	save	as_text	writes a savedmodel protocol buffer to disk
python.saved_model		_parse_saved_model	export_dir	reads the savedmodel pb or savedmodel pbtxt file containing savedmodel
python.saved_model		_get_asset_tensors	export_dir meta_graph_def_to_load	gets the asset tensors if defined in the meta graph def to load
python.saved_model		_get_main_op_tensor	meta_graph_def_to_load	gets the main op tensor if one exists
python.saved_model		_get_legacy_init_op_tensor	meta_graph_def_to_load	gets the legacy init op tensor if one exists
python.saved_model		maybe_saved_model_directory	export_dir	checks whether the provided export directory could contain a savedmodel
python.saved_model		load	sess tags export_dir	loads the model from a savedmodel as specified by tags
python.saved_model		build_signature_def	inputs outputs method_name	utility function to build a signaturedef protocol buffer
python.saved_model		regression_signature_def	examples predictions	creates regression signature from given examples and predictions
python.saved_model		classification_signature_def	examples classes scores	creates classification signature from given examples and predictions
python.saved_model		predict_signature_def	inputs outputs	creates prediction signature from given inputs and outputs
python.saved_model		main_op		returns a main op to init variables and tables
python.saved_model		main_op_with_restore	restore_op_name	returns a main op to init variables tables and restore the graph
python.layers		dense	inputs units activation use_bias	functional interface for the densely-connected layer
python.layers		dropout	inputs rate noise_shape seed	applies dropout to the input
python.layers	BatchNormalization	_renorm_correction_and_moments	mean variance training	returns the correction and update values for renorm
python.layers		batch_normalization	inputs axis momentum epsilon	functional interface for the batch normalization layer
python.layers		_smart_select	pred fn_then fn_else	selects fn_then() or fn_else() based on the value of pred
python.layers	Layer	weights		returns the list of all layer variables/weights
python.layers	Layer	variables		returns the list of all layer variables/weights
python.layers	Layer	add_update	updates inputs	add update op s potentially dependent on layer inputs
python.layers	Layer	get_updates_for	inputs	retrieves updates relevant to a specific set of inputs
python.layers	Layer	add_loss	losses inputs	add loss tensor s potentially dependent on layer inputs
python.layers	Layer	get_losses_for	inputs	retrieves losses relevant to a specific set of inputs
python.layers	Layer	build	_	creates the variables of the layer
python.layers	Layer	call	inputs	the logic of the layer lives here
python.layers	Layer	_compute_output_shape	input_shape	computes the output shape of the layer given the input shape
python.layers	Layer	add_variable	name shape dtype initializer	adds a new variable to the layer or gets an existing one returns it
python.layers	Layer	__call__	inputs	wraps call, applying pre- and post-processing steps
python.layers	Layer	apply	inputs	apply the layer on a input
python.layers		_to_list	x	this normalizes a list/tuple or single element into a list
python.layers		_unique_layer_name	name	makes a layer name or arbitrary string unique within a tensorflow graph
python.layers		average_pooling1d	inputs pool_size strides padding	average pooling layer for 1d inputs
python.layers		max_pooling1d	inputs pool_size strides padding	max pooling layer for 1d inputs
python.layers		average_pooling2d	inputs pool_size strides padding	average pooling layer for 2d inputs e g images
python.layers		max_pooling2d	inputs pool_size strides padding	max pooling layer for 2d inputs e g images
python.layers		average_pooling3d	inputs pool_size strides padding	average pooling layer for 3d inputs e g volumes
python.layers		max_pooling3d	inputs pool_size strides padding	max pooling layer for 3d inputs e g volumes
python.layers		normalize_tuple	value n name	transforms a single integer or iterable of integers into an integer tuple
python.layers		smart_cond	pred fn1 fn2 name	return either fn1() or fn2() based on the boolean predicate pred
python.layers		constant_value	pred	return the bool value for pred, or none if pred had a dynamic value
python.layers		get_deconv_dim	dim_size stride_size kernel_size padding	return output dimension of a deconv layer based on input dimension
python.layers		conv1d	inputs filters kernel_size strides	functional interface for 1d convolution layer e g temporal convolution
python.layers		conv2d	inputs filters kernel_size strides	functional interface for the 2d convolution layer
python.layers		conv3d	inputs filters kernel_size strides	functional interface for the 3d convolution layer
python.layers		separable_conv2d	inputs filters kernel_size strides	functional interface for the depthwise separable 2d convolution layer
python.layers		conv2d_transpose	inputs filters kernel_size strides	functional interface for transposed 2d convolution layer
python.layers		conv3d_transpose	inputs filters kernel_size strides	functional interface for transposed 3d convolution layer
python.kernel_tests	ScatterNdTest	testScatterRepeatIndices		this tests scatter_add using indices that repeat
python.kernel_tests		pool_direct_single_axis	input axis window_size pooling_type	numpy implementation of pooling along a single axis
python.kernel_tests		pool_direct	input window_shape pooling_type padding	numpy implementation of pooling
python.kernel_tests	TileTest	testUnknownInputShape		importing can call _tileshape without shape of <multiples> known
python.kernel_tests		handle_options	func x axis exclusive	adds tf options to numpy scan ops
python.kernel_tests		GetTestConfigs		get all the valid tests configs to run
python.kernel_tests		grouper	iterable n fillvalue	collect data into fixed-length chunks or blocks
python.kernel_tests		flatten	list_of_lists	flatten one level of nesting
python.kernel_tests	CTCGreedyDecoderTest	testCTCGreedyDecoder		test two batch entries - best path decoder
python.kernel_tests	CTCGreedyDecoderTest	testCTCDecoderBeamSearch		test one batch two beams - hibernating beam search
python.kernel_tests	MultinomialTest	_do_sampling	logits num_samples sampler	samples using the supplied sampler and inputs
python.kernel_tests	ExtractGlimpseTest	_VerifyValues	tensor_in_sizes glimpse_sizes offsets expected_rows	verifies the output values of the glimpse extraction kernel
python.kernel_tests		GetTestConfigs		get all the valid tests configs to run
python.kernel_tests		GetShrunkInceptionMaxPoolShapes	shrink	iterator for some of the max pool ops in the inception 2015 model
python.kernel_tests	PoolingTest	_VerifyOneType	pool_func input_sizes ksize strides	verifies the output values of the pooling function
python.kernel_tests	PoolingTest	_VerifyOneTest	pool_func input_sizes ksize strides	verifies the output values of the pooling function
python.kernel_tests	PoolingTest	_VerifyValues	pool_func input_sizes ksize strides	verifies the output values of the pooling function
python.kernel_tests	PoolingTest	_ConstructAndTestGradient	pool_func input_sizes output_sizes window_rows	verifies the gradients of the avg pooling function
python.kernel_tests	PoolingTest	_ConstructAndTestSecondGradient	pool_func input_sizes output_sizes window_rows	verifies the second-order gradients of the pooling function
python.kernel_tests	PoolingTest	_MaxPoolGrad	orig_input orig_output grad window_rows	max pooling gradient
python.kernel_tests	PoolingTest	_MaxPoolGradGrad	orig_input orig_output grad window_rows	max pooling second-order gradient
python.kernel_tests	ExtractImagePatches	_VerifyValues	image ksizes strides rates	tests input-output pairs for the extractimagepatches op
python.kernel_tests	ExtractImagePatches	testKsize1x1Stride1x1Rate1x1		verifies that for 1x1 kernel the output equals the input
python.kernel_tests	ExtractImagePatches	testKsize1x1Stride2x3Rate1x1		test for 1x1 kernel and strides
python.kernel_tests	ExtractImagePatches	testKsize2x2Stride1x1Rate1x1Valid		test for 1x1 kernel
python.kernel_tests	ExtractImagePatches	testKsize2x2Stride1x1Rate1x1Same		test for 1x1 kernel
python.kernel_tests	Conv1DTest	testBasic		test that argument passing to conv2d is handled properly
python.kernel_tests	SummaryImageOpTest	_CheckProto	image_summ shape	verify that the non-image parts of the image_summ proto match shape
python.kernel_tests	SetOpsTest	_run_equivalent_set_ops	ops	assert all ops return the same shapes and return 1st result
python.kernel_tests	BenchmarkRNN	_benchmarkDynamicLSTMMemorySwapLongSeq		the memory swapping test for the sosp submission
python.kernel_tests	DivisionTestCase	testDivision		test all the different ways to divide
python.kernel_tests	DilationTest	_VerifyValues	image kernel strides rates	verifies the output values of the dilation function
python.kernel_tests	DilationTest	_ConstructAndTestGradient	image_shape kernel_shape strides rates	verifies the gradients of the dilation function
python.kernel_tests	ErosionTest	_VerifyValues	image kernel strides rates	verifies the output values of the erosion function
python.kernel_tests	ErosionTest	_ConstructAndTestGradient	image_shape kernel_shape strides rates	verifies the gradients of the erosion function
python.kernel_tests	DivisionTestCase	testDivision		test all the different ways to divide
python.kernel_tests		simple_scoped_fn	a x	simple function a x -> 2 x+a but with "2" as a variable in scope
python.kernel_tests	FractionalMaxPoolTest	_MaxPoolAlongRows	input_matrix row_seq overlapping	perform max pool along row of a 2-d matrix based on row_seq
python.kernel_tests	FractionalMaxPoolTest	_MaxPoolAlongCols	input_matrix col_seq overlapping	perform max pool along column of a 2-d matrix based on col_seq
python.kernel_tests	FractionalMaxPoolTest	_GetExpectedFractionalMaxPoolResult	input_tensor row_seq col_seq overlapping	get expected fractional max pool result
python.kernel_tests	FractionalMaxPoolTest	_ValidateFractionalMaxPoolResult	input_tensor pooling_ratio pseudo_random overlapping	validate fractionalmaxpool's result against expected
python.kernel_tests	FractionalMaxPoolTest	_testVisually		manual test by printing out intermediate result of a small random tensor
python.kernel_tests	FractionalMaxPoolTest	testAllInputOptions		try all possible input options for fractional_max_pool
python.kernel_tests	FractionalMaxPoolTest	testIntegerTensorInput		test it works fine when input tensor is integer type
python.kernel_tests	FractionalMaxPoolTest	testDifferentTensorShapes		test different shapes of input tensor
python.kernel_tests	FractionalMaxPoolTest	testLargePoolingRatio		test when pooling ratio is not within [1 2)
python.kernel_tests	FractionalMaxPoolTest	testDivisiblePoolingRatio		test when num of rows/cols can evenly divide pooling ratio
python.kernel_tests	FractionalMaxPoolGradTest	_GenerateUniqueRandomInputTensor	shape	generate 'unqiue' random input tensor
python.kernel_tests	FractionalMaxPoolGradTest	testWhenRepeatedMaxValueInPoolingRegion		test when there's repeating value in pooling region
python.kernel_tests	FIFOQueueBenchmark	_build_graph		builds a graph that enqueues and dequeues a single float
python.kernel_tests	FIFOQueueBenchmark	_run	num_iters	benchmarks enqueueing and dequeueing from a fifoqueue
python.kernel_tests		_powerset	iterable	helper for generating all possible reduction_axes arguments
python.kernel_tests	ReducedShapeTest	testZeros		check that reduced_shape does the right thing with zero dimensions
python.kernel_tests		check_op_order	graph	sanity check on the ordering of op id
python.kernel_tests		check_consumers	graph	sanity check on the consumer list of the tensors
python.kernel_tests	AssignOpTest	_initAssignFetch	x y use_gpu	initialize a param to init and update it with y
python.kernel_tests	AssignOpTest	_initAssignAddFetch	x y use_gpu	initialize a param to init and compute param += y
python.kernel_tests	AssignOpTest	_initAssignSubFetch	x y use_gpu	initialize a param to init and compute param -= y
python.kernel_tests		flatten	list_of_lists	flatten one level of nesting
python.kernel_tests		flatten_values_tensors_or_sparse	tensors_list	flatten each sparsetensor object into 3 tensors for session run()
python.kernel_tests		_upsample_filters	filters rate	upsamples the filters by a factor of rate along the spatial dimensions
python.kernel_tests	AtrousConv2DTest	testAtrousSequence		tests optimization of sequence of atrous convolutions
python.kernel_tests		GetShrunkInceptionShapes	shrink	iterator for smaller versions of convolution shapes in 2015 inception
python.kernel_tests		GetTestConfigs		get all the valid tests configs to run
python.kernel_tests	Conv2DTest	_SetupValuesForDevice	tensor_in_sizes filter_in_sizes strides padding	verifies the output values of the convolution function
python.kernel_tests	Conv2DTest	_CompareFwdValues	tensor_in_sizes filter_in_sizes conv_strides padding	verifies that cpu and gpu produce the same values
python.kernel_tests	DepthwiseConv2DTest	_VerifyValues	tensor_in_sizes filter_in_sizes stride padding	verifies the output values of the convolution function
python.kernel_tests	SeparableConv2DTest	_InitValues	sizes	initializes values for input tensors
python.kernel_tests	SeparableConv2DTest	_VerifyValues	tensor_in_sizes depthwise_filter_in_sizes pointwise_filter_in_sizes stride	verifies the output values of the separable convolution function
python.kernel_tests	DeepConv2DTest	_CompareFwdConv2D	tensor_in_sizes filter_in_sizes conv_strides padding	verifies that deepconv2d and conv2d produce the same values
python.kernel_tests	CastOpTest	_toDataType	dtype	returns tensorflow data type for numpy type
python.kernel_tests	CastOpTest	_test	x dtype use_gpu	tests cast x to dtype behaves the same as numpy astype
python.kernel_tests	CastOpTest	_testTypes	x use_gpu	tests cast x to different tf
python.kernel_tests		upsample_filters	filters rate	upsamples the filters by a factor of rate along the spatial dimensions
python.kernel_tests	AtrousConvolutionTest	testAtrousSequence		tests optimization of sequence of atrous convolutions
python.kernel_tests		GetTestConfigs		get all the valid tests configs to run
python.kernel_tests	PoolingTest	_VerifyOneTest	pool_func input_sizes window strides	verifies the output values of the pooling function
python.kernel_tests	PoolingTest	_ConstructAndTestGradientForConfig	pool_func input_sizes output_sizes window	verifies the gradients of a pooling function
python.kernel_tests	PoolingTest	_ConstructAndTestGradient	pool_func	runs _constructandtestgradientforconfig for all tests configurations
python.kernel_tests	RandomPoissonTest	testNoCSE		cse = constant subexpression eliminator
python.kernel_tests		_binary_2d_label_to_2d_sparse_value	labels	convert dense 2d binary indicator to sparse id
python.kernel_tests		_binary_2d_label_to_1d_sparse_value	labels	convert dense 2d binary indicator to sparse id
python.kernel_tests		_binary_3d_label_to_sparse_value	labels	convert dense 3d binary indicator tensor to sparse tensor
python.kernel_tests	AUCTest	np_auc	predictions labels weights	computes the auc explicitely using numpy
python.kernel_tests	MultiLabelSparsePrecisionTest	test_average_precision_some_labels_out_of_range		tests that labels outside the [0 n_classes) range are ignored
python.kernel_tests	MultiLabelSparsePrecisionTest	test_three_labels_at_k5_some_out_of_range		tests that labels outside the [0 n_classes) range are ignored
python.kernel_tests	MultiLabel2dRecallAtKTest	test_at_k5_some_out_of_range		tests that labels outside the [0 n_classes) count in denominator
python.kernel_tests		SimpleSparseTensorFrom	x	create a very simple sparsetensor with dimensions batch time
python.kernel_tests	CTCLossTest	testBasic		test two batch entries
python.kernel_tests	CTCLossTest	test_time_major		testing time_major param
python.kernel_tests		identicaltest	tc init1 init2 shape	tests if two initializations are identical to within tiny tolerances
python.kernel_tests		duplicated_initializer	tc init graph_seed shape	tests duplicated random initializer within the same graph
python.kernel_tests		_init_sampler	tc init num	returns a func to generate a random tensor of shape [num]
python.kernel_tests		_input_array	num_dims	creates an ndarray where each element is the binary of its linear index
python.kernel_tests		_joined_array	num_dims reduce_dim	creates an ndarray with the result from reduce_join on input_array
python.kernel_tests	ReduceJoinTest	_testReduceJoin	input_array truth truth_shape reduction_indices	compares the output of reduce_join to an expected result
python.kernel_tests	ReduceJoinTest	_testMultipleReduceJoin	input_array reduction_indices separator	tests reduce_join for one input and multiple reduction_indices
python.kernel_tests	RandomGammaTest	_testZeroDensity	alpha	zero isn't in the support of the gamma distribution
python.kernel_tests	RandomGammaTest	testNoCSE		cse = constant subexpression eliminator
python.kernel_tests	ConfusionMatrixTest	testExample		this is a test of the example provided in pydoc
python.kernel_tests	SummaryAudioOpTest	_CheckProto	audio_summ sample_rate num_channels length_frames	verify that the non-audio parts of the audio_summ proto match shape
python.kernel_tests	DenormalTest	testPythonHasDenormals		non-tf numpy code should treat denormals correctly
python.kernel_tests	TruncatedNormalMoments	__getitem__	moment	calculates the truncated normal moments
python.kernel_tests	TFRecordWriterZlibTest	testZlibReadWrite		verify that files produced are zlib compatible
python.kernel_tests	TFRecordWriterZlibTest	testZlibReadWriteLarge		verify that writing large contents also works
python.kernel_tests	TFRecordWriterZlibTest	testGzipReadWrite		verify that files produced are gzip compatible
python.kernel_tests	TFRecordIteratorTest	testWriteZlibRead		verify compression with tfrecordwriter is zlib library compatible
python.kernel_tests	TFRecordIteratorTest	testWriteZlibReadLarge		verify compression for large records is zlib library compatible
python.kernel_tests	TFRecordIteratorTest	testBadFile		verify that tf_record_iterator throws an exception on bad tfrecords
python.kernel_tests	AsyncReaderTest	testNoDeadlockFromQueue		tests that reading does not block main execution threads
python.kernel_tests		_AsLong	array	casts arrays elements to long type used to convert from numpy tf
python.kernel_tests	ScatterAddSubTest	_TestCase	shape indices scatter_op	run a random test case with the given shape and indices
python.kernel_tests		GetTestConfigs		get all the valid tests configs to run
python.kernel_tests	LRNOpTest	_LRN	input_image lrn_depth_radius bias alpha	compute expected result
python.kernel_tests		ConfigsToTest		iterator for different convolution shapes strides and paddings
python.kernel_tests		CheckGradConfigsToTest		iterator for different convolution shapes strides and paddings
python.kernel_tests	DepthwiseConv2DTest	_VerifyValues	tensor_in_sizes filter_in_sizes stride padding	verifies the output values of the convolution function
python.kernel_tests	DepthwiseConv2DTest	_VerifyHandValues	tensor_in_sizes filter_in_sizes stride padding	verifies the output values of the depthwise convolution function
python.kernel_tests		function_with_create	trainable	creates a variable as a side effect using tf variable
python.kernel_tests	TemplateTest	test_end_to_end		this test shows a very simple line model with test_loss
python.kernel_tests	DrawBoundingBoxOpTest	_fillBorder	image color	fill the border of the image
python.kernel_tests	DrawBoundingBoxOpTest	_testDrawBoundingBoxColorCycling	img	tests if cycling works appropriately
python.kernel_tests	DrawBoundingBoxOpTest	testDrawBoundingBoxRGBColorCycling		test if rgb color cycling works correctly
python.kernel_tests	DrawBoundingBoxOpTest	testDrawBoundingBoxRGBAColorCycling		test if rgba color cycling works correctly
python.kernel_tests	DrawBoundingBoxOpTest	testDrawBoundingBoxGRY		test if drawing bounding box on a gry image works
python.kernel_tests		space_to_batch_direct	input_array block_shape paddings	direct python implementation of space-to-batch conversion
python.kernel_tests	RequiredSpaceToBatchPaddingsTest	_checkProperties	input_shape block_shape base_paddings paddings	checks that paddings and crops satisfy invariants
python.kernel_tests	BooleanMaskTest	CheckVersusNumpy	ndims_mask arr_shape make_mask	check equivalence between boolean_mask and numpy masking
python.kernel_tests	ReverseV2Test	testReverseRowsOf3Channels		tests optimized code for reversing rows with last dim size = 3
python.kernel_tests	SelectOpTest	testNan		verify that nans don't propagate where they shouldn't
python.kernel_tests	FractionalAvgTest	_AvgPoolAlongRows	input_matrix row_seq overlapping	perform average pool along row of a 2-d matrix based on row_seq
python.kernel_tests	FractionalAvgTest	_AvgPoolAlongCols	input_matrix col_seq overlapping	perform average pool along column of a 2-d matrix based on col_seq
python.kernel_tests	FractionalAvgTest	_GetExpectedFractionalAvgPoolResult	input_tensor row_seq col_seq overlapping	get expected fractional average pooling result
python.kernel_tests	FractionalAvgTest	_ValidateFractionalAvgPoolResult	input_tensor pooling_ratio pseudo_random overlapping	validate fractionalavgpool's result against expected
python.kernel_tests	FractionalAvgTest	_testVisually		manual test by printing out intermediate result of a small random tensor
python.kernel_tests	FractionalAvgTest	testAllInputOptions		try all possible input options for fractional_avg_pool
python.kernel_tests	FractionalAvgTest	testIntegerTensorInput		test fractionalavgpool works fine when input tensor is integer type
python.kernel_tests	FractionalAvgTest	testDifferentTensorShapes		test different shapes of input tensor
python.kernel_tests	FractionalAvgTest	testLargePoolingRatio		test when pooling ratio is not within [1 2)
python.kernel_tests	FractionalAvgTest	testDivisiblePoolingRatio		test when num of rows/cols can evenly divide pooling ratio
python.kernel_tests	SparseSoftmaxCrossEntropyLossTest	testInconsistentWeightSizeRaisesException		the weight tensor has incorrect number of elements
python.kernel_tests	SparseSoftmaxCrossEntropyLossTest	testInconsistentLabelSizeRaisesException		the label tensor has incorrect number of elements
python.kernel_tests	SparseSoftmaxCrossEntropyLossTest	testInconsistentWeightShapeRaisesException		the weight tensor has incorrect shape
python.kernel_tests	SparseSoftmaxCrossEntropyLossTest	testInconsistentLabelShapeRaisesException		the label tensor has incorrect shape
python.kernel_tests		_random_pd_matrix	n rng	random postive definite matrix
python.kernel_tests.distributions		_make_grid	dtype grid_spec	returns a uniform grid + noise reshaped to shape argument
python.kernel_tests.distributions	NdtriTest	testNdtri		verifies that ndtri computation is correct
python.kernel_tests.distributions	NdtriTest	_baseNdtriFiniteGradientTest	dtype	verifies that ndtri has finite gradients at interesting points
python.user_ops		my_fact		example of overriding the generated code for an op
python.summary		scalar	name tensor collections	outputs a summary protocol buffer containing a single scalar value
python.summary		image	name tensor max_outputs collections	outputs a summary protocol buffer with images
python.summary		histogram	name values collections	outputs a summary protocol buffer with a histogram
python.summary		audio	name tensor sample_rate max_outputs	outputs a summary protocol buffer with audio
python.summary		merge_all	key	merges all summaries collected in the default graph
python.summary		get_summary_description	node_def	given a tensorsummary node_def retrieve its summarydescription
python.summary	SummaryWriter	__init__	logdir graph max_queue flush_secs	creates a summarywriter and an event file
python.summary	SummaryWriter	get_logdir		returns the directory where event file will be written
python.summary	SummaryWriter	reopen		reopens the summary writer
python.summary	SummaryWriter	add_summary	summary global_step	adds a summary protocol buffer to the event file
python.summary	SummaryWriter	add_session_log	session_log global_step	adds a sessionlog protocol buffer to the event file
python.summary	SummaryWriter	add_event	event	adds an event to the event file
python.summary	SummaryWriter	add_graph	graph global_step graph_def	adds a graph to the event file
python.summary	SummaryWriter	add_run_metadata	run_metadata tag global_step	adds a metadata information for a single session run() call
python.summary	SummaryWriter	flush		flushes the event file to disk
python.summary	SummaryWriter	close		flushes the event file to disk and close the file
python.summary	_EventLoggerThread	__init__	queue ev_writer flush_secs	creates an _eventloggerthread
python.summary		summary_iterator	path	an iterator for reading event protocol buffers from an event file
python.summary	SummaryWriterCache	clear		clear cached summary writers currently only used for unit tests
python.summary	SummaryWriterCache	get	logdir	returns the summarywriter for the specified directory
python.summary		get_plugin_asset	plugin_asset_cls graph	acquire singleton pluginasset instance from a graph
python.summary		get_all_plugin_assets	graph	retrieve all pluginassets stored in the graph collection
python.summary	PluginAsset	assets		provide all of the assets contained by the pluginasset instance
python.summary		text_summary	name tensor collections	summarizes textual data
python.summary	TextSummaryPluginAsset	register_tensor	name	register a new tensor summary name as containing textual data
python.summary	TextSummaryPluginAsset	assets		store the tensors registry in a file called tensors json
python.summary.writer	SummaryWriterCacheTest	_test_dir	test_name	create an empty dir to use for tests
python.summary.writer	FileWriterCache	clear		clear cached summary writers currently only used for unit tests
python.summary.writer	FileWriterCache	get	logdir	returns the filewriter for the specified directory
python.summary.writer	EventFileWriter	__init__	logdir max_queue flush_secs filename_suffix	creates a eventfilewriter and an event file to write to
python.summary.writer	EventFileWriter	_get_sentinel_event		generate a sentinel event for terminating worker
python.summary.writer	EventFileWriter	get_logdir		returns the directory where event file will be written
python.summary.writer	EventFileWriter	reopen		reopens the eventfilewriter
python.summary.writer	EventFileWriter	add_event	event	adds an event to the event file
python.summary.writer	EventFileWriter	flush		flushes the event file to disk
python.summary.writer	EventFileWriter	close		flushes the event file to disk and close the file
python.summary.writer	_EventLoggerThread	__init__	queue ev_writer flush_secs sentinel_event	creates an _eventloggerthread
python.summary.writer	SummaryToEventTransformer	__init__	event_writer graph graph_def	creates a summarywriter and an event file
python.summary.writer	SummaryToEventTransformer	add_summary	summary global_step	adds a summary protocol buffer to the event file
python.summary.writer	SummaryToEventTransformer	add_session_log	session_log global_step	adds a sessionlog protocol buffer to the event file
python.summary.writer	SummaryToEventTransformer	add_graph	graph global_step graph_def	adds a graph to the event file
python.summary.writer	SummaryToEventTransformer	add_meta_graph	meta_graph_def global_step	adds a metagraphdef to the event file
python.summary.writer	SummaryToEventTransformer	add_run_metadata	run_metadata tag global_step	adds a metadata information for a single session run() call
python.summary.writer	FileWriter	__init__	logdir graph max_queue flush_secs	creates a filewriter and an event file
python.summary.writer	FileWriter	get_logdir		returns the directory where event file will be written
python.summary.writer	FileWriter	add_event	event	adds an event to the event file
python.summary.writer	FileWriter	flush		flushes the event file to disk
python.summary.writer	FileWriter	close		flushes the event file to disk and close the file
python.summary.writer	FileWriter	reopen		reopens the eventfilewriter
python.debug.cli		get_ui	ui_type on_ui_exit available_ui_types	create a base_ui baseui subtype
python.debug.cli	MockCursesUI	_screen_create_command_textbox	existing_command	override to insert observer of existing commands
python.debug.cli	MockCursesUI	_scroll_output	direction line_index	override to observe screen output
python.debug.cli	CursesTest	testRunUIExitImmediately		make sure that the ui can exit properly after launch
python.debug.cli	CursesTest	testRunUIEmptyCommand		issue an empty command then exit
python.debug.cli	CursesTest	testRunUIInvalidCommandPrefix		handle an unregistered command prefix
python.debug.cli	CursesTest	testRunUIInvalidCommandSyntax		handle a command with invalid syntax
python.debug.cli	CursesTest	testRunUIScrollTallOutputPageDownUp		scroll tall output with pagedown and pageup
python.debug.cli	CursesTest	testRunUIScrollTallOutputEndHome		scroll tall output with pagedown and pageup
python.debug.cli	CursesTest	testRunUIWithInitCmd		run ui with an initial command specified
python.debug.cli	CursesTest	testRegexSearch		test regex search
python.debug.cli	CursesTest	testRegexSearchContinuation		test continuing scrolling down to next regex match
python.debug.cli	CursesTest	testRegexSearchNoMatchContinuation		test continuing scrolling when there is no regex match
python.debug.cli	CursesTest	testRegexSearchContinuationWithoutSearch		test continuation scrolling when no regex search has been performed
python.debug.cli	CursesTest	testRegexSearchWithInvalidRegex		test using invalid regex to search
python.debug.cli	CursesTest	testRegexSearchFromCommandHistory		test regex search commands are recorded in command history
python.debug.cli	CursesTest	testDisplayTensorWithIndices		test displaying tensor with indices
python.debug.cli	CursesTest	testScrollTensorByValidIndices		test scrolling to specified valid indices in a tensor
python.debug.cli	CursesTest	testScrollTensorByInvalidIndices		test scrolling to specified invalid indices in a tensor
python.debug.cli	CommandHandlerRegistryTest	_exiting_handler	argv screen_info	a handler that exits with an exit token
python.debug.cli	CommandHandlerRegistryTest	testExitingHandler		test that exit exception is correctly raised
python.debug.cli		bytes_to_readable_str	num_bytes include_b	generate a human-readable string representing number of bytes
python.debug.cli		parse_ranges_highlight	ranges_string	process ranges highlight string
python.debug.cli		format_tensor	tensor tensor_name np_printoptions print_all	generate formatted str to represent a tensor or its slices
python.debug.cli		error	msg	generate a richtextlines output for error
python.debug.cli		_get_fetch_name	fetch	obtain the name or string representation of a fetch
python.debug.cli		_get_fetch_names	fetches	get a flattened list of the names in run() call fetches
python.debug.cli		_recommend_command	command description indent create_link	generate a richtextlines object that describes a recommended command
python.debug.cli		get_tfdbg_logo		make an ascii representation of the tfdbg logo
python.debug.cli		get_run_start_intro	run_call_count fetches feed_dict tensor_filters	generate formatted intro for run-start ui
python.debug.cli		get_run_short_description	run_call_count fetches feed_dict	get a short description of the run() call
python.debug.cli		get_error_intro	tf_error	generate formatted intro for tensorflow run-time error
python.debug.cli	ReadlineUI	run_ui	init_command title title_color enable_mouse_on_start	run the cli see the doc of base_ui baseui run_ui for more details
python.debug.cli	ReadlineUI	_dispatch_command	command	dispatch user command
python.debug.cli	RichLine	__init__	text font_attr	construct a richline with no rich attributes or a single attribute
python.debug.cli	RichLine	__add__	other	concatenate two chunks of maybe rich text to make a longer rich line
python.debug.cli		rich_text_lines_from_rich_line_list	rich_text_list	convert a list of richline objects or strings to a richtextlines object
python.debug.cli	RichTextLines	__init__	lines font_attr_segs annotations	constructor of richtextlines
python.debug.cli	RichTextLines	slice	begin end	slice a richtextlines object
python.debug.cli	RichTextLines	extend	other	extend this instance of richtextlines with another instance
python.debug.cli	RichTextLines	_extend_before	other	add another richtextlines object to the front
python.debug.cli	RichTextLines	append	line font_attr_segs	append a single line of text
python.debug.cli	RichTextLines	prepend	line font_attr_segs	prepend (i e add to the front) a single line of text
python.debug.cli	RichTextLines	write_to_file	file_path	write the object itself to file in a plain format
python.debug.cli		regex_find	orig_screen_output regex font_attr	perform regex match in rich text lines
python.debug.cli		wrap_rich_text_lines	inp cols	wrap richtextlines according to maximum number of columns
python.debug.cli	CommandHandlerRegistry	register_command_handler	prefix handler help_info prefix_aliases	register a callable as a command handler
python.debug.cli	CommandHandlerRegistry	dispatch_command	prefix argv screen_info	handles a command by dispatching it to a registered command handler
python.debug.cli	CommandHandlerRegistry	is_registered	prefix	test if a command prefix or its alias is has a registered handler
python.debug.cli	CommandHandlerRegistry	get_help	cmd_prefix	compile help information into a richtextlines object
python.debug.cli	CommandHandlerRegistry	set_help_intro	help_intro	set an introductory message to help output
python.debug.cli	CommandHandlerRegistry	_help_handler	args screen_info	command handler for "help"
python.debug.cli	CommandHandlerRegistry	_resolve_prefix	token	resolve command prefix from the prefix itself or its alias
python.debug.cli	CommandHandlerRegistry	_get_help_for_command_prefix	cmd_prefix	compile the help information for a given command prefix
python.debug.cli	TabCompletionRegistry	register_tab_comp_context	context_words comp_items	register a tab-completion context
python.debug.cli	TabCompletionRegistry	deregister_context	context_words	deregister a list of context words
python.debug.cli	TabCompletionRegistry	extend_comp_items	context_word new_comp_items	add a list of completion items to a completion context
python.debug.cli	TabCompletionRegistry	remove_comp_items	context_word comp_items	remove a list of completion items from a completion context
python.debug.cli	TabCompletionRegistry	get_completions	context_word prefix	get the tab completions given a context word and a prefix
python.debug.cli	TabCompletionRegistry	_common_prefix	m	given a list of str returns the longest common prefix
python.debug.cli	CommandHistory	add_command	command	add a command to the command history
python.debug.cli	CommandHistory	most_recent_n	n	look up the n most recent commands
python.debug.cli	CommandHistory	lookup_prefix	prefix n	look up the n most recent commands that starts with prefix
python.debug.cli	Menu	append	item	append an item to the menu
python.debug.cli	Menu	caption_to_item	caption	get a menuitem from the caption
python.debug.cli	Menu	format_as_single_line	prefix divider enabled_item_attrs disabled_item_attrs	format the menu as a single-line richtextlines object
python.debug.cli		_get_command_from_line_attr_segs	mouse_x attr_segs	attempt to extract command from the attribute segments of a line
python.debug.cli	ScrollBar	__init__	min_x min_y max_x max_y	constructor of scrollbar
python.debug.cli	ScrollBar	_block_y	screen_coord_sys	get the 0-based y coordinate of the scroll block
python.debug.cli	ScrollBar	layout		get the richtextlines layout of the scroll bar
python.debug.cli	CursesUI	__init__	on_ui_exit	constructor of cursesui
python.debug.cli	CursesUI	_init_layout		initialize the layout of ui components
python.debug.cli	CursesUI	_screen_color_init		initialization of screen colors
python.debug.cli	CursesUI	_screen_launch	enable_mouse_on_start	launch the curses screen
python.debug.cli	CursesUI	_screen_create_command_window		create command window according to screen size
python.debug.cli	CursesUI	_screen_terminate		terminate the curses screen
python.debug.cli	CursesUI	run_ui	init_command title title_color enable_mouse_on_start	run the cli see the doc of base_ui baseui run_ui for more details
python.debug.cli	CursesUI	_screen_create_command_textbox	existing_command	create command textbox on screen
python.debug.cli	CursesUI	_ui_loop		command-line ui loop
python.debug.cli	CursesUI	_get_user_command		get user command from ui
python.debug.cli	CursesUI	_navigate_screen_output	command	navigate in screen output history
python.debug.cli	CursesUI	_dispatch_command	command	dispatch user command
python.debug.cli	CursesUI	_screen_gather_textbox_str		gather the text string in the command text box
python.debug.cli	CursesUI	_on_textbox_keypress	x	text box key validator callback of key strokes
python.debug.cli	CursesUI	_auto_key_in	command erase_existing	automatically key in a command to the command textbox
python.debug.cli	CursesUI	_erase_existing_command		erase existing text in command textpad
python.debug.cli	CursesUI	_screen_draw_text_line	row line attr color	render a line of text on the screen
python.debug.cli	CursesUI	_screen_new_output_pad	rows cols	generate a new pad on the screen
python.debug.cli	CursesUI	_screen_display_output	output	actually render text output on the screen
python.debug.cli	CursesUI	_display_output	output is_refresh highlight_regex	display text output in a scrollable text pad
python.debug.cli	CursesUI	_display_lines	output min_num_rows	display richtextlines object on screen
python.debug.cli	CursesUI	_display_main_menu	output	display main menu associated with screen output if the menu exists
python.debug.cli	CursesUI	_screen_add_line_to_output_pad	pad row txt color_segments	render a line in a text pad
python.debug.cli	CursesUI	_scroll_output	direction line_index	scroll the output pad
python.debug.cli	CursesUI	_compile_ui_status_summary		compile status summary about this curses ui instance
python.debug.cli	CursesUI	_show_array_indices		show array indices for the lines at the top and bottom of the output
python.debug.cli	CursesUI	_show_array_index_at_line	line_index	show array indices for the specified line in the display area
python.debug.cli	CursesUI	_tab_complete	command_str	perform tab completion
python.debug.cli	CursesUI	_display_candidates	candidates	show candidates (e g tab-completion candidates) on multiple lines
python.debug.cli	CursesUI	_toast	message color line_index	display a one-line message on the screen
python.debug.cli	CursesUI	_error_toast	message	display a one-line error message on screen
python.debug.cli	CursesUI	_info_toast	message	display a one-line informational message on screen
python.debug.cli	CursesUI	_mouse_mode_command_handler	args screen_info	handler for the command prefix 'mouse'
python.debug.cli		parse_op_and_node	line	parse a line containing an op node followed by a node name
python.debug.cli		assert_listed_tensors	tst out expected_tensor_names expected_op_types	check richtextlines output for list_tensors commands
python.debug.cli		assert_node_attribute_lines	tst out node_name op_type	check richtextlines output for node_info commands
python.debug.cli		check_syntax_error_output	tst out command_prefix	check richtextlines output for valid command prefix but invalid syntax
python.debug.cli		check_error_output	tst out command_prefix args	check richtextlines output from invalid/erroneous commands
python.debug.cli		check_main_menu	tst out list_tensors_enabled node_info_node_name	check the main menu annotation of an output
python.debug.cli	AnalyzerCLISimpleMulAddTest	testListTensorsFilterNanOrInf		test register and invoke a tensor filter
python.debug.cli	AnalyzerCLISimpleMulAddTest	testListTensorNonexistentFilter		test attempt to use a nonexistent tensor filter
python.debug.cli	AnalyzerCLISimpleMulAddTest	_findSourceLine	annotated_source line_number	find line of given line number in annotated source
python.debug.cli	AnalyzerCLIControlDepTest	testListInputsNonRecursiveNoControl		list inputs non-recursively without any control inputs
python.debug.cli	AnalyzerCLIControlDepTest	testListInputsNonRecursiveNoControlUsingTensorName		list inputs using the name of an output tensor of the node
python.debug.cli	AnalyzerCLIControlDepTest	testListInputsNonRecursiveWithControls		list inputs non-recursively with control inputs
python.debug.cli	AnalyzerCLIControlDepTest	testListInputsRecursiveWithControls		list inputs recursively with control inputs
python.debug.cli	AnalyzerCLIControlDepTest	testListInputsRecursiveWithControlsWithDepthLimit		list inputs recursively with control inputs and a depth limit
python.debug.cli	AnalyzerCLIControlDepTest	testListInputsNodeWithoutInputs		list the inputs to a node without any input
python.debug.cli	AnalyzerCLIControlDepTest	testListRecipientsRecursiveWithControlsWithDepthLimit		list recipients recursively with control inputs and a depth limit
python.debug.cli	NavigationHistoryItem	__init__	command screen_output scroll_position	constructor of navigationhistoryitem
python.debug.cli	CursesNavigationHistory	__init__	capacity	constructor of cursesnavigationhistory
python.debug.cli	CursesNavigationHistory	add_item	command screen_output scroll_position	add an item to the navigation histoyr
python.debug.cli	CursesNavigationHistory	update_scroll_position	new_scroll_position	update the scroll position of the currently-pointed-to history item
python.debug.cli	CursesNavigationHistory	go_back		go back one place in the history if possible
python.debug.cli	CursesNavigationHistory	go_forward		go forward one place in the history if possible
python.debug.cli	CursesNavigationHistory	can_go_back		test whether client can go back one place
python.debug.cli	CursesNavigationHistory	can_go_forward		test whether client can go forward one place
python.debug.cli	CursesNavigationHistory	render	max_length backward_command forward_command latest_command_attribute	render the rich text content of the single-line navigation bar
python.debug.cli		parse_command	command	parse command string into a list of arguments
python.debug.cli		extract_output_file_path	args	extract output file path from command arguments
python.debug.cli		parse_tensor_name_with_slicing	in_str	parse tensor name potentially suffixed by slicing string
python.debug.cli		validate_slicing_string	slicing_string	validate a slicing string
python.debug.cli		_parse_slices	slicing_string	construct a tuple of slices from the slicing string
python.debug.cli		parse_indices	indices_string	parse a string representing indices
python.debug.cli		parse_ranges	range_string	parse a string representing numerical range s
python.debug.cli		parse_memory_interval	interval_str	convert a human-readable memory interval to a tuple of start and end value
python.debug.cli		parse_time_interval	interval_str	convert a human-readable time interval to a tuple of start and end value
python.debug.cli		_parse_interval	interval_str	convert a human-readable interval to a tuple of start and end value
python.debug.cli		parse_readable_size_str	size_str	convert a human-readable str representation to number of bytes
python.debug.cli		parse_readable_time_str	time_str	parses a time string in the format n nus nms ns
python.debug.cli		evaluate_tensor_slice	tensor tensor_slicing	call eval on the slicing of a tensor with validation
python.debug.cli	CursesTest	testRunUIExitImmediately		make sure that the ui can exit properly after launch
python.debug.cli	CursesTest	testRunUIEmptyCommand		issue an empty command then exit
python.debug.cli	CursesTest	testRunUIWithInitCmd		run ui with an initial command specified
python.debug.cli	CursesTest	testRunUIWithValidUsersCommands		run ui with an initial command specified
python.debug.cli	CursesTest	testRunUIWithInvalidUsersCommands		run ui with an initial command specified
python.debug.cli	HighlightOptions	__init__	criterion description font_attr	constructor of highlightoptions
python.debug.cli		format_tensor	tensor tensor_label include_metadata np_printoptions	generate a richtextlines object showing a tensor in formatted style
python.debug.cli		_annotate_ndarray_lines	array_lines tensor np_printoptions offset	generate annotations for line-by-line begin indices of tensor text
python.debug.cli		locate_tensor_element	formatted indices	locate a tensor element in formatted text lines given element indices
python.debug.cli		_locate_elements_in_line	line indices_list ref_indices	determine the start and end indices of an element in a line
python.debug.cli	NodeStepperCLI	_initialize_state		initialize the state of this stepper cli
python.debug.cli	NodeStepperCLI	_calculate_next		calculate the next target for "step" action based on current state
python.debug.cli	NodeStepperCLI	list_sorted_nodes	args screen_info	list the sorted transitive closure of the stepper's fetches
python.debug.cli	NodeStepperCLI	_get_status_labels	element_name handle_node_names intermediate_tensor_names override_names	get a string of status labels for a graph element
python.debug.cli	NodeStepperCLI	_node_status_label_legend		get legend for node-status labels
python.debug.cli	NodeStepperCLI	cont	args screen_info	continue-to action on the graph
python.debug.cli	NodeStepperCLI	_report_last_feed_types		generate a report of the feed types used in the cont/step call
python.debug.cli	NodeStepperCLI	_report_last_updated		generate a report of the variables updated in the last cont/step call
python.debug.cli	NodeStepperCLI	print_tensor	args screen_info	print the value of a tensor that the stepper has access to
python.debug.cli	NodeStepperCLI	inject_value	args screen_info	inject value to a given tensor
python.debug.cli	NodeStepperCLI	_resolve_tensor_names	element_name	resolve tensor name from graph element name
python.debug.cli		_add_main_menu	output node_name enable_list_tensors enable_node_info	generate main menu for the screen output from a command
python.debug.cli	DebugAnalyzer	add_tensor_filter	filter_name filter_callable	add a tensor filter
python.debug.cli	DebugAnalyzer	get_tensor_filter	filter_name	retrieve filter function by name
python.debug.cli	DebugAnalyzer	list_tensors	args screen_info	command handler for list_tensors
python.debug.cli	DebugAnalyzer	_measure_tensor_list_column_widths	data	determine the maximum widths of the timestamp and op-type column
python.debug.cli	DebugAnalyzer	_sort_dump_data_by	data sort_by reverse	sort a list of debugtensordatum in specified order
python.debug.cli	DebugAnalyzer	_tensor_list_column_heads	parsed max_timestamp_width max_dump_size_width max_op_type_width	generate a line containing the column heads of the tensor list
python.debug.cli	DebugAnalyzer	node_info	args screen_info	command handler for node_info
python.debug.cli	DebugAnalyzer	_render_node_traceback	node_name	render traceback of a node's creation in python if available
python.debug.cli	DebugAnalyzer	list_inputs	args screen_info	command handler for inputs
python.debug.cli	DebugAnalyzer	print_tensor	args screen_info	command handler for print_tensor
python.debug.cli	DebugAnalyzer	list_outputs	args screen_info	command handler for inputs
python.debug.cli	DebugAnalyzer	print_source	args screen_info	print the content of a source file
python.debug.cli	DebugAnalyzer	_make_source_table	source_list is_tf_py_library	make a table summarizing the source files that create nodes and tensors
python.debug.cli	DebugAnalyzer	list_source	args screen_info	list python source files that constructed nodes and tensors
python.debug.cli	DebugAnalyzer	_list_inputs_or_outputs	recursive node_name depth control	helper function used by list_inputs and list_outputs
python.debug.cli	DebugAnalyzer	_dfs_from_node	lines attr_segs node_name tracker	perform depth-first search dfs traversal of a node's input tree
python.debug.cli	DebugAnalyzer	_format_neighbors	neighbor_type non_ctrls ctrls	list neighbors inputs or recipients of a node
python.debug.cli	DebugAnalyzer	_list_node_attributes	node_name	list neighbors inputs or recipients of a node
python.debug.cli	DebugAnalyzer	_list_node_dumps	node_name	list dumped tensor data from a node
python.debug.cli		create_analyzer_ui	debug_dump tensor_filters ui_type on_ui_exit	create an instance of cursesui based on a debugdumpdir object
python.debug.cli	ProfileDatum	exec_time		measures compute function exection time plus pre- and post-processing
python.debug.cli		_list_profile_filter	profile_datum node_name_regex file_name_regex op_type_regex	filter function for list_profile command
python.debug.cli		_list_profile_sort_key	profile_datum sort_by	get a profile_datum property to sort by in list_profile command
python.debug.cli	ProfileAnalyzer	list_profile	args screen_info	command handler for list_profile
python.debug.cli	ProfileAnalyzer	_get_profile_data_generator		get function that generates profiledatum objects
python.debug.cli	ProfileAnalyzer	_get_list_profile_lines	device_name device_index device_count profile_datum_list	get richtextlines object for list_profile command for a given device
python.debug.cli	ProfileAnalyzer	_measure_list_profile_column_widths	profile_data	determine the maximum column widths for each data list
python.debug.cli		create_profiler_ui	graph run_metadata ui_type on_ui_exit	create an instance of cursesui based on a tf graph and runmetadata
python.debug.cli		_parse_sorted_nodes_list	lines	parsed a list of lines to extract the node list
python.debug.cli		_parse_updated	lines	parse the updated section in the output text lines
python.debug.cli	NodeStepperSimpleGraphTest	_assert_nodes_topologically_sorted_with_target_e	node_names	check the topologically sorted order of the node names
python.debug.cli	BaseUI	__init__	on_ui_exit	constructor of the base class
python.debug.cli	BaseUI	set_help_intro	help_intro	set an introductory message to the help output of the command registry
python.debug.cli	BaseUI	register_command_handler	prefix handler help_info prefix_aliases	a wrapper around commandhandlerregistry register_command_handler()
python.debug.cli	BaseUI	register_tab_comp_context		wrapper around tabcompletionregistry register_tab_comp_context()
python.debug.cli	BaseUI	run_ui	init_command title title_color enable_mouse_on_start	run the ui until user- or command- triggered exit
python.debug.cli	BaseUI	_parse_command	command	parse a command string into prefix and arguments
python.debug.cli	BaseUI	_analyze_tab_complete_input	text	analyze raw input to tab-completer
python.debug.wrappers	LocalCLIDebuggerWrapperSessionForTest	__init__	command_args_sequence sess dump_root	constructor of the for-test subclass
python.debug.wrappers	GrpcDebugWrapperSession	__init__	sess grpc_debug_server_addresses watch_fn thread_name_filter	constructor of dumpingdebugwrappersession
python.debug.wrappers	GrpcDebugWrapperSession	prepare_run_debug_urls	fetches feed_dict	implementation of abstract method in superclass
python.debug.wrappers	DumpingDebugWrapperSession	__init__	sess session_root watch_fn thread_name_filter	constructor of dumpingdebugwrappersession
python.debug.wrappers	DumpingDebugWrapperSession	prepare_run_debug_urls	fetches feed_dict	implementation of abstrat method in superclass
python.debug.wrappers		_check_type	obj expected_type	check if an object is of the expected type
python.debug.wrappers	OnRunStartRequest	__init__	fetches feed_dict run_options run_metadata	constructor of onrunstartrequest
python.debug.wrappers	OnRunStartResponse	__init__	action debug_urls debug_ops node_name_regex_whitelist	constructor of onrunstartresponse
python.debug.wrappers	OnRunEndRequest	__init__	performed_action run_metadata client_graph_def tf_error	constructor for onrunendrequest
python.debug.wrappers	BaseDebugWrapperSession	__init__	sess thread_name_filter	constructor of basedebugwrappersession
python.debug.wrappers	BaseDebugWrapperSession	run	fetches feed_dict options run_metadata	wrapper around session run() that inserts tensor watch options
python.debug.wrappers	BaseDebugWrapperSession	partial_run_setup	fetches feeds	sets up the feeds and fetches for partial runs in the session
python.debug.wrappers	BaseDebugWrapperSession	_decorate_run_options	run_options debug_urls debug_ops node_name_regex_whitelist	modify a runoptions object for debug tensor watching
python.debug.wrappers	BaseDebugWrapperSession	on_session_init	request	callback invoked during construction of the debug-wrapper session
python.debug.wrappers	BaseDebugWrapperSession	on_run_start	request	callback invoked on run() calls to the debug-wrapper session
python.debug.wrappers	BaseDebugWrapperSession	on_run_end	request	callback invoked on run() calls to the debug-wrapper session
python.debug.wrappers	BaseDebugWrapperSession	invoke_node_stepper	node_stepper restore_variable_values_on_exit	callback invoked when the client intends to step through graph nodes
python.debug.wrappers	WatchOptions	__init__	debug_ops node_name_regex_whitelist op_type_regex_whitelist tensor_dtype_regex_whitelist	constructor of watchoptions debug watch options
python.debug.wrappers	NonInteractiveDebugWrapperSession	__init__	sess watch_fn thread_name_filter	constructor of dumpingdebugwrappersession
python.debug.wrappers	NonInteractiveDebugWrapperSession	on_session_init	request	see doc of basedebugwrappersession on_run_start
python.debug.wrappers	NonInteractiveDebugWrapperSession	prepare_run_debug_urls	fetches feed_dict	abstract method to be implemented by concrete subclasses
python.debug.wrappers	NonInteractiveDebugWrapperSession	on_run_start	request	see doc of basedebugwrappersession on_run_start
python.debug.wrappers	NonInteractiveDebugWrapperSession	_prepare_run_watch_config	fetches feed_dict	get the debug_urls and node/op whitelists for the current run() call
python.debug.wrappers	NonInteractiveDebugWrapperSession	on_run_end	request	see doc of basedebugwrappersession on_run_end
python.debug.wrappers	NonInteractiveDebugWrapperSession	invoke_node_stepper	node_stepper restore_variable_values_on_exit	see doc of basedebugwrappersession invoke_node_stepper
python.debug.wrappers	LocalCLIDebugWrapperSession	__init__	sess dump_root log_usage ui_type	constructor of localclidebugwrappersession
python.debug.wrappers	LocalCLIDebugWrapperSession	add_tensor_filter	filter_name tensor_filter	add a tensor filter
python.debug.wrappers	LocalCLIDebugWrapperSession	on_session_init	request	overrides on-session-init callback
python.debug.wrappers	LocalCLIDebugWrapperSession	on_run_start	request	overrides on-run-start callback
python.debug.wrappers	LocalCLIDebugWrapperSession	_prep_cli_for_run_start		prepare but not launch the cli for run-start
python.debug.wrappers	LocalCLIDebugWrapperSession	on_run_end	request	overrides on-run-end callback
python.debug.wrappers	LocalCLIDebugWrapperSession	_prep_cli_for_run_end	debug_dump tf_error passed_filter	prepare but not launch cli for run-end with debug dump from the run
python.debug.wrappers	LocalCLIDebugWrapperSession	_launch_cli		launch the interactive command-line interface
python.debug.wrappers	LocalCLIDebugWrapperSession	_run_handler	args screen_info	command handler for "run" command during on-run-start
python.debug.wrappers	LocalCLIDebugWrapperSession	_on_run_start_step_handler	args screen_info	command handler for "invoke_stepper" command during on-run-start
python.debug.wrappers	LocalCLIDebugWrapperSession	_get_run_debug_urls		get the debug_urls value for the current run() call
python.debug.wrappers	LocalCLIDebugWrapperSession	_update_run_calls_state	run_call_count fetches feed_dict	update the internal state with regard to run() call history
python.debug.wrappers	LocalCLIDebugWrapperSession	invoke_node_stepper	node_stepper restore_variable_values_on_exit	overrides method in base class to implement interactive node stepper
python.debug.wrappers	LocalCLIDebugHook	__init__	ui_type dump_root thread_name_filter	create a local debugger command-line interface cli hook
python.debug.wrappers	LocalCLIDebugHook	add_tensor_filter	filter_name tensor_filter	add a tensor filter
python.debug.wrappers	LocalCLIDebugHook	_decorate_options_for_debug	options graph watch_options	modify runoptions debug_options debug_tensor_watch_opts for debugging
python.debug.wrappers	DumpingDebugHook	__init__	session_root watch_fn thread_name_filter log_usage	create a local debugger command-line interface cli hook
python.debug.wrappers	GrpcDebugHook	__init__	grpc_debug_server_addresses watch_fn thread_name_filter log_usage	constructs a grpcdebughook
python.debug.wrappers	GrpcDebugHook	before_run	run_context	called right before a session is run
python.debug.wrappers	TestDebugWrapperSession	on_session_init	request	override abstract on-session-init callback method
python.debug.wrappers	TestDebugWrapperSession	on_run_start	request	override abstract on-run-start callback method
python.debug.wrappers	TestDebugWrapperSession	on_run_end	request	override abstract on-run-end callback method
python.debug.wrappers	DebugWrapperSessionTest	testInteractiveSessionInit		the wrapper should work also on other subclassses of session session
python.debug.wrappers	DebugWrapperSessionTest	testSessionInitInvalidSessionType		attempt to wrap a non-session-type object should cause an exception
python.debug.wrappers	DumpingDebugWrapperSessionTest	testDumpingWithLegacyWatchFnOnFetchesWorks		use a watch_fn that returns different whitelists for different runs
python.debug.wrappers	DumpingDebugWrapperSessionTest	testDumpingWithLegacyWatchFnWithNonDefaultDebugOpsWorks		use a watch_fn that specifies non-default debug ops
python.debug.wrappers	DumpingDebugWrapperSessionTest	testDumpingWithWatchFnWithNonDefaultDebugOpsWorks		use a watch_fn that specifies non-default debug ops
python.debug.lib	SessionDebugTest	testAllowsDifferentWatchesOnDifferentRuns		test watching different tensors on different runs of the same graph
python.debug.lib	StepperTestWithPlaceHolders	testAttemptToContToPlaceholderWithTensorFeedKeysShouldWork		continuing to a placeholder should be allowed using client feed
python.debug.lib	StepperBackwardRunTest	testSelectiveHandleUsageDependingOnTransitiveCleanliness		test tensor handlers are using only during clean transitive closure
python.debug.lib	StepperBackwardRunTest	testRestoreVariableValues		test restore_variable_values() restores the old values of variables
python.debug.lib	StepperBackwardRunTest	testFinalize		test finalize() to restore variables and run the original fetch
python.debug.lib	StepperBackwardRunTest	testOverrideThenContToUpdateThenRemoveOverrideThenUpdateAgain		test cont() to update nodes after overriding tensor values
python.debug.lib	StepperBackwardRunTest	testContToNodeWithOutputTensors		cont() to an op should cache its output tensors if appropriate
python.debug.lib		guess_is_tensorflow_py_library	py_file_path	guess whether a python source file is a part of the tensorflow library
python.debug.lib		annotate_source	dump source_file_path do_dumped_tensors file_stack_top	annotate a python source file with a list of ops created at each line
python.debug.lib		list_source_files_against_dump	dump path_regex_whitelist node_name_regex_whitelist	generate a list of source files with information regarding ops and tensors
python.debug.lib	HasNanOrInfTest	testDTypeStringGivesFalse		isnan and isinf are not applicable to strings
python.debug.lib	SourceHelperTest	createAndRunGraphHelper		create and run a tensorflow graph to generate debug dumps
python.debug.lib	ListSourceAgainstDumpTest	createAndRunGraphWithWhileLoop		create and run a tensorflow graph with a while loop to generate dumps
python.debug.lib		_flatten_fetches	fetches	flatten list tuple of fetches or a single fetch into a list of fetches
python.debug.lib	NodeStepper	__init__	sess fetches feed_dict	constructor for debugger
python.debug.lib	NodeStepper	_get_fetch_and_name_lists	flattened_fetches	get the lists of fetches and their names
python.debug.lib	NodeStepper	_dfs_visit	graph elem_list	trace back the input of a graph element using depth-first search
python.debug.lib	NodeStepper	sorted_nodes		get a topologically-sorted list of node names of the stepper
python.debug.lib	NodeStepper	closure_elements		get a name list of the graph elements of the stepper
python.debug.lib	NodeStepper	output_slots_in_closure	node_name	get the output tensors in the transitive closure from node
python.debug.lib	NodeStepper	is_feedable	name	determine if a graph element if feedable
python.debug.lib	NodeStepper	override_tensor	tensor_name overriding_val	override the value of a tensor
python.debug.lib	NodeStepper	remove_override	tensor_name	remove the overriding value on a tensor
python.debug.lib	NodeStepper	last_feed_types		obtain information about the feed in the last cont() call
python.debug.lib	NodeStepper	cont	target use_tensor_handles use_dumped_intermediates use_overrides	continue till the completion of the specified target tensor
python.debug.lib	NodeStepper	_prepare_cont_call_dump_path_and_run_options		prepare the dump path and runoptions for next cont() call
python.debug.lib	NodeStepper	_invalidate_transitively_outgoing_cache	source_element	invalidate the cached tensor handles by tracing output
python.debug.lib	NodeStepper	finalize		run the final fetch es
python.debug.lib	NodeStepper	restore_variable_values		restore variables to the initial values
python.debug.lib	NodeStepper	handle_names		return names of the tensorhandles that the debugger is holding
python.debug.lib	NodeStepper	handle_node_names		get list of names of the nodes for which handles are available
python.debug.lib	NodeStepper	intermediate_tensor_names		get list of the names of the tensors for which dumps are available
python.debug.lib	NodeStepper	last_updated		get the names of the variables updated in the last cont() call
python.debug.lib	NodeStepper	dirty_variables		get the set of variables that are currently "dirty"
python.debug.lib	NodeStepper	is_placeholder	graph_element_name	check whether a graph element is a placeholder by name
python.debug.lib	NodeStepper	placeholders		get the list of placeholder tensors in the transitive closure
python.debug.lib	NodeStepper	get_tensor_value	tensor_name	get the value of a tensor that the stepper has access to
python.debug.lib	NodeStepper	override_names		return names of the tensorhandles that the debugger is holding
python.debug.lib	NodeStepper	_get_node	element	get the node of a graph element
python.debug.lib	DebugUtilsTest	_verify_watches	watch_opts expected_output_slot expected_debug_ops expected_debug_urls	verify a list of debug tensor watches
python.debug.lib	SessionDebugTestBase	testOutputSlotWithoutOutgoingEdgeCanBeWatched		test watching output slots not attached to any outgoing edges
python.debug.lib	SessionDebugTestBase	testWatchingVariableUpdateOpsSeesUpdatedValues		watch output slots on variable-updating ops with no emitted edges
python.debug.lib	SessionDebugTestBase	testAllowsWatchingUnconnectedOutputTensor		watch an output slot not emitting any edges
python.debug.lib	SessionDebugTestBase	testSuccessiveDebuggingRunsIncreasesCounters		test repeated session run() calls with debugger increments counters
python.debug.lib	SessionDebugTestBase	testDebuggingDuringOpError		test the debug tensor dumping when error occurs in graph runtime
python.debug.lib	DebugConcurrentRunCallsTest	_get_concurrent_debug_urls		abstract method to generate debug urls for concurrent debugged runs
python.debug.lib		add_debug_tensor_watch	run_options node_name output_slot debug_ops	add watch on a tensor to runoptions
python.debug.lib		watch_graph	run_options graph debug_ops debug_urls	add debug watches to runoptions for a tensorflow graph
python.debug.lib		watch_graph_with_blacklists	run_options graph debug_ops debug_urls	add debug tensor watches blacklisting nodes and op types
python.debug.lib		load_tensor_from_event_file	event_file_path	load a tensor from an event file
python.debug.lib		load_tensor_from_event	event	load a tensor from an event proto
python.debug.lib		parse_node_or_tensor_name	name	get the node name from a string that can be node or tensor name
python.debug.lib		get_output_slot	element_name	get the output slot number from the name of a graph element
python.debug.lib		_get_tensor_name	node_name output_slot	get tensor name given node name and output slot index
python.debug.lib		_get_tensor_watch_key	node_name output_slot debug_op	get the string representation of a debug watch on a tensor
python.debug.lib		is_copy_node	node_name	determine whether a node name is that of a debug copy node
python.debug.lib		is_debug_node	node_name	determine whether a node name is that of a debug node
python.debug.lib		parse_debug_node_name	node_name	parse the name of a debug node
python.debug.lib		has_inf_or_nan	datum tensor	a predicate for whether a tensor consists of any bad numerical values
python.debug.lib	DebugTensorDatum	get_tensor		get tensor from the dump (event) file
python.debug.lib	DebugTensorDatum	timestamp		timestamp of when this tensor value was dumped
python.debug.lib	DebugTensorDatum	extended_timestamp		extended timestamp possibly with an index suffix
python.debug.lib	DebugTensorDatum	debug_op		name of the debug op
python.debug.lib	DebugTensorDatum	node_name		name of the node from which the tensor value was dumped
python.debug.lib	DebugTensorDatum	output_slot		output slot index from which the tensor value was dumped
python.debug.lib	DebugTensorDatum	tensor_name		name of the tensor watched by the debug op
python.debug.lib	DebugTensorDatum	watch_key		watch key identities a debug watch on a tensor
python.debug.lib	DebugTensorDatum	file_path		path to the file which stores the value of the dumped tensor
python.debug.lib	DebugTensorDatum	dump_size_bytes		size of the dump file
python.debug.lib	DebugDumpDir	_load_dumps	dump_root	load debugtensordatum instances from the dump root
python.debug.lib	DebugDumpDir	_dump_file_name_to_datum	dir_name file_name	obtain a debugtensordatum from the directory and file name
python.debug.lib	DebugDumpDir	_create_tensor_watch_maps		create maps from tensor watch keys to datum and to timestamps
python.debug.lib	DebugDumpDir	set_python_graph	python_graph	provide python graph object to the wrapper
python.debug.lib	DebugDumpDir	python_graph		get the python graph
python.debug.lib	DebugDumpDir	core_metadata		metadata about the session run() call from the core runtime
python.debug.lib	DebugDumpDir	t0		absolute timestamp of the first dumped tensor
python.debug.lib	DebugDumpDir	size		total number of dumped tensors in the dump root directory
python.debug.lib	DebugDumpDir	_load_partition_graphs	partition_graphs validate	load and process partition graphs
python.debug.lib	DebugDumpDir	_process_partition_graph_node	node	process a node from the partition graphs
python.debug.lib	DebugDumpDir	_prune_nodes_from_input_and_recipient_maps	nodes_to_prune	prune nodes out of input and recipient maps
python.debug.lib	DebugDumpDir	_prune_non_control_edges_of_debug_ops		prune non-control edges related to debug ops
python.debug.lib	DebugDumpDir	_prune_control_edges_of_debug_ops		prune control edges related to the debug ops
python.debug.lib	DebugDumpDir	_populate_recipient_maps		populate the map from node name to recipient s of its output s
python.debug.lib	DebugDumpDir	_validate_dump_with_graphs		validate the dumped tensor data against the partition graphs
python.debug.lib	DebugDumpDir	_satisfied_at_timestamp	pending timestamp start_i	determine whether pending inputs are satisfied at given timestamp
python.debug.lib	DebugDumpDir	loaded_partition_graphs		test whether partition graphs have been loaded
python.debug.lib	DebugDumpDir	partition_graphs		get the partition graphs
python.debug.lib	DebugDumpDir	run_fetches_info		get a str representation of the fetches used in the session run() call
python.debug.lib	DebugDumpDir	run_feed_keys_info		get a str representation of the feed_dict used in the session run() call
python.debug.lib	DebugDumpDir	nodes		get a list of all nodes from the partition graphs
python.debug.lib	DebugDumpDir	node_attributes	node_name	get the attributes of a node
python.debug.lib	DebugDumpDir	node_inputs	node_name is_control	get the inputs of given node according to partition graphs
python.debug.lib	DebugDumpDir	transitive_inputs	node_name include_control	get the transitive inputs of given node according to partition graphs
python.debug.lib	DebugDumpDir	node_recipients	node_name is_control	get recipient of the given node's output according to partition graphs
python.debug.lib	DebugDumpDir	devices		get the list of devices
python.debug.lib	DebugDumpDir	node_exists	node_name	test if a node exists in the partition graphs
python.debug.lib	DebugDumpDir	node_device	node_name	get the device of a node
python.debug.lib	DebugDumpDir	node_op_type	node_name	get the op type of given node
python.debug.lib	DebugDumpDir	debug_watch_keys	node_name	get all tensor watch keys of given node according to partition graphs
python.debug.lib	DebugDumpDir	watch_key_to_data	debug_watch_key	get all debugtensordatum instances corresponding to a debug watch key
python.debug.lib	DebugDumpDir	find	predicate first_n	find dumped tensor data by a certain predicate
python.debug.lib	DebugDumpDir	get_tensor_file_paths	node_name output_slot debug_op	get the file paths from a debug-dumped tensor
python.debug.lib	DebugDumpDir	get_tensors	node_name output_slot debug_op	get the tensor value from for a debug-dumped tensor
python.debug.lib	DebugDumpDir	get_rel_timestamps	node_name output_slot debug_op	get the relative timestamp from for a debug-dumped tensor
python.debug.lib	DebugDumpDir	get_dump_sizes_bytes	node_name output_slot debug_op	get the sizes of the dump files for a debug-dumped tensor
python.debug.lib	DebugDumpDir	node_traceback	element_name	try to retrieve the python traceback of node's construction
python.debug.examples		maybe_download_data	data_dir	download data sets if necessary
python.framework	AsGraphDefTest	testGraphDefVersion		test that the graphdef version is plumbed through to kernels
python.framework	ImportGraphDefTest	testVersionAppliesToOpConstruction		these tests rely on shape fns in test_ops cc
python.framework		get_seed	op_seed	returns the local seeds an operation should use given an op-specific seed
python.framework		set_random_seed	seed	sets the graph-level random seed
python.framework		_override_helper	clazz_object operator func	overrides string operator on tensors to call func
python.framework		_convert_stack	stack include_func_start_lineno	converts a stack extracted using _extract_stack() to a traceback stack
python.framework		_extract_stack		a lightweight re-implementation of traceback extract_stack
python.framework		_as_graph_element	obj	convert obj to a graph element if possible otherwise return none
python.framework		is_dense_tensor_like	t	experimental returns true if t implements the tensor interface
python.framework		register_dense_tensor_like_type	tensor_type	experimental registers tensor_type as implementing the tensor interface
python.framework	Tensor	__init__	op value_index dtype	creates a new tensor
python.framework	Tensor	op		the operation that produces this tensor as an output
python.framework	Tensor	dtype		the dtype of elements in this tensor
python.framework	Tensor	graph		the graph that contains this tensor
python.framework	Tensor	name		the string name of this tensor
python.framework	Tensor	device		the name of the device on which this tensor will be produced or none
python.framework	Tensor	shape		returns the tensorshape that represents the shape of this tensor
python.framework	Tensor	get_shape		alias of tensor shape
python.framework	Tensor	set_shape	shape	updates the shape of this tensor
python.framework	Tensor	value_index		the index of this tensor in the outputs of its operation
python.framework	Tensor	consumers		returns a list of operations that consume this tensor
python.framework	Tensor	_add_consumer	consumer	add a consumer to this tensor
python.framework	Tensor	_as_node_def_input		return a value to use for the nodedef "input" attribute
python.framework	Tensor	__iter__		dummy method to prevent iteration do not call
python.framework	Tensor	__bool__		dummy method to prevent a tensor from being used as a python bool
python.framework	Tensor	__nonzero__		dummy method to prevent a tensor from being used as a python bool
python.framework	Tensor	eval	feed_dict session	evaluates this tensor in a session
python.framework		convert_to_tensor	value dtype name preferred_dtype	converts the given value to a tensor
python.framework		internal_convert_to_tensor	value dtype name as_ref	converts the given value to an tensor
python.framework		internal_convert_n_to_tensor	values dtype name as_ref	converts values to a list of tensor objects
python.framework		convert_n_to_tensor	values dtype name preferred_dtype	converts values to a list of tensor objects
python.framework		convert_to_tensor_or_indexed_slices	value dtype name	converts the given object to a tensor or an indexedslices
python.framework		internal_convert_to_tensor_or_indexed_slices	value dtype name as_ref	converts the given object to an tensor or an indexedslices
python.framework		internal_convert_n_to_tensor_or_indexed_slices	values dtype name as_ref	converts values to a list of tensor or indexedslices objects
python.framework		convert_n_to_tensor_or_indexed_slices	values dtype name	converts values to a list of output or indexedslices objects
python.framework		register_tensor_conversion_function	base_type conversion_func priority	registers a function for converting objects of base_type to tensor
python.framework	IndexedSlices	__init__	values indices dense_shape	creates an indexedslices
python.framework	IndexedSlices	values		a tensor containing the values of the slices
python.framework	IndexedSlices	indices		a 1-d tensor containing the indices of the slices
python.framework	IndexedSlices	dense_shape		a 1-d tensor containing the shape of the corresponding dense tensor
python.framework	IndexedSlices	name		the name of this indexedslices
python.framework	IndexedSlices	device		the name of the device on which values will be produced or none
python.framework	IndexedSlices	op		the operation that produces values as an output
python.framework	IndexedSlices	dtype		the dtype of elements in this tensor
python.framework	IndexedSlices	graph		the graph that contains the values indices and shape tensors
python.framework		_NodeDef	op_type name device attrs	create a nodedef proto
python.framework	Operation	__init__	node_def g inputs output_types	creates an operation
python.framework	Operation	colocation_groups		returns the list of colocation groups of the op
python.framework	Operation	values		deprecated use outputs
python.framework	Operation	_get_control_flow_context		returns the control flow context of this op
python.framework	Operation	_set_control_flow_context	context	sets the current control flow context of this op
python.framework	Operation	name		the full name of this operation
python.framework	Operation	_id		the unique integer id of this operation
python.framework	Operation	device		the name of the device to which this op has been assigned if any
python.framework	Operation	_set_device	device	set the device of this operation
python.framework	Operation	_add_input	tensor dtype	add a new input to this operation
python.framework	Operation	_update_input	index tensor dtype	update the input to this operation at the given index
python.framework	Operation	_add_control_inputs	ops	add a list of new control inputs to this operation
python.framework	Operation	_add_control_input	op	add a new control input to this operation
python.framework	Operation	outputs		the list of tensor objects representing the outputs of this op
python.framework	Operation	inputs		the list of tensor objects representing the data inputs of this op
python.framework	Operation	control_inputs		the operation objects on which this op has a control dependency
python.framework	Operation	type		the type of the op (e g "matmul")
python.framework	Operation	graph		the graph that contains this operation
python.framework	Operation	node_def		returns a serialized nodedef representation of this operation
python.framework	Operation	op_def		returns the opdef proto that represents the type of this op
python.framework	Operation	traceback		returns the call stack from when this operation was constructed
python.framework	Operation	traceback_with_start_lines		same as traceback but includes start line of function definition
python.framework	Operation	get_attr	name	returns the value of the attr of this op with the given name
python.framework	Operation	run	feed_dict session	runs this operation in a session
python.framework	RegisterGradient	__init__	op_type	creates a new decorator with op_type as the operation type
python.framework	RegisterGradient	__call__	f	registers the function f as gradient function for op_type
python.framework		NotDifferentiable	op_type	specifies that ops of type op_type is not differentiable
python.framework		get_gradient_function	op	returns the function that computes gradients for "op"
python.framework		_set_call_cpp_shape_fn	call_cpp_shape_fn	sets default shape fns from passed common_shapes call_cpp_shape_fn
python.framework	RegisterShape	__init__	op_type	saves the op_type as the operation type
python.framework	RegisterShape	__call__	f	registers "f" as the shape function for "op_type"
python.framework		set_shapes_for_outputs	op	uses the registered shape functions to set the shapes for op's outputs
python.framework	OpStats	__init__	statistic_type value	sets up the initial placeholders for the statistics
python.framework	RegisterStatistics	__init__	op_type statistic_type	saves the op_type as the operation type
python.framework	RegisterStatistics	__call__	f	registers "f" as the statistics function for "op_type"
python.framework		get_stats_for_node_def	graph node statistic_type	looks up the node's statistics function in the registry and calls it
python.framework		_name_from_scope_name	name	returns the name of an op given the name of its scope
python.framework	Graph	__init__		creates a new empty graph
python.framework	Graph	_check_not_finalized		check if the graph is finalized
python.framework	Graph	_add_op	op	adds 'op' to the graph
python.framework	Graph	version		returns a version number that increases as ops are added to the graph
python.framework	Graph	graph_def_versions		the graphdef version information of this graph
python.framework	Graph	seed		the graph-level random seed of this graph
python.framework	Graph	finalized		true if this graph has been finalized
python.framework	Graph	finalize		finalizes this graph making it read-only
python.framework	Graph	_unsafe_unfinalize		opposite of finalize internal interface
python.framework	Graph	_get_control_flow_context		returns the current control flow context
python.framework	Graph	_set_control_flow_context	context	sets the current control flow context
python.framework	Graph	_as_graph_def	from_version add_shapes	returns a serialized graphdef representation of this graph
python.framework	Graph	as_graph_def	from_version add_shapes	returns a serialized graphdef representation of this graph
python.framework	Graph	_is_function	name	tests whether 'name' is registered in this graph's function library
python.framework	Graph	_get_function	name	returns the function definition for 'name'
python.framework	Graph	_add_function	function	adds a function to the graph
python.framework	Graph	building_function		returns true iff this graph represents a function
python.framework	Graph	create_op	op_type inputs dtypes input_types	creates an operation in this graph
python.framework	Graph	as_graph_element	obj allow_tensor allow_operation	returns the object referred to by obj, as an operation or tensor
python.framework	Graph	_as_graph_element_locked	obj allow_tensor allow_operation	see graph as_graph_element() for details
python.framework	Graph	get_operations		return the list of operations in the graph
python.framework	Graph	get_operation_by_name	name	returns the operation with the given name
python.framework	Graph	get_tensor_by_name	name	returns the tensor with the given name
python.framework	Graph	_next_id		id for next operation instance also increments the internal id
python.framework	Graph	as_default		returns a context manager that makes this graph the default graph
python.framework	Graph	add_to_collection	name value	stores value in the collection with the given name
python.framework	Graph	add_to_collections	names value	stores value in the collections given by names
python.framework	Graph	get_collection_ref	name	returns a list of values in the collection with the given name
python.framework	Graph	get_collection	name scope	returns a list of values in the collection with the given name
python.framework	Graph	get_all_collection_keys		returns a list of collections used in this graph
python.framework	Graph	clear_collection	name	clears all values in a collection
python.framework	Graph	_original_op	op	python 'with' handler to help annotate ops with their originator
python.framework	Graph	name_scope	name	returns a context manager that creates hierarchical names for operations
python.framework	Graph	unique_name	name mark_as_used	return a unique operation name for name
python.framework	Graph	get_name_scope		returns the current name scope
python.framework	Graph	colocate_with	op ignore_existing	returns a context manager that specifies an op to colocate with
python.framework	Graph	device	device_name_or_function	returns a context manager that specifies the default device to use
python.framework	Graph	_apply_device_functions	op	applies the current device function stack to the given operation
python.framework	Graph	container	container_name	returns a context manager that specifies the resource container to use
python.framework	Graph	_control_dependencies_for_inputs	input_tensors	for an op that takes input_tensors as inputs compute control inputs
python.framework	Graph	_record_op_seen_by_control_dependencies	op	record that the given op depends on all registered control dependencies
python.framework	Graph	control_dependencies	control_inputs	returns a context manager that specifies control dependencies
python.framework	Graph	_attr_scope	attr_map	experimental a context manager for setting attributes on operators
python.framework	Graph	_kernel_label_map	op_to_kernel_label_map	experimental a context manager for setting kernel labels
python.framework	Graph	gradient_override_map	op_type_map	experimental a context manager for overriding gradient functions
python.framework	Graph	prevent_feeding	tensor	marks the given tensor as unfeedable in this graph
python.framework	Graph	is_feedable	tensor	returns true if and only if tensor is feedable
python.framework	Graph	prevent_fetching	op	marks the given op as unfetchable in this graph
python.framework	Graph	is_fetchable	tensor_or_op	returns true if and only if tensor_or_op is fetchable
python.framework		device	device_name_or_function	wrapper for graph device() using the default graph
python.framework		container	container_name	wrapper for graph container() using the default graph
python.framework		control_dependencies	control_inputs	wrapper for graph control_dependencies() using the default graph
python.framework	_DefaultStack	get_controller	default	a context manager for manipulating a default stack
python.framework		default_session	session	python "with" handler for defining a default session
python.framework		get_default_session		returns the default session for the current thread
python.framework		_eval_using_default_session	tensors feed_dict graph session	uses the default session to evaluate one or more tensors
python.framework		_run_using_default_session	operation feed_dict graph session	uses the default session to run "operation"
python.framework	_DefaultGraphStack	get_default		override that returns a global default if the stack is empty
python.framework		reset_default_graph		clears the default graph stack and resets the global default graph
python.framework		get_default_graph		returns the default graph for the current thread
python.framework		_assert_same_graph	original_item item	fail if the 2 items are from different graphs
python.framework		_get_graph_from_inputs	op_input_list graph	returns the appropriate graph to use for the given inputs
python.framework		add_to_collection	name value	wrapper for graph add_to_collection() using the default graph
python.framework		add_to_collections	names value	wrapper for graph add_to_collections() using the default graph
python.framework		get_collection_ref	key	wrapper for graph get_collection_ref() using the default graph
python.framework		get_collection	key scope	wrapper for graph get_collection() using the default graph
python.framework		get_all_collection_keys		returns a list of collections used in the default graph
python.framework		name_scope	name default_name values	returns a context manager for use when defining a python op
python.framework		strip_name_scope	name export_scope	removes name scope from a name
python.framework		prepend_name_scope	name import_scope	prepends name scope to a name
python.framework		op_scope	values name default_name	deprecated same as name_scope above just different argument order
python.framework		register_proto_function	collection_name proto_type to_proto from_proto	registers to_proto and from_proto functions for collection_name
python.framework		get_collection_proto_type	collection_name	returns the proto_type for collection_name
python.framework		get_to_proto_function	collection_name	returns the to_proto function for collection_name
python.framework		get_from_proto_function	collection_name	returns the from_proto function for collection_name
python.framework		_operation_conversion_error	op dtype name as_ref	produce a nice error if someone converts an operation to a tensor
python.framework		write_graph	graph_or_graph_def logdir name as_text	writes a graph proto to a file
python.framework		_Flatten	l	converts [1 2 [3 4], [5]] to [1 2 3 4 5]
python.framework		_Restructure	l structure	returns the elements of list l structured according to the given structure
python.framework		_MakeShape	v arg_name	convert v into a tensorshapeproto
python.framework		_MakeTensor	v arg_name	ensure v is a tensorproto
python.framework		_MaybeColocateWith	inputs	a context manager for maybe colocating with a list of input tensors
python.framework	OpDefLibrary	add_op	op_def	register an opdef may call apply_op with the name afterwards
python.framework	OpDefLibrary	add_op_list	op_list	register the opdefs from an oplist
python.framework	OpDefLibrary	apply_op	op_type_name name	add a node invoking a registered op to a graph
python.framework		_unknown_shape	op	shape function for use with ops whose output shapes are unknown
python.framework		gpu_device_name		returns the name of a gpu device if available or the empty string
python.framework		assert_ops_in_graph	expected_ops graph	assert all expected operations are found
python.framework		assert_equal_graph_def	actual expected checkpoint_v2	asserts that two graphdefs are mostly the same
python.framework		assert_meta_graph_protos_equal	tester a b	compares metagraphdefs a and b in unit test class tester
python.framework		NHWCToNCHW	input_tensor	converts the input from the nhwc format to nchw
python.framework		NCHWToNHWC	input_tensor	converts the input from the nchw format to nhwc
python.framework	TensorFlowTestCase	get_temp_dir		returns a unique temporary directory for the test to use
python.framework	TensorFlowTestCase	_AssertProtoEquals	a b	asserts that a and b are the same proto
python.framework	TensorFlowTestCase	assertProtoEquals	expected_message_maybe_ascii message	asserts that message is same as parsed expected_message_ascii
python.framework	TensorFlowTestCase	assertStartsWith	actual expected_start msg	assert that actual startswith(expected_start) is true
python.framework	TensorFlowTestCase	test_session	graph config use_gpu force_gpu	returns a tensorflow session for use in executing tests
python.framework	TensorFlowTestCase	checkedThread	target args kwargs	returns a thread wrapper that asserts 'target' completes successfully
python.framework	TensorFlowTestCase	assertNear	f1 f2 err msg	asserts that two floats are near each other
python.framework	TensorFlowTestCase	assertArrayNear	farray1 farray2 err	asserts that two float arrays are near each other
python.framework	TensorFlowTestCase	assertNDArrayNear	ndarray1 ndarray2 err	asserts that two numpy arrays have near values
python.framework	TensorFlowTestCase	assertAllClose	a b rtol atol	asserts that two numpy arrays or dicts of same have near values
python.framework	TensorFlowTestCase	assertAllCloseAccordingToType	a b rtol atol	like assertallclose but also suitable for comparing fp16 arrays
python.framework	TensorFlowTestCase	assertAllEqual	a b	asserts that two numpy arrays have the same values
python.framework	TensorFlowTestCase	assertRaisesWithPredicateMatch	exception_type expected_err_re_or_predicate	returns a context manager to enclose code expected to raise an exception
python.framework	TensorFlowTestCase	assertShapeEqual	np_array tf_tensor	asserts that a numpy ndarray and a tensorflow tensor have the same shape
python.framework	TensorFlowTestCase	assertDeviceEqual	device1 device2	asserts that the two given devices are the same
python.framework		_recursive_apply	tensors apply_fn	helper method to recursively apply a function to structure of tensors
python.framework	_ControlOutputCache	calc_control_outputs	graph	returns the map of control_outputs for a given graph
python.framework	_ControlOutputCache	get_control_outputs	op	return the control outputs for a given op
python.framework		_subscribe_new	tensor side_effects control_cache	helper method that subscribes a single tensor to a list of side_effects
python.framework		_subscribe_extend	tensor side_effects	helper method to extend the list of side_effects for a subscribed tensor
python.framework		_is_subscribed_identity	tensor	checks if the given tensor is an identity op returned by subscribe()
python.framework		_subscribe	tensor side_effects control_cache	helper method that subscribes a single tensor to a list of side_effects
python.framework		subscribe	tensors side_effects	subscribe to a tensor
python.framework		_node_def	from_node_def export_scope unbound_inputs clear_devices	create a nodedef proto with export_scope stripped
python.framework		_read_file	filename	reads a file containing graphdef and returns the protocol buffer
python.framework		ops_used_by_graph_def	graph_def	collect the list of ops used by a graph
python.framework		stripped_op_list_for_graph	graph_def	collect the stripped opdefs for ops used by a graph
python.framework		_get_kind_name	item	returns the kind name in collectiondef
python.framework		_should_include_node	node_or_node_name export_scope	returns true if a node should be included
python.framework		add_collection_def	meta_graph_def key graph export_scope	adds a collection to metagraphdef protocol buffer
python.framework		create_meta_graph_def	meta_info_def graph_def saver_def collection_list	construct and returns a metagraphdef protocol buffer
python.framework		read_meta_graph_file	filename	reads a file containing metagraphdef and returns the protocol buffer
python.framework		import_scoped_meta_graph	meta_graph_or_file clear_devices graph import_scope	recreates a graph saved in a metagraphdef proto
python.framework		export_scoped_meta_graph	filename graph_def graph export_scope	returns metagraphdef proto optionally writes it to filename
python.framework		copy_scoped_meta_graph	from_scope to_scope from_graph to_graph	copies a sub-meta_graph from one scope to another
python.framework		TensorShapeProtoToList	shape	convert a tensorshape to a list
python.framework		_GetDenseDimensions	list_of_lists	returns the inferred dense dimensions of a list of lists
python.framework		make_tensor_proto	values dtype shape verify_shape	create a tensorproto
python.framework		MakeNdarray	tensor	create a numpy ndarray from a tensor
python.framework		ShapeEquals	tensor_proto shape	returns true if "tensor_proto" has the given "shape"
python.framework		constant_value	tensor	returns the constant value of the given tensor if efficiently calculable
python.framework		constant_value_as_shape	tensor	a version of constant_value() that returns a tensorshape
python.framework		is_tensor	x	check whether x is of tensor type
python.framework	DimensionDivTest	testDivSucceeds		without from __future__ import division __div__ should work
python.framework	DeviceSpec	__init__	job replica task device_type	create a new devicespec object
python.framework	DeviceSpec	parse_from_string	spec	parse a devicespec name into its components
python.framework	DeviceSpec	merge_from	dev	merge the properties of "dev" into this devicespec
python.framework	DeviceSpec	to_string		return a string representation of this devicespec
python.framework	DeviceSpec	from_string	spec	construct a devicespec from a string
python.framework		check_valid	spec	check that a device spec is valid
python.framework		canonical_name	device	returns a canonical name for the given devicespec or device name
python.framework		merge_device	spec	returns a device function that merges devices specifications
python.framework		_ParseTensorName	tensor_name	parses a tensor name into an operation name and output index
python.framework		_MaybeDevice	device	applies the given device only if device is not none or empty
python.framework		import_graph_def	graph_def input_map return_elements name	imports the graph from graph_def into the current default graph
python.framework		load_op_library	library_filename	loads a tensorflow plugin containing custom ops and kernels
python.framework		load_file_system_library	library_filename	loads a tensorflow plugin containing file system implementation
python.framework	Registry	__init__	name	creates a new registry
python.framework	Registry	register	candidate name	registers a python object "candidate" for the given "name"
python.framework	Registry	list		lists registered items
python.framework	Registry	lookup	name	looks up "name"
python.framework	SparseTensor	__init__	indices values dense_shape	creates a sparsetensor
python.framework	SparseTensor	get_shape		get the tensorshape representing the shape of the dense tensor
python.framework	SparseTensor	indices		the indices of non-zero values in the represented dense tensor
python.framework	SparseTensor	values		the non-zero values in the represented dense tensor
python.framework	SparseTensor	op		the operation that produces values as an output
python.framework	SparseTensor	dtype		the dtype of elements in this tensor
python.framework	SparseTensor	dense_shape		a 1-d tensor of int64 representing the shape of the dense tensor
python.framework	SparseTensor	graph		the graph that contains the index value and dense_shape tensors
python.framework	SparseTensor	eval	feed_dict session	evaluates this sparse tensor in a session
python.framework		convert_to_tensor_or_sparse_tensor	value dtype name	converts value to a sparsetensor or tensor
python.framework	DType	__init__	type_enum	creates a new datatype
python.framework	DType	_is_ref_dtype		returns true if this dtype represents a reference type
python.framework	DType	_as_ref		returns a reference dtype based on this dtype
python.framework	DType	base_dtype		returns a non-reference dtype based on this dtype
python.framework	DType	real_dtype		returns the dtype correspond to this dtype's real part
python.framework	DType	as_numpy_dtype		returns a numpy dtype based on this dtype
python.framework	DType	as_datatype_enum		returns a types_pb2 datatype enum value based on this dtype
python.framework	DType	is_bool		returns whether this is a boolean data type
python.framework	DType	is_integer		returns whether this is a non-quantized integer type
python.framework	DType	is_floating		returns whether this is a non-quantized real floating point type
python.framework	DType	is_complex		returns whether this is a complex floating point type
python.framework	DType	is_quantized		returns whether this is a quantized data type
python.framework	DType	is_unsigned		returns whether this type is unsigned
python.framework	DType	min		returns the minimum representable value in this data type
python.framework	DType	max		returns the maximum representable value in this data type
python.framework	DType	limits	clip_negative	return intensity limits i e min max tuple of the dtype
python.framework	DType	is_compatible_with	other	returns true if the other dtype will be converted to this dtype
python.framework	DType	__eq__	other	returns true iff this dtype refers to the same type as other
python.framework	DType	__ne__	other	returns true iff self != other
python.framework	DType	name		returns the string name for this dtype
python.framework		as_dtype	type_value	converts the given type_value to a dtype
python.framework	DeviceFunctionsTest	testRemoveIdentityChains		check that chains of identity nodes are correctly pruned
python.framework		scalar_shape	unused_op	shape function for ops that output a scalar value
python.framework		unchanged_shape	op	shape function for ops that output an tensor like their first input
python.framework		unchanged_shape_with_rank	rank	returns a shape function for ops that constrain the rank of their input
python.framework		unchanged_shape_with_rank_at_least	rank	returns a shape function for ops that constrain the rank of their input
python.framework		unchanged_shape_with_rank_at_most	rank	returns a shape function for ops that constrain the rank of their input
python.framework		matmul_shape	op	shape function for a matmul op
python.framework		get_conv_output_size	input_size filter_size strides padding_type	returns the spatial size of a n-d convolution/pooling output
python.framework		get2d_conv_output_size	input_height input_width filter_height filter_width	returns the number of rows and columns in a convolution/pooling output
python.framework		conv2d_shape	op	shape function for a conv2d op
python.framework		depthwise_conv2d_native_shape	op	shape function for a depthwiseconv2d op
python.framework		separable_conv2d_shape	op	shape function for a separableconv2d op
python.framework		avg_pool_shape	op	shape function for an avgpool op
python.framework		max_pool_shape	op	shape function for a maxpool op
python.framework		no_outputs	unused_op	shape function for use with ops that have no outputs
python.framework		unknown_shape	op	shape function for use with ops whose output shapes are unknown
python.framework		broadcast_shape	shape_x shape_y	returns the broadcasted shape between shape_x and shape_y
python.framework		call_cpp_shape_fn	op input_tensors_needed input_tensors_as_shapes_needed debug_python_shape_fn	a shape function that delegates to the registered c++ shape function
python.framework		_call_cpp_shape_fn_impl	op input_tensors_needed input_tensors_as_shapes_needed debug_python_shape_fn	core implementaton of call_cpp_shape_fn
python.framework	Dimension	__init__	value	creates a new dimension with the given value
python.framework	Dimension	__eq__	other	returns true if other has the same known value as this dimension
python.framework	Dimension	__ne__	other	returns true if other has a different known value from self
python.framework	Dimension	value		the value of this dimension or none if it is unknown
python.framework	Dimension	is_compatible_with	other	returns true if other is compatible with this dimension
python.framework	Dimension	assert_is_compatible_with	other	raises an exception if other is not compatible with this dimension
python.framework	Dimension	merge_with	other	returns a dimension that combines the information in self and other
python.framework	Dimension	__add__	other	returns the sum of self and other
python.framework	Dimension	__sub__	other	returns the subtraction of other from self
python.framework	Dimension	__mul__	other	returns the product of self and other
python.framework	Dimension	__floordiv__	other	returns the quotient of self and other rounded down
python.framework	Dimension	__div__	other	deprecated use __floordiv__ via x // y instead
python.framework	Dimension	__mod__	other	returns self modulo other
python.framework	Dimension	__lt__	other	returns true if self is known to be less than other
python.framework	Dimension	__le__	other	returns true if self is known to be less than or equal to other
python.framework	Dimension	__gt__	other	returns true if self is known to be greater than other
python.framework	Dimension	__ge__	other	returns true if self is known to be greater than or equal to other
python.framework		as_dimension	value	converts the given value to a dimension
python.framework	TensorShape	__init__	dims	creates a new tensorshape with the given dimensions
python.framework	TensorShape	dims		returns a list of dimensions or none if the shape is unspecified
python.framework	TensorShape	ndims		returns the rank of this shape or none if it is unspecified
python.framework	TensorShape	__len__		returns the rank of this shape or raises valueerror if unspecified
python.framework	TensorShape	__bool__		returns true if this shape contains non-zero information
python.framework	TensorShape	__iter__		returns self dims if the rank is known otherwise raises valueerror
python.framework	TensorShape	__getitem__	key	returns the value of a dimension or a shape depending on the key
python.framework	TensorShape	num_elements		returns the total number of elements or none for incomplete shapes
python.framework	TensorShape	merge_with	other	returns a tensorshape combining the information in self and other
python.framework	TensorShape	concatenate	other	returns the concatenation of the dimension in self and other
python.framework	TensorShape	assert_same_rank	other	raises an exception if self and other do not have compatible ranks
python.framework	TensorShape	assert_has_rank	rank	raises an exception if self is not compatible with the given rank
python.framework	TensorShape	with_rank	rank	returns a shape based on self with the given rank
python.framework	TensorShape	with_rank_at_least	rank	returns a shape based on self with at least the given rank
python.framework	TensorShape	with_rank_at_most	rank	returns a shape based on self with at most the given rank
python.framework	TensorShape	is_compatible_with	other	returns true iff self is compatible with other
python.framework	TensorShape	assert_is_compatible_with	other	raises exception if self and other do not represent the same shape
python.framework	TensorShape	is_fully_defined		returns true iff self is fully defined in every dimension
python.framework	TensorShape	assert_is_fully_defined		raises an exception if self is not fully defined in every dimension
python.framework	TensorShape	as_list		returns a list of integers or none for each dimension
python.framework	TensorShape	as_proto		returns this shape as a tensorshapeproto
python.framework	TensorShape	__eq__	other	returns true if self is equivalent to other
python.framework	TensorShape	__ne__	other	returns true if self is known to be different from other
python.framework		as_shape	shape	converts the given object to a tensorshape
python.framework		unknown_shape	ndims	returns an unknown tensorshape optionally with a known rank
python.framework		scalar		returns a shape representing a scalar
python.framework		vector	length	returns a shape representing a vector
python.framework		matrix	rows cols	returns a shape representing a matrix
python.framework		_is_variable_op	op	returns true if 'op' refers to a variable node
python.framework		must_run_on_cpu	node pin_variables_on_cpu	returns true if the given node_def must run on cpu otherwise false
python.framework		extract_sub_graph	graph_def dest_nodes	extract the subgraph that can reach any of the nodes in 'dest_nodes'
python.framework		tensor_shape_from_node_def_name	graph input_name	convenience function to get a shape from a nodedef's input string
python.framework		convert_variables_to_constants	sess input_graph_def output_node_names variable_names_whitelist	replaces all the variables in a graph with constants of the same values
python.framework		remove_training_nodes	input_graph	prunes out nodes that aren't needed for inference
python.framework	SubscribeTest	_ExpectSubscribedIdentities	container	convenience function to test a container of subscribed identities
python.framework	SubscribeTest	testSupportedTypes		confirm that supported types are correctly detected and handled
python.framework	SubscribeTest	testCaching		confirm caching of control output is recalculated between calls
python.framework	SubscribeTest	testIsSubscribedIdentity		confirm subscribed identity ops are correctly detected
python.framework	SubscribeTest	testSubscribeExtend		confirm side effect are correctly added for different input types
python.framework	SubscribeTest	testSubscribeVariable		confirm that variables can be subscribed
python.framework	SubscribeTest	testResourceType		confirm that subscribe correctly handles tensors with 'resource' type
python.framework		constant	value dtype shape name	creates a constant tensor
python.framework		register_op_list	op_list	register all the ops in an op_def_pb2 oplist
python.framework		get_registered_ops		returns a dictionary mapping names to opdefs
python.framework	OpError	__init__	node_def op message error_code	creates a new operror indicating that a particular op failed
python.framework	OpError	message		the error message that describes the error
python.framework	OpError	op		the operation that failed if known
python.framework	OpError	error_code		the integer error code that describes the error
python.framework	OpError	node_def		the nodedef proto representing the op that failed
python.framework	CancelledError	__init__	node_def op message	creates a cancellederror
python.framework	UnknownError	__init__	node_def op message error_code	creates an unknownerror
python.framework	InvalidArgumentError	__init__	node_def op message	creates an invalidargumenterror
python.framework	DeadlineExceededError	__init__	node_def op message	creates a deadlineexceedederror
python.framework	NotFoundError	__init__	node_def op message	creates a notfounderror
python.framework	AlreadyExistsError	__init__	node_def op message	creates an alreadyexistserror
python.framework	PermissionDeniedError	__init__	node_def op message	creates a permissiondeniederror
python.framework	UnauthenticatedError	__init__	node_def op message	creates an unauthenticatederror
python.framework	ResourceExhaustedError	__init__	node_def op message	creates a resourceexhaustederror
python.framework	FailedPreconditionError	__init__	node_def op message	creates a failedpreconditionerror
python.framework	AbortedError	__init__	node_def op message	creates an abortederror
python.framework	OutOfRangeError	__init__	node_def op message	creates an outofrangeerror
python.framework	UnimplementedError	__init__	node_def op message	creates an unimplementederror
python.framework	InternalError	__init__	node_def op message	creates an internalerror
python.framework	UnavailableError	__init__	node_def op message	creates an unavailableerror
python.framework	DataLossError	__init__	node_def op message	creates a datalosserror
python.framework		_tensor_to_argdef	t name used_names	convert tensor t to an argdef with a specified name or a unique name
python.framework		_create_input_dict	function_graph func_arg_placeholders	create a mapping from graph tensor names to function tensor names
python.framework		_add_op_node	op func input_dict	converts an op to a function def node and add it to func
python.framework		_graph_to_function_def	graph inputs outputs out_names	returns graph as a functiondef protocol buffer
python.framework		_parse_kwargs_as_attrs	func_name	parses **kwargs into a node's attributes
python.framework		_call	sig	adds a node calling a function
python.framework	_FuncGraph	getvar	getter name shape dtype	a custom variable getter
python.framework		get_extra_vars		returns the captured variables by the function
python.framework		get_extra_inputs		returns the captured input tensors by the function
python.framework		get_extra_args		returns the corresponding function arguments for the captured inputs
python.framework	_DefinedFunction	definition		function definition proto
python.framework	_DefinedFunction	set_grad_func	grad_func	specifies the gradient function of this function
python.framework	_DefinedFunction	grad_func_name		its gradient function's name
python.framework	_DefinedFunction	python_grad_func		python gradient function callable
python.framework	_DefinedFunction	declared_input_types		returns the list of data types of explicit declared inputs
python.framework	_DefinedFunction	captured_inputs		returns the list of implicitly captured inputs
python.framework	_DefinedFunction	_create_definition_if_needed		creates the function definition if it's not created yet
python.framework	_DefinedFunction	_create_hash_str	input_arg output_arg node_def	creates an 8-character string unique to this input
python.framework	_DefinedFunction	add_to_graph	g	adds this function into the graph g
python.framework		_from_definition	fdef grad_func	creates a _definedfunction initialized from a functiondef proto
python.framework		_from_library	lib	creates _definedfunctions initialized from a functiondeflibrary proto
python.framework	_OverloadedFunction	instantiate	input_types	instantiate this function given input argument types
python.framework	Defun	__init__		create a defun decorator
python.framework	Declare	__init__	func_name inputs outputs	creates a declare object
python.platform		_global_report_benchmark	name iters cpu_time wall_time	method for recording a benchmark directly
python.platform	Benchmark	_get_name	overwrite_name	returns full name of class and method calling report_benchmark
python.platform	Benchmark	report_benchmark	iters cpu_time wall_time throughput	report a benchmark
python.platform	TensorFlowBenchmark	run_op_benchmark	sess op_or_tensor feed_dict burn_iters	run an op or tensor in the given session report the results
python.platform		_run_benchmarks	regex	run benchmarks that match regex regex
python.platform		benchmarks_main	true_main argv	run benchmarks as declared in argv
python.platform		main	argv	runs all unit tests
python.platform		get_temp_dir		returns a temporary directory for use during tests
python.platform		test_src_dir_path	relative_path	creates an absolute test srcdir path given a relative path
python.platform		is_built_with_cuda		returns whether tensorflow was built with cuda gpu support
python.platform		is_gpu_available	cuda_only	returns whether tensorflow can access a gpu
python.platform		run	main argv	runs the program with an optional 'main' function and 'argv' list
python.platform		get_include		get the directory containing the tensorflow c++ header files
python.platform		get_lib		get the directory containing the tensorflow framework library
python.platform		_GetNextLogCountPerToken	token	wrapper for _log_counter_per_token
python.platform		log_every_n	level msg n	log 'msg % args' at level 'level' once per 'n' times
python.platform		log_first_n	level msg n	log 'msg % args' at level 'level' only first 'n' times
python.platform		log_if	level msg condition	log 'msg % args' at level 'level' only if condition is fulfilled
python.platform		_GetFileAndLine		returns filename linenumber for the stack frame
python.platform		google2_log_prefix	level timestamp file_and_line	assemble a logline prefix using the google2 format
python.platform		get_verbosity		return how much logging output will be produced
python.platform		set_verbosity	v	sets the threshold for what messages will be logged
python.platform		_get_thread_id		get id of current thread suitable for logging as an unsigned quantity
python.platform		g_main	argv	delegate to unittest main after redefining testloader
python.platform		GetTempDir		return a temporary directory for tests to use
python.platform		test_src_dir_path	relative_path	creates an absolute test srcdir path given a relative path
python.platform	StubOutForTesting	__del__		do not rely on the destructor to undo your stubs
python.platform	StubOutForTesting	CleanUp		undoes all smartset() & set() calls restoring original definitions
python.platform	StubOutForTesting	SmartSet	obj attr_name new_attr	replace obj attr_name with new_attr
python.platform	StubOutForTesting	SmartUnsetAll		reverses smartset() calls restoring things to original definitions
python.platform	StubOutForTesting	Set	parent child_name new_child	in parent replace child_name's old definition with new_child
python.platform	StubOutForTesting	UnsetAll		reverses set() calls restoring things to their original definitions
python.platform		load_resource	path	load the resource at given path where path is relative to tensorflow/
python.platform		get_data_files_path		get a direct path to the data files colocated with the script
python.platform		get_root_dir_with_all_resources		get a root directory containing all the data attributes in the build rule
python.platform		get_path_to_datafile	path	get the path to the specified file in the data dependencies
python.platform		readahead_file_path	path readahead	readahead files not implemented simply returns given path
python.platform	_FlagValues	__getattr__	name	retrieves the 'value' attribute of the flag --name
python.platform	_FlagValues	__setattr__	name value	sets the 'value' attribute of the flag --name
python.platform		_define_helper	flag_name default_value docstring flagtype	registers 'flag_name' with 'default_value' and 'docstring'
python.platform		DEFINE_string	flag_name default_value docstring	defines a flag of type 'string'
python.platform		DEFINE_integer	flag_name default_value docstring	defines a flag of type 'int'
python.platform		DEFINE_boolean	flag_name default_value docstring	defines a flag of type 'boolean'
python.platform		DEFINE_float	flag_name default_value docstring	defines a flag of type 'float'
python.grappler	PyWrapOptimizeGraphTest	testBasic		make sure arguments can be passed correctly
python.grappler		OptimizeGraph	rewriter_config metagraph graph_id	optimize the provided metagraph
python.feature_column		make_input_layer	features feature_columns weight_collections trainable	returns a dense tensor as input layer based on given feature_columns
python.feature_column		make_linear_model	features feature_columns units sparse_combiner	returns a linear prediction tensor based on given feature_columns
python.feature_column		numeric_column	key shape default_value dtype	represents real valued or numerical features
python.feature_column		bucketized_column	source_column boundaries	represents discretized dense input
python.feature_column		categorical_column_with_hash_bucket	key hash_bucket_size dtype	represents sparse feature where ids are set by hashing
python.feature_column		categorical_column_with_vocabulary_file	key vocabulary_file vocabulary_size num_oov_buckets	a _categoricalcolumn with a vocabulary file
python.feature_column		categorical_column_with_vocabulary_list	key vocabulary_list dtype default_value	a _categoricalcolumn with in-memory vocabulary
python.feature_column	_FeatureColumn	name		returns string used for variable_scope and naming
python.feature_column	_FeatureColumn	_transform_feature	inputs	returns transformed tensor, uses inputs to access input tensors
python.feature_column	_FeatureColumn	_parse_example_config		returns a tf example parsing spec as dict
python.feature_column	_DenseColumn	_variable_shape		returns a tensorshape of variable compatible with _get_dense_tensor
python.feature_column	_DenseColumn	_get_dense_tensor	inputs weight_collections trainable	returns a tensor
python.feature_column		_create_dense_column_weighted_sum	column builder units weight_collections	create a weighted sum of a dense column for make_linear_model
python.feature_column	_CategoricalColumn	_num_buckets		returns number of buckets in this sparse feature
python.feature_column	_CategoricalColumn	_get_sparse_tensors	inputs weight_collections trainable	returns an idweightpair
python.feature_column		_create_categorical_column_weighted_sum	column builder units sparse_combiner	create a weighted sum of a categorical column for make_linear_model
python.feature_column	_LazyBuilder	__init__	features	creates a _lazybuilder
python.feature_column	_LazyBuilder	get	key	returns a tensor for the given key
python.feature_column		_shape_offsets	shape	returns moving offset for each dimension given shape
python.feature_column		_to_sparse_input	input_tensor ignore_value	converts a tensor to a sparsetensor, dropping ignore_value cells
python.feature_column		_create_tuple	shape value	returns a tuple with given shape and filled with value
python.feature_column		_check_shape	shape key	returns shape if it's valid raises error otherwise
python.feature_column		_is_shape_and_default_value_compatible	default_value shape	verifies compatibility of shape and default_value
python.feature_column		_check_default_value	shape default_value dtype key	returns default value as tuple if it's valid otherwise raises errors
python.feature_column	_HashedCategoricalColumn	_num_buckets		returns number of buckets in this sparse feature
python.feature_column	_VocabularyFileCategoricalColumn	_num_buckets		returns number of buckets in this sparse feature
python.feature_column	_VocabularyListCategoricalColumn	_num_buckets		returns number of buckets in this sparse feature
python.feature_column		_safe_embedding_lookup_sparse	embedding_weights sparse_ids sparse_weights combiner	lookup embedding results accounting for invalid ids and empty features
python.feature_column		_prune_invalid_ids	sparse_ids sparse_weights	prune invalid ids (< 0) from the input ids and weights
python.feature_column	LookupInterface	__init__	key_dtype value_dtype name	construct a lookup table interface
python.feature_column	LookupInterface	key_dtype		the table key dtype
python.feature_column	LookupInterface	value_dtype		the table value dtype
python.feature_column	LookupInterface	name		the name of the table
python.feature_column	LookupInterface	init		the table initialization op
python.feature_column	LookupInterface	size	name	compute the number of elements in this table
python.feature_column	LookupInterface	lookup	keys name	looks up keys in a table outputs the corresponding values
python.feature_column	LookupInterface	check_table_dtypes	key_dtype value_dtype	check that the given key_dtype and value_dtype matches the table dtypes
python.feature_column	InitializableLookupTableBase	__init__	table_ref default_value initializer	construct a table object from a table reference
python.feature_column	InitializableLookupTableBase	table_ref		get the underlying table reference
python.feature_column	InitializableLookupTableBase	default_value		the default value of the table
python.feature_column	InitializableLookupTableBase	init		the table initialization op
python.feature_column	InitializableLookupTableBase	size	name	compute the number of elements in this table
python.feature_column	InitializableLookupTableBase	lookup	keys name	looks up keys in a table outputs the corresponding values
python.feature_column	HashTable	__init__	initializer default_value shared_name name	creates a non-initialized hashtable object
python.feature_column	TableInitializerBase	__init__	key_dtype value_dtype	construct a table initializer object
python.feature_column	TableInitializerBase	key_dtype		the expected table key dtype
python.feature_column	TableInitializerBase	value_dtype		the expected table value dtype
python.feature_column	TableInitializerBase	initialize	table	returns the table initialization op
python.feature_column	KeyValueTensorInitializer	__init__	keys values key_dtype value_dtype	constructs a table initializer object based on keys and values tensors
python.feature_column	KeyValueTensorInitializer	initialize	table	initializes the given table with keys and values tensors
python.feature_column	TextFileInitializer	__init__	filename key_dtype key_index value_dtype	constructs a table initializer object to populate from a text file
python.feature_column	TextFileInitializer	initialize	table	initializes the table from a text file
python.feature_column	TextFileStringTableInitializer	__init__	filename key_column_index value_column_index vocab_size	constructs an initializer for an id-to-string table from a text file
python.feature_column	TextFileIdTableInitializer	__init__	filename key_column_index value_column_index vocab_size	constructs an initializer for an string-to-id table from a text file
python.feature_column	IdTableWithHashBuckets	__init__	table num_oov_buckets hasher_spec name	construct a idtablewithhashbuckets object
python.feature_column	IdTableWithHashBuckets	init		the table initialization op
python.feature_column	IdTableWithHashBuckets	size	name	compute the number of elements in this table
python.feature_column	IdTableWithHashBuckets	_get_string_to_hash_bucket_fn	hasher_spec	returns the string_to_hash_bucket op to use based on hasher_spec
python.feature_column	IdTableWithHashBuckets	lookup	keys name	looks up keys in the table outputs the corresponding values
python.feature_column		index_table_from_file	vocabulary_file num_oov_buckets vocab_size default_value	returns a lookup table that converts a string tensor into int64 ids
python.feature_column		index_table_from_tensor	mapping num_oov_buckets default_value hasher_spec	returns a lookup table that converts a string tensor into int64 ids
python.feature_column		string_to_index	tensor mapping default_value name	maps tensor of strings into int64 indices based on mapping
python.feature_column		index_to_string_table_from_file	vocabulary_file vocab_size default_value name	returns a lookup table that maps a tensor of indices into strings
python.feature_column		index_to_string_table_from_tensor	mapping default_value name	returns a lookup table that maps a tensor of indices into strings
python.feature_column		index_to_string	tensor mapping default_value name	maps tensor of indices into string values based on mapping
python.feature_column	MutableHashTable	__init__	key_dtype value_dtype default_value shared_name	creates an empty mutablehashtable object
python.feature_column	MutableHashTable	size	name	compute the number of elements in this table
python.feature_column	MutableHashTable	lookup	keys name	looks up keys in a table outputs the corresponding values
python.feature_column	MutableHashTable	insert	keys values name	associates keys with values
python.feature_column	MutableHashTable	export	name	returns tensors of all keys and values in the table
python.feature_column	MutableDenseHashTable	__init__	key_dtype value_dtype default_value empty_key	creates an empty mutabledensehashtable object
python.feature_column	MutableDenseHashTable	size	name	compute the number of elements in this table
python.feature_column	MutableDenseHashTable	lookup	keys name	looks up keys in a table outputs the corresponding values
python.feature_column	MutableDenseHashTable	insert	keys values name	associates keys with values
python.feature_column	MutableDenseHashTable	export	name	returns tensors of all keys and values in the table
python.feature_column	BucketizedColumnTest	test_get_dense_tensor_one_input_value		tests _get_dense_tensor() for input with shape=[1]
python.feature_column	BucketizedColumnTest	test_get_dense_tensor_two_input_values		tests _get_dense_tensor() for input with shape=[2]
python.feature_column	BucketizedColumnTest	test_get_sparse_tensors_one_input_value		tests _get_sparse_tensors() for input with shape=[1]
python.feature_column	BucketizedColumnTest	test_get_sparse_tensors_two_input_values		tests _get_sparse_tensors() for input with shape=[2]
python.feature_column	BucketizedColumnTest	test_make_linear_model_one_input_value		tests make_linear_model() for input with shape=[1]
python.feature_column	BucketizedColumnTest	test_make_linear_model_two_input_values		tests make_linear_model() for input with shape=[2]
python.feature_column	HashedCategoricalColumnTest	test_deep_copy		tests deepcopy of categorical_column_with_hash_bucket
python.feature_column	MakeLinearModelTest	test_dense_and_sparse_column		when the column is both dense and sparse uses sparse tensors
python.feature_column	VocabularyFileCategoricalColumnTest	test_deep_copy		tests deepcopy of categorical_column_with_hash_bucket
python.feature_column	VocabularyListCategoricalColumnTest	test_deep_copy		tests deepcopy of categorical_column_with_hash_bucket
python.client	SessionBenchmark	_benchmarkFeed	name target size iters	runs a microbenchmark to measure the cost of feeding a tensor
python.client	SessionBenchmark	_benchmarkFetch	name target size iters	runs a microbenchmark to measure the cost of fetching a tensor
python.client	SessionBenchmark	_benchmarkFetchPrebuilt	name target size iters	runs a microbenchmark to measure the cost of fetching a tensor
python.client	SessionBenchmark	_benchmarkRunOp	name target iters	runs a microbenchmark to measure the cost of running an op
python.client	SessionBenchmark	_benchmarkRunOpPrebuilt	name target iters	runs a microbenchmark to measure the cost of running an op
python.client	SessionInterface	graph		the underlying tensorflow graph to be used in building operations
python.client	SessionInterface	sess_str		the tensorflow process to which this session will connect
python.client	SessionInterface	run	fetches feed_dict options run_metadata	runs operations in the session see basesession run() for details
python.client	SessionInterface	partial_run_setup	fetches feeds	sets up the feeds and fetches for partial runs in the session
python.client	SessionInterface	partial_run	handle fetches feed_dict	continues the execution with additional feeds and fetches
python.client		register_session_run_conversion_functions	tensor_type fetch_function feed_function feed_function_for_partial_run	register fetch and feed conversion functions for tf session run()
python.client	_FetchMapper	unique_fetches		return the list of unique tensors or ops needed by this fetch mapper
python.client	_FetchMapper	build_results	values	build results that match the original shape of the fetch
python.client	_FetchMapper	for_fetch	fetch	creates fetch mapper that handles the structure of fetch
python.client	_ElementFetchMapper	__init__	fetches contraction_fn	creates an _elementfetchmapper
python.client		_uniquify_fetches	fetch_mappers	uniquifies fetches from a list of fetch_mappers
python.client	_ListFetchMapper	__init__	fetches	creates a _listfetchmapper
python.client	_DictFetchMapper	__init__	fetches	creates a _dictfetchmapper
python.client	_FetchHandler	__init__	graph fetches feeds feed_handles	creates a fetch handler
python.client	_FetchHandler	fetches		return the unique names of tensors to fetch
python.client	_FetchHandler	targets		return the unique names of ops to run
python.client	_FetchHandler	build_results	session tensor_values	build results matching the original fetch shape
python.client	BaseSession	__init__	target graph config	constructs a new tensorflow session
python.client	BaseSession	close		closes this session
python.client	BaseSession	graph		the graph that was launched in this session
python.client	BaseSession	graph_def		a serializable version of the underlying tensorflow graph
python.client	BaseSession	as_default		returns a context manager that makes this object the default session
python.client	BaseSession	run	fetches feed_dict options run_metadata	runs operations and evaluates tensors in fetches
python.client	BaseSession	partial_run	handle fetches feed_dict	continues the execution with more feeds and fetches
python.client	BaseSession	partial_run_setup	fetches feeds	sets up a graph with feeds and fetches for partial run
python.client	BaseSession	_run	handle fetches feed_dict options	perform either run or partial_run depending the presence of handle
python.client	BaseSession	make_callable	fetches feed_list	returns a python callable that runs a particular step
python.client	BaseSession	_do_run	handle target_list fetch_list feed_dict	runs a step based on the given fetches and feeds
python.client	Session	__init__	target graph config	creates a new tensorflow session
python.client	Session	reset	target containers config	resets resource containers on target, and close all connected sessions
python.client	InteractiveSession	__init__	target graph config	creates a new interactive tensorflow session
python.client	InteractiveSession	close		closes an interactivesession
python.client		list_local_devices		list the available devices available in the local process
python.client	TimelineTest	testTimelineWithRPCs		tests that timeline can handle rpc tracing
python.client	SessionTest	testClusterSpecPropagationThreeServers2Graphs		boots 3 servers creates 2 sessions ensures appropriate operations
python.client	SessionTest	testClusterSpecPropagationThreeServers		boots 3 servers creates 2 sessions ensures appropriate operations
python.client	SessionTest	testClusterSpecPropagationThreeServersOneCluster		boots 3 servers ensures appropriate communication across workers
python.client	SessionTest	testClusterSpecPropagationPartialRun		test successful partial run with clusterspec propagation
python.client	_ChromeTraceFormatter	__init__	show_memory	constructs a new chrome trace formatter
python.client	_ChromeTraceFormatter	_create_event	ph category name pid	creates a new chrome trace event
python.client	_ChromeTraceFormatter	emit_pid	name pid	adds a process metadata event to the trace
python.client	_ChromeTraceFormatter	emit_tid	name pid tid	adds a thread metadata event to the trace
python.client	_ChromeTraceFormatter	emit_region	timestamp duration pid tid	adds a region event to the trace
python.client	_ChromeTraceFormatter	emit_obj_create	category name timestamp pid	adds an object creation event to the trace
python.client	_ChromeTraceFormatter	emit_obj_delete	category name timestamp pid	adds an object deletion event to the trace
python.client	_ChromeTraceFormatter	emit_obj_snapshot	category name timestamp pid	adds an object snapshot event to the trace
python.client	_ChromeTraceFormatter	emit_flow_start	name timestamp pid tid	adds a flow start event to the trace
python.client	_ChromeTraceFormatter	emit_flow_end	name timestamp pid tid	adds a flow end event to the trace
python.client	_ChromeTraceFormatter	emit_counter	category name pid timestamp	emits a record for a single counter
python.client	_ChromeTraceFormatter	emit_counters	category name pid timestamp	emits a counter record for the dictionary 'counters'
python.client	_ChromeTraceFormatter	format_to_string	pretty	formats the chrome trace to a string
python.client	_TensorTracker	__init__	name object_id timestamp pid	creates an object to track tensor references
python.client	_TensorTracker	name		name of this tensor
python.client	_TensorTracker	pid		id of the process which created this tensor an integer
python.client	_TensorTracker	create_time		timestamp when this tensor was created long integer
python.client	_TensorTracker	object_id		returns the object identifier of this tensor integer
python.client	_TensorTracker	num_bytes		size of this tensor in bytes long integer
python.client	_TensorTracker	allocator		name of the allocator used to create this tensor string
python.client	_TensorTracker	last_unref		last unreference timestamp of this tensor long integer
python.client	_TensorTracker	add_ref	timestamp	adds a reference to this tensor with the specified timestamp
python.client	_TensorTracker	add_unref	timestamp	adds an unref to this tensor with the specified timestamp
python.client	Timeline	__init__	step_stats graph	constructs a new timeline
python.client	Timeline	_alloc_pid		allocate a process id
python.client	Timeline	_alloc_flow_id		allocate a flow id
python.client	Timeline	_parse_op_label	label	parses the fields in a node timeline label
python.client	Timeline	_assign_lanes		assigns non-overlapping lanes for the activities on each device
python.client	Timeline	_emit_op	nodestats pid is_gputrace	generates a chrome trace event to show op execution
python.client	Timeline	_emit_tensor_snapshot	tensor timestamp pid tid	generate chrome trace snapshot event for a computed tensor
python.client	Timeline	_is_gputrace_device	device_name	returns true if this device is part of the gputracer logging
python.client	Timeline	_allocate_pids		allocate fake process ids for each device in the stepstats
python.client	Timeline	_analyze_tensors	show_memory	analyze tensor references to track dataflow
python.client	Timeline	_show_compute	show_dataflow	visualize the computation activity
python.client	Timeline	_show_memory_counters		produce a counter series for each memory allocator
python.client	Timeline	generate_chrome_trace_format	show_dataflow show_memory	produces a trace in chrome trace format
python.ops	Variable	__init__	initial_value trainable collections validate_shape	creates a new variable with value initial_value
python.ops	Variable	_init_from_args	initial_value trainable collections validate_shape	creates a new variable from arguments
python.ops	Variable	_init_from_proto	variable_def import_scope	recreates the variable object from a variabledef protocol buffer
python.ops	Variable	_as_graph_element		conversion function for graph as_graph_element()
python.ops	Variable	_AsTensor		converts this variable to a tensor
python.ops	Variable	__iter__		dummy method to prevent iteration do not call
python.ops	Variable	value		returns the last snapshot of this variable
python.ops	Variable	read_value		returns the value of this variable read in the current context
python.ops	Variable	_ref		returns a reference to this variable
python.ops	Variable	set_shape	shape	overrides the shape for this variable
python.ops	Variable	eval	session	in a session computes and returns the value of this variable
python.ops	Variable	initialized_value		returns the value of the initialized variable
python.ops	Variable	initial_value		returns the tensor used as the initial value for the variable
python.ops	Variable	assign	value use_locking	assigns a new value to the variable
python.ops	Variable	assign_add	delta use_locking	adds a value to this variable
python.ops	Variable	assign_sub	delta use_locking	subtracts a value from this variable
python.ops	Variable	scatter_sub	sparse_delta use_locking	subtracts indexedslices from this variable
python.ops	Variable	count_up_to	limit	increments this variable until it reaches limit
python.ops	Variable	load	value session	load new value into this variable writes new value to variable's memory
python.ops	Variable	_TensorConversionFunction	v dtype name as_ref	utility function for converting a variable to a tensor
python.ops	Variable	_OverloadAllOperators		register overloads for all operators
python.ops	Variable	_OverloadOperator	operator	defer an operator overload to ops tensor
python.ops	Variable	name		the name of this variable
python.ops	Variable	initializer		the initializer operation for this variable
python.ops	Variable	device		the device of this variable
python.ops	Variable	dtype		the dtype of this variable
python.ops	Variable	op		the operation of this variable
python.ops	Variable	graph		the graph of this variable
python.ops	Variable	shape		the tensorshape of this variable
python.ops	Variable	get_shape		alias of variable shape
python.ops	Variable	to_proto	export_scope	converts a variable to a variabledef protocol buffer
python.ops	Variable	from_proto	variable_def import_scope	returns a variable object created from variable_def
python.ops	Variable	_set_save_slice_info	save_slice_info	sets the slice info for this variable
python.ops	PartitionedVariable	__init__	name shape dtype variable_list	creates a new partitioned variable wrapper
python.ops	PartitionedVariable	__iter__		return an iterable for accessing the underlying partition variables
python.ops	PartitionedVariable	_concat		returns the overall concatenated value as a tensor
python.ops	PartitionedVariable	as_tensor		returns the overall concatenated value as a tensor
python.ops		global_variables		returns global variables
python.ops		all_variables		see tf global_variables
python.ops		_all_saveable_objects		returns all variables and saveableobjects that must be checkpointed
python.ops		local_variables		returns local variables
python.ops		model_variables		returns all variables in the model_variables collection
python.ops		trainable_variables		returns all variables created with trainable=true
python.ops		moving_average_variables		returns all variables that maintain their moving averages
python.ops		variables_initializer	var_list name	returns an op that initializes a list of variables
python.ops		initialize_variables	var_list name	see tf variables_initializer
python.ops		global_variables_initializer		returns an op that initializes global variables
python.ops		initialize_all_variables		see tf global_variables_initializer
python.ops		local_variables_initializer		returns an op that initializes all local variables
python.ops		initialize_local_variables		see tf local_variables_initializer
python.ops		is_variable_initialized	variable	tests if a variable has been initialized
python.ops		assert_variables_initialized	var_list	returns an op to check if variables are initialized
python.ops		report_uninitialized_variables	var_list name	adds ops to list the names of uninitialized variables
python.ops		clip_by_value	t clip_value_min clip_value_max name	clips tensor values to a specified min and max
python.ops		clip_by_norm	t clip_norm axes name	clips tensor values to a maximum l2-norm
python.ops		global_norm	t_list name	computes the global norm of multiple tensors
python.ops		clip_by_global_norm	t_list clip_norm use_norm name	clips values of multiple tensors by the ratio of the sum of their norms
python.ops		clip_by_average_norm	t clip_norm name	clips tensor values to a maximum average l2-norm
python.ops		abs	x name	computes the absolute value of a tensor
python.ops		divide	x y name	computes python style division of x by y
python.ops		negative	x name	computes numerical negative value element-wise
python.ops		_neg	x name	computes numerical negative value element-wise
python.ops		sign	x name	returns an element-wise indication of the sign of a number
python.ops		square	x name	computes square of x element-wise
python.ops		sqrt	x name	computes square root of x element-wise
python.ops		erf	x name	computes the gauss error function of x element-wise
python.ops		scalar_mul	scalar x	multiplies a scalar times a tensor or indexedslices object
python.ops		pow	x y name	computes the power of one value to another
python.ops		complex	real imag name	converts two real numbers to a complex number
python.ops		real	input name	returns the real part of a complex number
python.ops		imag	input name	returns the imaginary part of a complex number
python.ops		round	x name	rounds the values of a tensor to the nearest integer element-wise
python.ops		cast	x dtype name	casts a tensor to a new type
python.ops		saturate_cast	value dtype name	performs a safe saturating cast of value to dtype
python.ops		to_float	x name	casts a tensor to type float32
python.ops		to_double	x name	casts a tensor to type float64
python.ops		to_int32	x name	casts a tensor to type int32
python.ops		to_int64	x name	casts a tensor to type int64
python.ops		to_bfloat16	x name	casts a tensor to type bfloat16
python.ops		_OverrideBinaryOperatorHelper	func op_name clazz_object	register operators with different tensor and scalar versions
python.ops		_sparse_dense_truediv	sp_indices sp_values sp_shape y	internal helper function for 'sp_t / dense_t'
python.ops		_div_python2	x y name	divide two values using python 2 semantics used for tensor __div__
python.ops		truediv	x y name	divides x / y elementwise using python 3 division operator semantics
python.ops		div	x y name	divides x / y elementwise using python 2 division operator semantics
python.ops		floordiv	x y name	divides x / y elementwise rounding toward the most negative integer
python.ops		_mul_dispatch	x y name	dispatches cwise mul for "dense*dense" and "dense*sparse"
python.ops		logical_xor	x y name	x ^ y = (x | y) & ~(x & y)
python.ops		range	start limit delta dtype	creates a sequence of numbers
python.ops		_ReductionDims	x axis reduction_indices	returns range(0 rank x if reduction_indices is none
python.ops		reduce_sum	input_tensor axis keep_dims name	computes the sum of elements across dimensions of a tensor
python.ops		count_nonzero	input_tensor axis keep_dims dtype	computes number of nonzero elements across dimensions of a tensor
python.ops		reduce_mean	input_tensor axis keep_dims name	computes the mean of elements across dimensions of a tensor
python.ops		reduce_prod	input_tensor axis keep_dims name	computes the product of elements across dimensions of a tensor
python.ops		reduce_min	input_tensor axis keep_dims name	computes the minimum of elements across dimensions of a tensor
python.ops		reduce_max	input_tensor axis keep_dims name	computes the maximum of elements across dimensions of a tensor
python.ops		reduce_all	input_tensor axis keep_dims name	computes the "logical and" of elements across dimensions of a tensor
python.ops		reduce_any	input_tensor axis keep_dims name	computes the "logical or" of elements across dimensions of a tensor
python.ops		reduce_logsumexp	input_tensor axis keep_dims name	computes log(sum(exp elements across dimensions of a tensor ))
python.ops		trace	x name	compute the trace of a tensor x
python.ops		matmul	a b transpose_a transpose_b	multiplies matrix a by matrix b, producing a * b
python.ops		_calc_mat_mul_flops	graph node	calculates the compute resources needed for matmul
python.ops		_as_indexed_slices	x optimize	convert 'x' to indexedslices
python.ops		_as_indexed_slices_list	inputs optimize	convert all elements of 'inputs' to indexedslices
python.ops		add_n	inputs name	adds all input tensors element-wise
python.ops		accumulate_n	inputs shape tensor_dtype name	returns the element-wise sum of a list of tensors
python.ops		sigmoid	x name	computes sigmoid of x element-wise
python.ops		log_sigmoid	x name	computes log sigmoid of x element-wise
python.ops		tanh	x name	computes hyperbolic tangent of x element-wise
python.ops		bincount	arr weights minlength maxlength	counts the number of occurrences of each value in an integer array
python.ops		cumsum	x axis exclusive reverse	compute the cumulative sum of the tensor x along axis
python.ops		cumprod	x axis exclusive reverse	compute the cumulative product of the tensor x along axis
python.ops		conj	x name	returns the complex conjugate of a complex number
python.ops		_BroadcastShape	op	common shape function for binary operators that broadcast their inputs
python.ops		reduced_shape	input_shape axes	helper function for reduction ops
python.ops		tensordot	a b axes name	tensor contraction of a and b along specified axes
python.ops		_IndexedSlicesToTensor	value dtype name as_ref	converts an indexedslices object value to a tensor
python.ops		_MarkReachedOps	from_ops reached_ops	mark all ops reached from "from_ops"
python.ops		_GatherInputs	to_ops reached_ops	list all inputs of to_ops that are in reached_ops
python.ops		_PendingCount	graph to_ops from_ops colocate_gradients_with_ops	initialize the pending count for ops between two lists of operations
python.ops		_DefaultGradYs	grad_ys ys colocate_gradients_with_ops	fill in default values for grad_ys
python.ops		_VerifyGeneratedGradients	grads op	verify that gradients are valid in number and type
python.ops		_StopOps	from_ops pending_count	the set of ops that terminate the gradient computation
python.ops		_maybe_colocate_with	op colocate_gradients_with_ops	context to colocate with op if colocate_gradients_with_ops
python.ops		_SymGrad	op out_grads	backprop through a function call node op given its outputs' gradients
python.ops		_MaybeCompile	scope op func grad_fn	compile the calculation in grad_fn if op was marked as compiled
python.ops		gradients	ys xs grad_ys name	constructs symbolic partial derivatives of sum of ys w r t x in xs
python.ops		_HasAnyNotNoneGrads	grads op	return true iff op has real gradient
python.ops		_UpdatePendingAndEnqueueReady	grads op queue pending_count	update pending count for the inputs of op and enqueue ready ops
python.ops		_SetGrad	grads t grad	sets gradient "grad" in "grads" for tensor "t"
python.ops		_GetGrad	grads t	gets gradient for tensor "t"
python.ops		_GetGrads	grads op	gets all gradients for op
python.ops		_LogOpGradients	op out_grads in_grads	log the in and out grads of an op
python.ops		_MultiDeviceAddN	tensor_list	adds tensors from potentially multiple devices
python.ops		_AggregatedGrads	grads op loop_state aggregation_method	get the aggregated gradients for op
python.ops		_hessian_vector_product	ys xs v	multiply the hessian of ys wrt xs by v
python.ops		hessians	ys xs name colocate_gradients_with_ops	constructs the hessian of sum of ys with respect to x in xs
python.ops	AddNTest	testPartials		test that previously revealed a bug in buffer forwarding for addn
python.ops	ResourceVariable	__init__	initial_value trainable collections validate_shape	creates a variable
python.ops	ResourceVariable	_init_from_args	initial_value trainable collections validate_shape	creates a variable
python.ops	ResourceVariable	_init_from_proto	variable_def import_scope	initializes from variabledef proto
python.ops	ResourceVariable	dtype		the dtype of this variable
python.ops	ResourceVariable	device		the device this variable is on
python.ops	ResourceVariable	name		the name of the handle for this variable
python.ops	ResourceVariable	get_shape		the shape of this variable
python.ops	ResourceVariable	create		the op responsible for initializing this variable
python.ops	ResourceVariable	handle		the handle by which this variable can be accessed
python.ops	ResourceVariable	value		a cached operation which reads the value of this variable
python.ops	ResourceVariable	_as_graph_element		conversion function for graph as_graph_element()
python.ops	ResourceVariable	initializer		the op responsible for initializing this variable
python.ops	ResourceVariable	op		the op for this variable
python.ops	ResourceVariable	eval	session	evaluates and returns the value of this variable
python.ops	ResourceVariable	_set_save_slice_info	save_slice_info	sets the slice info for this resourcevariable
python.ops	ResourceVariable	read_value		constructs an op which reads the value of this variable
python.ops	ResourceVariable	sparse_read	indices name	reads the value of this variable sparsely using gather
python.ops	ResourceVariable	to_proto	export_scope	converts a resourcevariable to a variabledef protocol buffer
python.ops	ResourceVariable	_OverloadAllOperators		register overloads for all operators
python.ops	ResourceVariable	_OverloadOperator	operator	defer an operator overload to ops tensor
python.ops		_ReadGrad	_ grad	gradient for read op
python.ops		_GatherGrad	op grad	gradient for gather op
python.ops		_to_proto_fn	v export_scope	converts variable and resourcevariable to variabledef for collections
python.ops		_from_proto_fn	v import_scope	creates variable or resourcevariable from variabledef as needed
python.ops		lbeta	x name	computes \\(ln(|beta x |)\\), reducing along the last dimension
python.ops		einsum	equation	a generalized contraction between tensors of arbitrary dimension
python.ops		_einsum_reduction	t0 t0_axis_labels t1 t1_axis_labels	helper for einsum() that computes the result of a two-argument einsum()
python.ops		_transpose_if_necessary	tensor perm	like transpose(), but avoids creating a new tensor if possible
python.ops		_reshape_if_necessary	tensor new_shape	like reshape(), but avoids creating a new tensor if possible
python.ops		_get_shape	tensor	like get_shape() as_list(), but explicitly queries the shape of a tensor
python.ops		_total_size	shape_values	given list of tensor shape values returns total size
python.ops		_exponential_space_einsum	equation	fallback implementation that supports summing an index over > 2 inputs
python.ops		register_resource	handle create_op is_initialized_op is_shared	registers a resource into the appropriate collections
python.ops		shared_resources		returns resources visible to all tasks in the cluster
python.ops		local_resources		returns resources intended to be local to this session
python.ops		report_uninitialized_resources	resource_list name	returns the names of all uninitialized resources in resource_list
python.ops		initialize_resources	resource_list name	initializes the resources in the given list
python.ops		assert_broadcastable	weights values	asserts weights can be broadcast to values
python.ops		broadcast_weights	weights values	broadcast weights to the same shape as values
python.ops		_DynamicPartitionGrads	op	gradients for dynamicpartition
python.ops		_DynamicStitchGrads	op grad	gradients for dynamicstitch
python.ops	GroupTestCase	_StripGraph	gd	copy gd keeping only node name node op node input and node device
python.ops		_MatrixInverseGrad	op grad	gradient for matrixinverse
python.ops		_MatrixDeterminantGrad	op grad	gradient for matrixdeterminant
python.ops		_CholeskyGrad	op grad	gradient for cholesky
python.ops		_MatrixSolveGrad	op grad	gradient for matrixsolve
python.ops		_MatrixSolveLsGrad	op grad	gradients for matrixsolvels
python.ops		_MatrixTriangularSolveGrad	op grad	gradient for matrixtriangularsolve
python.ops		_SelfAdjointEigV2Grad	op grad_e grad_v	gradient for selfadjointeigv2
python.ops	CropAndResizeOpTest	_randomUniformAvoidAnchors	low high anchors radius	generate samples that are far enough from a set of anchor points
python.ops	CropAndResizeOpTest	testGradRandomBoxes		test that the gradient is correct for randomly generated boxes
python.ops	AbsOpTest	_biasedRandN	shape bias sigma	returns samples from a normal distribution shifted bias away from 0
python.ops		_non_atrous_convolution	input filter padding data_format	computes sums of n-d convolutions actually cross correlation
python.ops		with_space_to_batch	input dilation_rate padding op	performs op on the space-to-batch representation of input
python.ops		_get_strides_and_dilation_rate	num_spatial_dims strides dilation_rate	helper function for verifying strides and dilation_rate arguments
python.ops		convolution	input filter padding strides	computes sums of n-d convolutions actually cross-correlation
python.ops		pool	input window_shape pooling_type padding	performs an n-d pooling operation
python.ops		atrous_conv2d	value filters rate padding	atrous convolution a k a convolution with holes or dilated convolution
python.ops		conv2d_transpose	value filter output_shape strides	the transpose of conv2d
python.ops		atrous_conv2d_transpose	value filters output_shape rate	the transpose of atrous_conv2d
python.ops		conv3d_transpose	value filter output_shape strides	the transpose of conv3d
python.ops		bias_add	value bias data_format name	adds bias to value
python.ops		bias_add_v1	value bias name	adds bias to value
python.ops		crelu	features name	computes concatenated relu
python.ops		relu6	features name	computes rectified linear 6 min(max features 0 6)
python.ops		_flatten_outer_dims	logits	flattens logits' outer dimensions and keep its last dimension
python.ops		_softmax	logits compute_op dim name	helper function for softmax and log_softmax
python.ops		softmax	logits dim name	computes softmax activations
python.ops		log_softmax	logits dim name	computes log softmax activations
python.ops		softmax_cross_entropy_with_logits	_sentinel labels logits dim	computes softmax cross entropy between logits and labels
python.ops		sparse_softmax_cross_entropy_with_logits	_sentinel labels logits name	computes sparse softmax cross entropy between logits and labels
python.ops		avg_pool	value ksize strides padding	performs the average pooling on the input
python.ops		max_pool	value ksize strides padding	performs the max pooling on the input
python.ops		_calc_conv_flops	graph node	calculates the compute resources needed for conv2d
python.ops		_calc_depthwise_conv_flops	graph node	calculates the compute resources needed for depthwiseconv2dnative
python.ops		_calc_bias_add_flops	graph node	calculates the computing needed for biasadd
python.ops		xw_plus_b	x weights biases name	computes matmul x weights + biases
python.ops		xw_plus_b_v1	x weights biases name	computes matmul x weights + biases
python.ops		top_k	input k sorted name	finds values and indices of the k largest entries for the last dimension
python.ops		conv1d	value filters stride padding	computes a 1-d convolution given 3-d input and filter tensors
python.ops		_calc_dilation2d_flops	graph node	calculates the compute resources needed for dilation2d
python.ops		erosion2d	value kernel strides rates	computes the grayscale erosion of 4-d value and 3-d kernel tensors
python.ops		ctc_loss	labels inputs sequence_length preprocess_collapse_repeated	computes the ctc connectionist temporal classification loss
python.ops		_CTCLossGrad	op grad_loss _	the derivative provided by ctc loss
python.ops		ctc_greedy_decoder	inputs sequence_length merge_repeated	performs greedy decoding on the logits given in input best path
python.ops		ctc_beam_search_decoder	inputs sequence_length beam_width top_paths	performs beam search decoding on the logits given in input
python.ops		foldl	fn elems initializer parallel_iterations	foldl on the list of tensors unpacked from elems on dimension 0
python.ops		foldr	fn elems initializer parallel_iterations	foldr on the list of tensors unpacked from elems on dimension 0
python.ops		map_fn	fn elems dtype parallel_iterations	map on the list of tensors unpacked from elems on dimension 0
python.ops		scan	fn elems initializer parallel_iterations	scan on the list of tensors unpacked from elems on dimension 0
python.ops		Print	input_ data message first_n	prints a list of tensors
python.ops		histogram_summary	tag values collections name	outputs a summary protocol buffer with a histogram
python.ops		image_summary	tag tensor max_images collections	outputs a summary protocol buffer with images
python.ops		audio_summary	tag tensor sample_rate max_outputs	outputs a summary protocol buffer with audio
python.ops		merge_all_summaries	key	merges all summaries collected in the default graph
python.ops		get_summary_op		returns a single summary op that would run all summaries
python.ops		scalar_summary	tags values collections name	outputs a summary protocol buffer with scalar values
python.ops		cholesky_solve	chol rhs name	solves systems of linear eqns a x = rhs, given cholesky factorizations
python.ops		eye	num_rows num_columns batch_shape dtype	construct an identity matrix or a batch of matrices
python.ops		matrix_solve_ls	matrix rhs l2_regularizer fast	solves one or more linear least-squares problems
python.ops		self_adjoint_eig	tensor name	computes the eigen decomposition of a batch of self-adjoint matrices
python.ops		self_adjoint_eigvals	tensor name	computes the eigenvalues of one or more self-adjoint matrices
python.ops		svd	tensor full_matrices compute_uv name	computes the singular value decompositions of one or more matrices
python.ops		norm	tensor ord axis keep_dims	computes the norm of vectors matrices and tensors
python.ops		_OpsBetween	graph to_ops from_ops	build the list of operations between two lists of operations
python.ops		verify_tensor_all_finite	t msg name	assert that the tensor does not contain any nan's or inf's
python.ops		add_check_numerics_ops		connect a check_numerics to every floating point tensor
python.ops	BatchNormalizationTest	_tfBatchNormV1BW	x m v beta	re-implementation of the original kernel for backward compatibility
python.ops	BatchNormalizationTest	testBatchNormKeepDims		test for tf nn moments( keep_dims=true / false)
python.ops	BatchNormalizationTest	testBatchNormArbitraryShapes		test for a variety of shapes and moments
python.ops		build_graph	device input_shape output_sizes axis	build a graph containing a sequence of split operations
python.ops	SplitBenchmark	_run_graph	device output_shape variable num_outputs	run the graph and print its execution time
python.ops	Conv2DTest	_VerifyValues	tensor_in_sizes filter_in_sizes stride padding	verifies the output values of the convolution function
python.ops		make_template	name_ func_ create_scope_now_ unique_name_	given an arbitrary function wrap it so that it does variable sharing
python.ops		_skip_common_stack_elements	stacktrace base_case	skips items that the target stacktrace shares with the base stacktrace
python.ops	Template	__init__	name func create_scope_now unique_name	creates a template for the given function
python.ops	Template	variable_scope		returns the variable scope object created by this template
python.ops	Template	var_scope		returns the variable scope object created by this template
python.ops		_bad_grad	unused_op grad	a gradient that returns the wrong shape
python.ops		_nan_grad	unused_op grad	a gradient that returns nan
python.ops	Initializer	get_config		returns the configuration of the initializer as a json-serializable dict
python.ops	Initializer	from_config	cls config	instantiates an initializer from a configuration dictionary
python.ops		glorot_uniform_initializer	seed dtype	the glorot uniform initializer also called xavier uniform initializer
python.ops		glorot_normal_initializer	seed dtype	the glorot normal initializer also called xavier normal initializer
python.ops		_compute_fans	shape	computes the number of input and output units for a weight shape
python.ops		_assert_float_dtype	dtype	validate and return floating point type based on dtype
python.ops		_PackGrad	op grad	gradient for pack op
python.ops		_UnpackGrad	op	gradient for unpack op
python.ops		_ConcatGradHelper	op grad start_value_index end_value_index	gradient for concat op
python.ops		_SliceGrad	op grad	gradient for slice op
python.ops		_StridedSliceGrad	op grad	gradient for stridedslice op
python.ops		_StridedSliceGradGrad	op grad	gradient for stridedslicegrad op
python.ops		_MatrixSetDiagGrad	op grad	gradient for matrixsetdiag
python.ops		_GatherGrad	op grad	gradient for gather op
python.ops		_CheckNumericsGrad	_ grad	gradient for check_numerics op
python.ops		_ReshapeToInput	op grad	reshapes the gradient to the shape of the original input
python.ops		_TransposeGrad	op grad	returns unshuffle grad
python.ops		_TileGrad	op grad	sum reduces grad along the tiled dimensions
python.ops		_PadGrad	op grad	gradient for pad
python.ops		_SwitchGrad	op	gradients for a switch op is calculated using a merge op
python.ops		_MergeGrad	op grad _	gradients for a merge op are calculated using a switch op
python.ops		_ExitGrad	op grad	gradients for an exit op are calculated using an enter op
python.ops		_NextIterationGrad	_ grad	a forward next_iteration is translated into a backprop identity
python.ops		_EnterGrad	op grad	gradients for an enter are calculated using an exit op
python.ops		_LoopCondGrad	_	stop backprop for the predicate of a while loop
python.ops		_GetGradSource	op_or_tensor	identify which call to tf gradients created this gradient op or tensor
python.ops		_TensorArrayReadGrad	op grad	gradient for tensorarrayread
python.ops		_TensorArrayWriteGrad	op flow	gradient for tensorarraywrite
python.ops		_TensorArrayGatherGrad	op grad	gradient for tensorarraygather
python.ops		_TensorArrayScatterGrad	op flow	gradient for tensorarrayscatter
python.ops		_TensorArrayConcatGrad	op grad unused_lengths_grad	gradient for tensorarrayconcat
python.ops		_TensorArraySplitGrad	op flow	gradient for tensorarraysplit
python.ops		_state_size_with_prefix	state_size prefix	helper function that enables int or tensorshape shape specification
python.ops		_zero_state_tensors	state_size batch_size dtype	create tensors of zeros based on state_size batch_size and dtype
python.ops	_RNNCell	__call__	inputs state scope	run this rnn cell on inputs starting from the given state
python.ops	_RNNCell	state_size		size s of state s used by this cell
python.ops	_RNNCell	output_size		integer or tensorshape size of outputs produced by this cell
python.ops	_RNNCell	zero_state	batch_size dtype	return zero-filled state tensor s
python.ops		build_graph	device input_shape variable num_inputs	build a graph containing a sequence of concat operations
python.ops	ConcatBenchmark	_run_graph	device input_shape variable num_inputs	run the graph and print its execution time
python.ops	FuncRegistry	insert	func	registers func and returns a unique token for this entry
python.ops	FuncRegistry	remove	token	removes the registered function corresponding to token
python.ops	FuncRegistry	_convert	value	converts an arg to numpy avoiding dangerous string and unicode dtypes
python.ops	FuncRegistry	__call__	token args	calls the registered function for token with args
python.ops	FuncRegistry	size		returns how many functions are currently registered
python.ops	FuncRegistry	_next_unique_token		returns a unique token
python.ops		py_func	func inp Tout stateful	wraps a python function and uses it as a tensorflow op
python.ops		set_size	a validate_indices	compute number of unique elements along last dimension of a
python.ops		_convert_to_tensors_or_sparse_tensors	a b	convert to tensor types and flip order if necessary
python.ops		_set_operation	a b set_operation validate_indices	compute set operation of elements in last dimension of a and b
python.ops		set_intersection	a b validate_indices	compute set intersection of elements in last dimension of a and b
python.ops		set_difference	a b aminusb validate_indices	compute set difference of elements in last dimension of a and b
python.ops		set_union	a b validate_indices	compute set union of elements in last dimension of a and b
python.ops		_compute_theoretical_jacobian	x x_shape x_data dy	computes the theoretical jacobian for dy/dx
python.ops		_compute_numeric_jacobian	x x_shape x_data y	computes the numeric jacobian for dy/dx
python.ops		_compute_dx_and_dy	x y y_shape	returns a node to compute gradient of x wrt y
python.ops		_compute_gradient	x x_shape dx y	computes the theoretical and numerical jacobian
python.ops		_compute_gradient_list	x x_shape y y_shape	compute gradients for a list of x values
python.ops		compute_gradient	x x_shape y y_shape	computes and returns the theoretical and numerical jacobian
python.ops		compute_gradient_error	x x_shape y y_shape	computes the gradient error
python.ops		_as_type_list	dtypes	convert dtypes to a list of types
python.ops		_as_shape_list	shapes dtypes unknown_dim_allowed unknown_rank_allowed	convert shapes to a list of tuples of int or none
python.ops		_shape_common	s1 s2	the greatest lower bound ordered by specificity tensorshape
python.ops	QueueBase	__init__	dtypes shapes names queue_ref	constructs a queue object from a queue reference
python.ops	QueueBase	from_list	index queues	create a queue using the queue reference from queues[index]
python.ops	QueueBase	queue_ref		the underlying queue reference
python.ops	QueueBase	name		the name of the underlying queue
python.ops	QueueBase	dtypes		the list of dtypes for each component of a queue element
python.ops	QueueBase	shapes		the list of shapes for each component of a queue element
python.ops	QueueBase	names		the list of names for each component of a queue element
python.ops	QueueBase	_check_enqueue_dtypes	vals	validate and convert vals to a list of tensors
python.ops	QueueBase	_scope_vals	vals	return a list of values to pass to name_scope()
python.ops	QueueBase	enqueue	vals name	enqueues one element to this queue
python.ops	QueueBase	enqueue_many	vals name	enqueues zero or more elements to this queue
python.ops	QueueBase	_dequeue_return_value	tensors	return the value to return from a dequeue op
python.ops	QueueBase	dequeue	name	dequeues one element from this queue
python.ops	QueueBase	dequeue_many	n name	dequeues and concatenates n elements from this queue
python.ops	QueueBase	dequeue_up_to	n name	dequeues and concatenates n elements from this queue
python.ops	QueueBase	close	cancel_pending_enqueues name	closes this queue
python.ops	QueueBase	size	name	compute the number of elements in this queue
python.ops	RandomShuffleQueue	__init__	capacity min_after_dequeue dtypes shapes	create a queue that dequeues elements in a random order
python.ops	FIFOQueue	__init__	capacity dtypes shapes names	creates a queue that dequeues elements in a first-in first-out order
python.ops	PaddingFIFOQueue	__init__	capacity dtypes shapes names	creates a queue that dequeues elements in a first-in first-out order
python.ops	PriorityQueue	__init__	capacity types shapes names	creates a queue that dequeues elements in a first-in first-out order
python.ops	Barrier	__init__	types shapes shared_name name	creates a barrier that persists across different graph executions
python.ops	Barrier	barrier_ref		get the underlying barrier reference
python.ops	Barrier	name		the name of the underlying barrier
python.ops	Barrier	insert_many	component_index keys values name	for each key assigns the respective value to the specified component
python.ops	Barrier	take_many	num_elements allow_small_batch timeout name	takes the given number of completed elements from this barrier
python.ops	Barrier	close	cancel_pending_enqueues name	closes this barrier
python.ops	Barrier	ready_size	name	compute the number of complete elements in the given barrier
python.ops	Barrier	incomplete_size	name	compute the number of incomplete elements in the given barrier
python.ops	ConditionalAccumulatorBase	__init__	dtype shape accumulator_ref	creates a new conditionalaccumulator
python.ops	ConditionalAccumulatorBase	accumulator_ref		the underlying accumulator reference
python.ops	ConditionalAccumulatorBase	name		the name of the underlying accumulator
python.ops	ConditionalAccumulatorBase	dtype		the datatype of the gradients accumulated by this accumulator
python.ops	ConditionalAccumulatorBase	num_accumulated	name	number of gradients that have currently been aggregated in accumulator
python.ops	ConditionalAccumulatorBase	set_global_step	new_global_step name	sets the global time step of the accumulator
python.ops	ConditionalAccumulator	__init__	dtype shape shared_name name	creates a new conditionalaccumulator
python.ops	ConditionalAccumulator	apply_grad	grad local_step name	attempts to apply a gradient to the accumulator
python.ops	ConditionalAccumulator	take_grad	num_required name	attempts to extract the average gradient from the accumulator
python.ops	SparseConditionalAccumulator	apply_indexed_slices_grad	grad local_step name	attempts to apply a gradient to the accumulator
python.ops	SparseConditionalAccumulator	apply_grad	grad_indices grad_values grad_shape local_step	attempts to apply a sparse gradient to the accumulator
python.ops	SparseConditionalAccumulator	take_grad	num_required name	attempts to extract the average gradient from the accumulator
python.ops	SparseConditionalAccumulator	take_indexed_slices_grad	num_required name	attempts to extract the average gradient from the accumulator
python.ops	StagingArea	__init__	dtypes shapes names shared_name	constructs a staging area object
python.ops	StagingArea	name		the name of the staging area
python.ops	StagingArea	dtypes		the list of dtypes for each component of a staging area element
python.ops	StagingArea	shapes		the list of shapes for each component of a staging area element
python.ops	StagingArea	names		the list of names for each component of a staging area element
python.ops	StagingArea	_check_put_dtypes	vals	validate and convert vals to a list of tensors
python.ops	StagingArea	_scope_vals	vals	return a list of values to pass to name_scope()
python.ops	StagingArea	put	values name	create an op that places a value into the staging area
python.ops	StagingArea	_get_return_value	tensors	return the value to return from a get op
python.ops	StagingArea	get	name	gets one element from this staging area
python.ops	RecordInput	__init__	file_pattern batch_size buffer_size parallelism	constructs a recordinput op
python.ops	RecordInput	get_yield_op		add a node that yields a minibatch every time it is executed
python.ops		_assert	cond ex_type msg	a polymorphic assert works with tensors and boolean expressions
python.ops		_is_tensor	x	returns true if x is a symbolic tensor-like object
python.ops		_ImageDimensions	image rank	returns the dimensions of an image tensor
python.ops		_Check3DImage	image require_static	assert that we are working with properly shaped image
python.ops		_CheckAtLeast3DImage	image require_static	assert that we are working with properly shaped image
python.ops		fix_image_flip_shape	image result	set the shape to 3 dimensional if we don't know anything else
python.ops		random_flip_up_down	image seed	randomly flips an image vertically upside down
python.ops		random_flip_left_right	image seed	randomly flip an image horizontally left to right
python.ops		flip_left_right	image	flip an image horizontally left to right
python.ops		flip_up_down	image	flip an image horizontally upside down
python.ops		rot90	image k name	rotate an image counter-clockwise by 90 degrees
python.ops		transpose_image	image	transpose an image by swapping the first and second dimension
python.ops		central_crop	image central_fraction	crop the central region of the image
python.ops		pad_to_bounding_box	image offset_height offset_width target_height	pad image with zeros to the specified height and width
python.ops		crop_to_bounding_box	image offset_height offset_width target_height	crops an image to a specified bounding box
python.ops		resize_image_with_crop_or_pad	image target_height target_width	crops and/or pads an image to a target width and height
python.ops		resize_images	images size method align_corners	resize images to size using the specified method
python.ops		per_image_standardization	image	linearly scales image to have zero mean and unit norm
python.ops		random_brightness	image max_delta seed	adjust the brightness of images by a random factor
python.ops		random_contrast	image lower upper seed	adjust the contrast of an image by a random factor
python.ops		adjust_brightness	image delta	adjust the brightness of rgb or grayscale images
python.ops		adjust_contrast	images contrast_factor	adjust contrast of rgb or grayscale images
python.ops		adjust_gamma	image gamma gain	performs gamma correction on the input image
python.ops		convert_image_dtype	image dtype saturate name	convert image to dtype, scaling its values if needed
python.ops		rgb_to_grayscale	images name	converts one or more images from rgb to grayscale
python.ops		grayscale_to_rgb	images name	converts one or more images from grayscale to rgb
python.ops		random_hue	image max_delta seed	adjust the hue of an rgb image by a random factor
python.ops		adjust_hue	image delta name	adjust hue of an rgb image
python.ops		random_saturation	image lower upper seed	adjust the saturation of an rgb image by a random factor
python.ops		adjust_saturation	image saturation_factor name	adjust saturation of an rgb image
python.ops		decode_image	contents channels name	convenience function for decode_gif, decode_jpeg, and decode_png
python.ops		total_variation	images name	calculate and return the total variation for one or more images
python.ops		build_graph	device input_shape perm datatype	build a graph containing a sequence of conv2d operations
python.ops	TransposeBenchmark	_run_graph	device input_shape perm num_iters	run the graph and print its execution time
python.ops		_assert_static	condition data	raises a static valueerror with as much information as possible
python.ops		assert_proper_iterable	values	static assert that values is a "proper" iterable
python.ops		assert_negative	x data summarize message	assert the condition x < 0 holds element-wise
python.ops		assert_positive	x data summarize message	assert the condition x > 0 holds element-wise
python.ops		assert_non_negative	x data summarize message	assert the condition x >= 0 holds element-wise
python.ops		assert_non_positive	x data summarize message	assert the condition x <= 0 holds element-wise
python.ops		assert_equal	x y data summarize	assert the condition x == y holds element-wise
python.ops		assert_none_equal	x y data summarize	assert the condition x != y holds for all elements
python.ops		assert_less	x y data summarize	assert the condition x < y holds element-wise
python.ops		assert_less_equal	x y data summarize	assert the condition x <= y holds element-wise
python.ops		assert_greater	x y data summarize	assert the condition x > y holds element-wise
python.ops		assert_greater_equal	x y data summarize	assert the condition x >= y holds element-wise
python.ops		_assert_rank_condition	x rank static_condition dynamic_condition	assert x has a rank that satisfies a given condition
python.ops		assert_rank	x rank data summarize	assert x has rank equal to rank
python.ops		assert_rank_at_least	x rank data summarize	assert x has rank equal to rank or higher
python.ops		_assert_ranks_condition	x ranks static_condition dynamic_condition	assert x has a rank that satisfies a given condition
python.ops		assert_rank_in	x ranks data summarize	assert x has rank in ranks
python.ops		assert_integer	x message name	assert that x is of integer dtype
python.ops		assert_type	tensor tf_type message name	statically asserts that the given tensor is of the specified type
python.ops		_get_diff_for_monotonic_comparison	x	gets the difference x[1 ] - x[:-1]
python.ops		is_non_decreasing	x name	returns true if x is non-decreasing
python.ops		is_strictly_increasing	x name	returns true if x is strictly increasing
python.ops		_assert_same_base_type	items expected_type	asserts all items are of the same base type
python.ops		assert_same_float_dtype	tensors dtype	validate and return float type based on tensors and dtype
python.ops		_RFFTGradHelper	rank irfft_fn	returns a gradient function for an rfft of the provided rank
python.ops		_IRFFTGradHelper	rank rfft_fn	returns a gradient function for an irfft of the provided rank
python.ops		_save	filename tensor_names tensors tensor_slices	save a list of tensors to a file with given names
python.ops		_restore_slice	file_pattern tensor_name shape_and_slice tensor_type	restore a tensor slice from a set of files with a given pattern
python.ops	ReaderBase	__init__	reader_ref supports_serialize	creates a new readerbase
python.ops	ReaderBase	reader_ref		op that implements the reader
python.ops	ReaderBase	read	queue name	returns the next record key value pair produced by a reader
python.ops	ReaderBase	read_up_to	queue num_records name	returns up to num_records key value pairs produced by a reader
python.ops	ReaderBase	num_records_produced	name	returns the number of records this reader has produced
python.ops	ReaderBase	num_work_units_completed	name	returns the number of work units this reader has finished processing
python.ops	ReaderBase	serialize_state	name	produce a string tensor that encodes the state of a reader
python.ops	ReaderBase	restore_state	state name	restore a reader to a previously saved state
python.ops	ReaderBase	supports_serialize		whether the reader implementation can serialize its state
python.ops	ReaderBase	reset	name	restore a reader to its initial clean state
python.ops	WholeFileReader	__init__	name	create a wholefilereader
python.ops	TextLineReader	__init__	skip_header_lines name	create a textlinereader
python.ops	FixedLengthRecordReader	__init__	record_bytes header_bytes footer_bytes hop_bytes	create a fixedlengthrecordreader
python.ops	TFRecordReader	__init__	name options	create a tfrecordreader
python.ops	IdentityReader	__init__	name	create a identityreader
python.ops	TensorArray	__init__	dtype size dynamic_size clear_after_read	construct a new tensorarray or wrap an existing tensorarray handle
python.ops	TensorArray	flow		the flow tensor forcing ops leading to this tensorarray state
python.ops	TensorArray	dtype		the data type of this tensorarray
python.ops	TensorArray	handle		the reference to the tensorarray
python.ops	TensorArray	_merge_element_shape	shape	changes the element shape of the array given a shape to merge with
python.ops	TensorArray	identity		returns a tensorarray with the same content and properties
python.ops	TensorArray	read	index name	read the value at location index in the tensorarray
python.ops	TensorArray	write	index value name	write value into index index of the tensorarray
python.ops	TensorArray	stack	name	return the values in the tensorarray as a stacked tensor
python.ops	TensorArray	gather	indices name	return selected values in the tensorarray as a packed tensor
python.ops	TensorArray	concat	name	return the values in the tensorarray as a concatenated tensor
python.ops	TensorArray	unstack	value name	unstack the values of a tensor in the tensorarray
python.ops	TensorArray	scatter	indices value name	scatter the values of a tensor in specific indices of a tensorarray
python.ops	TensorArray	split	value lengths name	split the values of a tensor into the tensorarray
python.ops	TensorArray	size	name	return the size of the tensorarray
python.ops	TensorArray	close	name	close the current tensorarray
python.ops		log_poisson_loss	targets log_input compute_full_loss name	computes log poisson loss given log_input
python.ops		sigmoid_cross_entropy_with_logits	_sentinel labels logits name	computes sigmoid cross entropy given logits
python.ops		weighted_cross_entropy_with_logits	targets logits pos_weight name	computes a weighted cross entropy
python.ops		relu_layer	x weights biases name	computes relu(x * weight + biases)
python.ops		l2_normalize	x dim epsilon name	normalizes along dimension dim using an l2 norm
python.ops		zero_fraction	value name	returns the fraction of zeros in value
python.ops		depthwise_conv2d	input filter strides padding	depthwise 2-d convolution
python.ops		separable_conv2d	input depthwise_filter pointwise_filter strides	2-d convolution with separable filters
python.ops		sufficient_statistics	x axes shift keep_dims	calculate the sufficient statistics for the mean and variance of x
python.ops		normalize_moments	counts mean_ss variance_ss shift	calculate the mean and variance of based on the sufficient statistics
python.ops		moments	x axes shift name	calculate the mean and variance of x
python.ops		weighted_moments	x axes frequency_weights name	returns the frequency-weighted mean and variance of x
python.ops		_sum_rows	x	returns a vector summing up each row of the matrix x
python.ops		_compute_sampled_logits	weights biases labels inputs	helper function for nce_loss and sampled_softmax_loss functions
python.ops		nce_loss	weights biases labels inputs	computes and returns the noise-contrastive estimation training loss
python.ops		sampled_softmax_loss	weights biases labels inputs	computes and returns the sampled softmax training loss
python.ops		uniform_candidate_sampler	true_classes num_true num_sampled unique	samples a set of classes using a uniform base distribution
python.ops		log_uniform_candidate_sampler	true_classes num_true num_sampled unique	samples a set of classes using a log-uniform zipfian base distribution
python.ops		learned_unigram_candidate_sampler	true_classes num_true num_sampled unique	samples a set of classes from a distribution learned during training
python.ops		fixed_unigram_candidate_sampler	true_classes num_true num_sampled unique	samples a set of classes using the provided fixed base distribution
python.ops		all_candidate_sampler	true_classes num_true num_sampled unique	generate the set of all classes
python.ops		compute_accidental_hits	true_classes sampled_candidates num_true seed	compute the position ids in sampled_candidates matching true_classes
python.ops		string_split	source delimiter	split elements of source based on delimiter into a sparsetensor
python.ops		_reduce_join_reduction_dims	x axis reduction_indices	returns range(rank x - 1 0 -1) if reduction_indices is none
python.ops		_SparseReorderGrad	op unused_output_indices_grad output_values_grad	gradients for the sparsereorder op
python.ops		_SparseAddGrad	op	the backward operator for the sparseadd op
python.ops		_SparseReduceSumGrad	op out_grad	similar to gradient for the sum op (i e tf reduce_sum())
python.ops		_SparseTensorDenseMatMulGrad	op grad	gradients for the dense tensor in the sparsetensordensematmul op
python.ops		_SparseDenseCwiseMulOrDivGrad	op grad is_mul	common code for sparsedensecwise{mul div} gradients
python.ops		_SparseDenseCwiseMulGrad	op grad	gradients for sparsedensecwisemul
python.ops		_SparseDenseCwiseDivGrad	op grad	gradients for sparsedensecwisediv
python.ops		_SparseSoftmaxGrad	op grad	gradients for sparsesoftmax
python.ops		_Conv2DBackpropInputGrad	op grad	the derivatives for deconvolution
python.ops		_SoftmaxGrad	op grad_softmax	the derivative of the softmax nonlinearity
python.ops		_LogSoftmaxGrad	op grad	the gradient for log_softmax
python.ops		_BiasAddGrad	op received_grad	return the gradients for the 2 inputs of bias_op
python.ops		_BiasAddGradGrad	op received_grad	gradient for the biasaddgrad op
python.ops		_BiasAddGradV1	unused_bias_op received_grad	return the gradients for the 2 inputs of bias_op
python.ops		_BroadcastMul	vec mat	multiply after broadcasting vec to match dimensions of mat
python.ops		_SoftmaxCrossEntropyWithLogitsGrad	op grad_loss grad_grad	gradient function for softmaxcrossentropywithlogits
python.ops		_SparseSoftmaxCrossEntropyWithLogitsGrad	op grad_0 _	gradient function for sparsesoftmaxcrossentropywithlogits
python.ops		_FractionalMaxPoolGrad	op grad_0 unused_grad_1 unused_grad_2	returns gradient for fractionalmaxpool
python.ops		_FractionalAvgPoolGrad	op grad_0 unused_grad_1 unused_grad_2	returns gradient for fractionalavgpool
python.ops		_BatchNormWithGlobalNormalizationGrad	op grad	return the gradients for the 5 inputs of batchnormwithglobalnormalization
python.ops		_FusedBatchNormGrad	op	return the gradients for the 3 inputs of batchnorm
python.ops		_L2LossGrad	op grad	return the gradients for l2loss
python.ops		_TopKGrad	op grad _	return the gradients for topk
python.ops	AdjustGamma	test_adjust_gamma_one		same image should be returned for gamma equal to one
python.ops	AdjustGamma	test_adjust_gamma_zero		white image should be returned for gamma equal to zero
python.ops	AdjustGamma	test_adjust_gamma_less_one		verifying the output with expected results for gamma
python.ops	AdjustGamma	test_adjust_gamma_greater_one		verifying the output with expected results for gamma
python.ops		_SimpleColorRamp		build a simple color ramp rgb image
python.ops	TotalVariationTest	_test	x_np y_np	test that the tensorflow implementation of total_variation(x_np) calculates the values in y_np
python.ops	TotalVariationTest	_total_variation_np	x_np	calculate the total variation of x_np using numpy
python.ops	TotalVariationTest	_test_tensorflow_vs_numpy	x_np	test the tensorflow implementation against a numpy implementation
python.ops	TotalVariationTest	_generateArray	shape	generate an array of the given shape for use in testing
python.ops	TotalVariationTest	testTotalVariationNumpy		test the tensorflow implementation against a numpy implementation
python.ops	TotalVariationTest	testTotalVariationHandmade		test the total variation for a few handmade examples
python.ops		_infer_fft_length_for_rfft	input_tensor fft_rank	infers the fft_length argument for a rank rfft from input_tensor
python.ops		_infer_fft_length_for_irfft	input_tensor fft_rank	infers the fft_length argument for a rank irfft from input_tensor
python.ops		_rfft_wrapper	fft_fn fft_rank default_name	wrapper around gen_spectral_ops rfft* that infers fft_length argument
python.ops		_irfft_wrapper	ifft_fn fft_rank default_name	wrapper around gen_spectral_ops irfft* that infers fft_length argument
python.ops		_local_variable	initial_value validate_shape name	create variable and add it to graphkeys local_variables collection
python.ops		_remove_squeezable_dimensions	predictions labels weights	internal version of remove_squeezable_dimensions which handles weights
python.ops		_maybe_expand_labels	labels predictions	if necessary expand labels along last dimension to match predictions
python.ops		_create_local	name shape collections validate_shape	creates a new local variable
python.ops		_safe_div	numerator denominator name	divides two values returning 0 if the denominator is <= 0
python.ops		_safe_scalar_div	numerator denominator name	divides two values returning 0 if the denominator is 0
python.ops		_streaming_confusion_matrix	labels predictions num_classes weights	calculate a streaming confusion matrix
python.ops		mean	values weights metrics_collections updates_collections	computes the weighted mean of the given values
python.ops		accuracy	labels predictions weights metrics_collections	calculates how often predictions matches labels
python.ops		_confusion_matrix_at_thresholds	labels predictions thresholds weights	computes true_positives false_negatives true_negatives false_positives
python.ops		auc	labels predictions weights num_thresholds	computes the approximate auc via a riemann sum
python.ops		mean_absolute_error	labels predictions weights metrics_collections	computes the mean absolute error between the labels and predictions
python.ops		mean_cosine_distance	labels predictions dim weights	computes the cosine distance between the labels and predictions
python.ops		mean_per_class_accuracy	labels predictions num_classes weights	calculates the mean of the per-class accuracies
python.ops		mean_iou	labels predictions num_classes weights	calculate per-step mean intersection-over-union miou
python.ops		mean_relative_error	labels predictions normalizer weights	computes the mean relative error by normalizing with the given values
python.ops		mean_squared_error	labels predictions weights metrics_collections	computes the mean squared error between the labels and predictions
python.ops		mean_tensor	values weights metrics_collections updates_collections	computes the element-wise weighted mean of the given tensors
python.ops		percentage_below	values threshold weights metrics_collections	computes the percentage of values less than the given threshold
python.ops		_count_condition	values weights metrics_collections updates_collections	sums the weights of cases where the given values are true
python.ops		true_positives	labels predictions weights metrics_collections	sum the weights of true_positives
python.ops		false_positives	labels predictions weights metrics_collections	sum the weights of false positives
python.ops		precision	labels predictions weights metrics_collections	computes the precision of the predictions with respect to the labels
python.ops		precision_at_thresholds	labels predictions thresholds weights	computes precision values for different thresholds on predictions
python.ops		false_negatives	labels predictions weights metrics_collections	computes the total number of false negatives
python.ops		recall	labels predictions weights metrics_collections	computes the recall of the predictions with respect to the labels
python.ops		_select_class_id	ids selected_id	filter all but selected_id out of ids
python.ops		_maybe_select_class_id	labels predictions_idx selected_id	if class id is specified filter all other classes
python.ops		_sparse_true_positive_at_k	labels predictions_idx class_id weights	calculates true positives for recall@k and precision@k
python.ops		_streaming_sparse_true_positive_at_k	labels predictions_idx k class_id	calculates weighted per step true positives for recall@k and precision@k
python.ops		_sparse_false_negative_at_k	labels predictions_idx class_id weights	calculates false negatives for recall@k
python.ops		_streaming_sparse_false_negative_at_k	labels predictions_idx k class_id	calculates weighted per step false negatives for recall@k
python.ops		recall_at_k	labels predictions k class_id	computes recall@k of the predictions with respect to sparse labels
python.ops		_sparse_recall_at_top_k	labels predictions_idx k class_id	computes recall@k of top-k predictions with respect to sparse labels
python.ops		recall_at_thresholds	labels predictions thresholds weights	computes various recall values for different thresholds on predictions
python.ops		root_mean_squared_error	labels predictions weights metrics_collections	computes the root mean squared error between the labels and predictions
python.ops		sensitivity_at_specificity	labels predictions specificity weights	computes the specificity at a given sensitivity
python.ops		_expand_and_tile	tensor multiple dim name	slice tensor shape in 2 then tile along the sliced dimension
python.ops		_num_relevant	labels k	computes number of relevant values for each row in labels
python.ops		_sparse_average_precision_at_top_k	labels predictions_idx	computes average precision@k of predictions with respect to sparse labels
python.ops		_streaming_sparse_average_precision_at_top_k	labels predictions_idx weights metrics_collections	computes average precision@k of predictions with respect to sparse labels
python.ops		sparse_average_precision_at_k	labels predictions k weights	computes average precision@k of predictions with respect to sparse labels
python.ops		_sparse_false_positive_at_k	labels predictions_idx class_id weights	calculates false positives for precision@k
python.ops		_streaming_sparse_false_positive_at_k	labels predictions_idx k class_id	calculates weighted per step false positives for precision@k
python.ops		_sparse_precision_at_top_k	labels predictions_idx k class_id	computes precision@k of the predictions with respect to sparse labels
python.ops		sparse_precision_at_k	labels predictions k class_id	computes precision@k of the predictions with respect to sparse labels
python.ops		specificity_at_sensitivity	labels predictions sensitivity weights	computes the specificity at a given sensitivity
python.ops	_PartitionInfo	single_offset	shape	returns the offset when the variable is partitioned in at most one dim
python.ops	_PartitionInfo	single_slice_dim	shape	returns the slice dim when the variable is partitioned only in one dim
python.ops	_VariableStore	__init__		create a variable store
python.ops	_VariableStore	get_variable	name shape dtype initializer	gets an existing variable with these parameters or create a new one
python.ops	_VariableStore	_get_partitioned_variable	name partitioner shape dtype	gets or creates a sharded variable list with these parameters
python.ops	_VariableStore	_get_single_variable	name shape dtype initializer	get or create a single variable e g a shard or entire variable
python.ops	_VariableStore	_get_default_initializer	name shape dtype	provide a default initializer and a corresponding value
python.ops		no_regularizer	_	use this function to prevent regularization of variables
python.ops	VariableScope	__init__	reuse name initializer regularizer	creates a new variablescope with the given properties
python.ops	VariableScope	reuse_variables		reuse variables in this scope
python.ops	VariableScope	set_initializer	initializer	set initializer for this scope
python.ops	VariableScope	set_dtype	dtype	set data type for this scope
python.ops	VariableScope	set_use_resource	use_resource	sets whether to use resourcevariables for this scope
python.ops	VariableScope	set_regularizer	regularizer	set regularizer for this scope
python.ops	VariableScope	set_caching_device	caching_device	set caching_device for this scope
python.ops	VariableScope	set_partitioner	partitioner	set partitioner for this scope
python.ops	VariableScope	set_custom_getter	custom_getter	set custom getter for this scope
python.ops	VariableScope	get_collection	name	get this scope's variables
python.ops	VariableScope	trainable_variables		get this scope's trainable variables
python.ops	VariableScope	global_variables		get this scope's global variables
python.ops	VariableScope	get_variable	var_store name shape dtype	gets an existing variable with this name or create a new one
python.ops	VariableScope	_get_partitioned_variable	var_store name shape dtype	gets an existing variable with this name or create a new one
python.ops		get_variable_scope		returns the current variable scope
python.ops		_get_partitioned_variable	name shape dtype initializer	gets or creates a sharded variable list with these parameters
python.ops		_pure_variable_scope	name_or_scope reuse initializer regularizer	creates a context for the variable_scope see variable_scope for docs
python.ops		_maybe_wrap_custom_getter	custom_getter old_getter	wrap a call to a custom_getter to use the old_getter internally
python.ops		_get_unique_variable_scope	prefix	get a name with the given prefix unique in the current variable scope
python.ops		variable_scope	name_or_scope default_name values initializer	returns a context manager for defining ops that creates variables layers
python.ops		variable_op_scope	values name_or_scope default_name initializer	deprecated context manager for defining an op that creates variables
python.ops		_compute_slice_dim_and_shape	full_shape slicing	computes which dimension is being sliced and the typical slice shape
python.ops		_ShapeTensor	shape	convert to an int32 or int64 tensor defaulting to int32 if empty
python.ops		random_normal	shape mean stddev dtype	outputs random values from a normal distribution
python.ops		parameterized_truncated_normal	shape means stddevs minvals	outputs random values from a truncated normal distribution
python.ops		truncated_normal	shape mean stddev dtype	outputs random values from a truncated normal distribution
python.ops		random_uniform	shape minval maxval dtype	outputs random values from a uniform distribution
python.ops		random_shuffle	value seed name	randomly shuffles a tensor along its first dimension
python.ops		random_crop	value size seed name	randomly crops a tensor to a given size
python.ops		multinomial	logits num_samples seed name	draws samples from a multinomial distribution
python.ops		random_gamma	shape alpha beta dtype	draws shape samples from each of the given gamma distribution s
python.ops		random_poisson	lam shape dtype seed	draws shape samples from each of the given poisson distribution s
python.ops		variable_op	shape dtype name set_shape	deprecated used variable_op_v2 instead
python.ops		variable_op_v2	shape dtype name container	create a variable operation
python.ops		init_variable	v init name	initializes variable with "init"
python.ops		is_variable_initialized	ref name	checks whether a tensor has been initialized
python.ops		assign_sub	ref value use_locking name	update 'ref' by subtracting 'value' from it
python.ops		assign_add	ref value use_locking name	update 'ref' by adding 'value' to it
python.ops		assign	ref value validate_shape use_locking	update 'ref' by assigning 'value' to it
python.ops		initialize_all_tables	name	returns an op that initializes all tables of the default graph
python.ops		tables_initializer	name	returns an op that initializes all tables of the default graph
python.ops		batch_norm_op	tensor mean variance beta	fused kernel for batch normalization
python.ops		batch_norm_py	tensor mean variance beta	python implementation of batch normalization
python.ops		build_graph	device input_shape axes num_layers	build a graph containing a sequence of batch normalizations
python.ops		print_difference	mode t1 t2	print the difference in timing between two runs
python.ops	BatchNormBenchmark	_run_graph	device input_shape axes num_layers	run the graph and print its execution time
python.ops		_safe_shape_div	x y	divides x / y assuming x y >= 0, treating 0 / 0 = 0
python.ops		_SumGrad	op grad	gradient for sum
python.ops		_MinOrMaxGrad	op grad	gradient for min or max amazingly it's precisely the same code
python.ops		_MaxGrad	op grad	gradient for max
python.ops		_MeanGrad	op grad	gradient for mean
python.ops		_ProdGrad	op grad	gradient for prod
python.ops		_SegmentSumGrad	op grad	gradient for segmentsum
python.ops		_SegmentMeanGrad	op grad	gradient for segmentmean
python.ops		_SparseSegmentSumGrad	op grad	gradient for sparsesegmentsum
python.ops		_SparseSegmentMeanGrad	op grad	gradient for sparsesegmentmean
python.ops		_SparseSegmentSqrtNGrad	op grad	gradient for sparsesegmentsqrtn
python.ops		_SegmentMinOrMaxGrad	op grad is_sorted	gradient for segmentmin and unsorted segmentmax they share similar code
python.ops		_SegmentMinGrad	op grad	gradient for segmentmin
python.ops		_SegmentMaxGrad	op grad	gradient for segmentmax
python.ops		_UnsortedSegmentSumGrad	op grad	gradient for segmentsum
python.ops		_InvGrad	op grad	returns -grad * (1 / x^2)
python.ops		_ReciprocalGrad	op grad	returns -grad * (1 / x^2)
python.ops		_RsqrtGrad	op grad	returns -0 5 * grad * conj y ^3
python.ops		_RsqrtGradGrad	op grad	returns backprop gradient for f a b = -0 5 * b * conj a ^3
python.ops		_ExpGrad	op grad	returns grad * exp x
python.ops		_Expm1Grad	op grad	returns grad * exp x
python.ops		_LogGrad	op grad	returns grad * (1/x)
python.ops		_Log1pGrad	op grad	returns grad * (1/ 1 + x
python.ops		_TanhGrad	op grad	returns grad * (1 - tanh x * tanh x
python.ops		_ErfGrad	op grad	returns grad * 2/sqrt pi * exp(-x**2)
python.ops		_ErfcGrad	op grad	returns -grad * 2/sqrt pi * exp(-x**2)
python.ops		_LgammaGrad	op grad	returns grad * digamma x
python.ops		_DigammaGrad	op grad	compute gradient of the digamma function with respect to its argument
python.ops		_IgammaGrad	op grad	returns gradient of igamma a x with respect to x
python.ops		_IgammacGrad	op grad	returns gradient of igammac a x = 1 - igamma a x w r t x
python.ops		_BetaincGrad	op grad	returns gradient of betainc a b x with respect to x
python.ops		_ZetaGrad	op grad	returns gradient of zeta x q with respect to x and q
python.ops		_PolygammaGrad	op grad	returns gradient of psi n x with respect to n and x
python.ops		_SigmoidGrad	op grad	returns grad * sigmoid x * (1 - sigmoid x
python.ops		_SinGrad	op grad	returns grad * cos x
python.ops		_CosGrad	op grad	returns grad * -sin x
python.ops		_TanGrad	op grad	returns grad * 1/sec^2 x
python.ops		_AsinGrad	op grad	returns grad * 1/sqrt(1-x^2)
python.ops		_AcosGrad	op grad	returns grad * -1/sqrt(1-x^2)
python.ops		_AtanGrad	op grad	returns grad * 1/ (1 + x^2)
python.ops		_Atan2Grad	op grad	returns grad * x / (x^2 + y^2), grad * -y / (x^2 + y^2)
python.ops		_AddNGrad	op grad	copies the gradient to all inputs
python.ops		_MulGrad	op grad	the gradient of scalar multiplication
python.ops		_DivGrad	op grad	the gradient for the div operator
python.ops		_FloorDivGrad	_ unused_grad	the gradient for the floordiv operator
python.ops		_RealDivGrad	op grad	realdiv op gradient
python.ops		_PowGrad	op grad	returns grad * (y*x^ y-1 z*log x
python.ops		_MaximumMinimumGrad	op grad selector_op	factor out the code for the gradient of maximum or minimum
python.ops		_MaximumGrad	op grad	returns grad*(x > y x <= y) with type of grad
python.ops		_MinimumGrad	op grad	returns grad*(x < y x >= y) with type of grad
python.ops		_SquaredDifferenceGrad	op grad	returns the gradient for x-y ^2
python.ops		_MatMulGrad	op grad	gradient for matmul
python.ops		_SparseMatMulGrad	op grad	gradient for sparsematmul
python.ops		_BatchMatMul	op grad	returns the gradient of x and y given the gradient of x * y
python.ops		_ComplexGrad	op grad	returns the real and imaginary components of 'grad', respectively
python.ops		_RealGrad	_ grad	returns 'grad' as the real part and set the imaginary part 0
python.ops		_ImagGrad	_ grad	returns 'grad' as the imaginary part and set the real part 0
python.ops		_ConjGrad	_ grad	returns the complex conjugate of grad
python.ops		_ComplexAbsGrad	op grad	returns the gradient of complexabs
python.ops		variable_axis_size_partitioner	max_shard_bytes axis bytes_per_string_element max_shards	get a partitioner for variablescope to keep shards below max_shard_bytes
python.ops		min_max_variable_partitioner	max_partitions axis min_slice_size bytes_per_string_element	partitioner to allocate minimum size per slice
python.ops		fixed_size_partitioner	num_shards axis	partitioner to specify a fixed number of shards along given axis
python.ops		create_partitioned_variables	shape slicing initializer dtype	create a list of partitioned variables according to the given slicing
python.ops		encode_resource_handle	resource_handle	encode a resourcehandle proto as custom numpy struct type
python.ops	TensorHandle	__init__	handle dtype session	constructs a new tensor handle
python.ops	TensorHandle	_get_resource_handle		the resourcehandle representation of this handle
python.ops	TensorHandle	to_numpy_array		convert a tensorhandle object to a feedable numpy value
python.ops	TensorHandle	handle		the string representation of this handle
python.ops	TensorHandle	eval		return the value of the tensor represented by this handle
python.ops	TensorHandle	delete		force the deletion of this persistent tensor
python.ops	TensorHandle	get_raw_handle		return the raw handle of the tensor
python.ops	TensorHandle	_get_device_name	handle	the device name encoded in the handle
python.ops	TensorHandle	_get_reader_key	handle	the graph key for reader
python.ops	TensorHandle	_get_mover_key	feeder handle	the graph key for mover
python.ops		get_session_handle	data name	return the handle of data
python.ops		get_session_tensor	handle dtype name	get the tensor of type dtype by feeding a tensor handle
python.ops		delete_session_tensor	handle name	delete the tensor for the given tensor handle
python.ops		_get_handle_reader	graph handle dtype	return a read subgraph for this handle
python.ops		_get_handle_mover	graph feeder handle	return a move subgraph for this pair of feeder and handle
python.ops		_get_handle_deleter	graph deleter_key handle	return a deletion subgraph for this handle
python.ops		_ResizeNearestNeighborGrad	op grad	the derivatives for nearest neighbor resizing
python.ops		_ResizeBilinearGrad	op grad	the derivatives for bilinear resizing
python.ops		_CropAndResizeGrad	op grad	the derivatives for crop_and_resize
python.ops		_features_to_raw_params	features types	split feature tuples into raw params used by gen_parsing_ops
python.ops		_construct_sparse_tensors_for_sparse_features	features tensor_dict	merges sparsetensors of indices and values of sparsefeatures
python.ops		parse_example	serialized features name example_names	parses example protos into a dict of tensors
python.ops		_parse_example_raw	serialized names sparse_keys sparse_types	parses example protos
python.ops		parse_single_example	serialized features name example_names	parses a single example proto
python.ops		_parse_single_example_raw	serialized names sparse_keys sparse_types	parses a single example proto
python.ops		parse_single_sequence_example	serialized context_features sequence_features example_name	parses a single sequenceexample proto
python.ops		_parse_single_sequence_example_raw	serialized context_sparse_keys context_sparse_types context_dense_keys	parses a single sequenceexample proto
python.ops		remove_squeezable_dimensions	labels predictions expected_rank_diff name	squeeze last dim if ranks differ from expected by exactly 1
python.ops		confusion_matrix	labels predictions num_classes dtype	computes the confusion matrix from predictions and labels
python.ops		_do_gather	params ids name	deals with doing gather differently for resource variables
python.ops		embedding_lookup	params ids partition_strategy name	looks up ids in a list of embedding tensors
python.ops		embedding_lookup_sparse	params sp_ids sp_weights partition_strategy	computes embeddings for the given ids and weights
python.ops		_convert_to_sparse_tensor	sp_input	convert sp_input to sparsetensor and return it
python.ops		_convert_to_sparse_tensors	sp_inputs	convert sp_inputs to sparsetensor objects and return them
python.ops		sparse_concat	axis sp_inputs name expand_nonconcat_dim	concatenates a list of sparsetensor along the specified dimension
python.ops		sparse_add	a b thresh	adds two tensors at least one of each is a sparsetensor
python.ops		sparse_dense_cwise_add	sp_t dense_t	adds up a sparsetensor and a dense tensor using these special rules 1 broadcasts the dense side to have the same shape as the sparse side if
python.ops		sparse_reorder	sp_input name	reorders a sparsetensor into the canonical row-major ordering
python.ops		sparse_reshape	sp_input shape name	reshapes a sparsetensor to represent values in a new dense shape
python.ops		sparse_split	keyword_required sp_input num_split axis	split a sparsetensor into num_split tensors along axis
python.ops		sparse_to_dense	sparse_indices output_shape sparse_values default_value	converts a sparse representation into a dense tensor
python.ops		sparse_reduce_sum	sp_input axis keep_dims reduction_axes	computes the sum of elements across dimensions of a sparsetensor
python.ops		sparse_reduce_sum_sparse	sp_input axis keep_dims reduction_axes	computes the sum of elements across dimensions of a sparsetensor
python.ops		sparse_tensor_to_dense	sp_input default_value validate_indices name	converts a sparsetensor into a dense tensor
python.ops		sparse_to_indicator	sp_input vocab_size name	converts a sparsetensor of ids into a dense bool indicator tensor
python.ops		sparse_merge	sp_ids sp_values vocab_size name	combines a batch of feature ids and values into a single sparsetensor
python.ops		sparse_retain	sp_input to_retain	retains specified non-empty values within a sparsetensor
python.ops		sparse_reset_shape	sp_input new_shape	resets the shape of a sparsetensor with indices and values unchanged
python.ops		sparse_fill_empty_rows	sp_input default_value name	fills empty rows in the input 2-d sparsetensor with a default value
python.ops		serialize_sparse	sp_input name	serialize a sparsetensor into a string 3-vector (1-d tensor) object
python.ops		serialize_many_sparse	sp_input name	serialize an n-minibatch sparsetensor into an [n 3] string tensor
python.ops		deserialize_many_sparse	serialized_sparse dtype rank name	deserialize and concatenate sparsetensors from a serialized minibatch
python.ops		sparse_tensor_dense_matmul	sp_a b adjoint_a adjoint_b	multiply sparsetensor of rank 2 "a" by dense matrix "b"
python.ops		sparse_softmax	sp_input name	applies softmax to a batched n-d sparsetensor
python.ops		sparse_maximum	sp_a sp_b name	returns the element-wise max of two sparsetensors
python.ops		sparse_minimum	sp_a sp_b name	returns the element-wise min of two sparsetensors
python.ops		sparse_transpose	sp_input perm name	transposes a sparsetensor the returned tensor's dimension i will correspond to the input dimension
python.ops		_add_sparse_to_tensors_map	sp_input container shared_name name	add a sparsetensor to a sparsetensorsmap and return its handle
python.ops		_add_many_sparse_to_tensors_map	sp_input container shared_name name	add a minibatch sparsetensor to a sparsetensorsmap, return n handles
python.ops		_take_many_sparse_from_tensors_map	sparse_map_op sparse_handles rank name	read sparsetensors from a sparsetensorsmap and concatenate them
python.ops		Assert	condition data summarize name	asserts that the given condition is true
python.ops		_Identity	data name	return a tensor with the same shape and contents as the input tensor
python.ops		_Enter	data frame_name is_constant parallel_iterations	creates or finds a child frame and makes data available to it
python.ops		exit	data name	exits the current frame to its parent frame
python.ops		switch	data pred dtype name	forwards data to an output determined by pred
python.ops		_SwitchRefOrTensor	data pred name	forwards data to an output determined by pred
python.ops		merge	inputs name	returns the value of an available element of inputs
python.ops		_IsLoopConstantEnter	op	return true iff op is a loop invariant
python.ops		_GetLoopConstantEnter	value	return the enter op if we can infer value to be a loop invariant
python.ops		_GetOutputContext	op	return the control flow context for the output of an op
python.ops		_SetShapeInvariants	input_vars enter_vars shapes	set the shapes of the tensors in enter_vars to shapes
python.ops		_EnforceShapeInvariant	merge_var next_var	check if the shapes of the loops variables are invariants
python.ops		_AddNextAndBackEdge	m v	add nextiteration and back edge from v to m
python.ops	GradLoopState	outer_grad_state		the grad loop state for outer loop
python.ops	GradLoopState	forward_context		the while loop context for forward
python.ops	GradLoopState	forward_index		the loop index of forward loop
python.ops	GradLoopState	forward_sync		a control trigger node for synchronization in the forward loop
python.ops	GradLoopState	grad_context		the corresponding whilecontext for gradient
python.ops	GradLoopState	grad_index		the loop index of backprop loop
python.ops	GradLoopState	grad_sync		a control trigger node for synchronization in the grad loop
python.ops	GradLoopState	history_map		the map that records all the tensors needed for backprop
python.ops	GradLoopState	switch_map		the map that records all the switch ops for the while loop
python.ops	GradLoopState	unused_exits		the list of "unused" exits
python.ops	GradLoopState	deferred_exits		the list of "deferred" exits
python.ops	GradLoopState	forward_loop_exits		the list of exits of the forward loop
python.ops	GradLoopState	pending_exits_count		the number of exits we expect to see but haven't
python.ops	GradLoopState	pending_exits_count	cnt	set the pending count to cnt
python.ops	GradLoopState	AddForwardAccumulator	value dead_branch	add an accumulator for each forward tensor that is needed in backprop
python.ops	GradLoopState	AddBackPropAccumulatedValue	history_value value dead_branch	add the getter for an accumulated value in the grad context
python.ops	GradLoopState	GetRealValue	value	get the real value of value
python.ops		_GetWhileContext	op	get the whilecontext to which this op belongs
python.ops	ControlFlowState	GetGradState	op before	return the grad state for this op if it's in a forward loop context
python.ops	ControlFlowState	ProcessUnusedLoopExits	pending_count to_ops_set	process all the "unused" loop exits
python.ops	ControlFlowState	EnterGradWhileContext	op before	enter the whilecontext for gradient computation
python.ops	ControlFlowState	ExitGradWhileContext	op before	exit the whilecontext for gradient computation
python.ops	ControlFlowState	AddWhileContext	op between_op_list between_ops	add the grad state for the while loop that op belongs to
python.ops	ControlFlowState	ZerosLikeForExit	val	create zeros_like gradient for a loop exit
python.ops	ControlFlowState	ZerosLike	op index	create zeros_like for the specified output of an op
python.ops	ControlFlowState	PostProcessing		perform postprocessing at the end of gradients()
python.ops		MaybeCreateControlFlowState	between_op_list between_ops colocate_gradients_with_ops	create the state for all the while loops involved in one gradients()
python.ops		IsSwitch	op	return true if op is a switch
python.ops		IsLoopExit	op	return true if op is an exit
python.ops		IsLoopSwitch	op	return true if op is the switch for a while loop
python.ops		ZerosLikeOutsideLoop	op index	create zeros_like for the specified output of an op
python.ops	ControlFlowContext	_init_values_from_proto	values_def import_scope	initializes values and external_values from valuesdef protocol buffer
python.ops	ControlFlowContext	outer_context		return the context containing this context
python.ops	ControlFlowContext	_to_proto	export_scope	converts the values to a valuesdef protocol buffer
python.ops	ControlFlowContext	_from_proto	values_def import_scope	returns a controlflowcontext created from values_def
python.ops	ControlFlowContext	Enter		enter this control flow context
python.ops	ControlFlowContext	Exit		exit this control flow context
python.ops	ControlFlowContext	ExitResult	result	make a list of tensors available in the outer context
python.ops	ControlFlowContext	GetWhileContext		return the while context containing this context
python.ops	ControlFlowContext	_RemoveExternalControlEdges	op	remove any external control dependency on this op
python.ops	CondContext	__init__	pred pivot branch name	creates a condcontext
python.ops	CondContext	_init_from_proto	context_def import_scope	creates a new condcontext from protocol buffer
python.ops	CondContext	to_proto	export_scope	converts a condcontext to a condcontextdef protocol buffer
python.ops	CondContext	from_proto	context_def import_scope	returns a condcontext object created from context_def
python.ops	CondContext	AddValue	val	add val to the current context and its outer context recursively
python.ops	CondContext	_AddOpInternal	op	add op to the current context
python.ops	CondContext	_ProcessOutputTensor	val	process an output tensor of a conditional branch
python.ops	CondContext	BuildCondBranch	fn	add the subgraph defined by fn() to the graph
python.ops		cond	pred true_fn false_fn strict	return true_fn() if the predicate pred is true else false_fn()
python.ops		_resource_safe_shape	t	returns the shape of t or the variable it points to
python.ops	WhileContext	__init__	parallel_iterations back_prop swap_memory name	"creates a whilecontext
python.ops	WhileContext	_init_from_args	parallel_iterations back_prop swap_memory name	creates a new whilecontext from arguments
python.ops	WhileContext	_init_from_proto	context_def import_scope	creates a new whilecontext from protocol buffer
python.ops	WhileContext	parallel_iterations		the number of iterations allowed to run in parallel
python.ops	WhileContext	back_prop		true iff backprop is enabled for this while loop
python.ops	WhileContext	swap_memory		true iff gpu-cpu memory swap is enabled for this while loop
python.ops	WhileContext	pivot		the boolean tensor representing the loop termination condition
python.ops	WhileContext	loop_exits		the list of exit tensors for loop variables
python.ops	WhileContext	grad_state		the gradient loop state
python.ops	WhileContext	to_proto	export_scope	converts a whilecontext to a whilecontextdef protocol buffer
python.ops	WhileContext	from_proto	context_def import_scope	returns a whilecontext object created from context_def
python.ops	WhileContext	AddValue	val	add val to the current context and its outer context recursively
python.ops	WhileContext	AddOp	op	add op to the current context
python.ops	WhileContext	_AddOpInternal	op	add op to the current context
python.ops	WhileContext	_MaybeAddControlDependency	op	add a control input to the op if it only depends on loop invariants
python.ops	WhileContext	AddForwardLoopCounter	outer_grad_state	adds a loop that counts the number of iterations
python.ops	WhileContext	AddBackPropLoopCounter	count outer_grad_state	add the backprop loop that controls the iterations
python.ops	WhileContext	AddBackPropAccumulator	op grad	add an accumulation loop for every loop invariant
python.ops	WhileContext	AddBackPropIndexedSlicesAccumulator	op grad	this is used for accumulating gradients that are indexedslices
python.ops	WhileContext	_InitializeValues	values	makes the values known to this context
python.ops	WhileContext	_BuildLoop	pred body original_loop_vars loop_vars	core add the loop termination condition and body to the graph
python.ops	WhileContext	BuildLoop	pred body loop_vars shape_invariants	add the loop termination condition and body to the graph
python.ops		while_loop	cond body loop_vars shape_invariants	repeat body while the condition cond is true
python.ops		_AsTensorList	x p	return x as a list of tensors or indexedslices
python.ops		with_dependencies	dependencies output_tensor name	produces the content of output_tensor only after dependencies
python.ops		group		create an op that groups multiple operations
python.ops		tuple	tensors name control_inputs	group tensors together
python.ops		case	pred_fn_pairs default exclusive strict	create a case operation
python.ops		tensor_summary	name tensor summary_description collections	outputs a summary protocol buffer with a serialized tensor proto
python.ops		expand_dims	input axis name dim	inserts a dimension of 1 into a tensor's shape
python.ops		broadcast_dynamic_shape	shape_x shape_y	returns the broadcasted dynamic shape between shape_x and shape_y
python.ops		broadcast_static_shape	shape_x shape_y	returns the broadcasted static shape between shape_x and shape_y
python.ops		shape	input name out_type	returns the shape of a tensor
python.ops		shape_internal	input name optimize out_type	returns the shape of a tensor
python.ops		size	input name out_type	returns the size of a tensor
python.ops		size_internal	input name optimize out_type	returns the size of a tensor
python.ops		rank	input name	returns the rank of a tensor
python.ops		rank_internal	input name optimize	returns the rank of a tensor
python.ops		_SliceHelper	tensor slice_spec var	overload for tensor __getitem__
python.ops		slice	input_ begin size name	extracts a slice from a tensor
python.ops		strided_slice	input_ begin end strides	extracts a strided slice of a tensor generalized python array indexing
python.ops		_SliceHelperVar	var slice_spec	creates a slice helper object given a variable
python.ops		parallel_stack	values name	stacks a list of rank-r tensors into one rank- r+1 tensor in parallel
python.ops		stack	values axis name	stacks a list of rank-r tensors into one rank- r+1 tensor
python.ops		_autopacking_helper	list_or_tuple dtype name	converts the given list or tuple to a tensor by packing
python.ops		_get_dtype_from_nested_lists	list_or_tuple	returns the dtype of any tensor-like object in list_or_tuple, if found
python.ops		_autopacking_conversion_function	v dtype name as_ref	tensor conversion function that automatically packs arguments
python.ops		unstack	value num axis name	unpacks the given dimension of a rank-r tensor into rank- r-1 tensors
python.ops		concat	values axis name	concatenates tensors along one dimension
python.ops		boolean_mask	tensor mask name	apply boolean mask to tensor numpy equivalent is tensor[mask]
python.ops		sparse_mask	a mask_indices name	masks elements of indexedslices
python.ops		split	value num_or_size_splits axis num	splits a tensor into sub tensors
python.ops		transpose	a perm name	transposes a permutes the dimensions according to perm
python.ops		matrix_transpose	a name	transposes last two dimensions of tensor a
python.ops		zeros	shape dtype name	creates a tensor with all elements set to zero
python.ops		zeros_like	tensor dtype name optimize	creates a tensor with all elements set to zero
python.ops		ones_like	tensor dtype name optimize	creates a tensor with all elements set to 1
python.ops		ones	shape dtype name	creates a tensor with all elements set to 1
python.ops		placeholder	dtype shape name	inserts a placeholder for a tensor that will be always fed
python.ops		_normalize_sparse_shape	shape name	takes numpy array or tensor or none and returns either none or tensor
python.ops		sparse_placeholder	dtype shape name	inserts a placeholder for a sparse tensor that will be always fed
python.ops		pad	tensor paddings mode name	pads a tensor
python.ops		meshgrid		broadcasts parameters for evaluation on an n-d grid
python.ops		_compute_size_of_strided_dim	shrink spec size	computes the size of a single strided slice dimension
python.ops		_TileGradShape	op	shape function for the tilegrad op
python.ops		edit_distance	hypothesis truth normalize name	computes the levenshtein distance between sequences
python.ops		_FakeQuantWithMinMaxArgsGradient	op grad	gradient for fakequantwithminmaxargs op
python.ops		_FakeQuantWithMinMaxVarsGradient	op grad	gradient for fakequantwithminmaxvars op
python.ops		_FakeQuantWithMinMaxVarsPerChannelGradient	op grad	gradient for fakequantwithminmaxvarsperchannel op
python.ops		required_space_to_batch_paddings	input_shape block_shape base_paddings name	calculate padding required to make block_shape divide input_shape
python.ops		one_hot	indices depth on_value off_value	returns a one-hot tensor
python.ops		sequence_mask	lengths maxlen dtype name	return a mask tensor representing the first n positions of each row
python.ops		squeeze	input axis name squeeze_dims	removes dimensions of size 1 from the shape of a tensor
python.ops		where	condition x y name	return the elements either from x or y, depending on the condition
python.ops		_transpose_batch_time	x	transpose the batch and time dimensions of a tensor
python.ops		_infer_state_dtype	explicit_dtype state	infer the dtype of an rnn state
python.ops		_on_device	fn device	build the subgraph defined by lambda fn on device if it's not none
python.ops		_rnn_step	time sequence_length min_sequence_length max_sequence_length	calculate one step of a dynamic rnn minibatch
python.ops		_reverse_seq	input_seq lengths	reverse a list of tensors up to specified lengths
python.ops		bidirectional_dynamic_rnn	cell_fw cell_bw inputs sequence_length	creates a dynamic version of bidirectional recurrent neural network
python.ops		dynamic_rnn	cell inputs sequence_length initial_state	creates a recurrent neural network specified by rnncell cell
python.ops		_dynamic_rnn_loop	cell inputs initial_state parallel_iterations	internal implementation of dynamic rnn
python.ops		raw_rnn	cell loop_fn parallel_iterations swap_memory	creates an rnn specified by rnncell cell and loop function loop_fn
python.ops		histogram_fixed_width	values value_range nbins dtype	return histogram of values
python.ops.losses		add_loss	loss loss_collection	adds a externally defined loss to the collection of losses
python.ops.losses		get_losses	scope loss_collection	gets the list of losses from the loss_collection
python.ops.losses		get_regularization_losses	scope	gets the list of regularization losses
python.ops.losses		get_regularization_loss	scope name	gets the total regularization loss
python.ops.losses		get_total_loss	add_regularization_losses name	returns a tensor whose value represents the total loss
python.ops.losses		_safe_div	numerator denominator name	computes a safe divide which returns 0 if the denominator is zero
python.ops.losses		_safe_mean	losses num_present	computes a safe mean of the losses
python.ops.losses		_num_present	losses weights per_batch	computes the number of elements in the loss function induced by weights
python.ops.losses		compute_weighted_loss	losses weights scope loss_collection	computes the weighted loss
python.ops.losses		absolute_difference	labels predictions weights scope	adds an absolute difference loss to the training procedure
python.ops.losses		cosine_distance	labels predictions dim weights	adds a cosine-distance loss to the training procedure
python.ops.losses		hinge_loss	labels logits weights scope	adds a hinge loss to the training procedure
python.ops.losses		huber_loss	labels predictions weights delta	adds a huber loss term to the training procedure
python.ops.losses		log_loss	labels predictions weights epsilon	adds a log loss term to the training procedure
python.ops.losses		mean_pairwise_squared_error	labels predictions weights scope	adds a pairwise-errors-squared loss to the training procedure
python.ops.losses		mean_squared_error	labels predictions weights scope	adds a sum-of-squares loss to the training procedure
python.ops.losses		sigmoid_cross_entropy	multi_class_labels logits weights label_smoothing	creates a cross-entropy loss using tf nn sigmoid_cross_entropy_with_logits
python.ops.losses		softmax_cross_entropy	onehot_labels logits weights label_smoothing	creates a cross-entropy loss using tf nn softmax_cross_entropy_with_logits
python.ops.losses		_remove_squeezable_dimensions	labels predictions weights expected_rank_diff	internal version of _remove_squeezable_dimensions which handles weights
python.ops.losses		sparse_softmax_cross_entropy	labels logits weights scope	cross-entropy loss using tf nn sparse_softmax_cross_entropy_with_logits
python.ops.distributions	Normal	__init__	loc scale validate_args allow_nan_stats	construct normal distributions with mean and stddev loc and scale
python.ops.distributions	Normal	loc		distribution parameter for the mean
python.ops.distributions	Normal	scale		distribution parameter for standard deviation
python.ops.distributions	Normal	_z	x	standardize input x to a unit normal
python.ops.distributions	Normal	_inv_z	z	reconstruct input x from a its normalized version
python.ops.distributions		_kl_normal_normal	n_a n_b name	calculate the batched kl divergence kl(n_a || n_b) with n_a and n_b normal
python.ops.distributions		ndtr	x name	normal distribution function
python.ops.distributions		_ndtr	x	implements ndtr core logic
python.ops.distributions		ndtri	p name	the inverse of the cdf of the normal distribution function
python.ops.distributions		_ndtri	p	implements ndtri core logic
python.ops.distributions		log_ndtr	x series_order name	log normal distribution function
python.ops.distributions		_log_ndtr_lower	x series_order	asymptotic expansion version of log[cdf x ], apppropriate for x<<-1
python.ops.distributions		_log_ndtr_asymptotic_series	x series_order	calculates the asymptotic series used in log_ndtr
python.ops.distributions		_double_factorial	n	the double factorial function for small python integer n
python.ops.distributions		log_cdf_laplace	x name	log laplace distribution function
python.ops.distributions	DirichletMultinomial	__init__	total_count concentration validate_args allow_nan_stats	initialize a batch of dirichletmultinomial distributions
python.ops.distributions	DirichletMultinomial	total_count		number of trials used to construct a sample
python.ops.distributions	DirichletMultinomial	concentration		concentration parameter expected prior counts for that coordinate
python.ops.distributions	DirichletMultinomial	total_concentration		sum of last dim of concentration parameter
python.ops.distributions	DirichletMultinomial	_variance_scale_term		helper to _covariance and _variance which computes a shared scale
python.ops.distributions	DirichletMultinomial	_maybe_assert_valid_concentration	concentration validate_args	checks the validity of the concentration parameter
python.ops.distributions	DirichletMultinomial	_maybe_assert_valid_sample	counts	check counts for proper shape values then return tensor version
python.ops.distributions	Dirichlet	__init__	concentration validate_args allow_nan_stats name	initialize a batch of dirichlet distributions
python.ops.distributions	Dirichlet	concentration		concentration parameter expected counts for that coordinate
python.ops.distributions	Dirichlet	total_concentration		sum of last dim of concentration parameter
python.ops.distributions	Dirichlet	_variance_scale_term		helper to _covariance and _variance which computes a shared scale
python.ops.distributions	Dirichlet	_maybe_assert_valid_concentration	concentration validate_args	checks the validity of the concentration parameter
python.ops.distributions	Dirichlet	_maybe_assert_valid_sample	x	checks the validity of a sample
python.ops.distributions		assert_scalar_congruency	bijector lower_x upper_x n	assert bijector's forward/inverse/inverse_log_det_jacobian are congruent
python.ops.distributions		assert_bijective_and_finite	bijector x y atol	assert that forward/inverse along with jacobians are inverses and finite
python.ops.distributions	StudentT	__init__	df loc scale validate_args	construct student's t distributions
python.ops.distributions	StudentT	df		degrees of freedom in these student's t distribution s
python.ops.distributions	StudentT	loc		locations of these student's t distribution s
python.ops.distributions	StudentT	scale		scaling factors of these student's t distribution s
python.ops.distributions		assert_close	x y data summarize	assert that that x and y are within machine epsilon of each other
python.ops.distributions		assert_integer_form	x data summarize message	assert that x has integer components or floats equal to integers
python.ops.distributions		embed_check_nonnegative_discrete	x check_integer	assert x is a non-negative tensor and optionally of integers
python.ops.distributions		same_dynamic_shape	a b	returns whether a and b have the same dynamic shape
python.ops.distributions		get_logits_and_probs	logits probs multidimensional validate_args	converts logit to probabilities or vice-versa and returns both
python.ops.distributions		matrix_diag_transform	matrix transform name	transform diagonal of [batch-]matrix leave rest of matrix unchanged
python.ops.distributions		rotate_transpose	x shift name	circularly moves dims left or right
python.ops.distributions		pick_vector	cond true_vector false_vector name	picks possibly different length row tensors based on condition
python.ops.distributions		gen_new_seed	seed salt	generate a new seed from the given seed and salt
python.ops.distributions		fill_lower_triangular	x validate_args name	creates a batch of lower triangular matrix from a vector of inputs
python.ops.distributions		softplus_inverse	x name	computes the inverse softplus i e x = softplus_inverse(softplus x
python.ops.distributions		dimension_size	x axis	returns the size of a specific dimension
python.ops.distributions	AppendDocstring	__init__	additional_note kwargs_dict	initializes the appenddocstring object
python.ops.distributions	Laplace	__init__	loc scale validate_args allow_nan_stats	construct laplace distribution with parameters loc and scale
python.ops.distributions	Laplace	loc		distribution parameter for the location
python.ops.distributions	Laplace	scale		distribution parameter for scale
python.ops.distributions		_registered_kl	type_a type_b	get the kl function registered for classes a and b
python.ops.distributions		kl_divergence	distribution_a distribution_b allow_nan_stats name	get the kl-divergence kl(distribution_a || distribution_b)
python.ops.distributions	RegisterKL	__init__	dist_cls_a dist_cls_b	initialize the kl registrar
python.ops.distributions	RegisterKL	__call__	kl_fn	perform the kl registration
python.ops.distributions	_Mapping	__new__	cls x y ildj	custom __new__ so namedtuple items have defaults
python.ops.distributions	_Mapping	x_key		returns key used for caching y=g x
python.ops.distributions	_Mapping	y_key		returns key used for caching x=g^{-1} y
python.ops.distributions	_Mapping	merge	x y ildj kwargs	returns new _mapping with args merged with self
python.ops.distributions	_Mapping	_merge	old new	helper to merge which handles merging one value
python.ops.distributions	_Mapping	_deep_tuple	x	converts lists of lists to tuples of tuples
python.ops.distributions	Bijector	event_ndims		returns then number of event dimensions this bijector operates on
python.ops.distributions	Bijector	graph_parents		returns this bijector's graph_parents as a python list
python.ops.distributions	Bijector	is_constant_jacobian		returns true iff the jacobian is not a function of x
python.ops.distributions	Bijector	validate_args		returns true if tensor arguments will be validated
python.ops.distributions	Bijector	dtype		dtype of tensors transformable by this distribution
python.ops.distributions	Bijector	name		returns the string name of this bijector
python.ops.distributions	Bijector	_forward_event_shape_tensor	input_shape	subclass implementation for forward_event_shape_tensor function
python.ops.distributions	Bijector	forward_event_shape_tensor	input_shape name	shape of a single sample from a single batch as an int32 1d tensor
python.ops.distributions	Bijector	_forward_event_shape	input_shape	subclass implementation for forward_event_shape public function
python.ops.distributions	Bijector	forward_event_shape	input_shape	shape of a single sample from a single batch as a tensorshape
python.ops.distributions	Bijector	_inverse_event_shape_tensor	output_shape	subclass implementation for inverse_event_shape_tensor function
python.ops.distributions	Bijector	inverse_event_shape_tensor	output_shape name	shape of a single sample from a single batch as an int32 1d tensor
python.ops.distributions	Bijector	_inverse_event_shape	output_shape	subclass implementation for inverse_event_shape public function
python.ops.distributions	Bijector	inverse_event_shape	output_shape	shape of a single sample from a single batch as a tensorshape
python.ops.distributions	Bijector	_forward	x	subclass implementation for forward public function
python.ops.distributions	Bijector	forward	x name	returns the forward bijector evaluation i e x = g y
python.ops.distributions	Bijector	_inverse	y	subclass implementation for inverse public function
python.ops.distributions	Bijector	inverse	y name	returns the inverse bijector evaluation i e x = g^{-1} y
python.ops.distributions	Bijector	_inverse_log_det_jacobian	y	subclass implementation of inverse_log_det_jacobian public function
python.ops.distributions	Bijector	inverse_log_det_jacobian	y name	returns the log o det o jacobian o inverse y
python.ops.distributions	Bijector	_forward_log_det_jacobian	x	subclass implementation of forward_log_det_jacobian
python.ops.distributions	Bijector	forward_log_det_jacobian	x name	returns both the forward_log_det_jacobian
python.ops.distributions	Bijector	_name_scope	name values	helper function to standardize op scope
python.ops.distributions	Bijector	_maybe_assert_dtype	x	helper to check dtype when self dtype is known
python.ops.distributions	Bijector	_cache	mapping	helper which stores mapping info in forward/inverse dicts
python.ops.distributions	Bijector	_lookup	x y kwargs	helper which retrieves mapping info from forward/inverse dicts
python.ops.distributions	Bijector	_event_dims_tensor	sample	return a 1d int32 tensor range(rank sample )[-event_ndims ]
python.ops.distributions	Gamma	__init__	concentration rate validate_args allow_nan_stats	construct gamma with concentration and rate parameters
python.ops.distributions		_kl_gamma_gamma	g0 g1 name	calculate the batched kl divergence kl(g0 || g1) with g0 and g1 gamma
python.ops.distributions		_copy_fn	fn	create a deep copy of fn
python.ops.distributions		_update_docstring	old_str append_str	update old_str by inserting append_str just before the "args " section
python.ops.distributions	_DistributionMeta	__new__	mcs classname baseclasses attrs	control the creation of subclasses of the distribution class
python.ops.distributions	ReparameterizationType	__eq__	other	determine if this reparameterizationtype is equal to another
python.ops.distributions	Distribution	__init__	dtype reparameterization_type validate_args allow_nan_stats	constructs the distribution
python.ops.distributions	Distribution	param_shapes	cls sample_shape name	shapes of parameters given the desired shape of a call to sample()
python.ops.distributions	Distribution	param_static_shapes	cls sample_shape	param_shapes with static (i e tensorshape) shapes
python.ops.distributions	Distribution	name		name prepended to all ops created by this distribution
python.ops.distributions	Distribution	dtype		the dtype of tensors handled by this distribution
python.ops.distributions	Distribution	parameters		dictionary of parameters used to instantiate this distribution
python.ops.distributions	Distribution	reparameterization_type		describes how samples from the distribution are reparameterized
python.ops.distributions	Distribution	allow_nan_stats		python bool describing behavior when a stat is undefined
python.ops.distributions	Distribution	validate_args		python bool indicating possibly expensive checks are enabled
python.ops.distributions	Distribution	copy		creates a deep copy of the distribution
python.ops.distributions	Distribution	batch_shape_tensor	name	shape of a single sample from a single event index as a 1-d tensor
python.ops.distributions	Distribution	batch_shape		shape of a single sample from a single event index as a tensorshape
python.ops.distributions	Distribution	event_shape_tensor	name	shape of a single sample from a single batch as a 1-d int32 tensor
python.ops.distributions	Distribution	event_shape		shape of a single sample from a single batch as a tensorshape
python.ops.distributions	Distribution	is_scalar_event	name	indicates that event_shape == []
python.ops.distributions	Distribution	is_scalar_batch	name	indicates that batch_shape == []
python.ops.distributions	Distribution	sample	sample_shape seed name	generate samples of the specified shape
python.ops.distributions	Distribution	log_prob	value name	log probability density/mass function
python.ops.distributions	Distribution	prob	value name	probability density/mass function
python.ops.distributions	Distribution	log_cdf	value name	log cumulative distribution function
python.ops.distributions	Distribution	cdf	value name	cumulative distribution function
python.ops.distributions	Distribution	log_survival_function	value name	log survival function
python.ops.distributions	Distribution	entropy	name	shannon entropy in nats
python.ops.distributions	Distribution	quantile	value name	quantile function aka "inverse cdf" or "percent point function"
python.ops.distributions	Distribution	_name_scope	name values	helper function to standardize op scope
python.ops.distributions	Distribution	_expand_sample_shape_to_vector	x name	helper to sample which ensures input is 1d
python.ops.distributions	Distribution	_set_sample_static_shape	x sample_shape	helper to sample; sets static shape info
python.ops.distributions	Distribution	_is_scalar_helper	static_shape dynamic_shape_fn	implementation for is_scalar_batch and is_scalar_event
python.ops.distributions	Bernoulli	__init__	logits probs dtype validate_args	construct bernoulli distributions
python.ops.distributions	Bernoulli	logits		log-odds of a 1 outcome (vs 0)
python.ops.distributions	Bernoulli	probs		probability of a 1 outcome (vs 0)
python.ops.distributions	Bernoulli	_mode		returns 1 if prob > 0 5 and 0 otherwise
python.ops.distributions		_kl_bernoulli_bernoulli	a b name	calculate the batched kl divergence kl(a || b) with a and b bernoulli
python.ops.distributions	Beta	__init__	concentration1 concentration0 validate_args allow_nan_stats	initialize a batch of beta distributions
python.ops.distributions	Beta	concentration1		concentration parameter associated with a 1 outcome
python.ops.distributions	Beta	concentration0		concentration parameter associated with a 0 outcome
python.ops.distributions	Beta	total_concentration		sum of concentration parameters
python.ops.distributions	Beta	_maybe_assert_valid_concentration	concentration validate_args	checks the validity of a concentration parameter
python.ops.distributions	Beta	_maybe_assert_valid_sample	x	checks the validity of a sample
python.ops.distributions		_kl_beta_beta	d1 d2 name	calculate the batchwise kl divergence kl(d1 || d2) with d1 and d2 beta
python.ops.distributions	Categorical	__init__	logits probs dtype validate_args	initialize categorical distributions using class log-probabilities
python.ops.distributions	Categorical	event_size		scalar int32 tensor the number of classes
python.ops.distributions	Categorical	logits		vector of coordinatewise logits
python.ops.distributions	Categorical	probs		vector of coordinatewise probabilities
python.ops.distributions		_kl_categorical_categorical	a b name	calculate the batched kl divergence kl(a || b) with a and b categorical
python.ops.distributions		_static_value	x	returns the static value of a tensor or none
python.ops.distributions		_logical_and		convenience function which attempts to statically reduce_all
python.ops.distributions		_logical_equal	x y	convenience function which attempts to statically compute x == y
python.ops.distributions		_logical_not	x	convenience function which attempts to statically apply logical_not
python.ops.distributions		_concat_vectors		convenience function which concatenates input vectors
python.ops.distributions		_pick_scalar_condition	pred cond_true cond_false	convenience function which chooses the condition based on the predicate
python.ops.distributions		_ones_like	x	convenience function attempts to statically construct ones_like
python.ops.distributions		_ndims_from_shape	shape	returns tensor's rank implied by a tensor shape
python.ops.distributions		_is_scalar_from_shape	shape	returns true tensor if tensor shape implies a scalar
python.ops.distributions	TransformedDistribution	__init__	distribution bijector batch_shape event_shape	construct a transformed distribution
python.ops.distributions	TransformedDistribution	distribution		base distribution p x
python.ops.distributions	TransformedDistribution	bijector		function transforming x => y
python.ops.distributions	TransformedDistribution	_maybe_validate_shape_override	override_shape base_is_scalar validate_args name	helper to __init__ which ensures override batch/event_shape are valid
python.ops.distributions	TransformedDistribution	_maybe_rotate_dims	x rotate_right	helper which rolls left event_dims left or right event_dims right
python.ops.distributions	Exponential	__init__	rate validate_args allow_nan_stats name	construct exponential distribution with parameter rate
python.ops.distributions	Uniform	__init__	low high validate_args allow_nan_stats	initialize a batch of uniform distributions
python.ops.distributions	Uniform	low		lower boundary of the output interval
python.ops.distributions	Uniform	high		upper boundary of the output interval
python.ops.distributions	Uniform	range	name	high - low
python.ops.distributions	Multinomial	__init__	total_count logits probs validate_args	initialize a batch of multinomial distributions
python.ops.distributions	Multinomial	total_count		number of trials used to construct a sample
python.ops.distributions	Multinomial	logits		vector of coordinatewise logits
python.ops.distributions	Multinomial	probs		probability of of drawing a 1 in that coordinate
python.ops.distributions	Multinomial	_maybe_assert_valid_sample	counts	check counts for proper shape values then return tensor version
python.lib.io	FileIO	name		returns the file name
python.lib.io	FileIO	mode		returns the mode in which the file was opened
python.lib.io	FileIO	size		returns the size of the file
python.lib.io	FileIO	write	file_content	writes file_content to the file appends to the end of the file
python.lib.io	FileIO	read	n	returns the contents of a file as a string
python.lib.io	FileIO	seek	offset whence position	seeks to the offset in the file
python.lib.io	FileIO	readline		reads the next line from the file leaves the '\n' at the end
python.lib.io	FileIO	readlines		returns all lines from the file in a list
python.lib.io	FileIO	tell		returns the current position in the file
python.lib.io	FileIO	__enter__		make usable with "with" statement
python.lib.io	FileIO	__exit__	unused_type unused_value unused_traceback	make usable with "with" statement
python.lib.io	FileIO	flush		flushes the writable file
python.lib.io	FileIO	close		closes fileio should be called for the writablefile to be flushed
python.lib.io		file_exists	filename	determines whether a path exists or not
python.lib.io		delete_file	filename	deletes the file located at 'filename'
python.lib.io		read_file_to_string	filename binary_mode	reads the entire contents of a file to a string
python.lib.io		write_string_to_file	filename file_content	writes a string to a given file
python.lib.io		get_matching_files	filename	returns a list of files that match the given pattern
python.lib.io		create_dir	dirname	creates a directory with the name 'dirname'
python.lib.io		recursive_create_dir	dirname	creates a directory and all parent/intermediate directories
python.lib.io		copy	oldpath newpath overwrite	copies data from oldpath to newpath
python.lib.io		rename	oldname newname overwrite	rename or move a file / directory
python.lib.io		atomic_write_string_to_file	filename contents	writes to filename atomically
python.lib.io		delete_recursively	dirname	deletes everything under dirname recursively
python.lib.io		is_directory	dirname	returns whether the path is a directory or not
python.lib.io		list_directory	dirname	returns a list of entries contained within a directory
python.lib.io		walk	top in_order	recursive directory tree generator for directories
python.lib.io		stat	filename	returns file statistics for a given path
python.lib.io		tf_record_iterator	path options	an iterator that read the records from a tfrecords file
python.lib.io	TFRecordWriter	__init__	path options	opens file path and creates a tfrecordwriter writing to it
python.lib.io	TFRecordWriter	__enter__		enter a with block
python.lib.io	TFRecordWriter	__exit__	unused_type unused_value unused_traceback	exit a with block closing the file
python.lib.io	TFRecordWriter	write	record	write a string record to the file
python.lib.io	TFRecordWriter	close		close the file
python.lib.io	FileIoTest	testEof		test that reading past eof does not raise an exception
python.training		_make_server_def	server_or_cluster_def job_name task_index protocol	creates a tf train serverdef protocol buffer
python.training	Server	__init__	server_or_cluster_def job_name task_index protocol	creates a new server with the given definition
python.training	Server	start		starts this server
python.training	Server	join		blocks until the server has shut down
python.training	Server	server_def		returns the tf train serverdef for this server
python.training	Server	target		returns the target for a tf session to connect to this server
python.training	Server	create_local_server	config start	creates a new single-process cluster running on the local host
python.training	ClusterSpec	__init__	cluster	creates a clusterspec
python.training	ClusterSpec	as_dict		returns a dictionary from job names to their tasks
python.training	ClusterSpec	as_cluster_def		returns a tf train clusterdef protocol buffer based on this cluster
python.training	ClusterSpec	jobs		returns a list of job names in this cluster
python.training	ClusterSpec	num_tasks	job_name	returns the number of tasks defined in the given job
python.training	ClusterSpec	task_indices	job_name	returns a list of valid task indices in the given job
python.training	ClusterSpec	task_address	job_name task_index	returns the address of the given task in the given job
python.training	ClusterSpec	job_tasks	job_name	returns a mapping from task id to address in the given job
python.training	ClusterSpec	_make_cluster_def		creates a tf train clusterdef based on the given cluster_spec
python.training	ProximalGradientDescentOptimizer	__init__	learning_rate l1_regularization_strength l2_regularization_strength use_locking	construct a new proximal gradient descent optimizer
python.training		set_summary_writer	summary_writer	sets the summary writer that events will be logged to
python.training		_clear_summary_writer		makes all subsequent log invocations error
python.training		log	level message	conditionally logs message % args at the level level
python.training		_set_cpu0	device_string	creates a new device string based on device_string but using /cpu 0
python.training	BaseSaverBuilder	save_op	filename_tensor saveables	create an op to save 'saveables'
python.training	BaseSaverBuilder	restore_op	filename_tensor saveable preferred_shard	create ops to restore 'saveable'
python.training	BaseSaverBuilder	sharded_filename	filename_tensor shard num_shards	append sharding information to a filename
python.training	BaseSaverBuilder	_AddSaveOps	filename_tensor saveables	add ops to save variables that are on the same shard
python.training	BaseSaverBuilder	_AddShardedSaveOpsForV2	checkpoint_prefix per_device	add ops to save the params per shard for the v2 format
python.training	BaseSaverBuilder	_AddShardedSaveOps	filename_tensor per_device	add ops to save the params per shard
python.training	BaseSaverBuilder	_AddRestoreOps	filename_tensor saveables restore_sequentially reshape	add operations to restore saveables
python.training	BaseSaverBuilder	_AddShardedRestoreOps	filename_tensor per_device restore_sequentially reshape	add ops to restore variables from multiple devices
python.training	BaseSaverBuilder	_GroupByDevices	saveables	group variable tensor slices per device
python.training	BaseSaverBuilder	OpListToDict	op_list	create a dictionary of names to operation lists
python.training	BaseSaverBuilder	_ValidateAndSliceInputs	names_to_saveables	returns the variables and names that will be used for a saver
python.training	BaseSaverBuilder	_AddSaveable	saveables seen_ops saveable	adds the saveable to the saveables list
python.training	BaseSaverBuilder	build	names_to_saveables reshape sharded max_to_keep	adds save/restore nodes to the graph and creates a saverdef proto
python.training		_get_saver_or_default		returns the saver from savers collection or creates a default one
python.training		_GetCheckpointFilename	save_dir latest_filename	returns a filename for storing the checkpointstate
python.training		generate_checkpoint_state_proto	save_dir model_checkpoint_path all_model_checkpoint_paths	generates a checkpoint state proto
python.training		update_checkpoint_state	save_dir model_checkpoint_path all_model_checkpoint_paths latest_filename	updates the content of the 'checkpoint' file
python.training		_update_checkpoint_state	save_dir model_checkpoint_path all_model_checkpoint_paths latest_filename	updates the content of the 'checkpoint' file
python.training		get_checkpoint_state	checkpoint_dir latest_filename	returns checkpointstate proto from the "checkpoint" file
python.training	Saver	__init__	var_list reshape sharded max_to_keep	creates a saver
python.training	Saver	_CheckpointFilename	p	returns the checkpoint filename given a filename time pair
python.training	Saver	_MetaGraphFilename	checkpoint_filename meta_graph_suffix	returns the meta graph filename
python.training	Saver	_MaybeDeleteOldCheckpoints	latest_save_path meta_graph_suffix	deletes old checkpoints if necessary
python.training	Saver	as_saver_def		generates a saverdef representation of this saver
python.training	Saver	to_proto	export_scope	converts this saver to a saverdef protocol buffer
python.training	Saver	from_proto	saver_def import_scope	returns a saver object created from saver_def
python.training	Saver	last_checkpoints		list of not-yet-deleted checkpoint filenames
python.training	Saver	set_last_checkpoints	last_checkpoints	deprecated use set_last_checkpoints_with_time
python.training	Saver	set_last_checkpoints_with_time	last_checkpoints_with_time	sets the list of old checkpoint filenames and timestamps
python.training	Saver	recover_last_checkpoints	checkpoint_paths	recovers the internal saver state after a crash
python.training	Saver	export_meta_graph	filename collection_list as_text export_scope	writes metagraphdef to save_path/filename
python.training	Saver	restore	sess save_path	restores previously saved variables
python.training	Saver	_add_collection_def	meta_graph_def key export_scope	adds a collection to metagraphdef protocol buffer
python.training		_prefix_to_checkpoint_path	prefix format_version	returns the pathname of a checkpoint file given the checkpoint prefix
python.training		latest_checkpoint	checkpoint_dir latest_filename	finds the filename of latest saved checkpoint file
python.training		import_meta_graph	meta_graph_or_file clear_devices import_scope	recreates a graph saved in a metagraphdef proto
python.training		export_meta_graph	filename meta_info_def graph_def saver_def	returns metagraphdef proto optionally writes it to filename
python.training		checkpoint_exists	checkpoint_prefix	checks whether a v1 or v2 checkpoint exists with the specified prefix
python.training		get_checkpoint_mtimes	checkpoint_prefixes	returns the mtimes modification timestamps of the checkpoints
python.training		global_step	sess global_step_tensor	small helper to get the global step
python.training		get_global_step	graph	get the global step tensor
python.training		create_global_step	graph	create global step tensor in graph
python.training		get_or_create_global_step	graph	returns and create if necessary the global step tensor
python.training		assert_global_step	global_step_tensor	asserts global_step_tensor is a scalar int variable or tensor
python.training	SessionRunHook	begin		called once before using the session
python.training	SessionRunHook	after_create_session	session coord	called when new tensorflow session is created
python.training	SessionRunHook	before_run	run_context	called before each call to run()
python.training	SessionRunHook	after_run	run_context run_values	called after each call to run()
python.training	SessionRunHook	end	session	called at the end of session
python.training	SessionRunContext	original_args		a sessionrunargs object holding the original arguments of run()
python.training	SessionRunContext	session		a tensorflow session object which will execute the run
python.training	SessionRunContext	stop_requested		returns whether a stop is requested or not
python.training	SessionRunContext	request_stop		sets stop requested field
python.training	SyncReplicasOptimizer	__init__	opt replicas_to_aggregate total_num_replicas variable_averages	construct a sync_replicas optimizer
python.training	SyncReplicasOptimizer	compute_gradients		compute gradients of "loss" for the variables in "var_list"
python.training	SyncReplicasOptimizer	apply_gradients	grads_and_vars global_step name	apply gradients to variables
python.training	SyncReplicasOptimizer	get_chief_queue_runner		returns the queuerunner for the chief to execute
python.training	SyncReplicasOptimizer	get_slot		return a slot named "name" created for "var" by the optimizer
python.training	SyncReplicasOptimizer	get_slot_names		return a list of the names of slots created by the optimizer
python.training	SyncReplicasOptimizer	get_init_tokens_op	num_tokens	returns the op to fill the sync_token_queue with the tokens
python.training	SyncReplicasOptimizer	make_session_run_hook	is_chief num_tokens	creates a hook to handle syncreplicashook ops such as initialization
python.training	_SyncReplicasOptimizerHook	__init__	sync_optimizer is_chief num_tokens	creates hook to handle syncreplicaoptimizer initialization ops
python.training	_SyncReplicasOptimizerHook	after_create_session	session coord	runs syncreplicasoptimizer initialization ops
python.training	AdagradDAOptimizer	__init__	learning_rate global_step initial_gradient_squared_accumulator_value l1_regularization_strength	construct a new adagradda optimizer
python.training		assign_moving_average	variable value decay zero_debias	compute the moving average of a variable
python.training		weighted_moving_average	value decay weight truediv	compute the weighted moving average of value
python.training		_zero_debias	unbiased_var value decay	compute the delta required for a debiased variable
python.training	ExponentialMovingAverage	__init__	decay num_updates zero_debias name	creates a new exponentialmovingaverage object
python.training	ExponentialMovingAverage	apply	var_list	maintains moving averages of variables
python.training	ExponentialMovingAverage	average	var	returns the variable holding the average of var
python.training	ExponentialMovingAverage	average_name	var	returns the name of the variable holding the average for var
python.training	ExponentialMovingAverage	variables_to_restore	moving_avg_variables	returns a map of names to variables to restore
python.training	FtrlOptimizer	__init__	learning_rate learning_rate_power initial_accumulator_value l1_regularization_strength	construct a new ftrl optimizer
python.training	_RoundRobinStrategy	__init__	num_tasks	create a new _roundrobinstrategy
python.training	_RoundRobinStrategy	__call__	unused_op	choose a ps task index for the given operation
python.training	_ReplicaDeviceChooser	__init__	ps_tasks ps_device worker_device merge_devices	create a new _replicadevicechooser
python.training	_ReplicaDeviceChooser	device_function	op	choose a device for op
python.training		replica_device_setter	ps_tasks ps_device worker_device merge_devices	return a device function to use when building a graph for replicas
python.training	SaverTest	testSaveCopyRestoreWithSaveRelativePaths		save copy checkpoint dir and restore from copied dir
python.training	QueueRunner	__init__	queue enqueue_ops close_op cancel_op	create a queuerunner
python.training	QueueRunner	_init_from_args	queue enqueue_ops close_op cancel_op	create a queuerunner from arguments
python.training	QueueRunner	_init_from_proto	queue_runner_def import_scope	create a queuerunner from queuerunnerdef
python.training	QueueRunner	exceptions_raised		exceptions raised but not handled by the queuerunner threads
python.training	QueueRunner	name		the string name of the underlying queue
python.training	QueueRunner	_run	sess enqueue_op coord	execute the enqueue op in a loop close the queue in case of error
python.training	QueueRunner	_close_on_stop	sess cancel_op coord	close the queue when the coordinator requests stop
python.training	QueueRunner	create_threads	sess coord daemon start	create threads to run the enqueue ops for the given session
python.training	QueueRunner	to_proto	export_scope	converts this queuerunner to a queuerunnerdef protocol buffer
python.training	QueueRunner	from_proto	queue_runner_def import_scope	returns a queuerunner object created from queue_runner_def
python.training		add_queue_runner	qr collection	adds a queuerunner to a collection in the graph
python.training		start_queue_runners	sess coord daemon start	starts all queue runners collected in the graph
python.training		load_checkpoint	ckpt_dir_or_file	returns checkpointreader for checkpoint found in ckpt_dir_or_file
python.training		load_variable	ckpt_dir_or_file name	returns the tensor value of the given variable in the checkpoint
python.training		list_variables	ckpt_dir_or_file	returns list of all variables in the checkpoint
python.training		init_from_checkpoint	ckpt_dir_or_file assignment_map	initializes current variables with tensors loaded from given checkpoint
python.training		_get_checkpoint_filename	ckpt_dir_or_file	returns checkpoint filename given directory or specific checkpoint file
python.training		_set_checkpoint_initializer	variable ckpt_file tensor_name slice_spec	overrides given variable's initialization op
python.training		_set_variable_or_list_initializer	variable_or_list ckpt_file tensor_name	overrides initialization op of given variable or list of variables
python.training		_collect_partitioned_variable	name all_vars	returns list of tf variable that comprise the partitioned variable
python.training	SummaryWriter	__init__	logdir graph max_queue flush_secs	creates a summarywriter and an event file
python.training	EvaluateOnceTest	_train_model	checkpoint_dir num_steps	trains a simple classification model
python.training		create_local_cluster	num_workers num_ps protocol	create local grpc servers and return them
python.training	SyncReplicasOptimizerHookTest	testCanCreatedBeforeMinimizeCalled		this behavior is required to be integrated with estimators
python.training	EventLoggingTest	testNoSummaryWriter		test that logging without a summarywriter succeeds
python.training	MomentumOptimizer	__init__	learning_rate momentum use_locking name	construct a new momentum optimizer
python.training		_is_resource	v	returns true if v is something you get from a resource variable
python.training		_create_slot_var	primary val scope validate_shape	helper function for creating a slot variable
python.training		create_slot	primary val name colocate_with_primary	create a slot initialized to the given value
python.training		create_slot_with_initializer	primary initializer shape dtype	creates a slot initialized using an initializer
python.training		create_zeros_slot	primary name dtype colocate_with_primary	create a slot initialized to 0 with same shape as the primary object
python.training	GrpcServerTest	_useRPCConfig		return a tf configproto that ensures we use the rpc stack for tests
python.training	AdamOptimizer	__init__	learning_rate beta1 beta2 epsilon	construct a new adam optimizer
python.training	GradientDescentOptimizer	__init__	learning_rate use_locking name	construct a new gradient descent optimizer
python.training		_test_dir	temp_dir test_name	create an empty dir to use for tests
python.training	MonitoredSessionTest	test_merge_run_options_from_hooks		test for rewriting runoptions and observing runmetadata with hooks
python.training	MonitoredSessionTest	test_merge_caller_and_hook_run_options		test that runoptions from caller and hooks can be merged properly
python.training	SecondOrStepTimer	should_trigger_for_step	step	return true if the timer should trigger for the specified step
python.training	SecondOrStepTimer	update_last_triggered_step	step	update the last triggered time and step number
python.training	LoggingTensorHook	__init__	tensors every_n_iter every_n_secs formatter	initializes a loggingtensorhook
python.training	StopAtStepHook	__init__	num_steps last_step	initializes a stopatstephook
python.training	CheckpointSaverHook	__init__	checkpoint_dir save_secs save_steps saver	initializes a checkpointsaverhook
python.training	CheckpointSaverHook	_save	step session	saves the latest checkpoint
python.training	NanTensorHook	__init__	loss_tensor fail_on_nan_loss	initializes a nantensorhook
python.training	SummarySaverHook	__init__	save_steps save_secs output_dir summary_writer	initializes a summarysaverhook
python.training	SummarySaverHook	_get_summary_op		fetches the summary op either from self _summary_op or self _scaffold
python.training	GlobalStepWaiterHook	__init__	wait_until_step	initializes a globalstepwaiterhook
python.training	FinalOpsHook	__init__	final_ops final_ops_feed_dict	initializes finalophook with ops to run at the end of the session
python.training	FeedFnHook	__init__	feed_fn	initializes a feedfnhook
python.training		_as_graph_element	obj	retrieves graph element
python.training	Supervisor	__init__	graph ready_op ready_for_local_init_op is_chief	create a supervisor
python.training	Supervisor	_get_first_op_from_collection	key	returns the first operation from a collection
python.training	Supervisor	is_chief		return true if this is a chief supervisor
python.training	Supervisor	session_manager		return the sessionmanager used by the supervisor
python.training	Supervisor	coord		return the coordinator used by the supervisor
python.training	Supervisor	init_op		return the init op used by the supervisor
python.training	Supervisor	init_feed_dict		return the feed dictionary used when evaluating the init_op
python.training	Supervisor	ready_op		return the ready op used by the supervisor
python.training	Supervisor	summary_writer		return the summarywriter used by the chief supervisor
python.training	Supervisor	summary_op		return the summary tensor used by the chief supervisor
python.training	Supervisor	save_summaries_secs		return the delay between summary computations
python.training	Supervisor	global_step		return the global_step tensor used by the supervisor
python.training	Supervisor	saver		return the saver used by the supervisor
python.training	Supervisor	save_model_secs		return the delay between checkpoints
python.training	Supervisor	save_path		return the save path used by the supervisor
python.training	Supervisor	_write_graph		writes graph_def to logdir and adds it to summary if applicable
python.training	Supervisor	start_standard_services	sess	start the standard services for 'sess'
python.training	Supervisor	prepare_or_wait_for_session	master config wait_for_checkpoint max_wait_secs	make sure the model is ready to be used
python.training	Supervisor	start_queue_runners	sess queue_runners	start threads for queuerunners
python.training	Supervisor	loop	timer_interval_secs target args kwargs	start a looperthread that calls a function periodically
python.training	Supervisor	stop	threads close_summary_writer	stop the services and the coordinator
python.training	Supervisor	request_stop	ex	request that the coordinator stop the threads
python.training	Supervisor	should_stop		check if the coordinator was told to stop
python.training	Supervisor	stop_on_exception		context handler to stop the supervisor when an exception is raised
python.training	Supervisor	wait_for_stop		block waiting for the coordinator to stop
python.training	Supervisor	summary_computed	sess summary global_step	indicate that a summary was computed
python.training	Supervisor	_default_global_step_tensor		returns the global_step from the default graph
python.training	Supervisor	_verify_setup		check that all is good
python.training	Supervisor	managed_session	master config start_standard_services close_summary_writer	returns a context manager for a managed session
python.training	SVSummaryThread	__init__	sv sess	create a svsummarythread
python.training	SVStepCounterThread	__init__	sv sess step_counter	create a svstepcounterthread
python.training	SVTimerCheckpointThread	__init__	sv sess	create a svtimercheckpointthread
python.training	Coordinator	__init__	clean_stop_exception_types	create a new coordinator
python.training	Coordinator	_filter_exception	ex	check if the exception indicated in 'ex' should be ignored
python.training	Coordinator	request_stop	ex	request that the threads stop
python.training	Coordinator	clear_stop		clears the stop flag
python.training	Coordinator	should_stop		check if stop was requested
python.training	Coordinator	stop_on_exception		context manager to request stop when an exception is raised
python.training	Coordinator	wait_for_stop	timeout	wait till the coordinator is told to stop
python.training	Coordinator	register_thread	thread	register a thread to join
python.training	Coordinator	join	threads stop_grace_period_secs ignore_live_threads	wait for threads to terminate
python.training	Coordinator	raise_requested_exception		if an exception has been passed to request_stop, this raises it
python.training	LooperThread	__init__	coord timer_interval_secs target args	create a looperthread
python.training	LooperThread	loop	coord timer_interval_secs target args	start a looperthread that calls a function periodically
python.training	LooperThread	start_loop		called when the thread starts
python.training	LooperThread	stop_loop		called when the thread stops
python.training	LooperThread	run_loop		called at 'timer_interval_secs' boundaries
python.training	MomentumOptimizerTest	_dbParamsMom01		return dist-belief momentum values
python.training		_get_or_create_eval_step		gets or creates the eval step tensor
python.training	_StopAfterNEvalsHook	__init__	num_evals log_progress	constructs the run hook
python.training		_evaluate_once	checkpoint_path master scaffold eval_ops	evaluates the model at the given checkpoint path
python.training		_get_variable_for	v	returns the resourcevariable responsible for v or v if not necessary
python.training		_deduplicate_indexed_slices	values indices	sums values associated with any non-unique indices
python.training	_OptimizableVariable	target		returns the optimization target for this variable
python.training	_OptimizableVariable	update_op	optimizer g	returns the update ops for updating the variable
python.training		_get_processor	v	the processor of v
python.training	Optimizer	__init__	use_locking name	create a new optimizer
python.training	Optimizer	minimize	loss global_step var_list gate_gradients	add operations to minimize loss by updating var_list
python.training	Optimizer	compute_gradients	loss var_list gate_gradients aggregation_method	compute gradients of loss for the variables in var_list
python.training	Optimizer	apply_gradients	grads_and_vars global_step name	apply gradients to variables
python.training	Optimizer	get_slot	var name	return a slot named name created for var by the optimizer
python.training	Optimizer	get_slot_names		return a list of the names of slots created by the optimizer
python.training	Optimizer	_assert_valid_dtypes	tensors	asserts tensors are all valid types (see _valid_dtypes)
python.training	Optimizer	_valid_dtypes		valid types for loss variables and gradients
python.training	Optimizer	_create_slots	var_list	create all slots needed by the variables
python.training	Optimizer	_prepare		create all needed tensors before applying gradients
python.training	Optimizer	_apply_dense	grad var	add ops to apply dense gradients to var
python.training	Optimizer	_resource_apply_dense	grad handle	add ops to apply dense gradients to the variable handle
python.training	Optimizer	_resource_apply_sparse_duplicate_indices	grad handle indices	add ops to apply sparse gradients to handle, with repeated indices
python.training	Optimizer	_resource_apply_sparse	grad handle indices	add ops to apply sparse gradients to the variable handle
python.training	Optimizer	_apply_sparse_duplicate_indices	grad var	add ops to apply sparse gradients to var, with repeated sparse indices
python.training	Optimizer	_apply_sparse	grad var	add ops to apply sparse gradients to var
python.training	Optimizer	_finish	update_ops name_scope	do what is needed to finish the update
python.training	Optimizer	_slot_dict	slot_name	returns a dict for caching slots created under the given name
python.training	Optimizer	_get_or_make_slot	var val slot_name op_name	find or create a slot for a variable
python.training	Optimizer	_get_or_make_slot_with_initializer	var initializer shape dtype	find or create a slot for a variable using an initializer
python.training	Optimizer	_zeros_slot	var slot_name op_name	find or create a slot initialized with 0 0
python.training	RMSPropOptimizer	__init__	learning_rate decay momentum epsilon	construct a new rmsprop optimizer
python.training		match_filenames_once	pattern name	save the list of files matching pattern so it is only computed once
python.training		limit_epochs	tensor num_epochs name	returns tensor num_epochs times and then raises an outofrange error
python.training		input_producer	input_tensor element_shape num_epochs shuffle	output the rows of input_tensor to a queue for an input pipeline
python.training		string_input_producer	string_tensor num_epochs shuffle seed	output strings e g filenames to a queue for an input pipeline
python.training		range_input_producer	limit num_epochs shuffle seed	produces the integers from 0 to limit-1 in a queue
python.training		slice_input_producer	tensor_list num_epochs shuffle seed	produces a slice of each tensor in tensor_list
python.training	_SparseMetaData	__init__	sparse map_op rank	create the metadata
python.training		_smart_cond	pred if_true if_false	a tf cond that does nothing when the condition is static
python.training		_store_sparse_tensors	tensor_list enqueue_many keep_input shared_map_ops	store sparsetensors for feeding into batch etc
python.training		_store_sparse_tensors_join	tensor_list_list enqueue_many keep_input	store sparsetensors for feeding into batch_join etc
python.training		_restore_sparse_tensors	stored_list sparse_info_list	restore sparsetensors after dequeue in batch batch_join etc
python.training		_validate_keep_input	keep_input enqueue_many	validate keep_input argument to conditional batching functions
python.training		_shapes	tensor_list_list shapes enqueue_many	calculate and merge the shapes of incoming tensors
python.training		_select_which_to_enqueue	tensor_list keep_input	select which examples to enqueue based on vector keep_input
python.training		_enqueue_join	queue tensor_list_list enqueue_many keep_input	enqueue tensor_list_list in queue
python.training		_enqueue	queue tensor_list threads enqueue_many	enqueue tensor_list in queue
python.training		_batch	tensors batch_size keep_input num_threads	helper function for batch and maybe_batch
python.training		_batch_join	tensors_list batch_size keep_input capacity	helper function for batch_join and maybe_batch_join
python.training		_shuffle_batch	tensors batch_size capacity min_after_dequeue	helper function for shuffle_batch and maybe_shuffle_batch
python.training		_shuffle_batch_join	tensors_list batch_size capacity min_after_dequeue	helper function for shuffle_batch_join and maybe_shuffle_batch_join
python.training		batch	tensors batch_size num_threads capacity	creates batches of tensors in tensors
python.training		maybe_batch	tensors keep_input batch_size num_threads	conditionally creates batches of tensors based on keep_input
python.training		batch_join	tensors_list batch_size capacity enqueue_many	runs a list of tensors to fill a queue to create batches of examples
python.training		maybe_batch_join	tensors_list keep_input batch_size capacity	runs a list of tensors to conditionally fill a queue to create batches
python.training		shuffle_batch	tensors batch_size capacity min_after_dequeue	creates batches by randomly shuffling tensors
python.training		maybe_shuffle_batch	tensors batch_size capacity min_after_dequeue	creates batches by randomly shuffling conditionally-enqueued tensors
python.training		shuffle_batch_join	tensors_list batch_size capacity min_after_dequeue	create batches by randomly shuffling tensors
python.training		maybe_shuffle_batch_join	tensors_list batch_size capacity min_after_dequeue	create batches by randomly shuffling conditionally-enqueued tensors
python.training		basic_train_loop	supervisor train_step_fn args kwargs	basic loop to train a model
python.training	AdagradOptimizer	__init__	learning_rate initial_accumulator_value use_locking name	construct a new adagrad optimizer
python.training		create_local_cluster	num_workers num_ps protocol	create local grpc servers and return their servers
python.training	AdadeltaOptimizer	__init__	learning_rate rho epsilon use_locking	construct a new adadelta optimizer
python.training		exponential_decay	learning_rate global_step decay_steps decay_rate	applies exponential decay to the learning rate
python.training		piecewise_constant	x boundaries values name	piecewise constant from boundaries and interval values
python.training		polynomial_decay	learning_rate global_step decay_steps end_learning_rate	applies a polynomial decay to the learning rate
python.training		natural_exp_decay	learning_rate global_step decay_steps decay_rate	applies natural exponential decay to the initial learning rate
python.training		inverse_time_decay	learning_rate global_step decay_steps decay_rate	applies inverse time decay to the initial learning rate
python.training	Scaffold	__init__	init_op init_feed_dict init_fn ready_op	create a scaffold
python.training	Scaffold	finalize		creates operations if needed and finalizes the graph
python.training	Scaffold	get_or_default	arg_name collection_key default_constructor	get from cache or create a default operation
python.training		MonitoredTrainingSession	master is_chief checkpoint_dir scaffold	creates a monitoredsession for training
python.training	ChiefSessionCreator	__init__	scaffold master config checkpoint_dir	initializes a chief session creator
python.training	WorkerSessionCreator	__init__	scaffold master config	initializes a worker session creator
python.training	_MonitoredSession	__init__	session_creator hooks should_recover stop_grace_period_secs	sets up a monitored or hooked session
python.training	_MonitoredSession	graph		the graph that was launched in this session
python.training	_MonitoredSession	run	fetches feed_dict options run_metadata	run ops in the monitored session
python.training	_MonitoredSession	_is_closed		return true if the supervised session is closed for tests only
python.training	SingularMonitoredSession	__init__	hooks scaffold master config	creates a singularmonitoredsession
python.training	SingularMonitoredSession	raw_session		returns underlying tensorflow session object
python.training	_WrappedSession	__init__	sess	creates a _wrappedsession
python.training	_WrappedSession	should_stop		return true if this session should not be used anymore
python.training	_WrappedSession	_check_stop		hook for subclasses to provide their own stop condition
python.training	_RecoverableSession	__init__	sess_creator	create a new _recoverablesession
python.training	_CoordinatedSession	__init__	sess coord stop_grace_period_secs	create a new _coordinatedsession
python.training	_HookedSession	__init__	sess hooks	initializes a _hookedsession object
python.training	_HookedSession	_check_stop		see base class
python.training	_HookedSession	run	fetches feed_dict options run_metadata	see base class
python.training	_HookedSession	_call_hook_before_run	run_context fetch_dict user_feed_dict options	calls hooks before_run and handles requests from hooks
python.training	_HookedSession	_merge_run_options	options incoming_options	merge two instances of runoptions into the first one
python.training		_maybe_name	obj	returns object name if it has one or a message otherwise
python.training	SessionManager	__init__	local_init_op ready_op ready_for_local_init_op graph	creates a sessionmanager
python.training	SessionManager	_restore_checkpoint	master saver checkpoint_dir checkpoint_filename_with_path	creates a session, and tries to restore a checkpoint
python.training	SessionManager	prepare_session	master init_op saver checkpoint_dir	creates a session makes sure the model is ready to be used
python.training	SessionManager	recover_session	master saver checkpoint_dir checkpoint_filename_with_path	creates a session, recovering if possible
python.training	SessionManager	wait_for_session	master config max_wait_secs	creates a new session and waits for model to be ready
python.training	SessionManager	_safe_close	sess	closes a session without raising an exception
python.training	SessionManager	_model_ready	sess	checks if the model is ready or not
python.training	SessionManager	_model_ready_for_local_init	sess	checks if the model is ready to run local_init_op
python.training	SessionManager	_try_run_local_init_op	sess	tries to run _local_init_op if not none and is ready for local init
python.training		_ready	op sess msg	checks if the model is ready or not as determined by op
python.training		_summary_iterator	test_dir	reads events from test_dir/events
python.training	SupervisorTest	_wait_for_glob	pattern timeout_secs for_checkpoint	wait for a checkpoint file to appear
python.training	ProximalAdagradOptimizer	__init__	learning_rate initial_accumulator_value l1_regularization_strength l2_regularization_strength	construct a new proximaladagrad optimizer
python.estimator	EstimatorSpec	__new__	cls mode predictions loss	creates a validated estimatorspec instance
python.estimator		_check_is_tensor	x tensor_name	returns x if it is a tensor, raises typeerror otherwise
python.estimator		_prediction_values	predictions	returns the values of the given predictions dict or tensor
python.estimator	EstimatorSpecTrainTest	testRequiredArgumentsSet		tests that no errors are raised when all required arguments are set
python.estimator	EstimatorSpecTrainTest	testAllArgumentsSet		tests that no errors are raised when all arguments are set
python.estimator	EstimatorSpecTrainTest	testLossNumber		tests that error is raised when loss is a number not tensor
python.estimator	EstimatorSpecTrainTest	testLoss1DTensor		tests that no errors are raised when loss is 1d tensor
python.estimator	EstimatorSpecEvalTest	testRequiredArgumentsSet		tests that no errors are raised when all required arguments are set
python.estimator	EstimatorSpecEvalTest	testAllArgumentsSet		tests that no errors are raised when all arguments are set
python.estimator	EstimatorSpecEvalTest	testTupleMetric		tests that no errors are raised when a metric is tuple-valued
python.estimator	EstimatorSpecEvalTest	testLoss1DTensor		tests that no errors are raised when loss is 1d tensor
python.estimator	EstimatorSpecEvalTest	testLossNumber		tests that error is raised when loss is a number not tensor
python.estimator	EstimatorSpecEvalTest	testPredictionsTensor		tests that no error is raised when predictions is tensor not dict
python.estimator	EstimatorSpecInferTest	testRequiredArgumentsSet		tests that no errors are raised when all required arguments are set
python.estimator	EstimatorSpecInferTest	testAllArgumentsSet		tests that no errors are raised when all arguments are set
python.estimator	EstimatorSpecInferTest	testPredictionsTensor		tests that no error is raised when predictions is tensor not dict
python.estimator	Estimator	__init__	model_fn model_dir config params	constructs an estimator instance
python.estimator	Estimator	train	input_fn hooks steps max_steps	trains a model given training data input_fn
python.estimator	Estimator	evaluate	input_fn steps hooks checkpoint_path	evaluates the model given evaluation data input_fn
python.estimator	Estimator	predict	input_fn predict_keys hooks checkpoint_path	returns predictions for given features
python.estimator	Estimator	export_savedmodel	export_dir_base serving_input_receiver_fn assets_extra as_text	exports inference graph as a savedmodel into given dir
python.estimator	Estimator	_extract_batch_length	preds_evaluated	extracts batch length of predictions
python.estimator	Estimator	_extract_keys	predictions predict_keys	extracts predict_keys from predictions
python.estimator	Estimator	_call_model_fn	features labels mode	calls model function
python.estimator	Estimator	_evaluate_model	input_fn hooks checkpoint_path name	evaluates the model using the training evaluation library
python.estimator		_check_hooks_type	hooks	returns hooks if all are sessionrunhook raises typeerror otherwise
python.estimator		_get_replica_device_setter	config	creates a replica device setter if required as a default device_fn
python.estimator		_model_fn_args	fn	get argument names for function-like object
python.estimator		_verify_model_fn_args	model_fn params	verifies model fn arguments
python.estimator		_extract_metric_update_ops	eval_dict	separate update operations from metric value operations
python.estimator		_dict_to_str	dictionary	get a str representation of a dict
python.estimator		_write_dict_to_summary	output_dir dictionary current_global_step	writes a dict into summary file in given output directory
python.estimator.export		build_parsing_serving_input_receiver_fn	feature_spec default_batch_size	build a serving_input_receiver_fn expecting fed tf examples
python.estimator.export		build_raw_serving_input_receiver_fn	features default_batch_size	build a serving_input_receiver_fn expecting feature tensors
python.estimator.export		build_all_signature_defs	receiver_tensors export_outputs	build signaturedefs for all export outputs
python.estimator.export		get_timestamped_export_dir	export_dir_base	builds a path to a new subdirectory within the base directory
python.estimator.export	ExportOutputTest	test_build_standardized_signature_def_classify_classes_only		tests classification with one output tensor
python.estimator.export	ExportOutputTest	test_build_standardized_signature_def_classify_both		tests multiple output tensors that include classes and scores
python.estimator.export	ExportOutputTest	test_build_standardized_signature_def_classify_scores_only		tests classification without classes tensor
python.estimator.export	ExportOutputTest	test_predict_output_constructor		tests that no errors are raised when input is expected
python.estimator.export	ExportTest	test_serving_input_receiver_constructor		tests that no errors are raised when input is expected
python.estimator.export	ExportOutput	as_signature_def	receiver_tensors	generate a signaturedef proto for inclusion in a metagraphdef
python.estimator.export	ClassificationOutput	__init__	scores classes	constructor for classifyoutput
python.estimator.export	RegressionOutput	__init__	value	constructor for regressionoutput
python.estimator.export	PredictOutput	__init__	outputs	constructor for predictoutput
python.estimator.inputs		pandas_input_fn	x y batch_size num_epochs	returns input function that would feed pandas dataframe into the model
python.estimator.inputs		_get_unique_target_key	features	returns a key not existed in the input dict features
python.estimator.inputs		numpy_input_fn	x y batch_size num_epochs	returns input function that would feed dict of numpy arrays into the model
python.estimator.inputs.queues	_FeedingQueueRunner	__init__	queue enqueue_ops close_op cancel_op	initialize the queue runner
python.estimator.inputs.queues	_FeedingQueueRunner	_run	sess enqueue_op feed_fn coord	execute the enqueue op in a loop close the queue in case of error
python.estimator.inputs.queues	_FeedingQueueRunner	create_threads	sess coord daemon start	create threads to run the enqueue ops for the given session
python.estimator.inputs.queues		_get_integer_indices_for_next_batch	batch_indices_start batch_size epoch_end array_length	returns the integer indices for next batch
python.estimator.inputs.queues		_enqueue_data	data capacity shuffle min_after_dequeue	creates a queue filled from a numpy array or pandas dataframe
tensorboard		create_tb_app	plugins	read the flags and create a tensorboard wsgi application
tensorboard		make_simple_server	tb_app host port	create an http server for tensorboard
tensorboard		run_simple_server	tb_app	run a tensorboard http server and print some messages to the console
tensorboard.plugins	TBPlugin	get_plugin_apps	multiplexer logdir	returns a set of wsgi applications that the plugin implements
tensorboard.plugins	TBPlugin	is_active		determines whether this plugin is active
tensorboard.plugins.projector	EmbeddingMetadata	__init__	num_points	constructs a metadata for an embedding of the specified size
tensorboard.plugins.projector	EmbeddingMetadata	add_column	column_name column_values	adds a named column of metadata values
tensorboard.plugins.projector	ProjectorPluginAsset	add_metadata_for_embedding_variable	var_name metadata thumbnails thumbnail_dim	adds metadata for an embedding variable stored in a checkpoint file
tensorboard.plugins.projector	ProjectorPluginAsset	add_embedding	name values metadata thumbnails	adds an embedding asset to be visualized by the embedding projector
tensorboard.plugins.projector	ProjectorPluginAsset	_convert_embedding_to_assets	name values metadata thumbnails	converts the data associated with embeddings into serializable assets
tensorboard.plugins.projector		_latest_checkpoints_changed	configs run_path_pairs	returns true if the latest checkpoint has changed in any of the runs
tensorboard.plugins.projector		_parse_positive_int_param	request param_name	parses and asserts a positive (>0) integer query parameter
tensorboard.plugins.projector	ProjectorPlugin	is_active		determines whether this plugin is active
tensorboard.plugins.projector	ProjectorPlugin	configs		returns a map of run paths to projectorconfig protos
tensorboard.plugins.projector	ProjectorPlugin	_read_latest_config_files	run_path_pairs	reads and returns the projector config files in every run directory
tensorboard.plugins.projector	ProjectorPlugin	_serve_runs	request	returns a list of runs that have embeddings
tensorboard.plugins.projector		_make_sprite_image	thumbnails thumbnail_dim	constructs a sprite image from thumbnails and returns the png bytes
tensorboard.plugins.text		markdown_and_sanitize	markdown_string	takes a markdown string and converts it into sanitized html
tensorboard.plugins.text		make_table_row	contents tag	given an iterable of string contents make a table row
tensorboard.plugins.text		make_table	contents headers	given a numpy ndarray of strings concatenate them into a html table
tensorboard.plugins.text		reduce_to_2d	arr	given a np npdarray with ndims > 2 reduce it to 2d
tensorboard.plugins.text		text_array_to_html	text_arr	take a numpy ndarray containing strings and convert it into html
tensorboard.plugins.text		process_string_tensor_event	event	convert a tensorevent into a json-compatible response
tensorboard.plugins.text	TextPlugin	is_active		determines whether this plugin is active
tensorboard.scripts		_MakeHistogram	values	convert values into a histogram proto using logic from histogram cc
tensorboard.scripts		WriteScalarSeries	writer tag f n	write a series of scalar events to writer using f to create values
tensorboard.scripts		WriteHistogramSeries	writer tag mu_sigma_tuples n	write a sequence of normally distributed histograms to writer
tensorboard.scripts		WriteImageSeries	writer tag n_images	write a few dummy images to writer
tensorboard.scripts		WriteAudioSeries	writer tag n_audio	write a few dummy audio clips to writer
tensorboard.scripts		GenerateTestData	path	generates the test data directory
tensorboard.backend		Cleanse	obj encoding	makes python object appropriate for json serialization
tensorboard.backend		Respond	request content content_type code	construct a werkzeug response
tensorboard.backend	FakePlugin	__init__	plugin_name is_active_value routes_mapping	constructs a fake plugin
tensorboard.backend	FakePlugin	get_plugin_apps	multiplexer logdir	returns a mapping from routes to handlers offered by this plugin
tensorboard.backend	FakePlugin	is_active		returns whether this plugin is active
tensorboard.backend	TensorboardServerTest	_get	path headers	perform a get request for the given path
tensorboard.backend	TensorboardServerTest	_getJson	path	perform a get request and decode the result as json
tensorboard.backend	TensorboardServerTest	testBasicStartup		start the server up and then shut it down immediately
tensorboard.backend	TensorboardServerTest	testRequestMainPage		navigate to the main page and verify that it returns a 200
tensorboard.backend	TensorboardServerTest	testRequestNonexistentPage		request a page that doesn't exist it should 404
tensorboard.backend	TensorboardServerTest	testDirectoryTraversal		attempt a directory traversal attack
tensorboard.backend	TensorboardServerTest	testLogdir		test the format of the data/logdir endpoint
tensorboard.backend	TensorboardServerTest	testPluginsListing		test the format of the data/plugins_listing endpoint
tensorboard.backend	TensorboardServerTest	testRuns		test the format of the /data/runs endpoint
tensorboard.backend	TensorboardServerTest	testApplicationPaths_getCached		test the format of the /data/runs endpoint
tensorboard.backend	TensorboardServerTest	testDataPaths_disableAllCaching		test the format of the /data/runs endpoint
tensorboard.backend	TensorboardServerTest	testScalars		test the format of /data/scalars
tensorboard.backend	TensorboardServerTest	testScalarsCsv		test the csv format of /data/scalars
tensorboard.backend	TensorboardServerTest	testHistograms		test the format of /data/histograms
tensorboard.backend	TensorboardServerTest	testImages		test listing images and retrieving an individual image
tensorboard.backend	TensorboardServerTest	testAudio		test listing audio and retrieving an individual audio clip
tensorboard.backend	TensorboardServerTest	testGraph		test retrieving the graph definition
tensorboard.backend	TensorboardServerTest	testRunMetadata		test retrieving the run metadata information
tensorboard.backend	TensorboardServerTest	_GenerateTestData		generates the test data directory
tensorboard.backend		prepare_graph_for_ui	graph limit_attr_size large_attrs_key	prepares modifies in-place the graph to be served to the front-end
tensorboard.backend	FloatWrapperTest	_assertWrapsAs	to_wrap expected	asserts that |to_wrap| becomes |expected| when wrapped
tensorboard.backend		standard_tensorboard_wsgi	logdir purge_orphaned_data reload_interval plugins	construct a tensorboardwsgiapp with standard plugins and multiplexer
tensorboard.backend	TensorBoardWSGIApp	__init__	logdir plugins multiplexer reload_interval	constructs the tensorboard application
tensorboard.backend	TensorBoardWSGIApp	_image_response_for_run	run_images run tag	builds a json-serializable object with information about run_images
tensorboard.backend	TensorBoardWSGIApp	_audio_response_for_run	run_audio run tag	builds a json-serializable object with information about run_audio
tensorboard.backend	TensorBoardWSGIApp	_path_is_safe	path	check path is safe stays within current directory
tensorboard.backend	TensorBoardWSGIApp	_serve_logdir	request	respond with a json object containing this tensorboard's logdir
tensorboard.backend	TensorBoardWSGIApp	_serve_scalars	request	given a tag and single run return array of scalarevents
tensorboard.backend	TensorBoardWSGIApp	_serve_graph	request	given a single run return the graph definition in json format
tensorboard.backend	TensorBoardWSGIApp	_serve_run_metadata	request	given a tag and a tensorflow run return the session run() metadata
tensorboard.backend	TensorBoardWSGIApp	_serve_histograms	request	given a tag and single run return an array of histogram values
tensorboard.backend	TensorBoardWSGIApp	_serve_compressed_histograms	request	given a tag and single run return an array of compressed histograms
tensorboard.backend	TensorBoardWSGIApp	_serve_images	request	given a tag and list of runs serve a list of images
tensorboard.backend	TensorBoardWSGIApp	_serve_image	request	serves an individual image
tensorboard.backend	TensorBoardWSGIApp	_query_for_individual_image	run tag index	builds a url for accessing the specified image
tensorboard.backend	TensorBoardWSGIApp	_serve_audio	request	given a tag and list of runs serve a list of audio
tensorboard.backend	TensorBoardWSGIApp	_serve_individual_audio	request	serves an individual audio clip
tensorboard.backend	TensorBoardWSGIApp	_query_for_individual_audio	run tag index	builds a url for accessing the specified audio
tensorboard.backend	TensorBoardWSGIApp	_serve_plugins_listing	request	serves an object mapping plugin name to whether it is enabled
tensorboard.backend	TensorBoardWSGIApp	_serve_runs	request	wsgi app serving a json object about runs and tags
tensorboard.backend	TensorBoardWSGIApp	_serve_index	request	serves the index page (i e the tensorboard app itself)
tensorboard.backend	TensorBoardWSGIApp	_serve_js	request	serves the javascript for the index page
tensorboard.backend	TensorBoardWSGIApp	_serve_static_file	request path	serves the static file located at the given path
tensorboard.backend	TensorBoardWSGIApp	__call__	environ start_response	central entry point for the tensorboard application
tensorboard.backend		parse_event_files_spec	logdir	parses logdir into a map from paths to run group names
tensorboard.backend		reload_multiplexer	multiplexer path_to_run	loads all runs into the multiplexer
tensorboard.backend		start_reloading_multiplexer	multiplexer path_to_run load_interval	starts a thread to automatically reload the given multiplexer
tensorboard.backend		get_tensorboard_tag		read the tensorboard tag number and return it or an empty string
tensorboard.backend.event_processing	DirectoryWatcherTest	_LoadAllEvents		loads all events in the watcher
tensorboard.backend.event_processing	ReservoirTest	testDeterminism		tests that the reservoir is deterministic
tensorboard.backend.event_processing	ReservoirTest	testBucketDeterminism		tests that reservoirs are deterministic at a bucket level
tensorboard.backend.event_processing	ReservoirTest	testUsesSeed		tests that reservoirs with different seeds keep different samples
tensorboard.backend.event_processing	EventMultiplexer	__init__	run_path_map size_guidance purge_orphaned_data	constructor for the eventmultiplexer
tensorboard.backend.event_processing	EventMultiplexer	AddRun	path name	add a run to the multiplexer
tensorboard.backend.event_processing	EventMultiplexer	AddRunsFromDirectory	path name	load runs from a directory recursively walks subdirectories
tensorboard.backend.event_processing	EventMultiplexer	Reload		call reload on every eventaccumulator
tensorboard.backend.event_processing	EventMultiplexer	PluginAssets	plugin_name	get index of runs and assets for a given plugin
tensorboard.backend.event_processing	EventMultiplexer	RetrievePluginAsset	run plugin_name asset_name	return the contents for a specific plugin asset from a run
tensorboard.backend.event_processing	EventMultiplexer	FirstEventTimestamp	run	return the timestamp of the first event of the given run
tensorboard.backend.event_processing	EventMultiplexer	Scalars	run tag	retrieve the scalar events associated with a run and tag
tensorboard.backend.event_processing	EventMultiplexer	HealthPills	run node_name	retrieve the health pill events associated with a run and node name
tensorboard.backend.event_processing	EventMultiplexer	GetOpsWithHealthPills	run	determines which ops have at least 1 health pill event for a given run
tensorboard.backend.event_processing	EventMultiplexer	Graph	run	retrieve the graph associated with the provided run
tensorboard.backend.event_processing	EventMultiplexer	MetaGraph	run	retrieve the metagraph associated with the provided run
tensorboard.backend.event_processing	EventMultiplexer	RunMetadata	run tag	get the session run() metadata associated with a tensorflow run and tag
tensorboard.backend.event_processing	EventMultiplexer	Histograms	run tag	retrieve the histogram events associated with a run and tag
tensorboard.backend.event_processing	EventMultiplexer	CompressedHistograms	run tag	retrieve the compressed histogram events associated with a run and tag
tensorboard.backend.event_processing	EventMultiplexer	Images	run tag	retrieve the image events associated with a run and tag
tensorboard.backend.event_processing	EventMultiplexer	Audio	run tag	retrieve the audio events associated with a run and tag
tensorboard.backend.event_processing	EventMultiplexer	Tensors	run tag	retrieve the tensor events associated with a run and tag
tensorboard.backend.event_processing	EventMultiplexer	Runs		return all the run names in the eventmultiplexer
tensorboard.backend.event_processing	EventMultiplexer	RunPaths		returns a dict mapping run names to event file paths
tensorboard.backend.event_processing		GetLogdirSubdirectories	path	returns subdirectories with event files on path
tensorboard.backend.event_processing		IsTensorFlowEventsFile	path	check the path name to see if it is probably a tf events file
tensorboard.backend.event_processing	EventAccumulator	__init__	path size_guidance compression_bps purge_orphaned_data	construct the eventaccumulator
tensorboard.backend.event_processing	EventAccumulator	Reload		loads all events added since the last call to reload
tensorboard.backend.event_processing	EventAccumulator	PluginAssets	plugin_name	return a list of all plugin assets for the given plugin
tensorboard.backend.event_processing	EventAccumulator	RetrievePluginAsset	plugin_name asset_name	return the contents of a given plugin asset
tensorboard.backend.event_processing	EventAccumulator	FirstEventTimestamp		returns the timestamp in seconds of the first event
tensorboard.backend.event_processing	EventAccumulator	_ProcessEvent	event	called whenever an event is loaded
tensorboard.backend.event_processing	EventAccumulator	_ProcessHealthPillSummary	value event	process summaries containing health pills
tensorboard.backend.event_processing	EventAccumulator	Tags		return all tags found in the value stream
tensorboard.backend.event_processing	EventAccumulator	Scalars	tag	given a summary tag return all associated scalarevents
tensorboard.backend.event_processing	EventAccumulator	HealthPills	node_name	returns all health pill values for a certain node
tensorboard.backend.event_processing	EventAccumulator	GetOpsWithHealthPills		determines which ops have at least 1 health pill event
tensorboard.backend.event_processing	EventAccumulator	Graph		return the graph definition if there is one
tensorboard.backend.event_processing	EventAccumulator	MetaGraph		return the metagraph definition if there is one
tensorboard.backend.event_processing	EventAccumulator	RunMetadata	tag	given a tag return the associated session run() metadata
tensorboard.backend.event_processing	EventAccumulator	Histograms	tag	given a summary tag return all associated histograms
tensorboard.backend.event_processing	EventAccumulator	CompressedHistograms	tag	given a summary tag return all associated compressed histograms
tensorboard.backend.event_processing	EventAccumulator	Images	tag	given a summary tag return all associated images
tensorboard.backend.event_processing	EventAccumulator	Audio	tag	given a summary tag return all associated audio
tensorboard.backend.event_processing	EventAccumulator	Tensors	tag	given a summary tag return all associated tensors
tensorboard.backend.event_processing	EventAccumulator	_MaybePurgeOrphanedData	event	maybe purge orphaned data due to a tensorflow crash
tensorboard.backend.event_processing	EventAccumulator	_CheckForRestartAndMaybePurge	event	check and discard expired events using sessionlog start
tensorboard.backend.event_processing	EventAccumulator	_CheckForOutOfOrderStepAndMaybePurge	event	check for out-of-order event step and discard expired events for tags
tensorboard.backend.event_processing	EventAccumulator	_ProcessHistogram	tag wall_time step histo	processes a proto histogram by adding it to accumulated state
tensorboard.backend.event_processing	EventAccumulator	_ProcessImage	tag wall_time step image	processes an image by adding it to accumulated state
tensorboard.backend.event_processing	EventAccumulator	_ProcessAudio	tag wall_time step audio	processes a audio by adding it to accumulated state
tensorboard.backend.event_processing	EventAccumulator	_ProcessScalar	tag wall_time step scalar	processes a simple value by adding it to accumulated state
tensorboard.backend.event_processing	EventAccumulator	_ProcessHealthPill	wall_time step node_name output_slot	processes a health pill value by adding it to accumulated state
tensorboard.backend.event_processing	EventAccumulator	_Purge	event by_tags	purge all events that have occurred after the given event step
tensorboard.backend.event_processing		_GetPurgeMessage	most_recent_step most_recent_wall_time event_step event_wall_time	return the string message associated with tensorboard purges
tensorboard.backend.event_processing		_GeneratorFromPath	path	create an event generator for file or directory at given path string
tensorboard.backend.event_processing		_ParseFileVersion	file_version	convert the string file_version in event proto into a float
tensorboard.backend.event_processing		_CompressHistogram	histo_ev bps	creates fixed size histogram by adding compression to accumulated state
tensorboard.backend.event_processing		_Remap	x x0 x1 y0	linearly map from [x0 x1] unto [y0 y1]
tensorboard.backend.event_processing		ListDirectoryAbsolute	directory	yields all files in the given directory the paths are absolute
tensorboard.backend.event_processing		ListRecursively	top	walks a directory tree yielding (dir_path file_paths) tuples
tensorboard.backend.event_processing	DirectoryWatcher	__init__	directory loader_factory path_filter	constructs a new directorywatcher
tensorboard.backend.event_processing	DirectoryWatcher	Load		loads new values
tensorboard.backend.event_processing	DirectoryWatcher	_LoadInternal		internal implementation of load()
tensorboard.backend.event_processing	DirectoryWatcher	OutOfOrderWritesDetected		returns whether any out-of-order writes have been detected
tensorboard.backend.event_processing	DirectoryWatcher	_SetPath	path	sets the current path to watch for new events
tensorboard.backend.event_processing	DirectoryWatcher	_GetNextPath		gets the next path to load from
tensorboard.backend.event_processing	DirectoryWatcher	_HasOOOWrite	path	returns whether the path has had an out-of-order write
tensorboard.backend.event_processing		get_field_to_observations_map	generator query_for_tag	return a field to observations dict for the event generator
tensorboard.backend.event_processing		get_unique_tags	field_to_obs	returns a dictionary of tags that a user could query over
tensorboard.backend.event_processing		print_dict	d show_missing	prints a shallow dict to console
tensorboard.backend.event_processing		get_dict_to_print	field_to_obs	transform the field-to-obs mapping into a printable dictionary
tensorboard.backend.event_processing		get_out_of_order	list_of_numbers	returns elements that break the monotonically non-decreasing trend
tensorboard.backend.event_processing		generators_from_logdir	logdir	returns a list of event generators for subdirectories with event files
tensorboard.backend.event_processing		generator_from_event_file	event_file	returns a generator that yields events from an event file
tensorboard.backend.event_processing		get_inspection_units	logdir event_file tag	returns a list of inspectionunit objects given either logdir or event_file
tensorboard.backend.event_processing		inspect	logdir event_file tag	main function for inspector that prints out a digest of event files
tensorboard.backend.event_processing	Reservoir	__init__	size seed always_keep_last	creates a new reservoir
tensorboard.backend.event_processing	Reservoir	Keys		return all the keys in the reservoir
tensorboard.backend.event_processing	Reservoir	Items	key	return items associated with given key
tensorboard.backend.event_processing	Reservoir	AddItem	key item f	add a new item to the reservoir with the given tag
tensorboard.backend.event_processing	Reservoir	FilterItems	filterFn key	filter items within a reservoir using a filtering function
tensorboard.backend.event_processing	_ReservoirBucket	__init__	_max_size _random always_keep_last	create the _reservoirbucket
tensorboard.backend.event_processing	_ReservoirBucket	AddItem	item f	add an item to the reservoirbucket replacing an old item if necessary
tensorboard.backend.event_processing	_ReservoirBucket	FilterItems	filterFn	filter items in a reservoirbucket using a filtering function
tensorboard.backend.event_processing	_ReservoirBucket	Items		get all the items in the bucket
tensorboard.backend.event_processing	_EventGenerator	add_event	event	match the eventwriter api
tensorboard.backend.event_processing	_EventGenerator	get_logdir		return a temp directory for asset writing
tensorboard.backend.event_processing	EventAccumulatorTest	assertTagsEqual	actual expected	utility method for checking the return value of the tags() call
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testTags		tags should be found in eventaccumulator after adding some events
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testReload		eventaccumulator contains suitable tags after calling reload
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testScalars		tests whether eventaccumulator contains scalars after adding them
tensorboard.backend.event_processing	MockingEventAccumulatorTest	_compareHealthPills	expected_event gotten_event	compares 2 health pills
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testHealthPills		healthpills should be properly inserted into eventaccumulator
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testHistograms		tests whether histograms are inserted into eventaccumulator
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testCompressedHistograms		tests compressed histograms inserted into eventaccumulator
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testCompressedHistogramsWithEmptyHistogram		tests that empty histograms compressed properly in eventaccumulator
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testImages		tests 2 images inserted/accessed in eventaccumulator
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testAudio		tests 2 audio events inserted/accessed in eventaccumulator
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testKeyError		keyerror should be raised when accessing non-existing keys
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testNonValueEvents		non-value events in the generator don't cause early exits
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testExpiredDataDiscardedAfterRestartForFileVersionLessThan2		tests that events are discarded after a restart is detected
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testOrphanedDataNotDiscardedIfFlagUnset		tests that events are not discarded if purge_orphaned_data is false
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testEventsDiscardedPerTagAfterRestartForFileVersionLessThan2		tests that event discards after restart only affect the misordered tag
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testOnlySummaryEventsTriggerDiscards		test that file version event does not trigger data purge
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testSessionLogStartMessageDiscardsExpiredEvents		test that sessionlog start message discards expired events
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testFirstEventTimestamp		test that firsteventtimestamp() returns wall_time of the first event
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testReloadPopulatesFirstEventTimestamp		test that reload() means firsteventtimestamp() won't load events
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testFirstEventTimestampLoadsEvent		test that firsteventtimestamp() doesn't discard the loaded event
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testTFSummaryScalar		verify processing of tf summary scalar
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testTFSummaryImage		verify processing of tf summary image
tensorboard.backend.event_processing	MockingEventAccumulatorTest	testTFSummaryTensor		verify processing of tf summary tensor
tensorboard.backend.event_processing	RealisticEventAccumulatorTest	testScalarsRealistically		test accumulator by writing values and then reading them
tensorboard.backend.event_processing	RealisticEventAccumulatorTest	testGraphFromMetaGraphBecomesAvailable		test accumulator by writing values and then reading them
tensorboard.backend.event_processing	_FakeAccumulator	__init__	path health_pill_mapping	constructs a fake accumulator with some fake events
tensorboard.backend.event_processing	EventMultiplexerTest	testEmptyLoader		tests empty eventmultiplexer creation
tensorboard.backend.event_processing	EventMultiplexerTest	testRunNamesRespected		tests two eventaccumulators inserted/accessed in eventmultiplexer
tensorboard.backend.event_processing	EventMultiplexerTest	testReload		eventaccumulators should reload after eventmultiplexer call it
tensorboard.backend.event_processing	EventMultiplexerTest	testScalars		tests scalars function returns suitable values
tensorboard.backend.event_processing	EventMultiplexerTest	testHealthPills		tests healthpills() returns events associated with run1/add
tensorboard.backend.event_processing	EventMultiplexerTest	testExceptions		keyerror should be raised when accessing non-existing keys
tensorboard.backend.event_processing	EventMultiplexerTest	testInitialization		tests eventmultiplexer is created properly with its params
tensorboard.backend.event_processing	EventMultiplexerTest	testAddRunsFromDirectory		tests addrunsfromdirectory function
tensorboard.backend.event_processing		_IsDirectory	parent item	helper that returns if parent/item is a directory
tensorboard.backend.event_processing		ListPlugins	logdir	list all the plugins that have registered assets in logdir
tensorboard.backend.event_processing		ListAssets	logdir plugin_name	list all the assets that are available for given plugin in a logdir
tensorboard.backend.event_processing		RetrieveAsset	logdir plugin_name asset_name	retrieve a particular plugin asset from a logdir
tensorboard.backend.event_processing	EventFileLoader	Load		loads all new values from disk
