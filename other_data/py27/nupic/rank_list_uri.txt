<tt style='background-color:#E8E8E8;'> core.MovingAverage <a href=' /utils.py#L35'>__init__</a>(windowSize,existingHistoricalValues)</tt>	New instance of movingaverage so method next() can be used.
<tt style='background-color:#E8E8E8;'> core.MovingAverage <a href=' /utils.py#L56'>compute</a>(slidingWindow,total,newVal,windowSize)</tt>	Routine for computing a moving average.
<tt style='background-color:#E8E8E8;'> core.MovingAverage <a href=' /utils.py#L78'>next</a>(newValue)</tt>	Instance method wrapper around compute.
<tt style='background-color:#E8E8E8;'> core.MovingAverage <a href=' /utils.py#L89'>getCurrentAvg</a>()</tt>	Get current average.
<tt style='background-color:#E8E8E8;'> core.MovingAverage <a href=' /utils.py#L94'>__setstate__</a>(state)</tt>	For loading this object.
<tt style='background-color:#E8E8E8;'> core.Serializable <a href=' /serializable.py#L36'>getSchema</a>(cls)</tt>	Get cap'n proto schema note this is an abstract method.
<tt style='background-color:#E8E8E8;'> core.Serializable <a href=' /serializable.py#L48'>read</a>(cls,proto)</tt>	Create a new object initialized from cap'n proto obj.
<tt style='background-color:#E8E8E8;'> core.Serializable <a href=' /serializable.py#L63'>write</a>(proto)</tt>	Write obj instance to cap'n proto object note this is an abstract method.
<tt style='background-color:#E8E8E8;'> regions.RegionIdentityPolicyBase <a href=' /regions/TestRegion.py#L40'>initialize</a>(testRegionObj)</tt>	Called from the scope of the region's pyregion initialize() method.
<tt style='background-color:#E8E8E8;'> regions.RegionIdentityPolicyBase <a href=' /regions/TestRegion.py#L48'>compute</a>(inputs,outputs)</tt>	Perform the main computation this method is called in each iteration for each phase the node supports.
<tt style='background-color:#E8E8E8;'> regions.RegionIdentityPolicyBase <a href=' /regions/TestRegion.py#L60'>getOutputElementCount</a>(name)</tt>	Return the number of elements in the given output of the region called from the scope of the region's pyregion.
<tt style='background-color:#E8E8E8;'> regions.RegionIdentityPolicyBase <a href=' /regions/TestRegion.py#L69'>getName</a>()</tt>	Return the name of the region.
<tt style='background-color:#E8E8E8;'> regions.TestRegion <a href=' /regions/TestRegion.py#L110'>__constructEphemeralInstanceVars</a>()</tt>	Initialize ephemeral instance variables (those that aren't serialized).
<tt style='background-color:#E8E8E8;'> regions.TestRegion <a href=' /regions/TestRegion.py#L135'>initialize</a>()</tt>	Called by network after all links have been set up.
<tt style='background-color:#E8E8E8;'> regions.TestRegion <a href=' /regions/TestRegion.py#L150'>compute</a>(inputs,outputs)</tt>	Run one iteration of the region's compute.
<tt style='background-color:#E8E8E8;'> regions.TestRegion <a href=' /regions/TestRegion.py#L215'>getSpec</a>(cls)</tt>	Return the base spec for testregion.
<tt style='background-color:#E8E8E8;'> regions.TestRegion <a href=' /regions/TestRegion.py#L320'>getParameter</a>(parameterName,index)</tt>	Get the value of a nodespec parameter most parameters are handled.
<tt style='background-color:#E8E8E8;'> regions.TestRegion <a href=' /regions/TestRegion.py#L337'>setParameter</a>(parameterName,index,parameterValue)</tt>	Set the value of a spec parameter most parameters are handled.
<tt style='background-color:#E8E8E8;'> regions.TestRegion <a href=' /regions/TestRegion.py#L389'>setIdentityPolicyInstance</a>(identityPolicyObj)</tt>	Testregion command that sets identity policy instance the instance.
<tt style='background-color:#E8E8E8;'> regions.TestRegion <a href=' /regions/TestRegion.py#L407'>getIdentityPolicyInstance</a>()</tt>	Testregion command that returns the identity policy instance that was associated with this testregion instance via setidentitypolicyinstance().
<tt style='background-color:#E8E8E8;'> regions.TestRegion <a href=' /regions/TestRegion.py#L428'>__getstate__</a>()</tt>	Return serializable state this function will return a version of the.
<tt style='background-color:#E8E8E8;'> regions.TestRegion <a href=' /regions/TestRegion.py#L443'>__setstate__</a>(state)</tt>	Set the state of ourself from a serialized state.
<tt style='background-color:#E8E8E8;'> regions. <a href=' /regions/TestRegion.py#L489'>whois_callers_caller</a>()</tt>	Returns traceback namedtuple for our caller's caller.
<tt style='background-color:#E8E8E8;'> regions.CLAClassifierRegion <a href=' /regions/CLAClassifierRegion.py#L263'>getAlgorithmInstance</a>()</tt>	Returns instance of the underlying claclassifier algorithm object.
<tt style='background-color:#E8E8E8;'> regions.CLAClassifierRegion <a href=' /regions/CLAClassifierRegion.py#L268'>getParameter</a>(name,index)</tt>	Get the value of the parameter.
<tt style='background-color:#E8E8E8;'> regions.CLAClassifierRegion <a href=' /regions/CLAClassifierRegion.py#L280'>setParameter</a>(name,index,value)</tt>	Set the value of the parameter.
<tt style='background-color:#E8E8E8;'> regions.CLAClassifierRegion <a href=' /regions/CLAClassifierRegion.py#L296'>getProtoType</a>()</tt>	Return the pycapnp proto type that the class uses for serialization.
<tt style='background-color:#E8E8E8;'> regions.CLAClassifierRegion <a href=' /regions/CLAClassifierRegion.py#L302'>writeToProto</a>(proto)</tt>	Write state to proto object.
<tt style='background-color:#E8E8E8;'> regions.CLAClassifierRegion <a href=' /regions/CLAClassifierRegion.py#L316'>readFromProto</a>(cls,proto)</tt>	Read state from proto object.
<tt style='background-color:#E8E8E8;'> regions.CLAClassifierRegion <a href=' /regions/CLAClassifierRegion.py#L339'>compute</a>(inputs,outputs)</tt>	Process one input sample.
<tt style='background-color:#E8E8E8;'> regions.CLAClassifierRegion <a href=' /regions/CLAClassifierRegion.py#L411'>customCompute</a>(recordNum,patternNZ,classification)</tt>	Just return the inference value from one input sample the actual.
<tt style='background-color:#E8E8E8;'> regions.CLAClassifierRegion <a href=' /regions/CLAClassifierRegion.py#L462'>getOutputValues</a>(outputName)</tt>	Return the dictionary of output values note that these are normal python.
<tt style='background-color:#E8E8E8;'> regions.CLAClassifierRegion <a href=' /regions/CLAClassifierRegion.py#L471'>getOutputElementCount</a>(outputName)</tt>	Returns the width of dataout.
<tt style='background-color:#E8E8E8;'> regions. <a href=' /regions/TMRegion.py#L34'>_getTPClass</a>(temporalImp)</tt>	Return the class corresponding to the given temporalimp string.
<tt style='background-color:#E8E8E8;'> regions. <a href=' /regions/SPRegion.py#L62'>_buildArgs</a>(f,kwargs)</tt>	Get the default arguments from the function and assign as instance vars.
<tt style='background-color:#E8E8E8;'> regions. <a href=' /regions/SPRegion.py#L116'>_getAdditionalSpecs</a>(temporalImp,kwargs)</tt>	Build the additional specs in three groups for the inspector use the type of the default argument to set the spec type defaulting.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L377'>_initialize</a>()</tt>	Initialize all ephemeral data members and give the derived class the opportunity to do the same by invoking the.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L480'>_compute</a>(inputs,outputs)</tt>	Run one iteration of tmregion's compute.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L566'>getBaseSpec</a>(cls)</tt>	Return the base spec for tmregion.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L682'>getSpec</a>(cls)</tt>	Return the spec for tmregion.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L697'>getAlgorithmInstance</a>()</tt>	Returns instance of the underlying temporalmemory algorithm object.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L702'>getParameter</a>(parameterName,index)</tt>	Get the value of a parameter most parameters are handled automatically by.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L715'>setParameter</a>(parameterName,index,parameterValue)</tt>	Set the value of a spec parameter most parameters are handled.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L748'>resetSequenceStates</a>()</tt>	Resets the region's sequence states.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L759'>finishLearning</a>()</tt>	Perform an internal optimization step that speeds up inference if we know learning will not be performed anymore.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L778'>__getstate__</a>()</tt>	Return serializable state this function will return a version of the.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L791'>serializeExtraData</a>(filePath)</tt>	This method is called during network serialization with an external filename that can be used to bypass pickle for saving large binary states.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L800'>deSerializeExtraData</a>(filePath)</tt>	This method is called during network deserialization with an external filename that can be used to bypass pickle for loading large binary states.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L810'>__setstate__</a>(state)</tt>	Set the state of ourself from a serialized state.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L828'>_initEphemerals</a>()</tt>	Initialize all ephemerals used by derived classes.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L838'>_getEphemeralMembers</a>()</tt>	Callback that returns a list of all "ephemeral" members (i e data members.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L847'>_getEphemeralMembersBase</a>()</tt>	Returns list of all ephemeral members.
<tt style='background-color:#E8E8E8;'> regions.TMRegion <a href=' /regions/TMRegion.py#L858'>_getEphemeralMembersAll</a>()</tt>	Returns a concatenated list of both the standard base class ephemeral members as well as any additional ephemeral members.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L241'>getParameter</a>(name,index)</tt>	Get the value of the parameter.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L262'>setParameter</a>(name,index,value)</tt>	Set the value of the parameter.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L305'>compute</a>(inputs,outputs)</tt>	Process one input sample.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L326'>getLabelResults</a>()</tt>	Get the labels of the previously computed record.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L336'>classifyStates</a>()</tt>	Reclassifies all internal state.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L344'>classifyState</a>(state)</tt>	Reclassifies given state.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L397'>constructClassificationRecord</a>(inputs)</tt>	Construct a _htmclassificationrecord based on the state of the model passed in through the inputs.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L462'>_addRecordToKNN</a>(record)</tt>	Adds the record to the knn classifier.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L483'>_deleteRecordsFromKNN</a>(recordsToDelete)</tt>	Removes the given records from the classifier.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L501'>_deleteRangeFromKNN</a>(start,end)</tt>	Removes any stored records within the range from start to end.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L527'>_recomputeRecordFromKNN</a>(record)</tt>	Returns the classified labeling of record.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L567'>_labelToCategoryNumber</a>(label)</tt>	Since the knn classifier stores categories as numbers we must store each label as a number.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L578'>_labelListToCategoryNumber</a>(labelList)</tt>	This method takes a list of labels and returns a unique category number.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L590'>_categoryToLabelList</a>(category)</tt>	Converts a category number into a list of labels.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L607'>_getStateAnomalyVector</a>(state)</tt>	Returns a state's anomaly vertor converting it from spare to dense.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L616'>getLabels</a>(start,end)</tt>	Get the labels on classified points within range start to end not inclusive.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L681'>addLabel</a>(start,end,labelName)</tt>	Add the label labelname to each record with record rowid in range from start to end noninclusive of end.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L740'>removeLabels</a>(start,end,labelFilter)</tt>	Remove labels from each record with record rowid in range from start to end noninclusive of end.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L814'>__getstate__</a>()</tt>	Return serializable state this function will return a version of the.
<tt style='background-color:#E8E8E8;'> regions.KNNAnomalyClassifierRegion <a href=' /regions/KNNAnomalyClassifierRegion.py#L829'>__setstate__</a>(state)</tt>	Set the state of ourself from a serialized state.
<tt style='background-color:#E8E8E8;'> regions.RecordSensor <a href=' /regions/RecordSensor.py#L233'>__init__</a>(verbosity,numCategories)</tt>	Create a node without an encoder or datasource.
<tt style='background-color:#E8E8E8;'> regions.RecordSensor <a href=' /regions/RecordSensor.py#L275'>rewind</a>()</tt>	Reset the sensor to beginning of data.
<tt style='background-color:#E8E8E8;'> regions.RecordSensor <a href=' /regions/RecordSensor.py#L283'>getNextRecord</a>()</tt>	Get the next record to encode includes getting a record.
<tt style='background-color:#E8E8E8;'> regions.RecordSensor <a href=' /regions/RecordSensor.py#L314'>applyFilters</a>(data)</tt>	Apply pre-encoding filters.
<tt style='background-color:#E8E8E8;'> regions.RecordSensor <a href=' /regions/RecordSensor.py#L351'>populateCategoriesOut</a>(categories,output)</tt>	Populate the output array with the category indices.
<tt style='background-color:#E8E8E8;'> regions.RecordSensor <a href=' /regions/RecordSensor.py#L368'>compute</a>(inputs,outputs)</tt>	Get a record from the datasource and encode it.
<tt style='background-color:#E8E8E8;'> regions.RecordSensor <a href=' /regions/RecordSensor.py#L504'>_convertNonNumericData</a>(spatialOutput,temporalOutput,output)</tt>	Converts all of the non-numeric fields from spatialoutput and temporaloutput into their scalar equivalents and records them in the output dictionary.
<tt style='background-color:#E8E8E8;'> regions.RecordSensor <a href=' /regions/RecordSensor.py#L533'>getOutputValues</a>(outputName)</tt>	Return the dictionary of output values note that these are normal python.
<tt style='background-color:#E8E8E8;'> regions.RecordSensor <a href=' /regions/RecordSensor.py#L541'>getOutputElementCount</a>(name)</tt>	Computes the width of dataout.
<tt style='background-color:#E8E8E8;'> regions.RecordSensor <a href=' /regions/RecordSensor.py#L589'>setParameter</a>(parameterName,index,parameterValue)</tt>	Set the value of a spec parameter most parameters are handled.
<tt style='background-color:#E8E8E8;'> regions.RecordSensor <a href=' /regions/RecordSensor.py#L603'>getProtoType</a>()</tt>	Return the pycapnp proto type that the class uses for serialization.
<tt style='background-color:#E8E8E8;'> regions.RecordSensor <a href=' /regions/RecordSensor.py#L609'>writeToProto</a>(proto)</tt>	Write state to proto object.
<tt style='background-color:#E8E8E8;'> regions.RecordSensor <a href=' /regions/RecordSensor.py#L622'>readFromProto</a>(cls,proto)</tt>	Read state from proto object.
<tt style='background-color:#E8E8E8;'> regions.Spec <a href=' /regions/Spec.py#L152'>invariant</a>()</tt>	Verify the validity of the node spec object the type of each sub-object is verified and then.
<tt style='background-color:#E8E8E8;'> regions.Spec <a href=' /regions/Spec.py#L200'>toDict</a>()</tt>	Convert the information of the node spec to a plain dict of basic types the description and singlenodeonly attributes are placed directly in.
<tt style='background-color:#E8E8E8;'> regions. <a href=' /regions/SPRegion.py#L40'>getDefaultSPImp</a>()</tt>	Return the default spatial pooler implementation for this region.
<tt style='background-color:#E8E8E8;'> regions. <a href=' /regions/SPRegion.py#L48'>getSPClass</a>(spatialImp)</tt>	Return the class corresponding to the given spatialimp string.
<tt style='background-color:#E8E8E8;'> regions. <a href=' /regions/SPRegion.py#L116'>_getAdditionalSpecs</a>(spatialImp,kwargs)</tt>	Build the additional specs in three groups for the inspector use the type of the default argument to set the spec type defaulting.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L399'>_initializeEphemeralMembers</a>()</tt>	Initialize all ephemeral data members and give the derived class the opportunity to do the same by invoking the virtual member _initephemerals(),.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L450'>_allocateSpatialFDR</a>(rfInput)</tt>	Allocate the spatial pooler instance.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L516'>_compute</a>(inputs,outputs)</tt>	Run one iteration of spregion's compute.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L572'>_doBottomUpCompute</a>(rfInput,resetSignal)</tt>	Do one iteration of inference and/or learning and return the result parameters.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L619'>_doTopDownInfer</a>(topDownInput)</tt>	Do one iteration of top-down inference.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L643'>getBaseSpec</a>(cls)</tt>	Return the base spec for spregion.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L758'>getSpec</a>(cls)</tt>	Return the spec for spregion.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L773'>getAlgorithmInstance</a>()</tt>	Returns instance of the underlying spatialpooler algorithm object.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L778'>getParameter</a>(parameterName,index)</tt>	Get the value of a nodespec parameter most parameters are handled.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L809'>setParameter</a>(parameterName,index,parameterValue)</tt>	Set the value of a spec parameter most parameters are handled.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L861'>getProtoType</a>()</tt>	Return the pycapnp proto type that the class uses for serialization.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L867'>writeToProto</a>(proto)</tt>	Write state to proto object.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L883'>readFromProto</a>(cls,proto)</tt>	Read state from proto object.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L903'>__getstate__</a>()</tt>	Return serializable state this function will return a version of the.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L918'>__setstate__</a>(state)</tt>	Set the state of ourself from a serialized state.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L934'>_initEphemerals</a>()</tt>	Initialize all ephemerals used by derived classes.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L954'>_getEphemeralMembers</a>()</tt>	Callback that returns a list of all "ephemeral" members (i e data members.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L965'>_getEphemeralMembersBase</a>()</tt>	Returns list of all ephemeral members.
<tt style='background-color:#E8E8E8;'> regions.SPRegion <a href=' /regions/SPRegion.py#L975'>_getEphemeralMembersAll</a>()</tt>	Returns a concatenated list of both the standard base class ephemeral members as well as any additional ephemeral members.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L55'>__init__</a>(categoriesOut,minC,maxC,minGamma)</tt>	@param categoriesout -- the maximum number of distinct category labels that can be learned.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L145'>clear</a>()</tt>	Clear all persistent internal state.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L192'>_initRandom</a>()</tt>	Create and seed random number generator.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L275'>compute</a>(nodeInfo,inputs,outputs)</tt>	Process one input sample.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L382'>_scan</a>(inputs)</tt>	Run scanning inference and store the results.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L414'>getNodeSpec</a>()</tt>	Return the nodespec for this pynode.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L579'>catIndexToId</a>(catIndex)</tt>	Map category indices internal to category ids external.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L586'>_getHyperplanes</a>()</tt>	Return a numpy array containing the complete set of hyperplanes used by the trained svm classifier.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L599'>simulateTrainingSample</a>(inputWidth,category,partitionId)</tt>	Debugging/profiling utility method to allow tools to simulate the presentation of training sample.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L625'>getParameter</a>(parameterName,nodeSet)</tt>	Get the value of a parameter.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L661'>setParameter</a>(parameterName,parameterValue,nodeSet)</tt>	Set the value of a parameter.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L703'>__setstate__</a>(state)</tt>	Set the state of ourself from a serialized state.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L749'>__getstate__</a>()</tt>	Return serializable state this function will return a version of the.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L762'>_getEphemeralMembers</a>()</tt>	Returns list of all ephemeral class members.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L774'>_initDataStructures</a>(inputWidth)</tt>	Initialize internal data structures.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L784'>_initSvm</a>(n_dims)</tt>	Initialize svm engine use the swig bindings to initialize an instance of an svm classifier engine.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L815'>_learn</a>(inputVector,trueCatIndex,partitionId)</tt>	Store current input vector and associated category index.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L828'>_storeSample</a>(trueCatIndex,inputVector,partitionId)</tt>	Store a training sample and associated category label.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L872'>_infer</a>(sample)</tt>	Consult svm to classify input vector.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L897'>_finishSphering</a>()</tt>	Compute normalization constants for each feature dimension based on the collected training samples.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L923'>_finishLearning</a>()</tt>	Use the c++ implementation to build an svm model.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L1029'>_doRecursion</a>(samples,validationSets,paramRange,recursionIndex)</tt>	Perform recursive latin hypercube sampling.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L1126'>_validateSvm</a>(C,gamma,progressStart,progressEnd)</tt>	Perform cross-validation to measure the recognition accuracy of an svm.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L1204'>_buildSVM</a>(C,gamma)</tt>	Train an svm model.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L1287'>getAllDistances</a>()</tt>	Return all the prototype distances from all computes available.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L1295'>getLatestDistances</a>()</tt>	Get the distances to all training samples pre-svm post-pca.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L1306'>getCategoryList</a>()</tt>	Public api for returning the category list.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L1314'>_calculateDistances</a>(inputVector)</tt>	Calculate distances in the original input space pre-svm post-pca.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L1329'>_calculateAndStoreDistances</a>(inputVector)</tt>	Calculate distances in the original input space pre-svm post-pca.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L1352'>setUpcomingPartitionIds</a>(partitionIds)</tt>	Set the queue of upcoming partition ids this can be used instead of the.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L1373'>remapCategories</a>(mapping)</tt>	Change the existing category labels.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L1396'>changePartitionId</a>(oldPartitionId,newPartitionId)</tt>	Change all instances of oldpartitionid to newpartitionid.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L1410'>changeCategoriesOfPartitionIds</a>(partitionIds,categoryIndices)</tt>	Change the category associated with all vectors with this partitionid s.
<tt style='background-color:#E8E8E8;'> regions.SVMClassifierNode <a href=' /regions/SVMClassifierNode.py#L1444'>switchToLearning</a>()</tt>	Force a switch back to learning mode not normally supported.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L560'>_getEphemeralAttributes</a>()</tt>	List of attributes to not save with serialized state.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L568'>_initEphemerals</a>()</tt>	Initialize attributes that are not saved with the checkpoint.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L585'>__setstate__</a>(state)</tt>	Set state from serialized state.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L609'>__getstate__</a>()</tt>	Get serializable state.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L661'>getAlgorithmInstance</a>()</tt>	Returns instance of the underlying knnclassifier algorithm object.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L666'>getParameter</a>(name,index)</tt>	Get the value of the parameter.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L724'>setParameter</a>(name,index,value)</tt>	Set the value of the parameter.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L766'>doInference</a>(activeInput)</tt>	Explicitly run inference on a vector that is passed in and return the category id.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L774'>enableTap</a>(tapPath)</tt>	Begin writing output tap files.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L785'>disableTap</a>()</tt>	Disable writing of output tap files.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L796'>handleLogInput</a>(inputs)</tt>	Write inputs to output tap file.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L806'>handleLogOutput</a>(output)</tt>	Write outputs to output tap file.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L815'>_storeSample</a>(inputVector,trueCatIndex,partition)</tt>	Store a training sample and associated category label.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L839'>compute</a>(inputs,outputs)</tt>	Process one input sample this method is called by the runtime engine.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L1027'>getCategoryList</a>()</tt>	Public api for returning the category list this is a required api of the nearestneighbor inspector.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L1043'>getLatestDistances</a>()</tt>	Public api for returning the full scores distance to each prototype from the last.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L1063'>getAllDistances</a>()</tt>	Return all the prototype distances from all computes available.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L1089'>_finishLearning</a>()</tt>	Does nothing kept here for api compatibility.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L1101'>_finishSphering</a>()</tt>	Compute normalization constants for each feature dimension based on the collected training samples.
<tt style='background-color:#E8E8E8;'> regions.KNNClassifierRegion <a href=' /regions/KNNClassifierRegion.py#L1138'>getOutputElementCount</a>(name)</tt>	This method will be called only when the node is used in nupic 2.
<tt style='background-color:#E8E8E8;'> regions.SDRClassifierRegion <a href=' /regions/SDRClassifierRegion.py#L267'>initialize</a>()</tt>	Is called once by nupic before the first call to compute().
<tt style='background-color:#E8E8E8;'> regions.SDRClassifierRegion <a href=' /regions/SDRClassifierRegion.py#L281'>getAlgorithmInstance</a>()</tt>	Returns instance of the underlying sdrclassifier algorithm object.
<tt style='background-color:#E8E8E8;'> regions.SDRClassifierRegion <a href=' /regions/SDRClassifierRegion.py#L286'>getParameter</a>(name,index)</tt>	Get the value of the parameter.
<tt style='background-color:#E8E8E8;'> regions.SDRClassifierRegion <a href=' /regions/SDRClassifierRegion.py#L298'>setParameter</a>(name,index,value)</tt>	Set the value of the parameter.
<tt style='background-color:#E8E8E8;'> regions.SDRClassifierRegion <a href=' /regions/SDRClassifierRegion.py#L314'>getProtoType</a>()</tt>	Return the pycapnp proto type that the class uses for serialization.
<tt style='background-color:#E8E8E8;'> regions.SDRClassifierRegion <a href=' /regions/SDRClassifierRegion.py#L320'>writeToProto</a>(proto)</tt>	Write state to proto object.
<tt style='background-color:#E8E8E8;'> regions.SDRClassifierRegion <a href=' /regions/SDRClassifierRegion.py#L334'>readFromProto</a>(cls,proto)</tt>	Read state from proto object.
<tt style='background-color:#E8E8E8;'> regions.SDRClassifierRegion <a href=' /regions/SDRClassifierRegion.py#L354'>compute</a>(inputs,outputs)</tt>	Process one input sample.
<tt style='background-color:#E8E8E8;'> regions.SDRClassifierRegion <a href=' /regions/SDRClassifierRegion.py#L447'>customCompute</a>(recordNum,patternNZ,classification)</tt>	Just return the inference value from one input sample the actual.
<tt style='background-color:#E8E8E8;'> regions.SDRClassifierRegion <a href=' /regions/SDRClassifierRegion.py#L499'>getOutputElementCount</a>(outputName)</tt>	Returns the number of output elements.
<tt style='background-color:#E8E8E8;'> regions.PluggableEncoderSensor <a href=' /regions/PluggableEncoderSensor.py#L70'>setSensedValue</a>(value)</tt>	Sets the value that will be encoded when this region does a compute.
<tt style='background-color:#E8E8E8;'> regions.RecordSensorFilters.AddNoise <a href=' /regions/RecordSensorFilters/AddNoise.py#L38'>__init__</a>(noise,seed)</tt>	Construct the filter parameters.
<tt style='background-color:#E8E8E8;'> regions.RecordSensorFilters.AddNoise <a href=' /regions/RecordSensorFilters/AddNoise.py#L51'>process</a>(encoder,data)</tt>	Modify the data in place adding noise.
<tt style='background-color:#E8E8E8;'> regions.RecordSensorFilters.ModifyFields <a href=' /regions/RecordSensorFilters/ModifyFields.py#L38'>__init__</a>(fields,operation,seed)</tt>	Construct the filter parameters.
<tt style='background-color:#E8E8E8;'> regions.RecordSensorFilters.ModifyFields <a href=' /regions/RecordSensorFilters/ModifyFields.py#L62'>process</a>(encoder,data)</tt>	Modify the data in place adding noise.
<tt style='background-color:#E8E8E8;'> algorithms.CLAClassifierFactory <a href=' /algorithms/cla_classifier_factory.py#L51'>read</a>(proto)</tt>	Proto claclassifierregionproto capnproto object.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/anomaly.py#L30'>computeRawAnomalyScore</a>(activeColumns,prevPredictedColumns)</tt>	Computes the raw anomaly score.
<tt style='background-color:#E8E8E8;'> algorithms.Anomaly <a href=' /algorithms/anomaly.py#L125'>compute</a>(activeColumns,predictedColumns,inputValue,timestamp)</tt>	Compute the anomaly score as the percent of active columns not predicted.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/backtracking_tm_cpp.py#L37'>_extractCallingMethodArgs</a>()</tt>	Returns args dictionary from the calling method.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L151'>__setstate__</a>(state)</tt>	Set the state of ourself from a serialized state.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L187'>_getEphemeralMembers</a>()</tt>	List of our member variables that we don't need to be saved.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L197'>_initEphemerals</a>()</tt>	Initialize all ephemeral members after being restored to a pickled state.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L243'>saveToFile</a>(filePath)</tt>	Save cells4 state to this file.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L249'>loadFromFile</a>(filePath)</tt>	Load cells4 state from this file.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L256'>__getattr__</a>(name)</tt>	Patch __getattr__ so that we can catch the first access to 'cells' and load.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L279'>compute</a>(bottomUpInput,enableLearn,computeInfOutput)</tt>	Handle one compute possibly learning.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L340'>inferPhase2</a>()</tt>	This calls phase 2 of inference used in multistep prediction.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L358'>_copyAllocatedStates</a>()</tt>	If state is allocated in cpp copy over the data into our numpy arrays.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L382'>_setStatePointers</a>()</tt>	If we are having cpp use numpy-allocated buffers set these buffer pointers.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L395'>reset</a>()</tt>	Reset the state of all cells.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L407'>finishLearning</a>()</tt>	Called when learning has been completed this method just calls.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L417'>trimSegments</a>(minPermanence,minNumSyns)</tt>	This method deletes all synapses where permanence value is strictly less than self.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L525'>slowIsSegmentActive</a>(seg,timeStep)</tt>	A segment is active if it has >= activationthreshold connected synapses that are active due to infactivestate.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L578'>getAvgLearnedSeqLength</a>()</tt>	Return our moving average of learned sequence length.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L584'>getColCellIdx</a>(idx)</tt>	Get column and cell within column from a global cell index.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L594'>getSegmentOnCell</a>(c,i,segIdx)</tt>	Return segment number segidx on cell c i.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L624'>getNumSegments</a>()</tt>	Return the total number of segments.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L629'>getNumSynapses</a>()</tt>	Return the total number of synapses.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L634'>getNumSegmentsInCell</a>(c,i)</tt>	Return the total number of segments in cell c i.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L639'>getSegmentInfo</a>(collectActiveData)</tt>	Returns information about the distribution of segments synapses and permanence values in the current tm.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L715'>getActiveSegment</a>(c,i,timeStep)</tt>	For a given cell return the segment with the strongest _connected_ activation i.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L726'>getBestMatchingCell</a>(c,timeStep,learnState)</tt>	Find weakly activated cell in column returns index and segment of most.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTMCPP <a href=' /algorithms/backtracking_tm_cpp.py#L735'>getLeastAllocatedCell</a>(c)</tt>	For the given column return the cell with the fewest number of segments.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L64'>__init__</a>(numberOfCols,cellsPerColumn,initialPerm,connectedPerm)</tt>	Construct the tm @param pamlength number of time steps to remain in "pay attention mode" after.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L307'>_getEphemeralMembers</a>()</tt>	List of our member variables that we don't need to be saved.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L314'>_initEphemerals</a>()</tt>	Initialize all ephemeral members after being restored to a pickled state.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L375'>__getstate__</a>()</tt>	@internal return serializable state.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L392'>__setstate__</a>(state)</tt>	@internal set the state of ourself from a serialized state.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L406'>__getattr__</a>(name)</tt>	@internal patch __getattr__ so that we can catch the first access to 'cells' and load.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L487'>saveToFile</a>(filePath)</tt>	Implemented in backtrackingtmcpp backtrackingtmcpp savetofile.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L494'>loadFromFile</a>(filePath)</tt>	Implemented in backtrackingtmcpp backtrackingtmcpp loadfromfile.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L501'>setRandomSeed</a>(seed)</tt>	@internal seed the random number generator.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L509'>getRandomState</a>()</tt>	@internal return the random number state.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L518'>setRandomState</a>(state)</tt>	@internal set the random number state.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L526'>reset</a>()</tt>	Reset the state of all cells.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L582'>resetStats</a>()</tt>	Reset the learning and inference stats this will usually be called by.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L617'>getStats</a>()</tt>	Return the current learning and inference stats this returns a dict.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L690'>_updateStatsInferEnd</a>(stats,bottomUpNZ,predictedState,colConfidence)</tt>	Called at the end of learning and inference this routine will update a number of stats in our _internalstats dictionary including our computed.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L758'>printState</a>(aState)</tt>	Print an integer array that is the same shape as activestate.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L777'>printConfidence</a>(aState,maxCols)</tt>	Print a floating point array that is the same shape as activestate.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L797'>printColConfidence</a>(aState,maxCols)</tt>	Print up to maxcols number from a flat floating point array.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L875'>printParameters</a>()</tt>	Print the parameter settings for the tm.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L897'>printActiveIndices</a>(state,andValues)</tt>	Print the list of [column cellidx] indices for each of the active cells in state.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L934'>printComputeEnd</a>(output,learn)</tt>	Called at the end of inference to print out various diagnostic information based on the current verbosity level.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1052'>getNumSegmentsInCell</a>(c,i)</tt>	@param c column index.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1061'>getNumSynapses</a>()</tt>	@returns the total number of synapses.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1069'>getNumStrongSynapses</a>()</tt>	@todo implement this it is used by the node's getparameter() call.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1076'>getNumStrongSynapsesPerTimeSlot</a>()</tt>	@todo implement this it is used by the node's getparameter() call.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1083'>getNumSynapsesPerSegmentMax</a>()</tt>	@todo implement this it is used by the node's getparameter() call it should return the max # of synapses seen in any one segment.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1090'>getNumSynapsesPerSegmentAvg</a>()</tt>	@returns the average number of synapses per segment.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1097'>getNumSegments</a>()</tt>	@returns the total number of segments.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1105'>getNumCells</a>()</tt>	@returns the total number of cells.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1112'>getSegmentOnCell</a>(c,i,segIdx)</tt>	@param c column index @param i cell index in column.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1182'>addToSegmentUpdates</a>(c,i,segUpdate)</tt>	Store a dated potential segment update the "date" iteration index is used.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1206'>removeSegmentUpdate</a>(updateInfo)</tt>	Remove a segment update called when seg update expires or is processed.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1221'>computeOutput</a>()</tt>	Computes output for both learning and inference in both cases the.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1264'>getActiveState</a>()</tt>	Return the current active state this is called by the node to.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1273'>getPredictedState</a>()</tt>	Return a numpy array predictedcells representing the current predicted state.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1288'>predict</a>(nSteps)</tt>	This function gives the future predictions for <nsteps> timesteps starting from the current tm state.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1351'>_getTPDynamicStateVariableNames</a>()</tt>	Any newly added dynamic states in the tm should be added to this list.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1381'>_setTPDynamicState</a>(tpDynamicState)</tt>	Set all the dynamic state variables from the <tpdynamicstate> dict.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1394'>_updateAvgLearnedSeqLength</a>(prevSeqLength)</tt>	Update our moving average of learned sequence length.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1405'>getAvgLearnedSeqLength</a>()</tt>	@returns moving average of learned sequence length.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1412'>inferBacktrack</a>(activeColumns)</tt>	This "backtracks" our inference state trying to see if we can lock onto the current set of inputs by assuming the sequence started up to n steps.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1662'>inferPhase1</a>(activeColumns,useStartCells)</tt>	Update the inference active state from the last set of predictions and the current bottom-up.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1712'>inferPhase2</a>()</tt>	Phase 2 for the inference state the computes the predicted state then.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1783'>updateInferenceState</a>(activeColumns)</tt>	Update the inference state called from compute() on every iteration.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1827'>learnBacktrackFrom</a>(startOffset,readOnly)</tt>	@internal a utility method called from learnbacktrack.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L1922'>learnBacktrack</a>()</tt>	This "backtracks" our learning state trying to see if we can lock onto the current set of inputs by assuming the sequence started up to n steps.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2033'>learnPhase1</a>(activeColumns,readOnly)</tt>	Compute the learning active state given the predicted state and the bottom-up input.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2116'>learnPhase2</a>(readOnly)</tt>	Compute the predicted segments given the current set of active cells.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2174'>updateLearningState</a>(activeColumns)</tt>	Update the learning state called from compute() on every iteration.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2279'>compute</a>(bottomUpInput,enableLearn,computeInfOutput)</tt>	Handle one compute possibly learning.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2419'>updateSegmentDutyCycles</a>()</tt>	This gets called on every compute it determines if it's time to.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2435'>columnConfidences</a>(cellConfidences)</tt>	Compute the column confidences given the cell confidences if.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2449'>topDownCompute</a>(topDownIn)</tt>	Top-down compute - generate expected input given output of the tm @param topdownin top down input from the level above us.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2465'>trimSegmentsInCell</a>(colIdx,cellIdx,segList,minPermanence)</tt>	This method goes through a list of segments for a given cell and deletes all synapses whose permanence is less than minpermanence and deletes.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2517'>trimSegments</a>(minPermanence,minNumSyns)</tt>	This method deletes all synapses whose permanence is less than minpermanence and deletes any segments that have less than.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2556'>cleanUpdatesList</a>(col,cellIdx,seg)</tt>	Removes any update that would be for the given col cellidx segidx.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2576'>finishLearning</a>()</tt>	Called when learning has been completed this method just calls.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2600'>checkPrediction2</a>(patternNZs,output,colConfidence,details)</tt>	This function will replace checkprediction.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2725'>isSegmentActive</a>(seg,activeState)</tt>	A segment is active if it has >= activationthreshold connected synapses that are active due to activestate.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2741'>getSegmentActivityLevel</a>(seg,activeState,connectedSynapsesOnly)</tt>	This routine computes the activity level of a segment given activestate.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2757'>getBestMatchingCell</a>(c,activeState,minThreshold)</tt>	Find weakly activated cell in column with at least minthreshold active synapses.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2799'>getBestMatchingSegment</a>(c,i,activeState)</tt>	For the given cell find the segment with the largest number of active synapses.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2827'>getCellForNewSegment</a>(colIdx)</tt>	Return the index of a cell in this column which is a good candidate for adding a new segment.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2902'>getSegmentActiveSynapses</a>(c,i,s,activeState)</tt>	Return a segmentupdate data structure containing a list of proposed changes to segment s.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2947'>chooseCellsToLearnFrom</a>(c,i,s,n)</tt>	Choose n random cells to learn from.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L2992'>processSegmentUpdates</a>(activeColumns)</tt>	Go through the list of accumulated segment updates and process them as follows.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L3064'>adaptSegment</a>(segUpdate)</tt>	This function applies segment update information to a segment in a cell.
<tt style='background-color:#E8E8E8;'> algorithms.BacktrackingTM <a href=' /algorithms/backtracking_tm.py#L3160'>getSegmentInfo</a>(collectActiveData)</tt>	Returns information about the distribution of segments synapses and permanence values in the current tm.
<tt style='background-color:#E8E8E8;'> algorithms.Segment <a href=' /algorithms/backtracking_tm.py#L3300'>dutyCycle</a>(active,readOnly)</tt>	Compute/update and return the positive activations duty cycle of this segment.
<tt style='background-color:#E8E8E8;'> algorithms.Segment <a href=' /algorithms/backtracking_tm.py#L3373'>debugPrint</a>()</tt>	Print segment information for verbose messaging and debugging.
<tt style='background-color:#E8E8E8;'> algorithms.Segment <a href=' /algorithms/backtracking_tm.py#L3426'>freeNSynapses</a>(numToFree,inactiveSynapseIndices,verbosity)</tt>	Free up some synapses in this segment we always free up inactive.
<tt style='background-color:#E8E8E8;'> algorithms.Segment <a href=' /algorithms/backtracking_tm.py#L3479'>addSynapse</a>(srcCellCol,srcCellIdx,perm)</tt>	Add a new synapse.
<tt style='background-color:#E8E8E8;'> algorithms.Segment <a href=' /algorithms/backtracking_tm.py#L3489'>updateSynapses</a>(synapses,delta)</tt>	Update a set of synapses in the segment.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/KNNClassifier.py#L35'>_labeledInput</a>(activeInputs,cellsPerCol)</tt>	Print the list of [column cellidx] indices for each of the active cells in activeinputs.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L214'>clear</a>()</tt>	Clears the state of the knnclassifier.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L282'>prototypeSetCategory</a>(idToCategorize,newCategory)</tt>	Allows ids to be assigned a category and subsequently enables users to use - :meth ~.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L297'>removeIds</a>(idsToRemove)</tt>	There are two caveats first this is a potentially slow operation second.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L312'>removeCategory</a>(categoryToRemove)</tt>	There are two caveats first this is a potentially slow operation second.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L337'>_removeRows</a>(rowsToRemove)</tt>	A list of row indices to remove there are two caveats first this is.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L384'>doIteration</a>()</tt>	Utility method to increment the iteration index intended for models that.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L392'>learn</a>(inputPattern,inputCategory,partitionId,isSparse)</tt>	Train the classifier to associate specified input pattern with a particular category.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L611'>getOverlaps</a>(inputPattern)</tt>	Return the degree of overlap between an input pattern and each category stored in the classifier.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L628'>getDistances</a>(inputPattern)</tt>	Return the distances between the input pattern and all other stored patterns.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L642'>infer</a>(inputPattern,computeScores,overCategories,partitionId)</tt>	Finds the category that best matches the input pattern returns the.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L737'>getClosest</a>(inputPattern,topKCategories)</tt>	Returns the index of the pattern that is closest to inputpattern the distances of all patterns to inputpattern and the indices of the k.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L760'>closestTrainingPattern</a>(inputPattern,cat)</tt>	Returns the closest training pattern to inputpattern that belongs to category "cat".
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L790'>closestOtherTrainingPattern</a>(inputPattern,cat)</tt>	Return the closest training pattern that is *not* of the given category "cat".
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L820'>getPattern</a>(idx,sparseBinaryForm,cat)</tt>	Gets a training pattern either by index or category number.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L853'>getPartitionId</a>(i)</tt>	Gets the partition id given an index.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L870'>getPartitionIdList</a>()</tt>	:returns a list of complete partition id objects.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L877'>getNumPartitionIds</a>()</tt>	:returns the number of unique partition ids stored.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L884'>getPartitionIdKeys</a>()</tt>	:returns a list containing unique non-none partition ids just the keys.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L891'>getPatternIndicesWithPartitionId</a>(partitionId)</tt>	:returns a list of pattern indices corresponding to this partitionid.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L899'>_addPartitionId</a>(index,partitionId)</tt>	Adds partition id for pattern index.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L912'>_rebuildPartitionIdMap</a>(partitionIdList)</tt>	Rebuilds the partition id map using the given partitionidlist.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L923'>_calcDistance</a>(inputPattern,distanceNorm)</tt>	Calculate the distances from inputpattern to all stored patterns all.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L978'>_getDistances</a>(inputPattern,partitionId)</tt>	Return the distances from inputpattern to all stored patterns.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L1009'>finishLearning</a>()</tt>	Used for batch scenarios this method needs to be called between learning.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L1018'>computeSVD</a>(numSVDSamples,finalize)</tt>	Compute the singular value decomposition svd the svd is a factorization.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L1062'>getAdaptiveSVDDims</a>(singularValues,fractionOfMax)</tt>	Compute the number of eigenvectors singularvalues to keep.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L1080'>_finalizeSVD</a>(numSVDDims)</tt>	Called by finalizelearning() this will project all the patterns onto the.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L1122'>remapCategories</a>(mapping)</tt>	Change the category indices.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L1140'>setCategoryOfVectors</a>(vectorIndices,categoryIndices)</tt>	Change the category associated with this vector s.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L1168'>__getstate__</a>()</tt>	Return serializable state.
<tt style='background-color:#E8E8E8;'> algorithms.KNNClassifier <a href=' /algorithms/KNNClassifier.py#L1177'>__setstate__</a>(state)</tt>	Set the state of this object from a serialized state.
<tt style='background-color:#E8E8E8;'> algorithms._SparseMatrixCorticalColumnAdapter <a href=' /algorithms/spatial_pooler.py#L55'>__getitem__</a>(columnIndex)</tt>	Wraps getrow() such that instances may be indexed by columnindex.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L363'>getColumnDimensions</a>()</tt>	Returns the dimensions of the columns in the region.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L368'>getInputDimensions</a>()</tt>	Returns the dimensions of the input vector.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L373'>getNumColumns</a>()</tt>	Returns the total number of columns.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L378'>getNumInputs</a>()</tt>	Returns the total number of inputs.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L383'>getPotentialRadius</a>()</tt>	Returns the potential radius.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L388'>setPotentialRadius</a>(potentialRadius)</tt>	Sets the potential radius.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L393'>getPotentialPct</a>()</tt>	Returns the potential percent.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L398'>setPotentialPct</a>(potentialPct)</tt>	Sets the potential percent.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L403'>getGlobalInhibition</a>()</tt>	Returns whether global inhibition is enabled.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L408'>setGlobalInhibition</a>(globalInhibition)</tt>	Sets global inhibition.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L413'>getNumActiveColumnsPerInhArea</a>()</tt>	Returns the number of active columns per inhibition area returns a.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L419'>setNumActiveColumnsPerInhArea</a>(numActiveColumnsPerInhArea)</tt>	Sets the number of active columns per inhibition area invalidates the.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L427'>getLocalAreaDensity</a>()</tt>	Returns the local area density returns a value less than 0 if parameter.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L433'>setLocalAreaDensity</a>(localAreaDensity)</tt>	Sets the local area density invalidates the 'numactivecolumnsperinharea'.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L441'>getStimulusThreshold</a>()</tt>	Returns the stimulus threshold.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L446'>setStimulusThreshold</a>(stimulusThreshold)</tt>	Sets the stimulus threshold.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L451'>getInhibitionRadius</a>()</tt>	Returns the inhibition radius.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L456'>setInhibitionRadius</a>(inhibitionRadius)</tt>	Sets the inhibition radius.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L461'>getDutyCyclePeriod</a>()</tt>	Returns the duty cycle period.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L466'>setDutyCyclePeriod</a>(dutyCyclePeriod)</tt>	Sets the duty cycle period.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L471'>getBoostStrength</a>()</tt>	Returns the maximum boost value.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L476'>setBoostStrength</a>(boostStrength)</tt>	Sets the maximum boost value.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L481'>getIterationNum</a>()</tt>	Returns the iteration number.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L486'>setIterationNum</a>(iterationNum)</tt>	Sets the iteration number.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L491'>getIterationLearnNum</a>()</tt>	Returns the learning iteration number.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L496'>setIterationLearnNum</a>(iterationLearnNum)</tt>	Sets the learning iteration number.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L501'>getSpVerbosity</a>()</tt>	Returns the verbosity level.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L506'>setSpVerbosity</a>(spVerbosity)</tt>	Sets the verbosity level.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L511'>getUpdatePeriod</a>()</tt>	Returns the update period.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L516'>setUpdatePeriod</a>(updatePeriod)</tt>	Sets the update period.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L521'>getSynPermTrimThreshold</a>()</tt>	Returns the permanence trim threshold.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L526'>setSynPermTrimThreshold</a>(synPermTrimThreshold)</tt>	Sets the permanence trim threshold.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L531'>getSynPermActiveInc</a>()</tt>	Returns the permanence increment amount for active synapses.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L537'>setSynPermActiveInc</a>(synPermActiveInc)</tt>	Sets the permanence increment amount for active synapses.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L542'>getSynPermInactiveDec</a>()</tt>	Returns the permanence decrement amount for inactive synapses.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L547'>setSynPermInactiveDec</a>(synPermInactiveDec)</tt>	Sets the permanence decrement amount for inactive synapses.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L552'>getSynPermBelowStimulusInc</a>()</tt>	Returns the permanence increment amount for columns that have not been.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L558'>setSynPermBelowStimulusInc</a>(synPermBelowStimulusInc)</tt>	Sets the permanence increment amount for columns that have not been.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L564'>getSynPermConnected</a>()</tt>	Returns the permanence amount that qualifies a synapse as.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L570'>setSynPermConnected</a>(synPermConnected)</tt>	Sets the permanence amount that qualifies a synapse as being.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L576'>getMinPctOverlapDutyCycles</a>()</tt>	Returns the minimum tolerated overlaps given as percent of.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L582'>setMinPctOverlapDutyCycles</a>(minPctOverlapDutyCycles)</tt>	Sets the minimum tolerated activity duty cycle given as percent of.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L588'>getBoostFactors</a>(boostFactors)</tt>	Returns the boost factors for all columns 'boostfactors' size must.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L594'>setBoostFactors</a>(boostFactors)</tt>	Sets the boost factors for all columns 'boostfactors' size must match.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L600'>getOverlapDutyCycles</a>(overlapDutyCycles)</tt>	Returns the overlap duty cycles for all columns 'overlapdutycycles'.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L606'>setOverlapDutyCycles</a>(overlapDutyCycles)</tt>	Sets the overlap duty cycles for all columns 'overlapdutycycles'.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L612'>getActiveDutyCycles</a>(activeDutyCycles)</tt>	Returns the activity duty cycles for all columns 'activedutycycles'.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L618'>setActiveDutyCycles</a>(activeDutyCycles)</tt>	Sets the activity duty cycles for all columns 'activedutycycles'.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L624'>getMinOverlapDutyCycles</a>(minOverlapDutyCycles)</tt>	Returns the minimum overlap duty cycles for all columns.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L630'>setMinOverlapDutyCycles</a>(minOverlapDutyCycles)</tt>	Sets the minimum overlap duty cycles for all columns.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L636'>getPotential</a>(columnIndex,potential)</tt>	Returns the potential mapping for a given column 'potential' size.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L643'>setPotential</a>(columnIndex,potential)</tt>	Sets the potential mapping for a given column 'potential' size.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L657'>getPermanence</a>(columnIndex,permanence)</tt>	Returns the permanence values for a given column 'permanence' size.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L664'>setPermanence</a>(columnIndex,permanence)</tt>	Sets the permanence values for a given column 'permanence' size.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L671'>getConnectedSynapses</a>(columnIndex,connectedSynapses)</tt>	Returns the connected synapses for a given column.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L678'>getConnectedCounts</a>(connectedCounts)</tt>	Returns the number of connected synapses for all columns.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L684'>getOverlaps</a>()</tt>	Returns the overlap score for each column.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L689'>getBoostedOverlaps</a>()</tt>	Returns the boosted overlap score for each column.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L694'>compute</a>(inputVector,learn,activeArray)</tt>	This is the primary public method of the spatialpooler class this.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L754'>stripUnlearnedColumns</a>(activeArray)</tt>	Removes the set of columns who have never been active from the set of active columns selected in the inhibition round.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L770'>_updateMinDutyCycles</a>()</tt>	Updates the minimum duty cycles defining normal activity for a column a.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L781'>_updateMinDutyCyclesGlobal</a>()</tt>	Updates the minimum duty cycles in a global fashion sets the minimum duty.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L794'>_updateMinDutyCyclesLocal</a>()</tt>	Updates the minimum duty cycles the minimum duty cycles are determined.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L812'>_updateDutyCycles</a>(overlaps,activeColumns)</tt>	Updates the duty cycles for each column the overlap duty cycle is a moving.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L852'>_updateInhibitionRadius</a>()</tt>	Update the inhibition radius the inhibition radius is a measure of the.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L878'>_avgColumnsPerInput</a>()</tt>	The average number of columns per input taking into account the topology of the inputs and columns.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L899'>_avgConnectedSpanForColumn1D</a>(columnIndex)</tt>	The range of connected synapses for column this is used to.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L918'>_avgConnectedSpanForColumn2D</a>(columnIndex)</tt>	The range of connectedsynapses per column averaged for each dimension.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L939'>_avgConnectedSpanForColumnND</a>(columnIndex)</tt>	The range of connectedsynapses per column averaged for each dimension.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L964'>_adaptSynapses</a>(inputVector,activeColumns)</tt>	The primary method in charge of learning adapts the permanence values of.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L993'>_bumpUpWeakColumns</a>()</tt>	This method increases the permanence values of synapses of columns whose activity level has been too low.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1009'>_raisePermanenceToThreshold</a>(perm,mask)</tt>	This method ensures that each column has enough connections to input bits to allow it to become active.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1043'>_updatePermanencesForColumn</a>(perm,columnIndex,raisePerm)</tt>	This method updates the permanence matrix with a column's new permanence values.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1082'>_initPermConnected</a>()</tt>	Returns a randomly generated permanence value for a synapses that is initialized in a connected state.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1102'>_initPermNonConnected</a>()</tt>	Returns a randomly generated permanence value for a synapses that is to be initialized in a non-connected state.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1116'>_initPermanence</a>(potential,connectedPct)</tt>	Initializes the permanences of a column the method.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1155'>_mapColumn</a>(index)</tt>	Maps a column to its respective input index keeping to the topology of the region.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1187'>_mapPotential</a>(index)</tt>	Maps a column to its input bits this method encapsulates the topology of.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1232'>_updateDutyCyclesHelper</a>(dutyCycles,newInput,period)</tt>	Updates a duty cycle estimate with a new value this is a helper.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1257'>_updateBoostFactors</a>()</tt>	Update the boost factors for all columns the boost factors are used to.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1292'>_updateBoostFactorsGlobal</a>()</tt>	Update boost factors when global inhibition is used.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1312'>_updateBoostFactorsLocal</a>()</tt>	Update boost factors when local inhibition is used.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1328'>_updateBookeepingVars</a>(learn)</tt>	Updates counter instance variables each round.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1345'>_calculateOverlap</a>(inputVector)</tt>	This function determines each column's overlap with the current input vector.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1368'>_inhibitColumns</a>(overlaps)</tt>	Performs inhibition this method calculates the necessary values needed to.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1400'>_inhibitColumnsGlobal</a>(overlaps,density)</tt>	Perform global inhibition performing global inhibition entails picking the.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1434'>_inhibitColumnsLocal</a>(overlaps,density)</tt>	Performs local inhibition local inhibition is performed on a column by.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1476'>_isUpdateRound</a>()</tt>	Returns true if enough rounds have passed to warrant updates of.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1484'>_getColumnNeighborhood</a>(centerColumn)</tt>	Gets a neighborhood of columns.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1510'>_getInputNeighborhood</a>(centerInput)</tt>	Gets a neighborhood of inputs.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1534'>_seed</a>(seed)</tt>	Initialize the random seed.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1544'>__setstate__</a>(state)</tt>	Initialize class properties from stored values.
<tt style='background-color:#E8E8E8;'> algorithms.SpatialPooler <a href=' /algorithms/spatial_pooler.py#L1698'>printParameters</a>()</tt>	Useful for debugging.
<tt style='background-color:#E8E8E8;'> algorithms.TMShimMixin <a href=' /algorithms/tm_shim.py#L44'>__init__</a>(numberOfCols,cellsPerColumn,initialPerm,connectedPerm)</tt>	Translate parameters and initialize member variables specific to backtracking_tm py.
<tt style='background-color:#E8E8E8;'> algorithms.TMShimMixin <a href=' /algorithms/tm_shim.py#L85'>compute</a>(bottomUpInput,enableLearn,computeInfOutput)</tt>	(from backtracking_tm py).
<tt style='background-color:#E8E8E8;'> algorithms.TMShimMixin <a href=' /algorithms/tm_shim.py#L112'>topDownCompute</a>(topDownIn)</tt>	(from backtracking_tm py).
<tt style='background-color:#E8E8E8;'> algorithms.MonitoredTMShim <a href=' /algorithms/tm_shim.py#L163'>__init__</a>(numberOfCols,cellsPerColumn,initialPerm,connectedPerm)</tt>	Translate parameters and initialize member variables specific to backtracking_tm py.
<tt style='background-color:#E8E8E8;'> algorithms.MonitoredTMShim <a href=' /algorithms/tm_shim.py#L204'>compute</a>(bottomUpInput,enableLearn,computeInfOutput)</tt>	(from backtracking_tm py).
<tt style='background-color:#E8E8E8;'> algorithms.MonitoredTMShim <a href=' /algorithms/tm_shim.py#L229'>topDownCompute</a>(topDownIn)</tt>	(from backtracking_tm py).
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/sdr_classifier.py#L462'>_pFormatArray</a>(array_,fmt)</tt>	Return a string with pretty-print of a numpy array using the given format.
<tt style='background-color:#E8E8E8;'> algorithms.BitHistory <a href=' /algorithms/CLAClassifier.py#L54'>__init__</a>(classifier,bitNum,nSteps)</tt>	Constructor for bit history.
<tt style='background-color:#E8E8E8;'> algorithms.BitHistory <a href=' /algorithms/CLAClassifier.py#L87'>store</a>(iteration,bucketIdx)</tt>	Store a new item in our history.
<tt style='background-color:#E8E8E8;'> algorithms.BitHistory <a href=' /algorithms/CLAClassifier.py#L158'>infer</a>(votes)</tt>	Look up and return the votes for each bucketidx for this bit.
<tt style='background-color:#E8E8E8;'> algorithms.CLAClassifier <a href=' /algorithms/CLAClassifier.py#L276'>__init__</a>(steps,alpha,actValueAlpha,verbosity)</tt>	Constructor for the cla classifier.
<tt style='background-color:#E8E8E8;'> algorithms.CLAClassifier <a href=' /algorithms/CLAClassifier.py#L329'>compute</a>(recordNum,patternNZ,classification,learn)</tt>	Process one input sample.
<tt style='background-color:#E8E8E8;'> algorithms.CLAClassifier <a href=' /algorithms/CLAClassifier.py#L473'>infer</a>(patternNZ,classification)</tt>	Return the inference value from one input sample the actual.
<tt style='background-color:#E8E8E8;'> algorithms.SDRClassifier <a href=' /algorithms/sdr_classifier.py#L157'>compute</a>(recordNum,patternNZ,classification,learn)</tt>	Process one input sample.
<tt style='background-color:#E8E8E8;'> algorithms.SDRClassifier <a href=' /algorithms/sdr_classifier.py#L291'>infer</a>(patternNZ,classification)</tt>	Return the inference value from one input sample the actual.
<tt style='background-color:#E8E8E8;'> algorithms.SDRClassifier <a href=' /algorithms/sdr_classifier.py#L337'>inferSingleStep</a>(patternNZ,weightMatrix)</tt>	Perform inference for a single step given an sdr input and a weight.
<tt style='background-color:#E8E8E8;'> algorithms.SDRClassifier <a href=' /algorithms/sdr_classifier.py#L438'>_calculateError</a>(recordNum,classification)</tt>	Calculate error signal.
<tt style='background-color:#E8E8E8;'> algorithms.Segment <a href=' /algorithms/connections.py#L35'>__init__</a>(cell,flatIdx,lastUsedIteration,ordinal)</tt>	@param cell int index of the cell that this segment is on.
<tt style='background-color:#E8E8E8;'> algorithms.Segment <a href=' /algorithms/connections.py#L55'>__eq__</a>(other)</tt>	Explicitly implement this for unit testing the flatidx is not designed.
<tt style='background-color:#E8E8E8;'> algorithms.Synapse <a href=' /algorithms/connections.py#L74'>__init__</a>(segment,presynapticCell,permanence,ordinal)</tt>	@param segment object segment object that the synapse is synapsed to.
<tt style='background-color:#E8E8E8;'> algorithms.Synapse <a href=' /algorithms/connections.py#L96'>__eq__</a>(other)</tt>	Explicitly implement this for unit testing allow floating point.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/connections.py#L117'>binSearch</a>(arr,val)</tt>	Function for running binary search on a sorted list.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L137'>__init__</a>(numCells,maxSegmentsPerCell,maxSynapsesPerSegment)</tt>	@param numcells int number of cells in collection.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L165'>segmentsForCell</a>(cell)</tt>	Returns the segments that belong to a cell.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L177'>synapsesForSegment</a>(segment)</tt>	Returns the synapses on a segment.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L189'>dataForSynapse</a>(synapse)</tt>	Returns the data for a synapse.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L202'>dataForSegment</a>(segment)</tt>	Returns the data for a segment.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L215'>getSegment</a>(cell,idx)</tt>	Returns a segment object of the specified segment using data from the self.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L229'>_leastRecentlyUsedSegment</a>(cell)</tt>	Find this cell's segment that was least recently used.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L253'>_minPermanenceSynapse</a>(segment)</tt>	Find this segment's synapse with the smallest permanence.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L280'>segmentForFlatIdx</a>(flatIdx)</tt>	Get the segment with the specified flatidx.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L290'>segmentFlatListLength</a>()</tt>	Get the needed length for a list to hold a value for every segment's flatidx.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L299'>synapsesForPresynapticCell</a>(presynapticCell)</tt>	Returns the synapses for the source cell that they synapse on.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L309'>createSegment</a>(cell)</tt>	Adds a new segment on a cell.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L338'>destroySegment</a>(segment)</tt>	Destroys a segment.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L360'>createSynapse</a>(segment,presynapticCell,permanence)</tt>	Creates a new synapse on a segment.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L395'>destroySynapse</a>(synapse)</tt>	Destroys a synapse.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L408'>updateSynapsePermanence</a>(synapse,permanence)</tt>	Updates the permanence for a synapse.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L417'>computeActivity</a>(activePresynapticCells,connectedPermanence)</tt>	Compute each segment's number of active synapses for a given input.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L447'>recordSegmentActivity</a>(segment)</tt>	Record the fact that a segment had some activity this information is.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L456'>startNewIteration</a>()</tt>	Mark the passage of time this information is used during segment.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L463'>numSegments</a>(cell)</tt>	Returns the number of segments.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L477'>numSynapses</a>(segment)</tt>	Returns the number of synapses.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L491'>segmentPositionSortKey</a>(segment)</tt>	Return a numeric key for sorting this segment.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L504'>write</a>(proto)</tt>	Writes serialized data to proto object.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L531'>read</a>(cls,proto)</tt>	Reads deserialized data from proto object.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L585'>__eq__</a>(other)</tt>	Equality operator for connections instances.
<tt style='background-color:#E8E8E8;'> algorithms.Connections <a href=' /algorithms/connections.py#L654'>__ne__</a>(other)</tt>	Non-equality operator for connections instances.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L35'>setRandomSeed</a>(seed)</tt>	Set the random seeds helpful to make unit tests repeatable.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L42'>addNoise</a>(input,noise,doForeground,doBackground)</tt>	Add noise to the given input.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L65'>generateCoincMatrix</a>(nCoinc,length,activity)</tt>	Generate a coincidence matrix this is used to generate random inputs to the.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L98'>generateVectors</a>(numVectors,length,activity)</tt>	Generate a list of random sparse distributed vectors this is used to generate.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L128'>generateSimpleSequences</a>(nCoinc,seqLength,nSeq)</tt>	Generate a set of simple sequences the elements of the sequences will be.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L162'>generateHubSequences</a>(nCoinc,hubs,seqLength,nSeq)</tt>	Generate a set of hub sequences these are sequences which contain a hub.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L197'>genTestSeqsForLookback</a>(nPatterns,patternLen,patternActivity,seqLength)</tt>	Generate two sets of sequences the first set of sequences is used to train.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L250'>generateSimpleCoincMatrix</a>(nCoinc,length,activity)</tt>	Generate a non overlapping coincidence matrix this is used to generate random.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L278'>generateSequences</a>(nPatterns,patternLen,patternActivity,hubs)</tt>	Generate a set of simple and hub sequences a simple sequence contains.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L319'>generateL2Sequences</a>(nL1Patterns,l1Hubs,l1SeqLength,nL1SimpleSequences)</tt>	Generate the simulated output from a spatial pooler that's sitting on top of another spatial pooler / temporal memory pair.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L415'>vectorsFromSeqList</a>(seqList,patternMatrix)</tt>	Convert a list of sequences of pattern indices and a pattern lookup table into a an array of patterns.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L445'>sameTMParams</a>(tp1,tp2)</tt>	Given two tm instances see if any parameters are different.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L459'>sameSynapse</a>(syn,synapses)</tt>	Given a synapse and a list of synapses check whether this synapse exist in the list.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L469'>sameSegment</a>(seg1,seg2)</tt>	Return true if seg1 and seg2 are identical ignoring order of synapses.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L499'>tmDiff</a>(tm1,tm2,verbosity,relaxSegmentTests)</tt>	Given two tm instances list the difference between them and returns false if there is a difference.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L581'>tmDiff2</a>(tm1,tm2,verbosity,relaxSegmentTests)</tt>	Given two tm instances list the difference between them and returns false if there is a difference.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L690'>spDiff</a>(SP1,SP2)</tt>	Function that compares two spatial pooler instances compares the.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L771'>removeSeqStarts</a>(vectors,resets,numSteps)</tt>	Convert a list of sequences of pattern indices and a pattern lookup table into a an array of patterns.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L804'>_accumulateFrequencyCounts</a>(values,freqCounts)</tt>	Accumulate a list of values 'values' into the frequency counts 'freqcounts', and return the updated frequency counts.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L848'>_listOfOnTimesInVec</a>(vector)</tt>	Returns 3 things for a vector * the total on time.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L900'>_fillInOnTimes</a>(vector,durations)</tt>	Helper function used by averageontimepertimestep 'durations' is a vector.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L950'>averageOnTimePerTimestep</a>(vectors,numSamples)</tt>	Computes the average on-time of the outputs that are on at each time step and then averages this over all time steps.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L1006'>averageOnTime</a>(vectors,numSamples)</tt>	Returns the average on-time averaged over all on-time runs.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L1057'>plotOutputsOverTime</a>(vectors,buVectors,title)</tt>	Generate a figure that shows each output over time time goes left to right.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L1095'>plotHistogram</a>(freqCounts,title,xLabel)</tt>	This is usually used to display a histogram of the on-times encountered in a particular output.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L1123'>populationStability</a>(vectors,numSamples)</tt>	Returns the stability for the population averaged over multiple time steps.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L1160'>percentOutputsStableOverNTimeSteps</a>(vectors,numSamples)</tt>	Returns the percent of the outputs that remain completely stable over n time steps.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L1201'>computeSaturationLevels</a>(outputs,outputsShape,sparseForm)</tt>	Compute the saturation for a continuous level this breaks the level into.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L1261'>checkMatch</a>(input,prediction,sparse,verbosity)</tt>	Compares the actual input with the predicted input and returns results parameters.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L1311'>predictionExtent</a>(inputs,resets,outputs,minOverlapPct)</tt>	Computes the predictive ability of a temporal memory tm this routine returns.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L1403'>getCentreAndSpreadOffsets</a>(spaceShape,spreadShape,stepSize)</tt>	Generates centre offsets and spread offsets for block-mode based training regimes - star cross block.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L1473'>makeCloneMap</a>(columnsShape,outputCloningWidth,outputCloningHeight)</tt>	Make a two-dimensional clone map mapping columns to clone master.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/fdrutilities.py#L1601'>numpyStr</a>(array,format,includeIndices,includeZeros)</tt>	Pretty print a numpy matrix using the given format string for each value.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/utils.py#L26'>importAndRunFunction</a>(path,moduleName,funcName)</tt>	Run a named function specified by a filesystem path module name and function name.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/utils.py#L75'>getLockedHandle</a>(runtimeElement,expression)</tt>	Calls runtimeelement interpret expression and wraps the result.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/utils.py#L86'>transferCoincidences</a>(network,fromElementName,toElementName)</tt>	Gets the coincidence matrix from one element and sets it on another element.
<tt style='background-color:#E8E8E8;'> algorithms.SDRClassifierFactory <a href=' /algorithms/sdr_classifier_factory.py#L34'>create</a>()</tt>	Create a sdr classifier factory.
<tt style='background-color:#E8E8E8;'> algorithms.SDRClassifierFactory <a href=' /algorithms/sdr_classifier_factory.py#L56'>read</a>(proto)</tt>	:param proto sdrclassifierregionproto capnproto object.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemoryShim <a href=' /algorithms/temporal_memory_shim.py#L45'>__init__</a>(columnDimensions,cellsPerColumn,activationThreshold,initialPermanence)</tt>	Translate parameters and initialize member variables.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemoryShim <a href=' /algorithms/temporal_memory_shim.py#L82'>compute</a>(activeColumns,learn)</tt>	Feeds input record through tm performing inference and learning.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L41'>__init__</a>(columnDimensions,cellsPerColumn,activationThreshold,initialPermanence)</tt>	@param columndimensions list dimensions of the column space.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L149'>connectionsFactory</a>()</tt>	Create a connections instance temporalmemory subclasses may override this.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L168'>compute</a>(activeColumns,learn)</tt>	Perform one time step of the temporal memory algorithm.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L188'>activateCells</a>(activeColumns,learn)</tt>	Calculate the active cells using the current active columns and dendrite segments.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L253'>activateDendrites</a>(learn)</tt>	Calculate dendrite segment activity using the current active cells.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L297'>reset</a>()</tt>	Indicates the start of a new sequence clears any predictions and makes sure.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L314'>activatePredictedColumn</a>(column,columnActiveSegments,columnMatchingSegments,prevActiveCells)</tt>	Determines which cells in a predicted column should be added to winner cells list and learns on the segments that correctly predicted this column.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L351'>burstColumn</a>(column,columnMatchingSegments,prevActiveCells,prevWinnerCells)</tt>	Activates all of the cells in an unpredicted active column chooses a winner cell and if learning is turned on learns on one segment growing a new.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L389'>punishPredictedColumn</a>(column,columnActiveSegments,columnMatchingSegments,prevActiveCells)</tt>	Punishes the segments that incorrectly predicted a column to be active.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L429'>_activatePredictedColumn</a>(cls,connections,random,columnActiveSegments)</tt>	@param connections object connections for the tm.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L506'>_burstColumn</a>(cls,connections,random,column)</tt>	@param connections object connections for the tm.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L597'>_punishPredictedColumn</a>(cls,connections,columnMatchingSegments,prevActiveCells)</tt>	@param connections object connections for the tm.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L623'>_leastUsedCell</a>(cls,random,cells,connections)</tt>	Gets the cell with the smallest number of segments.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L656'>_growSynapses</a>(cls,connections,random,segment)</tt>	Creates ndesirednewsynapes synapses on the segment passed in if possible choosing random cells from the previous winner cells that are.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L688'>_adaptSegment</a>(cls,connections,segment,prevActiveCells)</tt>	Updates synapses on segment.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L728'>columnForCell</a>(cell)</tt>	Returns the index of the column that a cell belongs to.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L741'>cellsForColumn</a>(column)</tt>	Returns the indices of cells that belong to a column.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L756'>numberOfColumns</a>()</tt>	Returns the number of columns in this layer.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L765'>numberOfCells</a>()</tt>	Returns the number of cells in this layer.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L774'>mapCellsToColumns</a>(cells)</tt>	Maps cells to the columns they belong to.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L791'>getActiveCells</a>()</tt>	Returns the indices of the active cells.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L800'>getPredictiveCells</a>()</tt>	Returns the indices of the predictive cells.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L815'>getWinnerCells</a>()</tt>	Returns the indices of the winner cells.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L824'>getActiveSegments</a>()</tt>	Returns the active segments.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L833'>getMatchingSegments</a>()</tt>	Returns the matching segments.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L842'>getCellsPerColumn</a>()</tt>	Returns the number of cells per column.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L851'>getColumnDimensions</a>()</tt>	Returns the dimensions of the columns in the region.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L859'>getActivationThreshold</a>()</tt>	Returns the activation threshold.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L867'>setActivationThreshold</a>(activationThreshold)</tt>	Sets the activation threshold.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L875'>getInitialPermanence</a>()</tt>	Get the initial permanence.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L883'>setInitialPermanence</a>(initialPermanence)</tt>	Sets the initial permanence.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L891'>getMinThreshold</a>()</tt>	Returns the min threshold.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L899'>setMinThreshold</a>(minThreshold)</tt>	Sets the min threshold.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L907'>getMaxNewSynapseCount</a>()</tt>	Returns the max new synapse count.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L915'>setMaxNewSynapseCount</a>(maxNewSynapseCount)</tt>	Sets the max new synapse count.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L923'>getPermanenceIncrement</a>()</tt>	Get the permanence increment.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L931'>setPermanenceIncrement</a>(permanenceIncrement)</tt>	Sets the permanence increment.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L939'>getPermanenceDecrement</a>()</tt>	Get the permanence decrement.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L947'>setPermanenceDecrement</a>(permanenceDecrement)</tt>	Sets the permanence decrement.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L955'>getPredictedSegmentDecrement</a>()</tt>	Get the predicted segment decrement.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L963'>setPredictedSegmentDecrement</a>(predictedSegmentDecrement)</tt>	Sets the predicted segment decrement.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L971'>getConnectedPermanence</a>()</tt>	Get the connected permanence.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L979'>setConnectedPermanence</a>(connectedPermanence)</tt>	Sets the connected permanence.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L987'>getMaxSegmentsPerCell</a>()</tt>	Get the maximum number of segments per cell.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L995'>getMaxSynapsesPerSegment</a>()</tt>	Get the maximum number of synapses per segment.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L1003'>write</a>(proto)</tt>	Writes serialized data to proto object.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L1047'>read</a>(cls,proto)</tt>	Reads deserialized data from proto object.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L1111'>__eq__</a>(other)</tt>	Non-equality operator for temporalmemory instances.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L1156'>__ne__</a>(other)</tt>	Non-equality operator for temporalmemory instances.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L1167'>_validateColumn</a>(column)</tt>	Raises an error if column index is invalid.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L1177'>_validateCell</a>(cell)</tt>	Raises an error if cell index is invalid.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L1187'>getCellIndices</a>(cls,cells)</tt>	Returns the indices of the cells passed in.
<tt style='background-color:#E8E8E8;'> algorithms.TemporalMemory <a href=' /algorithms/temporal_memory.py#L1197'>getCellIndex</a>(cell)</tt>	Returns the index of the cell.
<tt style='background-color:#E8E8E8;'> algorithms.AnomalyLikelihood <a href=' /algorithms/anomaly_likelihood.py#L140'>__init__</a>(claLearningPeriod,learningPeriod,estimationSamples,historicWindowSize)</tt>	Note anomaly likelihood scores are reported at a flat 0 5 for.
<tt style='background-color:#E8E8E8;'> algorithms.AnomalyLikelihood <a href=' /algorithms/anomaly_likelihood.py#L217'>computeLogLikelihood</a>(likelihood)</tt>	Compute a log scale representation of the likelihood value since the.
<tt style='background-color:#E8E8E8;'> algorithms.AnomalyLikelihood <a href=' /algorithms/anomaly_likelihood.py#L230'>_calcSkipRecords</a>(numIngested,windowSize,learningPeriod)</tt>	Return the value of skiprecords for passing to estimateanomalylikelihoods if windowsize is very large bigger than the amount of data then this.
<tt style='background-color:#E8E8E8;'> algorithms.AnomalyLikelihood <a href=' /algorithms/anomaly_likelihood.py#L251'>read</a>(cls,proto)</tt>	Capnp deserialization method for the anomaly likelihood object.
<tt style='background-color:#E8E8E8;'> algorithms.AnomalyLikelihood <a href=' /algorithms/anomaly_likelihood.py#L301'>write</a>(proto)</tt>	Capnp serialization method for the anomaly likelihood object.
<tt style='background-color:#E8E8E8;'> algorithms.AnomalyLikelihood <a href=' /algorithms/anomaly_likelihood.py#L350'>anomalyProbability</a>(value,anomalyScore,timestamp)</tt>	Compute the probability that the current value plus anomaly score represents an anomaly given the historical distribution of anomaly scores.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/anomaly_likelihood.py#L398'>estimateAnomalyLikelihoods</a>(anomalyScores,averagingWindow,skipRecords,verbosity)</tt>	Given a series of anomaly scores compute the likelihood for each score this.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/anomaly_likelihood.py#L514'>updateAnomalyLikelihoods</a>(anomalyScores,params,verbosity)</tt>	Compute updated probabilities for anomalyscores using the given params.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/anomaly_likelihood.py#L607'>_filterLikelihoods</a>(likelihoods,redThreshold,yellowThreshold)</tt>	Filter the list of raw pre-filtered likelihoods so that we only preserve sharp increases in likelihood.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/anomaly_likelihood.py#L641'>_anomalyScoreMovingAverage</a>(anomalyScores,windowSize,verbosity)</tt>	Given a list of anomaly scores return a list of averaged records.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/anomaly_likelihood.py#L681'>estimateNormal</a>(sampleData,performLowerBoundCheck)</tt>	:param sampledata :type sampledata numpy array.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/anomaly_likelihood.py#L717'>nullDistribution</a>(verbosity)</tt>	:param verbosity integer controlling extent of printouts for debugging.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/anomaly_likelihood.py#L735'>tailProbability</a>(x,distributionParams)</tt>	Given the normal distribution specified by the mean and standard deviation in distributionparams return the probability of getting samples further.
<tt style='background-color:#E8E8E8;'> algorithms. <a href=' /algorithms/anomaly_likelihood.py#L760'>isValidEstimatorParams</a>(p)</tt>	:returns true if p is a valid estimator params as might be returned by estimateanomalylikelihoods() or updateanomalylikelihoods,.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.MonitorMixinBase <a href=' /algorithms/monitor_mixin/monitor_mixin_base.py#L98'>__init__</a>()</tt>	Note if you set the kwarg "mmname", then pretty-printing of traces and metrics will include the name you specify as a tag before every title.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.MonitorMixinBase <a href=' /algorithms/monitor_mixin/monitor_mixin_base.py#L115'>mmClearHistory</a>()</tt>	Clears the stored history.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.MonitorMixinBase <a href=' /algorithms/monitor_mixin/monitor_mixin_base.py#L123'>mmPrettyPrintTraces</a>(traces,breakOnResets)</tt>	Returns pretty-printed table of traces.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.MonitorMixinBase <a href=' /algorithms/monitor_mixin/monitor_mixin_base.py#L145'>mmPrettyPrintMetrics</a>(metrics,sigFigs)</tt>	Returns pretty-printed table of metrics.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.MonitorMixinBase <a href=' /algorithms/monitor_mixin/monitor_mixin_base.py#L165'>mmGetDefaultTraces</a>(verbosity)</tt>	Returns list of default traces to be overridden.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.MonitorMixinBase <a href=' /algorithms/monitor_mixin/monitor_mixin_base.py#L176'>mmGetDefaultMetrics</a>(verbosity)</tt>	Returns list of default metrics to be overridden.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.MonitorMixinBase <a href=' /algorithms/monitor_mixin/monitor_mixin_base.py#L187'>mmGetCellTracePlot</a>(cellTrace,cellCount,activityType,title)</tt>	Returns plot of the cell activity note that if many timesteps of.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L49'>mmGetTraceActiveColumns</a>()</tt>	@return trace trace of active columns.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L56'>mmGetTracePredictiveCells</a>()</tt>	@return trace trace of predictive cells.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L63'>mmGetTraceNumSegments</a>()</tt>	@return trace trace of # segments.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L70'>mmGetTraceNumSynapses</a>()</tt>	@return trace trace of # synapses.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L77'>mmGetTraceSequenceLabels</a>()</tt>	@return trace trace of sequence labels.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L84'>mmGetTraceResets</a>()</tt>	@return trace trace of resets.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L91'>mmGetTracePredictedActiveCells</a>()</tt>	@return trace trace of predicted => active cells.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L99'>mmGetTracePredictedInactiveCells</a>()</tt>	@return trace trace of predicted => inactive cells.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L107'>mmGetTracePredictedActiveColumns</a>()</tt>	@return trace trace of predicted => active columns.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L115'>mmGetTracePredictedInactiveColumns</a>()</tt>	@return trace trace of predicted => inactive columns.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L123'>mmGetTraceUnpredictedActiveColumns</a>()</tt>	@return trace trace of unpredicted => active columns.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L131'>mmGetMetricFromTrace</a>(trace)</tt>	Convenience method to compute a metric over an indices trace excluding resets.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L144'>mmGetMetricSequencesPredictedActiveCellsPerColumn</a>()</tt>	Metric for number of predicted => active cells per column for each sequence.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L164'>mmGetMetricSequencesPredictedActiveCellsShared</a>()</tt>	Metric for number of sequences each predicted => active cell appears in note this metric is flawed when it comes to high-order sequences.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L186'>mmPrettyPrintConnections</a>()</tt>	Pretty print the connections in the temporal memory.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L234'>mmPrettyPrintSequenceCellRepresentations</a>(sortby)</tt>	Pretty print the cell representations for sequences in the history.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L258'>_mmComputeTransitionTraces</a>()</tt>	Computes the transition traces if necessary.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.TemporalMemoryMonitorMixin <a href=' /algorithms/monitor_mixin/temporal_memory_monitor_mixin.py#L396'>mmGetCellActivityPlot</a>(title,showReset,resetShading,activityType)</tt>	Returns plot of the cell activity.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.Metric <a href=' /algorithms/monitor_mixin/metric.py#L35'>__init__</a>(monitor,title,data)</tt>	@param monitor monitormixinbase monitor mixin instance that generated.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.Plot <a href=' /algorithms/monitor_mixin/plot.py#L45'>__init__</a>(monitor,title,show)</tt>	@param monitor monitormixinbase monitor mixin instance that generated.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.Plot <a href=' /algorithms/monitor_mixin/plot.py#L74'>addGraph</a>(data,position,xlabel,ylabel)</tt>	Adds a graph to the plot's figure.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.Plot <a href=' /algorithms/monitor_mixin/plot.py#L89'>addHistogram</a>(data,position,xlabel,ylabel)</tt>	Adds a histogram to the plot's figure.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.Plot <a href=' /algorithms/monitor_mixin/plot.py#L105'>add2DArray</a>(data,position,xlabel,ylabel)</tt>	Adds an image to the plot's figure.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.Plot <a href=' /algorithms/monitor_mixin/plot.py#L137'>_addBase</a>(position,xlabel,ylabel)</tt>	Adds a subplot to the plot's figure at specified position.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.Trace <a href=' /algorithms/monitor_mixin/trace.py#L40'>__init__</a>(monitor,title)</tt>	@param monitor monitormixinbase monitor mixin instance that generated.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.Trace <a href=' /algorithms/monitor_mixin/trace.py#L57'>prettyPrintDatum</a>(datum)</tt>	@param datum object datum from self data to pretty-print.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.IndicesTrace <a href=' /algorithms/monitor_mixin/trace.py#L73'>makeCountsTrace</a>()</tt>	@return countstrace a new trace made up of counts of this trace's indices.
<tt style='background-color:#E8E8E8;'> algorithms.monitor_mixin.IndicesTrace <a href=' /algorithms/monitor_mixin/trace.py#L82'>makeCumCountsTrace</a>()</tt>	@return countstrace a new trace made up of cumulative counts of this trace's indices.
<tt style='background-color:#E8E8E8;'> datafiles.extra.secondOrder. <a href=' /datafiles/extra/secondOrder/makeDataset.py#L34'>_generateModel0</a>(numCategories)</tt>	Generate the initial first order and second order transition probabilities for 'model0'.
<tt style='background-color:#E8E8E8;'> datafiles.extra.secondOrder. <a href=' /datafiles/extra/secondOrder/makeDataset.py#L133'>_generateModel1</a>(numCategories)</tt>	Generate the initial first order and second order transition probabilities for 'model1'.
<tt style='background-color:#E8E8E8;'> datafiles.extra.secondOrder. <a href=' /datafiles/extra/secondOrder/makeDataset.py#L261'>_generateModel2</a>(numCategories,alpha)</tt>	Generate the initial first order and second order transition probabilities for 'model2'.
<tt style='background-color:#E8E8E8;'> datafiles.extra.secondOrder. <a href=' /datafiles/extra/secondOrder/makeDataset.py#L339'>_generateFile</a>(filename,numRecords,categoryList,initProb)</tt>	Generate a set of records reflecting a set of probabilities.
<tt style='background-color:#E8E8E8;'> datafiles.extra.gym.raw. <a href=' /datafiles/extra/gym/raw/makeDataset.py#L124'>processClubAttendance</a>(f,clubs)</tt>	Process the attendance data of one club if the club already exists in the list update its data.
<tt style='background-color:#E8E8E8;'> datafiles.extra.gym.raw. <a href=' /datafiles/extra/gym/raw/makeDataset.py#L158'>processClubConsumption</a>(f,clubs)</tt>	Process the consumption a club - skip the header line.
<tt style='background-color:#E8E8E8;'> datafiles.extra.generated. <a href=' /datafiles/extra/generated/GenerateSampleData.py#L28'>writeSimpleTest1</a>(filePath,numRecords,testNumber)</tt>	Generates requested number of records and saves in a csv file.
<tt style='background-color:#E8E8E8;'> engine.Dimensions <a href=' /engine/__init__.py#L167'>__init__</a>()</tt>	Construct a dimensions object.
<tt style='background-color:#E8E8E8;'> engine. <a href=' /engine/__init__.py#L180'>Array</a>(dtype,size,ref)</tt>	Factory function that creates typed array or arrayref objects dtype - the data type of the array as string.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L394'>__init__</a>(region,network)</tt>	Store the wraped region and hosting network the network is the high-level network and not the internal.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L421'>getSpecFromType</a>(nodeType)</tt>	@doc place_holder region getspecfromtype.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L428'>compute</a>()</tt>	@doc place_holder region compute.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L437'>getInputData</a>(inputName)</tt>	@doc place_holder region getinputdata.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L443'>getOutputData</a>(outputName)</tt>	@doc place_holder region getoutputdata.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L449'>getInputNames</a>()</tt>	Returns list of input names in spec.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L456'>getOutputNames</a>()</tt>	Returns list of output names in spec.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L463'>executeCommand</a>(args)</tt>	@doc place_holder region executecommand.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L469'>_getSpec</a>()</tt>	Spec of the region.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L473'>_getDimensions</a>()</tt>	Dimensions of the region.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L477'>_getNetwork</a>()</tt>	Network for the region.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L481'>__hash__</a>()</tt>	Hash a region.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L489'>_getParameterMethods</a>(paramName)</tt>	Returns functions to set/get the parameter these are.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L527'>getParameter</a>(paramName)</tt>	Get parameter value.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L537'>setParameter</a>(paramName,value)</tt>	Set parameter value.
<tt style='background-color:#E8E8E8;'> engine.Region <a href=' /engine/__init__.py#L547'>_get</a>(method)</tt>	Auto forwarding of properties to get methods of internal region.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L582'>__init__</a>()</tt>	Constructor - initialize the internal engine_internal.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L611'>_getRegions</a>()</tt>	Get the collection of regions in a network this is a tricky one.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L637'>addRegion</a>(name,nodeType,nodeParams)</tt>	@doc place_holder network addregion.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L644'>addRegionFromBundle</a>(name,nodeType,dimensions,bundlePath)</tt>	@doc place_holder network addregionfrombundle.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L653'>setPhases</a>(name,phases)</tt>	@doc place_holder network setphases.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L660'>run</a>(n)</tt>	@doc place_holder network run.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L671'>disableProfiling</a>()</tt>	@doc place_holder network disableprofiling.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L677'>enableProfiling</a>()</tt>	@doc place_holder network enableprofiling.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L683'>getCallbacks</a>()</tt>	@doc place_holder network getcallbacks.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L689'>initialize</a>()</tt>	@doc place_holder network initialize.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L695'>link</a>()</tt>	@doc place_holder network link.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L701'>removeLink</a>()</tt>	@doc place_holder network removelink.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L707'>removeRegion</a>()</tt>	@doc place_holder network removeregion.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L713'>resetProfiling</a>()</tt>	@doc place_holder network resetprofiling.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L719'>save</a>()</tt>	@doc place_holder network save.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L727'>getRegionsByType</a>(regionClass)</tt>	Gets all region instances of a given class (for example nupic.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L740'>registerRegion</a>(regionClass)</tt>	Adds the module and class name for the region to the list of classes the network can use.
<tt style='background-color:#E8E8E8;'> engine.Network <a href=' /engine/__init__.py#L749'>unregisterRegion</a>(regionName)</tt>	Unregisters a region from the internal list of regions.
<tt style='background-color:#E8E8E8;'> database. <a href=' /database/Connection.py#L59'>enableConcurrencyChecks</a>(maxConcurrency,raiseException)</tt>	Enable the diagnostic feature for debugging unexpected concurrency in acquiring connectionwrapper instances.
<tt style='background-color:#E8E8E8;'> database.ConnectionFactory <a href=' /database/Connection.py#L129'>get</a>(cls)</tt>	Acquire a connectionwrapper instance that represents a connection to the sql server per nupic.
<tt style='background-color:#E8E8E8;'> database.ConnectionFactory <a href=' /database/Connection.py#L170'>close</a>(cls)</tt>	Close connectionfactory's connection policy typically there is no need.
<tt style='background-color:#E8E8E8;'> database.ConnectionFactory <a href=' /database/Connection.py#L187'>setConnectionPolicyProvider</a>(cls,provider)</tt>	Set the method for connectionfactory to use when it needs to instantiate its database connection policy.
<tt style='background-color:#E8E8E8;'> database.ConnectionFactory <a href=' /database/Connection.py#L211'>_createDefaultPolicy</a>(cls)</tt>	[private] create the default database connection policy instance.
<tt style='background-color:#E8E8E8;'> database.ConnectionWrapper <a href=' /database/Connection.py#L323'>__enter__</a>()</tt>	[context manager protocol method] permit a connectionwrapper instance to be used in a context manager expression (with.
<tt style='background-color:#E8E8E8;'> database.ConnectionWrapper <a href=' /database/Connection.py#L332'>__exit__</a>(exc_type,exc_val,exc_tb)</tt>	[context manager protocol method] release resources.
<tt style='background-color:#E8E8E8;'> database.ConnectionWrapper <a href=' /database/Connection.py#L340'>release</a>()</tt>	Release the database connection and cursor.
<tt style='background-color:#E8E8E8;'> database.ConnectionWrapper <a href=' /database/Connection.py#L373'>_trackInstanceAndCheckForConcurrencyViolation</a>()</tt>	Check for concurrency violation and add self to _clsoutstandinginstances.
<tt style='background-color:#E8E8E8;'> database.DatabaseConnectionPolicyIface <a href=' /database/Connection.py#L421'>close</a>()</tt>	Close the policy instance and its shared database connection.
<tt style='background-color:#E8E8E8;'> database.DatabaseConnectionPolicyIface <a href=' /database/Connection.py#L426'>acquireConnection</a>()</tt>	Get a connection instance.
<tt style='background-color:#E8E8E8;'> database.SingleSharedConnectionPolicy <a href=' /database/Connection.py#L446'>__init__</a>()</tt>	Consruct an instance the instance's open() method must be.
<tt style='background-color:#E8E8E8;'> database.SingleSharedConnectionPolicy <a href=' /database/Connection.py#L458'>close</a>()</tt>	Close the policy instance and its shared database connection.
<tt style='background-color:#E8E8E8;'> database.SingleSharedConnectionPolicy <a href=' /database/Connection.py#L470'>acquireConnection</a>()</tt>	Get a connection instance.
<tt style='background-color:#E8E8E8;'> database.SingleSharedConnectionPolicy <a href=' /database/Connection.py#L492'>_releaseConnection</a>(dbConn,cursor)</tt>	Release database connection and cursor passed as a callback to.
<tt style='background-color:#E8E8E8;'> database.PooledConnectionPolicy <a href=' /database/Connection.py#L515'>__init__</a>()</tt>	Consruct an instance the instance's open() method must be.
<tt style='background-color:#E8E8E8;'> database.PooledConnectionPolicy <a href=' /database/Connection.py#L528'>close</a>()</tt>	Close the policy instance and its database connection pool.
<tt style='background-color:#E8E8E8;'> database.PooledConnectionPolicy <a href=' /database/Connection.py#L541'>acquireConnection</a>()</tt>	Get a connection from the pool.
<tt style='background-color:#E8E8E8;'> database.PooledConnectionPolicy <a href=' /database/Connection.py#L561'>_releaseConnection</a>(dbConn,cursor)</tt>	Release database connection and cursor passed as a callback to.
<tt style='background-color:#E8E8E8;'> database.PerTransactionConnectionPolicy <a href=' /database/Connection.py#L585'>__init__</a>()</tt>	Consruct an instance the instance's open() method must be.
<tt style='background-color:#E8E8E8;'> database.PerTransactionConnectionPolicy <a href=' /database/Connection.py#L595'>close</a>()</tt>	Close the policy instance.
<tt style='background-color:#E8E8E8;'> database.PerTransactionConnectionPolicy <a href=' /database/Connection.py#L608'>acquireConnection</a>()</tt>	Create a connection instance.
<tt style='background-color:#E8E8E8;'> database.PerTransactionConnectionPolicy <a href=' /database/Connection.py#L628'>_releaseConnection</a>(dbConn,cursor)</tt>	Release database connection and cursor passed as a callback to.
<tt style='background-color:#E8E8E8;'> database. <a href=' /database/Connection.py#L643'>_getCommonSteadyDBArgsDict</a>()</tt>	Returns a dictionary of arguments for dbutils steadydb steadydbconnection.
<tt style='background-color:#E8E8E8;'> database. <a href=' /database/Connection.py#L660'>_getLogger</a>(cls,logLevel)</tt>	Gets a logger for the given class in this module.
<tt style='background-color:#E8E8E8;'> database. <a href=' /database/ClientJobsDAO.py#L62'>_abbreviate</a>(text,threshold)</tt>	Abbreviate the given text to threshold chars and append an ellipsis if its.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L467'>dbNamePrefix</a>(cls)</tt>	Get the beginning part of the database name for the current version of the database.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L477'>__getDBNamePrefixForVersion</a>(cls,dbVersion)</tt>	Get the beginning part of the database name for the given database version.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L493'>_getDBName</a>(cls)</tt>	Generates the clientjobs database name for the current version of the database "semi-private" class method for use by friends of the class.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L506'>__getDBNameForVersion</a>(cls,dbVersion)</tt>	Generates the clientjobs database name for the given version of the.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L534'>get</a>()</tt>	Get the instance of the clientjobsdao created for this process or perhaps at some point in the future for this thread.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L556'>__init__</a>()</tt>	Instantiate a clientjobsdao instance.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L593'>_columnNameDBToPublic</a>(dbName)</tt>	Convert a database internal column name to a public name this.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L616'>connect</a>(deleteOldVersions,recreate)</tt>	Locate the current version of the jobs db or create a new one and optionally delete old versions laying around.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L646'>_initTables</a>(cursor,deleteOldVersions,recreate)</tt>	Initialize tables if needed parameters.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L928'>_getMatchingRowsNoRetries</a>(tableInfo,conn,fieldsToMatch,selectFieldNames)</tt>	Return a sequence of matching rows with the requested field values from a table or empty sequence if nothing matched.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L994'>_getMatchingRowsWithRetries</a>(tableInfo,fieldsToMatch,selectFieldNames,maxRows)</tt>	Like _getmatchingrowsnoretries(), but with retries on transient mysql.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1005'>_getOneMatchingRowNoRetries</a>(tableInfo,conn,fieldsToMatch,selectFieldNames)</tt>	Return a single matching row with the requested field values from the the requested table or none if nothing matched.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1036'>_getOneMatchingRowWithRetries</a>(tableInfo,fieldsToMatch,selectFieldNames)</tt>	Like _getonematchingrownoretries(), but with retries on transient mysql.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1059'>_insertOrGetUniqueJobNoRetries</a>(conn,client,cmdLine,jobHash)</tt>	Attempt to insert a row with the given parameters into the jobs table.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1181'>_resumeJobNoRetries</a>(conn,jobID,alreadyRunning)</tt>	Resumes processing of an existing job that is presently in the status_completed state.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1263'>getConnectionID</a>()</tt>	Return our connection id this can be used for worker identification.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1276'>jobSuspend</a>(jobID)</tt>	Requests a job to be suspended note this is primarily for suspending production jobs do not use.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1303'>jobResume</a>(jobID,alreadyRunning)</tt>	Resumes processing of an existing job that is presently in the status_completed state.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1350'>jobInsert</a>(client,cmdLine,clientInfo,clientKey)</tt>	Add an entry to the jobs table for a new job request this is called by.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1428'>jobInsertUnique</a>(client,cmdLine,jobHash,clientInfo)</tt>	Add an entry to the jobs table for a new job request but only if the same job by the same client is not already running.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1548'>_startJobWithRetries</a>(jobID)</tt>	Place the given job in status_running mode the job is expected to be status_notstarted.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1573'>jobStartNext</a>()</tt>	For use only by nupic scheduler also known as clientjobmanager look through the jobs table and see if any new job requests have been.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1601'>jobReactivateRunningJobs</a>()</tt>	Look through the jobs table and reactivate all that are already in the running state by setting their _eng_allocate_new_workers fields to true.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1621'>jobGetDemand</a>()</tt>	Look through the jobs table and get the demand - minimum and maximum number of workers requested if new workers are to be allocated if there.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1644'>jobCancelAllRunningJobs</a>()</tt>	Set cancel field of all currently-running jobs to true.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1660'>jobCountCancellingJobs</a>()</tt>	Look through the jobs table and count the running jobs whose cancel field is true.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1682'>jobGetCancellingJobs</a>()</tt>	Look through the jobs table and get the list of running jobs whose cancel field is true.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1704'>partitionAtIntervals</a>(data,intervals)</tt>	Generator to allow iterating slices at dynamic intervals parameters.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1727'>_combineResults</a>(result)</tt>	Return a list of namedtuples from the result of a join query a.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1746'>jobInfoWithModels</a>(jobID)</tt>	Get all info about a job with model details if available.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1793'>jobInfo</a>(jobID)</tt>	Get all info about a job parameters.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1815'>jobSetStatus</a>(jobID,status,useConnectionID)</tt>	Change the status on the given job parameters.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1849'>jobSetCompleted</a>(jobID,completionReason,completionMsg,useConnectionID)</tt>	Change the status on the given job to completed parameters.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1890'>jobCancel</a>(jobID)</tt>	Cancel the given job this will update the cancel field in the.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1906'>jobGetModelIDs</a>(jobID)</tt>	Fetch all the modelids that correspond to a given jobid empty sequence.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1916'>getActiveJobCountForClientInfo</a>(clientInfo)</tt>	Return the number of jobs for the given clientinfo and a status that is not completed.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1933'>getActiveJobCountForClientKey</a>(clientKey)</tt>	Return the number of jobs for the given clientkey and a status that is not completed.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1950'>getActiveJobsForClientInfo</a>(clientInfo,fields)</tt>	Fetch jobids for jobs in the table with optional fields given a.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1971'>getActiveJobsForClientKey</a>(clientKey,fields)</tt>	Fetch jobids for jobs in the table with optional fields given a.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L1992'>getJobs</a>(fields)</tt>	Fetch jobids for jobs in the table with optional fields.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2010'>getFieldsForActiveJobsOfType</a>(jobType,fields)</tt>	Helper function for querying the models table including relevant job info where the job type matches the specified jobtype.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2044'>jobGetFields</a>(jobID,fields)</tt>	Fetch the values of 1 or more fields from a job record here 'fields'.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2063'>jobsGetFields</a>(jobIDs,fields,requireAll)</tt>	Fetch the values of 1 or more fields from a sequence of job records.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2097'>jobSetFields</a>(jobID,fields,useConnectionID,ignoreUnchanged)</tt>	Change the values of 1 or more fields in a job here 'fields' is a.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2152'>jobSetFieldIfEqual</a>(jobID,fieldName,newValue,curValue)</tt>	Change the value of 1 field in a job to 'newvalue', but only if the current value matches 'curvalue'.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2199'>jobIncrementIntField</a>(jobID,fieldName,increment,useConnectionID)</tt>	Incremet the value of 1 field in a job by increment the 'fieldname' is.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2241'>jobUpdateResults</a>(jobID,results)</tt>	Update the results string and last-update-time fields of a model.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2258'>modelsClearAll</a>()</tt>	Delete all models from the models table.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2273'>modelInsertAndStart</a>(jobID,params,paramsHash,particleHash)</tt>	Insert a new unique model based on params into the model table in the "running" state.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2414'>modelsInfo</a>(modelIDs)</tt>	Get all info for a set of models warning!!!: the order of the results are not necessarily in the same order as.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2445'>modelsGetFields</a>(modelIDs,fields)</tt>	Fetch the values of 1 or more fields from a sequence of model records.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2491'>modelsGetFieldsForJob</a>(jobID,fields,ignoreKilled)</tt>	Gets the specified fields for all the models for a single job this is.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2549'>modelsGetFieldsForCheckpointed</a>(jobID,fields)</tt>	Gets fields from all models in a job that have been checkpointed this is.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2587'>modelSetFields</a>(modelID,fields,ignoreUnchanged)</tt>	Change the values of 1 or more fields in a model here 'fields' is a.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2635'>modelsGetParams</a>(modelIDs)</tt>	Get the params and paramshash for a set of models.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2666'>modelsGetResultAndStatus</a>(modelIDs)</tt>	Get the results string and other status fields for a set of models.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2701'>modelsGetUpdateCounters</a>(jobID)</tt>	Return info on all of the models that are in already in the models table for a given job.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2726'>modelUpdateResults</a>(modelID,results,metricValue,numRecords)</tt>	Update the results string and/or num_records fields of a model.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2780'>modelSetCompleted</a>(modelID,completionReason,completionMsg,cpuTime)</tt>	Mark a model as completed with the given completionreason and completionmsg.
<tt style='background-color:#E8E8E8;'> database.ClientJobsDAO <a href=' /database/ClientJobsDAO.py#L2828'>modelAdoptNextOrphan</a>(jobId,maxUpdateInterval)</tt>	Look through the models table for an orphaned model which is a model that is not completed yet whose _eng_last_update_time is more than.
<tt style='background-color:#E8E8E8;'> frameworks.opf.ModelFactory <a href=' /frameworks/opf/model_factory.py#L46'>__getLogger</a>(cls)</tt>	Get the logger for this object.
<tt style='background-color:#E8E8E8;'> frameworks.opf.ModelFactory <a href=' /frameworks/opf/model_factory.py#L56'>create</a>(modelConfig,logLevel)</tt>	Create a new model instance given a description dictionary.
<tt style='background-color:#E8E8E8;'> frameworks.opf.ModelFactory <a href=' /frameworks/opf/model_factory.py#L82'>loadFromCheckpoint</a>(savedModelDir,newSerialization)</tt>	Load saved model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.ValueGetterBase <a href=' /frameworks/opf/exp_description_helpers.py#L147'>__call__</a>(topContainer)</tt>	Resolves the referenced value if the result is already cached.
<tt style='background-color:#E8E8E8;'> frameworks.opf.ValueGetterBase <a href=' /frameworks/opf/exp_description_helpers.py#L185'>handleGetValue</a>(topContainer)</tt>	A "pure virtual" method the derived class must override this method.
<tt style='background-color:#E8E8E8;'> frameworks.opf.DictValueGetter <a href=' /frameworks/opf/exp_description_helpers.py#L208'>__init__</a>(referenceDict)</tt>	Referencedict explicit reference dictionary that contains the field corresonding to the first key name in dictkeychain.
<tt style='background-color:#E8E8E8;'> frameworks.opf.DictValueGetter <a href=' /frameworks/opf/exp_description_helpers.py#L264'>handleGetValue</a>(topContainer)</tt>	This method overrides valuegetterbase's "pure virtual" method it.
<tt style='background-color:#E8E8E8;'> frameworks.opf.DeferredDictLookup <a href=' /frameworks/opf/exp_description_helpers.py#L296'>__init__</a>()</tt>	Dictkeychain one or more strings the first string is a key that will eventually be defined in the dictionary that will be passed.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/htm_prediction_model_callbacks.py#L33'>htmPredictionModelControlEnableSPLearningCb</a>(htmPredictionModel)</tt>	Enables learning in the htmpredictionmodel's spatial pooler see also htmpredictionmodelcontroldisablesplearningcb.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/htm_prediction_model_callbacks.py#L50'>htmPredictionModelControlDisableSPLearningCb</a>(htmPredictionModel)</tt>	Disables learning in the htmpredictionmodel's spatial pooler while retaining the ability to re-enable sp learning in the future.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/htm_prediction_model_callbacks.py#L69'>htmPredictionModelControlEnableTPLearningCb</a>(htmPredictionModel)</tt>	Enables learning in the htmpredictionmodel's temporal pooler see also htmpredictionmodelcontroldisabletplearningcb.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/htm_prediction_model_callbacks.py#L86'>htmPredictionModelControlDisableTPLearningCb</a>(htmPredictionModel)</tt>	Disables learning in the htmpredictionmodel's temporal pooler while retaining the ability to re-enable tm learning in the future.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelPickleSPInitArgs <a href=' /frameworks/opf/htm_prediction_model_callbacks.py#L108'>__init__</a>(filePath)</tt>	Filepath path of file where sp __init__ args are to be saved.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelPickleTPInitArgs <a href=' /frameworks/opf/htm_prediction_model_callbacks.py#L148'>__init__</a>(filePath)</tt>	Filepath path of file where tm __init__ args are to be saved.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L54'>run</a>(inputRecord)</tt>	Run one iteration of this model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L75'>finishLearning</a>()</tt>	Place the model in a permanent "finished learning" mode.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L86'>resetSequenceStates</a>()</tt>	Signal that the input record is the start of a new sequence.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L90'>getFieldInfo</a>(includeClassifierOnlyField)</tt>	Return the sequence of fieldmetainfo objects specifying the format of model's output.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L104'>setFieldStatistics</a>(fieldStats)</tt>	Propagate field statistics to the model in case some of its machinery needs it.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L113'>getRuntimeStats</a>()</tt>	Get runtime statistics specific to this model i.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L120'>_getLogger</a>()</tt>	Get the logger for this object.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L132'>getInferenceType</a>()</tt>	Return the inferencetype of this model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L139'>enableLearning</a>()</tt>	Turn learning on for the current model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L144'>disableLearning</a>()</tt>	Turn learning off for the current model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L149'>isLearningEnabled</a>()</tt>	Return the learning state of the current model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L155'>enableInference</a>(inferenceArgs)</tt>	Enable inference for this model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L164'>getInferenceArgs</a>()</tt>	Return the dict of arguments for the current inference mode.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L170'>disableInference</a>()</tt>	Turn inference off for the current model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L174'>isInferenceEnabled</a>()</tt>	Return the inference state of the current model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L180'>getProtoType</a>()</tt>	Return the pycapnp proto type that the class uses for serialization.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L189'>_getModelCheckpointFilePath</a>(checkpointDir)</tt>	Return the absolute path of the model's checkpoint file.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L200'>writeToCheckpoint</a>(checkpointDir)</tt>	Serializes model using capnproto and writes data to checkpointdir.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L228'>readFromCheckpoint</a>(cls,checkpointDir)</tt>	Deerializes model from checkpointdir using capnproto.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L239'>write</a>(proto)</tt>	Write state to proto object.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L246'>read</a>(cls,proto)</tt>	Read state from proto object.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L258'>save</a>(saveModelDir)</tt>	Save the model in the given directory.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L306'>_serializeExtraData</a>(extraDataDir)</tt>	Protected method that is called during serialization with an external directory path.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L315'>load</a>(cls,savedModelDir)</tt>	Load saved model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L343'>_deSerializeExtraData</a>(extraDataDir)</tt>	Protected method that is called during deserialization (after __setstate__) with an external directory path.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L353'>_getModelPickleFilePath</a>(saveModelDir)</tt>	Return the absolute path of the model's pickle file.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L364'>_getModelExtraDataDir</a>(saveModelDir)</tt>	Return the absolute path to the directory where the model's own "extra data" are stored (i.
<tt style='background-color:#E8E8E8;'> frameworks.opf.Model <a href=' /frameworks/opf/model.py#L377'>__makeDirectoryFromAbsolutePath</a>(absDirPath)</tt>	Make directory for the given directory path if it doesn't already exist in the filesystem.
<tt style='background-color:#E8E8E8;'> frameworks.opf.DescriptionIface <a href=' /frameworks/opf/exp_description_api.py#L74'>__init__</a>(modelConfig,control)</tt>	Modelconfig a dictionary object which holds user-defined settings for model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.DescriptionIface <a href=' /frameworks/opf/exp_description_api.py#L89'>getModelDescription</a>()</tt>	Returns the model creation parameters based on the settings in the config dictionary.
<tt style='background-color:#E8E8E8;'> frameworks.opf.DescriptionIface <a href=' /frameworks/opf/exp_description_api.py#L96'>getModelControl</a>()</tt>	Returns the task instances of the experiment description.
<tt style='background-color:#E8E8E8;'> frameworks.opf.DescriptionIface <a href=' /frameworks/opf/exp_description_api.py#L104'>normalizeStreamSources</a>()</tt>	Inspects the control task and updates any stream sources it finds that are not absolute paths into paths generated by pkg_resources relative to.
<tt style='background-color:#E8E8E8;'> frameworks.opf.DescriptionIface <a href=' /frameworks/opf/exp_description_api.py#L113'>convertNupicEnvToOPF</a>()</tt>	Converts the control element from nupic format to a default opf format with 1 task.
<tt style='background-color:#E8E8E8;'> frameworks.opf.ExperimentDescriptionAPI <a href=' /frameworks/opf/exp_description_api.py#L128'>__init__</a>(modelConfig,control)</tt>	Modelconfig a dictionary object which holds user-defined settings for model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.ExperimentDescriptionAPI <a href=' /frameworks/opf/exp_description_api.py#L159'>getModelControl</a>()</tt>	Returns the task instances of the experiment description.
<tt style='background-color:#E8E8E8;'> frameworks.opf.ExperimentDescriptionAPI <a href=' /frameworks/opf/exp_description_api.py#L167'>__validateExperimentControl</a>(control)</tt>	Validates control dictionary for the experiment context.
<tt style='background-color:#E8E8E8;'> frameworks.opf.ExperimentDescriptionAPI <a href=' /frameworks/opf/exp_description_api.py#L194'>__validateNupicControl</a>(control)</tt>	Validates control dictionary for the nupic engine context.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PeriodicActivityMgr <a href=' /frameworks/opf/experiment_runner.py#L825'>__init__</a>(requestedActivities)</tt>	Requestedactivities a sequence of periodicactivityrequest elements.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PeriodicActivityMgr <a href=' /frameworks/opf/experiment_runner.py#L838'>tick</a>()</tt>	Activity tick handler services all activities.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PeriodicActivityMgr <a href=' /frameworks/opf/periodic.py#L96'>__appendActivities</a>(periodicActivities)</tt>	Periodicactivities a sequence of periodicactivityrequest elements.
<tt style='background-color:#E8E8E8;'> frameworks.opf.SafeInterpreter <a href=' /frameworks/opf/safe_interpreter.py#L34'>__init__</a>()</tt>	Initialize interpreter with blacklisted nodes removed from supported nodes.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/opf_helpers.py#L35'>loadExperiment</a>(path)</tt>	Loads the experiment description file from the path.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/opf_helpers.py#L51'>loadExperimentDescriptionScriptFromDir</a>(experimentDir)</tt>	Loads the experiment description python script from the given experiment directory.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/opf_helpers.py#L64'>getExperimentDescriptionInterfaceFromModule</a>(module)</tt>	Module imported description py module.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/opf_helpers.py#L80'>_loadDescriptionFile</a>(descriptionPyPath)</tt>	Loads a description file and returns it as a module.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PredictionMetricsLoggerIface <a href=' /frameworks/opf/opf_basic_environment.py#L65'>emitPeriodicMetrics</a>(metrics)</tt>	Emits periodic metrics metrics a list of prediction_metrics_manager.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PredictionMetricsLoggerIface <a href=' /frameworks/opf/opf_basic_environment.py#L75'>emitFinalMetrics</a>(metrics)</tt>	Emits final metrics.
<tt style='background-color:#E8E8E8;'> frameworks.opf.DatasetReaderIface <a href=' /frameworks/opf/opf_basic_environment.py#L95'>getDatasetFieldMetaData</a>()</tt>	Returns a tuple of dataset field metadata descriptors that are arranged in the same order as the columns in the dataset.
<tt style='background-color:#E8E8E8;'> frameworks.opf.DatasetReaderIface <a href=' /frameworks/opf/opf_basic_environment.py#L105'>next</a>()</tt>	Returns the next record from the dataset the returned record object.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PredictionWriterIface <a href=' /frameworks/opf/opf_basic_environment.py#L127'>close</a>()</tt>	Closes the writer (e g close the underlying file).
<tt style='background-color:#E8E8E8;'> frameworks.opf.PredictionWriterIface <a href=' /frameworks/opf/opf_basic_environment.py#L132'>append</a>(inputRow,predictionRow,sequenceReset,metrics)</tt>	Emits a single prediction as input versus predicted.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PredictionWriterIface <a href=' /frameworks/opf/opf_basic_environment.py#L153'>checkpoint</a>(checkpointSink,maxRows)</tt>	Save a checkpoint of the prediction output stream the checkpoint.
<tt style='background-color:#E8E8E8;'> frameworks.opf.BasicPredictionMetricsLogger <a href=' /frameworks/opf/opf_basic_environment.py#L175'>__init__</a>(experimentDir,label)</tt>	Constructor label a distinguishing string that will be used to distinguish.
<tt style='background-color:#E8E8E8;'> frameworks.opf.BasicPredictionMetricsLogger <a href=' /frameworks/opf/opf_basic_environment.py#L194'>emitPeriodicMetrics</a>(metrics)</tt>	Emits periodic metrics metrics a list of prediction_metrics_manager.
<tt style='background-color:#E8E8E8;'> frameworks.opf.BasicPredictionMetricsLogger <a href=' /frameworks/opf/opf_basic_environment.py#L208'>emitFinalMetrics</a>(metrics)</tt>	Emits final metrics.
<tt style='background-color:#E8E8E8;'> frameworks.opf.BasicPredictionMetricsLogger <a href=' /frameworks/opf/opf_basic_environment.py#L224'>_translateMetricsToJSON</a>(metrics,label)</tt>	Translates the given metrics value to json string metrics a list of dictionaries per opftaskdriver.
<tt style='background-color:#E8E8E8;'> frameworks.opf.BasicDatasetReader <a href=' /frameworks/opf/opf_basic_environment.py#L271'>__init__</a>(streamDefDict)</tt>	Constructor streamdefdict stream definition as defined in.
<tt style='background-color:#E8E8E8;'> frameworks.opf.BasicDatasetReader <a href=' /frameworks/opf/opf_basic_environment.py#L295'>getDatasetFieldMetaData</a>()</tt>	[virtual method override] returns a tuple of dataset field metadata descriptors that are.
<tt style='background-color:#E8E8E8;'> frameworks.opf._BasicPredictionWriter <a href=' /frameworks/opf/opf_basic_environment.py#L376'>__openDatafile</a>(modelResult)</tt>	Open the data file and write the header row.
<tt style='background-color:#E8E8E8;'> frameworks.opf._BasicPredictionWriter <a href=' /frameworks/opf/opf_basic_environment.py#L490'>setLoggedMetrics</a>(metricNames)</tt>	Tell the writer which metrics should be written.
<tt style='background-color:#E8E8E8;'> frameworks.opf._BasicPredictionWriter <a href=' /frameworks/opf/opf_basic_environment.py#L503'>close</a>()</tt>	[virtual method override] closes the writer (e g close the underlying.
<tt style='background-color:#E8E8E8;'> frameworks.opf._BasicPredictionWriter <a href=' /frameworks/opf/opf_basic_environment.py#L515'>__getListMetaInfo</a>(inferenceElement)</tt>	Get field metadata information for inferences that are of list type.
<tt style='background-color:#E8E8E8;'> frameworks.opf._BasicPredictionWriter <a href=' /frameworks/opf/opf_basic_environment.py#L543'>__getDictMetaInfo</a>(inferenceElement,inferenceDict)</tt>	Get field metadate information for inferences that are of dict type.
<tt style='background-color:#E8E8E8;'> frameworks.opf._BasicPredictionWriter <a href=' /frameworks/opf/opf_basic_environment.py#L563'>append</a>(modelResult)</tt>	[virtual method override] emits a single prediction as input versus predicted.
<tt style='background-color:#E8E8E8;'> frameworks.opf._BasicPredictionWriter <a href=' /frameworks/opf/opf_basic_environment.py#L642'>checkpoint</a>(checkpointSink,maxRows)</tt>	[virtual method override] save a checkpoint of the prediction output stream.
<tt style='background-color:#E8E8E8;'> frameworks.opf.NonTemporalPredictionLogAdapter <a href=' /frameworks/opf/opf_basic_environment.py#L726'>__init__</a>(writer)</tt>	Writer non-temporal prediction log writer conforming to predictionwriteriface interface.
<tt style='background-color:#E8E8E8;'> frameworks.opf.NonTemporalPredictionLogAdapter <a href=' /frameworks/opf/opf_basic_environment.py#L741'>update</a>(modelResult)</tt>	Emit a input/prediction pair if possible.
<tt style='background-color:#E8E8E8;'> frameworks.opf.TemporalPredictionLogAdapter <a href=' /frameworks/opf/opf_basic_environment.py#L759'>__init__</a>(writer)</tt>	Writer non-temporal prediction log writer conforming to predictionwriteriface interface.
<tt style='background-color:#E8E8E8;'> frameworks.opf.TemporalPredictionLogAdapter <a href=' /frameworks/opf/opf_basic_environment.py#L779'>update</a>(modelResult)</tt>	Queue up the t i+1 prediction value and emit a t i input/prediction pair if possible.
<tt style='background-color:#E8E8E8;'> frameworks.opf.BasicPredictionLogger <a href=' /frameworks/opf/opf_basic_environment.py#L798'>__init__</a>(fields,experimentDir,label,inferenceType)</tt>	Constructor fields a non-empty sequence of nupic.
<tt style='background-color:#E8E8E8;'> frameworks.opf.BasicPredictionLogger <a href=' /frameworks/opf/opf_basic_environment.py#L850'>close</a>()</tt>	Called when the stream is completed.
<tt style='background-color:#E8E8E8;'> frameworks.opf.BasicPredictionLogger <a href=' /frameworks/opf/opf_basic_environment.py#L859'>writeRecord</a>(modelResult)</tt>	Emits a set of inputs data inferences and metrics from a model resulting from a single record.
<tt style='background-color:#E8E8E8;'> frameworks.opf.BasicPredictionLogger <a href=' /frameworks/opf/opf_basic_environment.py#L871'>writeRecords</a>(modelResults,progressCB)</tt>	Same as writerecord above but emits multiple rows in one shot.
<tt style='background-color:#E8E8E8;'> frameworks.opf.BasicPredictionLogger <a href=' /frameworks/opf/opf_basic_environment.py#L918'>setLoggedMetrics</a>(metricNames)</tt>	[virtual method override] sets which metrics should be written to the.
<tt style='background-color:#E8E8E8;'> frameworks.opf.BasicPredictionLogger <a href=' /frameworks/opf/opf_basic_environment.py#L931'>checkpoint</a>(checkpointSink,maxRows)</tt>	[virtual method override] save a checkpoint of the prediction output stream.
<tt style='background-color:#E8E8E8;'> frameworks.opf._FileUtils <a href=' /frameworks/opf/opf_basic_environment.py#L962'>getExperimentInferenceDirPath</a>(experimentDir)</tt>	Experimentdir experiment directory path that contains description py.
<tt style='background-color:#E8E8E8;'> frameworks.opf._FileUtils <a href=' /frameworks/opf/opf_basic_environment.py#L973'>createExperimentInferenceDir</a>(cls,experimentDir)</tt>	Creates the inference output directory for the given experiment experimentdir experiment directory path that contains description.
<tt style='background-color:#E8E8E8;'> frameworks.opf._FileUtils <a href=' /frameworks/opf/opf_basic_environment.py#L988'>makeDirectory</a>(path)</tt>	Makes directory for the given directory path if it doesn't already exist in the filesystem.
<tt style='background-color:#E8E8E8;'> frameworks.opf.TwoGramModel <a href=' /frameworks/opf/two_gram_model.py#L37'>__init__</a>(inferenceType,encoderParams)</tt>	Two-gram model constructor.
<tt style='background-color:#E8E8E8;'> frameworks.opf.TwoGramModel <a href=' /frameworks/opf/two_gram_model.py#L56'>run</a>(inputRecord)</tt>	Run one iteration of this model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.TwoGramModel <a href=' /frameworks/opf/two_gram_model.py#L120'>finishLearning</a>()</tt>	Places the model in a permanent "finished learning" mode.
<tt style='background-color:#E8E8E8;'> frameworks.opf.TwoGramModel <a href=' /frameworks/opf/two_gram_model.py#L130'>setFieldStatistics</a>(fieldStats)</tt>	This method is used for the data source to communicate to the.
<tt style='background-color:#E8E8E8;'> frameworks.opf.TwoGramModel <a href=' /frameworks/opf/two_gram_model.py#L138'>getFieldInfo</a>()</tt>	Returns the metadata specifying the format of the model's output.
<tt style='background-color:#E8E8E8;'> frameworks.opf.TwoGramModel <a href=' /frameworks/opf/two_gram_model.py#L154'>getRuntimeStats</a>()</tt>	Get the runtime statistics specific to the model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.TwoGramModel <a href=' /frameworks/opf/two_gram_model.py#L165'>_getLogger</a>()</tt>	Get the logger created by this subclass.
<tt style='background-color:#E8E8E8;'> frameworks.opf.TwoGramModel <a href=' /frameworks/opf/two_gram_model.py#L173'>resetSequenceStates</a>()</tt>	Called to indicate the start of a new sequence.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/experiment_runner.py#L130'>runExperiment</a>(args,model)</tt>	Run a single opf experiment note the caller is resposible for initializing python logging before calling.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/experiment_runner.py#L162'>initExperimentPrng</a>()</tt>	Initialize prngs that may be used by other modules in the experiment stack.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/experiment_runner.py#L187'>_parseCommandLineOptions</a>(args)</tt>	Parse command line options args.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/experiment_runner.py#L313'>reapVarArgsCallback</a>(option,optStr,value,parser)</tt>	Used as optparse callback for reaping a variable number of option args.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/experiment_runner.py#L356'>_reportCommandLineUsageErrorAndExit</a>(parser,message)</tt>	Report usage error and exit program with error indication.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/experiment_runner.py#L364'>_runExperimentImpl</a>(options,model)</tt>	Creates and runs the experiment args.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/experiment_runner.py#L500'>_getModelCheckpointDir</a>(experimentDir,checkpointLabel)</tt>	Creates directory for serialization of the model.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/experiment_runner.py#L517'>getCheckpointParentDir</a>(experimentDir)</tt>	Get checkpoint parent dir.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/experiment_runner.py#L530'>_checkpointLabelFromCheckpointDir</a>(checkpointDir)</tt>	Returns a checkpoint label string for the given model checkpoint directory.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/experiment_runner.py#L545'>_isCheckpointDir</a>(checkpointDir)</tt>	Return true iff checkpointdir appears to be a checkpoint directory.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/experiment_runner.py#L561'>_printAvailableCheckpoints</a>(experimentDir)</tt>	List available checkpoints for the specified experiment.
<tt style='background-color:#E8E8E8;'> frameworks.opf._TaskRunner <a href=' /frameworks/opf/experiment_runner.py#L663'>run</a>()</tt>	Runs a single experiment task.
<tt style='background-color:#E8E8E8;'> frameworks.opf._TaskRunner <a href=' /frameworks/opf/experiment_runner.py#L731'>_createPeriodicActivities</a>()</tt>	Creates and returns a list of activites for this taskrunner instance.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/experiment_runner.py#L863'>main</a>()</tt>	Module-level entry point run according to options in sys argv.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PredictionLoggerIface <a href=' /frameworks/opf/opf_environment.py#L43'>close</a>()</tt>	Closes connect to output store and cleans up any resources associated.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PredictionLoggerIface <a href=' /frameworks/opf/opf_environment.py#L49'>writeRecord</a>(modelResult)</tt>	Emits a set of inputs data inferences and metrics from a model resulting from a single record.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PredictionLoggerIface <a href=' /frameworks/opf/opf_environment.py#L59'>writeRecords</a>(modelResults,progressCB)</tt>	Same as writerecord above but emits multiple rows in one shot.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PredictionLoggerIface <a href=' /frameworks/opf/opf_environment.py#L70'>setLoggedMetrics</a>(metricNames)</tt>	Sets which metrics should be written to the prediction log.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PredictionLoggerIface <a href=' /frameworks/opf/opf_environment.py#L80'>checkpoint</a>(checkpointSink,maxRows)</tt>	Save a checkpoint of the prediction output stream the checkpoint.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/model_callbacks.py#L28'>modelControlFinishLearningCb</a>(model)</tt>	Passes the "finish learning" command to the model note upon completion.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricsManager <a href=' /frameworks/opf/prediction_metrics_manager.py#L58'>__init__</a>(metricSpecs,fieldInfo,inferenceType)</tt>	Constructs a metrics manager parameters.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricsManager <a href=' /frameworks/opf/prediction_metrics_manager.py#L93'>update</a>(results)</tt>	Compute the new metrics values given the next inference/ground-truth values parameters.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricsManager <a href=' /frameworks/opf/prediction_metrics_manager.py#L160'>getMetrics</a>()</tt>	Gets the current metric values returns a dictionary where each key is the metric-name and the values are.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricsManager <a href=' /frameworks/opf/prediction_metrics_manager.py#L176'>getMetricDetails</a>(metricLabel)</tt>	Gets detailed info about a given metric in addition to its value this.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricsManager <a href=' /frameworks/opf/prediction_metrics_manager.py#L196'>getMetricLabels</a>()</tt>	Return the list of labels for the metrics that are being calculated.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricsManager <a href=' /frameworks/opf/prediction_metrics_manager.py#L201'>_addResults</a>(results)</tt>	Stores the current model results in the manager's internal store.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricsManager <a href=' /frameworks/opf/prediction_metrics_manager.py#L229'>_getGroundTruth</a>(inferenceElement)</tt>	Get the actual value for this field.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricsManager <a href=' /frameworks/opf/prediction_metrics_manager.py#L244'>_getInference</a>(inferenceElement)</tt>	Get what the inferred value for this field was.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricsManager <a href=' /frameworks/opf/prediction_metrics_manager.py#L259'>_getRawGroundTruth</a>()</tt>	Get what the inferred value for this field was.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricsManager <a href=' /frameworks/opf/prediction_metrics_manager.py#L272'>__constructMetricsModules</a>(metricSpecs)</tt>	Creates the required metrics modules.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/prediction_metrics_manager.py#L407'>_testTemporalShift</a>()</tt>	Test to see if the metrics manager correctly shifts records for multistep.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/htm_prediction_model.py#L68'>requireAnomalyModel</a>(func)</tt>	Decorator for functions that require anomaly models.
<tt style='background-color:#E8E8E8;'> frameworks.opf.NetworkInfo <a href=' /frameworks/opf/htm_prediction_model.py#L88'>__init__</a>(net,statsCollectors)</tt>	Net the cla network instance.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L243'>resetSequenceStates</a>()</tt>	[virtual method override] resets the model's sequence states normally.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L258'>finishLearning</a>()</tt>	[virtual method override] places the model in a permanent "finished learning" mode where it will not be able to learn from subsequent input.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L295'>enableLearning</a>()</tt>	[override] turn learning on for the current model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L301'>disableLearning</a>()</tt>	[override] turn learning off for the current model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L312'>setAnomalyParameter</a>(param,value)</tt>	Set a parameter of the anomaly classifier within this model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L320'>getAnomalyParameter</a>(param)</tt>	Get a parameter of the anomaly classifier within this model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L328'>anomalyRemoveLabels</a>(start,end,labelFilter)</tt>	Remove labels from the anomaly classifier within this model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L336'>anomalyAddLabel</a>(start,end,labelName)</tt>	Add labels from the anomaly classifier within this model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L344'>anomalyGetLabels</a>(start,end)</tt>	Get labels from the anomaly classifier within this model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L352'>run</a>(inputRecord)</tt>	Run one iteration of this model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L430'>_getSensorInputRecord</a>(inputRecord)</tt>	Inputrecord - dict containing the input to the sensor.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L450'>_getClassifierInputRecord</a>(inputRecord)</tt>	Inputrecord - dict containing the input to the sensor.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L617'>_anomalyCompute</a>()</tt>	Compute anomaly score if required.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L664'>_handleCLAClassifierMultiStep</a>(patternNZ,inputTSRecordIdx,rawInput)</tt>	Handle the cla classifier compute logic when implementing multi-step prediction.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L912'>_removeUnlikelyPredictions</a>(cls,likelihoodsDict,minLikelihoodThreshold,maxPredictionsPerStep)</tt>	Remove entries with 0 likelihood or likelihood less than minlikelihoodthreshold but don't leave an empty dict.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L935'>getRuntimeStats</a>()</tt>	[virtual method override] get runtime statistics specific to this model i.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L958'>getFieldInfo</a>(includeClassifierOnlyField)</tt>	[virtual method override] returns the sequence of fieldmetainfo objects specifying this.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L992'>_getLogger</a>()</tt>	Get the logger for this object this is a protected method that is used.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1002'>_getSPRegion</a>()</tt>	Returns reference to the network's sp region.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1009'>_getTPRegion</a>()</tt>	Returns reference to the network's tm region.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1016'>_getSensorRegion</a>()</tt>	Returns reference to the network's sensor region.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1023'>_getClassifierRegion</a>()</tt>	Returns reference to the network's classifier region.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1038'>_getEncoder</a>()</tt>	Returns sensor region's encoder for the given network.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1044'>_getClassifierOnlyEncoder</a>()</tt>	Returns sensor region's encoder that is sent only to the classifier.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1052'>_getDataSource</a>()</tt>	Returns data source that we installed in sensor region.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1059'>__createCLANetwork</a>(sensorParams,spEnable,spParams,tmEnable)</tt>	Create a cla network and return it.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1177'>__getstate__</a>()</tt>	Return serializable state this function will return a version of the.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1201'>__setstate__</a>(state)</tt>	Set the state of ourself from a serialized state.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1328'>_serializeExtraData</a>(extraDataDir)</tt>	[virtual method override] this method is called during serialization with an external directory path that can be used to bypass pickle for saving.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1351'>_deSerializeExtraData</a>(extraDataDir)</tt>	[virtual method override] this method is called during deserialization (after __setstate__) with an external directory path that can be used to.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1432'>_addAnomalyClassifierRegion</a>(network,params,spEnable,tmEnable)</tt>	Attaches an 'anomalyclassifier' region to the network will remove current.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModel <a href=' /frameworks/opf/htm_prediction_model.py#L1506'>__manglePrivateMemberName</a>(privateMemberName,skipCheck)</tt>	Mangles the given mangled private member name a mangled member name is one whose name begins with two or more underscores and ends with one.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PreviousValueModel <a href=' /frameworks/opf/previous_value_model.py#L65'>run</a>(inputRecord)</tt>	Run one iteration of this model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PreviousValueModel <a href=' /frameworks/opf/previous_value_model.py#L99'>finishLearning</a>()</tt>	Places the model in a permanent "finished learning" mode.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PreviousValueModel <a href=' /frameworks/opf/previous_value_model.py#L107'>setFieldStatistics</a>(fieldStats)</tt>	This method is used for the data source to communicate to the.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PreviousValueModel <a href=' /frameworks/opf/previous_value_model.py#L115'>getFieldInfo</a>()</tt>	Returns the metadata specifying the format of the model's output.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PreviousValueModel <a href=' /frameworks/opf/previous_value_model.py#L128'>getRuntimeStats</a>()</tt>	Get the runtime statistics specific to the model.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PreviousValueModel <a href=' /frameworks/opf/previous_value_model.py#L140'>_getLogger</a>()</tt>	Get the logger created by this subclass.
<tt style='background-color:#E8E8E8;'> frameworks.opf.PreviousValueModel <a href=' /frameworks/opf/previous_value_model.py#L148'>resetSequenceStates</a>()</tt>	Called to indicate the start of a new sequence.
<tt style='background-color:#E8E8E8;'> frameworks.opf.InferenceElement <a href=' /frameworks/opf/opf_utils.py#L62'>getInputElement</a>(inferenceElement)</tt>	Get the sensor input element that corresponds to the given inference element.
<tt style='background-color:#E8E8E8;'> frameworks.opf.InferenceElement <a href=' /frameworks/opf/opf_utils.py#L69'>isTemporal</a>(inferenceElement)</tt>	Returns true if the inference from this timestep is predicted the input for the next timestep.
<tt style='background-color:#E8E8E8;'> frameworks.opf.InferenceElement <a href=' /frameworks/opf/opf_utils.py#L84'>getTemporalDelay</a>(inferenceElement,key)</tt>	Returns the number of records that elapse between when an inference is made and when the corresponding input record will appear.
<tt style='background-color:#E8E8E8;'> frameworks.opf.InferenceElement <a href=' /frameworks/opf/opf_utils.py#L123'>getMaxDelay</a>(inferences)</tt>	Returns the maximum delay for the inferenceelements in the inference.
<tt style='background-color:#E8E8E8;'> frameworks.opf.InferenceType <a href=' /frameworks/opf/opf_utils.py#L169'>isTemporal</a>(inferenceType)</tt>	Returns true if the inference type is 'temporal', i e requires a.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/opf_utils.py#L363'>validateOpfJsonValue</a>(value,opfJsonSchemaFilename)</tt>	Validate a python object against an opf json schema file target target python object to validate typically a dictionary.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/opf_utils.py#L388'>initLogger</a>(obj)</tt>	Helper function to create a logger object for the current object with.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/opf_utils.py#L401'>matchPatterns</a>(patterns,keys)</tt>	Returns a subset of the keys that match any of the given patterns.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L165'>addLabel</a>(start,end,labelName)</tt>	Add the label labelname to each record with record rowid in range from start to end noninclusive of end.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L214'>removeLabels</a>(start,end,labelFilter)</tt>	Remove labels from each record with record rowid in range from start to end noninclusive of end.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L324'>_addRecordToKNN</a>(record)</tt>	This method will add the record to the knn classifier.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L345'>_deleteRecordsFromKNN</a>(recordsToDelete)</tt>	This method will remove the given records from the classifier.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L365'>_deleteRangeFromKNN</a>(start,end)</tt>	This method will remove any stored records within the range from start to end.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L394'>_recomputeRecordFromKNN</a>(record)</tt>	Return the classified labeling of record.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L439'>_constructClassificationRecord</a>()</tt>	Construct a _htmclassificationrecord based on the current state of the htm_prediction_model of this classifier.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L502'>compute</a>()</tt>	Run an iteration of this anomaly classifier.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L520'>setAutoDetectWaitRecords</a>(waitRecords)</tt>	Sets the autodetectwaitrecords.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L540'>getAutoDetectWaitRecords</a>()</tt>	Return the autodetectwaitrecords.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L547'>setAutoDetectThreshold</a>(threshold)</tt>	Sets the autodetectthreshold.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L563'>getAutoDetectThreshold</a>()</tt>	Return the autodetectthreshold.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L570'>_labelToCategoryNumber</a>(label)</tt>	Since the knn classifier stores categories as numbers we must store each label as a number.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L582'>_labelListToCategoryNumber</a>(labelList)</tt>	This method takes a list of labels and returns a unique category number.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L594'>_categoryToLabelList</a>(category)</tt>	Converts a category number into a list of labels.
<tt style='background-color:#E8E8E8;'> frameworks.opf.HTMPredictionModelClassifierHelper <a href=' /frameworks/opf/htm_prediction_model_classifier_helper.py#L611'>_getStateAnomalyVector</a>(state)</tt>	Returns a state's anomaly vertor converting it from spare to dense.
<tt style='background-color:#E8E8E8;'> frameworks.opf.IterationPhaseSpecLearnOnly <a href=' /frameworks/opf/opf_task_driver.py#L69'>__init__</a>(nIters)</tt>	Niters number of iterations to remain in this phase an iteration.
<tt style='background-color:#E8E8E8;'> frameworks.opf.IterationPhaseSpecLearnOnly <a href=' /frameworks/opf/opf_task_driver.py#L84'>_getImpl</a>(model)</tt>	Creates and returns the _iterationphase-based instance corresponding.
<tt style='background-color:#E8E8E8;'> frameworks.opf.IterationPhaseSpecInferOnly <a href=' /frameworks/opf/opf_task_driver.py#L100'>__init__</a>(nIters,inferenceArgs)</tt>	Niters number of iterations to remain in this phase.
<tt style='background-color:#E8E8E8;'> frameworks.opf.IterationPhaseSpecInferOnly <a href=' /frameworks/opf/opf_task_driver.py#L119'>_getImpl</a>(model)</tt>	Creates and returns the _iterationphase-based instance corresponding.
<tt style='background-color:#E8E8E8;'> frameworks.opf.IterationPhaseSpecLearnAndInfer <a href=' /frameworks/opf/opf_task_driver.py#L136'>__init__</a>(nIters,inferenceArgs)</tt>	Niter number of iterations to remain in this phase.
<tt style='background-color:#E8E8E8;'> frameworks.opf.IterationPhaseSpecLearnAndInfer <a href=' /frameworks/opf/opf_task_driver.py#L156'>_getImpl</a>(model)</tt>	Creates and returns the _iterationphase-based instance corresponding.
<tt style='background-color:#E8E8E8;'> frameworks.opf.OPFTaskDriver <a href=' /frameworks/opf/opf_task_driver.py#L177'>__init__</a>(taskControl,model)</tt>	Constructor taskcontrol dictionary conforming to opftaskcontrolschema.
<tt style='background-color:#E8E8E8;'> frameworks.opf.OPFTaskDriver <a href=' /frameworks/opf/opf_task_driver.py#L250'>replaceIterationCycle</a>(phaseSpecs)</tt>	Replaces the iteration cycle phases.
<tt style='background-color:#E8E8E8;'> frameworks.opf.OPFTaskDriver <a href=' /frameworks/opf/opf_task_driver.py#L268'>setup</a>()</tt>	Performs initial setup activities including 'setup' callbacks this.
<tt style='background-color:#E8E8E8;'> frameworks.opf.OPFTaskDriver <a href=' /frameworks/opf/opf_task_driver.py#L281'>finalize</a>()</tt>	Perform final activities including 'finish' callbacks this.
<tt style='background-color:#E8E8E8;'> frameworks.opf.OPFTaskDriver <a href=' /frameworks/opf/opf_task_driver.py#L294'>handleInputRecord</a>(inputRecord)</tt>	Processes the given record according to the current iteration cycle phase inputrecord record object formatted according to.
<tt style='background-color:#E8E8E8;'> frameworks.opf.OPFTaskDriver <a href=' /frameworks/opf/opf_task_driver.py#L317'>getMetrics</a>()</tt>	Gets the current metric values returns a dictionary of metric values.
<tt style='background-color:#E8E8E8;'> frameworks.opf.OPFTaskDriver <a href=' /frameworks/opf/opf_task_driver.py#L328'>getMetricLabels</a>()</tt>	Return the list of labels for the metrics that are being calculated.
<tt style='background-color:#E8E8E8;'> frameworks.opf._PhaseManager <a href=' /frameworks/opf/opf_task_driver.py#L337'>__init__</a>(model,phaseSpecs)</tt>	Model model instance.
<tt style='background-color:#E8E8E8;'> frameworks.opf._PhaseManager <a href=' /frameworks/opf/opf_task_driver.py#L365'>__advancePhase</a>()</tt>	Advance to the next iteration cycle phase.
<tt style='background-color:#E8E8E8;'> frameworks.opf._PhaseManager <a href=' /frameworks/opf/opf_task_driver.py#L374'>handleInputRecord</a>(inputRecord)</tt>	Processes the given record according to the current phase inputrecord record object formatted according to.
<tt style='background-color:#E8E8E8;'> frameworks.opf._IterationPhase <a href=' /frameworks/opf/opf_task_driver.py#L407'>__init__</a>(nIters)</tt>	Niters number of iterations must be greater than 0.
<tt style='background-color:#E8E8E8;'> frameworks.opf._IterationPhase <a href=' /frameworks/opf/opf_task_driver.py#L417'>enterPhase</a>()</tt>	Performs initialization that is necessary upon entry to the phase must.
<tt style='background-color:#E8E8E8;'> frameworks.opf._IterationPhase <a href=' /frameworks/opf/opf_task_driver.py#L430'>advance</a>()</tt>	Advances the iteration returns true if more iterations remain false if this is the final.
<tt style='background-color:#E8E8E8;'> frameworks.opf._IterationPhaseLearnOnly <a href=' /frameworks/opf/opf_task_driver.py#L450'>__init__</a>(model,nIters)</tt>	Model model instance.
<tt style='background-color:#E8E8E8;'> frameworks.opf._IterationPhaseLearnOnly <a href=' /frameworks/opf/opf_task_driver.py#L461'>enterPhase</a>()</tt>	[_iterationphase method implementation] performs initialization that is necessary upon entry to the phase.
<tt style='background-color:#E8E8E8;'> frameworks.opf._IterationPhaseInferCommon <a href=' /frameworks/opf/opf_task_driver.py#L477'>__init__</a>(model,nIters,inferenceArgs)</tt>	Model model instance niters number of iterations must be greater than 0.
<tt style='background-color:#E8E8E8;'> frameworks.opf._IterationPhaseInferCommon <a href=' /frameworks/opf/opf_task_driver.py#L491'>enterPhase</a>()</tt>	[_iterationphase method implementation] performs initialization that is necessary upon entry to the phase.
<tt style='background-color:#E8E8E8;'> frameworks.opf._IterationPhaseInferOnly <a href=' /frameworks/opf/opf_task_driver.py#L506'>__init__</a>(model,nIters,inferenceArgs)</tt>	Model model instance niters number of iterations must be greater than 0.
<tt style='background-color:#E8E8E8;'> frameworks.opf._IterationPhaseInferOnly <a href=' /frameworks/opf/opf_task_driver.py#L521'>enterPhase</a>()</tt>	[_iterationphase method implementation] performs initialization that is necessary upon entry to the phase.
<tt style='background-color:#E8E8E8;'> frameworks.opf._IterationPhaseLearnAndInfer <a href=' /frameworks/opf/opf_task_driver.py#L536'>__init__</a>(model,nIters,inferenceArgs)</tt>	Model model instance niters number of iterations must be greater than 0.
<tt style='background-color:#E8E8E8;'> frameworks.opf._IterationPhaseLearnAndInfer <a href=' /frameworks/opf/opf_task_driver.py#L552'>enterPhase</a>()</tt>	[_iterationphase method implementation] performs initialization that is necessary upon entry to the phase.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricSpec <a href=' /frameworks/opf/metrics.py#L54'>__init__</a>(metric,inferenceElement,field,params)</tt>	Metric a metric type name that identifies which metrics module is to be constructed by the metrics factory method.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricSpec <a href=' /frameworks/opf/metrics.py#L83'>getLabel</a>(inferenceType)</tt>	Helper method that generates a unique label for a metricspec / inferencetype pair.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricSpec <a href=' /frameworks/opf/metrics.py#L119'>getInferenceTypeFromLabel</a>(cls,label)</tt>	Extracts the predicitonkind temporal vs nontemporal from the given.
<tt style='background-color:#E8E8E8;'> frameworks.opf. <a href=' /frameworks/opf/metrics.py#L140'>getModule</a>(metricSpec)</tt>	Factory method to return an appropriate metricsiface-based module args.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricsIface <a href=' /frameworks/opf/metrics.py#L256'>__init__</a>(metricSpec)</tt>	Instantiate a metricsiface-based module.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricsIface <a href=' /frameworks/opf/metrics.py#L265'>addInstance</a>(groundTruth,prediction,record,result)</tt>	Add one instance consisting of ground truth and a prediction.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricsIface <a href=' /frameworks/opf/metrics.py#L290'>getMetric</a>()</tt>	Return {value : <current measurement>, "stats" : {<stat> : <value>.
<tt style='background-color:#E8E8E8;'> frameworks.opf.AggregateMetric <a href=' /frameworks/opf/metrics.py#L313'>accumulate</a>(groundTruth,prediction,accumulatedError,historyBuffer)</tt>	Updates the accumulated error given the prediction and the ground truth.
<tt style='background-color:#E8E8E8;'> frameworks.opf.AggregateMetric <a href=' /frameworks/opf/metrics.py#L342'>aggregate</a>(accumulatedError,historyBuffer,steps)</tt>	Updates the final aggregated score error given the prediction and the ground truth.
<tt style='background-color:#E8E8E8;'> frameworks.opf.AggregateMetric <a href=' /frameworks/opf/metrics.py#L363'>__init__</a>(metricSpec)</tt>	Initialize this metric if the params contains the key 'errormetric', then that is the name of.
<tt style='background-color:#E8E8E8;'> frameworks.opf.AggregateMetric <a href=' /frameworks/opf/metrics.py#L433'>_getShiftedGroundTruth</a>(groundTruth)</tt>	Utility function that saves the passed in groundtruth into a local history buffer and returns the groundtruth from self.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricPassThruPrediction <a href=' /frameworks/opf/metrics.py#L751'>addInstance</a>(groundTruth,prediction,record,result)</tt>	Compute and store metric value.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricPassThruPrediction <a href=' /frameworks/opf/metrics.py#L755'>getMetric</a>()</tt>	Return the metric value.
<tt style='background-color:#E8E8E8;'> frameworks.opf.CustomErrorMetric <a href=' /frameworks/opf/metrics.py#L936'>mostLikely</a>(pred)</tt>	Helper function to return a scalar value representing the most.
<tt style='background-color:#E8E8E8;'> frameworks.opf.CustomErrorMetric <a href=' /frameworks/opf/metrics.py#L953'>expValue</a>(pred)</tt>	Helper function to return a scalar value representing the expected.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricNegAUC <a href=' /frameworks/opf/metrics.py#L1248'>accumulate</a>(groundTruth,prediction,accumulatedError,historyBuffer)</tt>	Accumulate history of groundtruth and "prediction" values.
<tt style='background-color:#E8E8E8;'> frameworks.opf.MetricMulti <a href=' /frameworks/opf/metrics.py#L1516'>__init__</a>(metricSpec)</tt>	Metricmulti constructor using metricspec is not allowed.
<tt style='background-color:#E8E8E8;'> frameworks.opf.common_models. <a href=' /frameworks/opf/common_models/cluster_params.py#L29'>getScalarMetricWithTimeOfDayAnomalyParams</a>(metricData,minVal,maxVal,minResolution)</tt>	Return a dict that can be used to create an anomaly model via opf's modelfactory.
<tt style='background-color:#E8E8E8;'> frameworks.opf.common_models. <a href=' /frameworks/opf/common_models/cluster_params.py#L113'>_rangeGen</a>(data,std)</tt>	Return reasonable min/max values to use given the data.
<tt style='background-color:#E8E8E8;'> frameworks.opf.common_models. <a href=' /frameworks/opf/common_models/cluster_params.py#L126'>_fixupRandomEncoderParams</a>(params,minVal,maxVal,minResolution)</tt>	Given model params figure out the correct parameters for the randomdistributed encoder.
<tt style='background-color:#E8E8E8;'> frameworks.viz.NetworkVisualizer <a href=' /frameworks/viz/network_visualization.py#L43'>__init__</a>(network)</tt>	:param network nupic engine network.
<tt style='background-color:#E8E8E8;'> frameworks.viz.NetworkVisualizer <a href=' /frameworks/viz/network_visualization.py#L51'>export</a>()</tt>	Exports a network as a networkx multidigraph intermediate representation suitable for visualization.
<tt style='background-color:#E8E8E8;'> frameworks.viz.DotRenderer <a href=' /frameworks/viz/dot_renderer.py#L36'>__init__</a>(outp,node_attrs)</tt>	:param outp file-like obj to which rendered graph is written (defaults to sys.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/dictutils.py#L43'>rUpdate</a>(original,updates)</tt>	Recursively updates the values in original with the values from updates.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/dictutils.py#L57'>rApply</a>(d,f)</tt>	Recursively applies f to the values in dict d.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/dictutils.py#L100'>dictDiffAndReport</a>(da,db)</tt>	Compares two python dictionaries at the top level and report differences.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/dictutils.py#L128'>dictDiff</a>(da,db)</tt>	Compares two python dictionaries at the top level and return differences.
<tt style='background-color:#E8E8E8;'> data.CategoryFilter <a href=' /data/category_filter.py#L52'>__init__</a>(filterDict)</tt>	Todo describe filterdict schema.
<tt style='background-color:#E8E8E8;'> data.CategoryFilter <a href=' /data/category_filter.py#L58'>match</a>(record)</tt>	Returns true if the record matches any of the provided filters.
<tt style='background-color:#E8E8E8;'> data.FieldMetaInfo <a href=' /data/field_meta.py#L78'>createFromFileFieldElement</a>(fieldInfoTuple)</tt>	Creates a :class fieldmeta fieldmetainfo instance from a tuple containing.
<tt style='background-color:#E8E8E8;'> data.FieldMetaInfo <a href=' /data/field_meta.py#L90'>createListFromFileFieldList</a>(cls,fields)</tt>	Creates a fieldmetainfo list from the a list of tuples basically runs.
<tt style='background-color:#E8E8E8;'> data.FieldMetaType <a href=' /data/field_meta.py#L142'>isValid</a>(cls,fieldDataType)</tt>	Check a candidate value whether it's one of the valid field data types.
<tt style='background-color:#E8E8E8;'> data.FieldMetaSpecial <a href=' /data/field_meta.py#L174'>isValid</a>(cls,attr)</tt>	Check a candidate value whether it's one of the valid attributes.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/sorter.py#L41'>sort</a>(filename,key,outputFile,fields)</tt>	Sort a potentially big file filename - the input file standard file format.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/sorter.py#L115'>_sortChunk</a>(records,key,chunkIndex,fields)</tt>	Sort in memory chunk of records records - a list of records read from the original dataset.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/sorter.py#L145'>_mergeFiles</a>(key,chunkCount,outputFile,fields)</tt>	Merge sorted chunk files into a sorted output file.
<tt style='background-color:#E8E8E8;'> data.WeatherJoiner <a href=' /data/joiner.py#L68'>join</a>(generateFlag)</tt>	Writes out a new combined file containing weather data.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/stats_v2.py#L240'>generateStats</a>(filename,statsInfo,maxSamples,filters)</tt>	Generate requested statistics for a dataset and cache to a file.
<tt style='background-color:#E8E8E8;'> data.FunctionSource <a href=' /data/functionsource.py#L51'>_cacheSequenceInfoType</a>()</tt>	Figure out whether reset sequenceid both or neither are present in the data.
<tt style='background-color:#E8E8E8;'> data.DeltaFilter <a href=' /data/filters.py#L98'>__init__</a>(origField,deltaField)</tt>	Add a delta field to the data.
<tt style='background-color:#E8E8E8;'> data.InferenceShifter <a href=' /data/inference_shifter.py#L40'>shift</a>(modelResult)</tt>	Shift the model result and return the new instance.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/jsonhelpers.py#L64'>validate</a>(value)</tt>	Validate a python value against json schema validate value schemapath.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/jsonhelpers.py#L100'>loadJsonValueFromFile</a>(inputFilePath)</tt>	Loads a json value from a file and converts it to the corresponding python object.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L313'>close</a>()</tt>	Closes the stream.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L322'>rewind</a>()</tt>	Put us back at the beginning of the file again.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L343'>getNextRecord</a>(useCache)</tt>	Returns next available data record from the file.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L402'>appendRecord</a>(record,inputBookmark)</tt>	Saves the record in the underlying csv file.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L433'>appendRecords</a>(records,inputRef,progressCB)</tt>	Saves multiple records in the underlying storage.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L453'>getBookmark</a>()</tt>	Gets a bookmark or anchor to the current position.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L470'>recordsExistAfter</a>(bookmark)</tt>	Returns whether there are more records from current position bookmark.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L480'>seekFromEnd</a>(numRecords)</tt>	Seeks to numrecords from the end and returns a bookmark to the new position.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L492'>setAutoRewind</a>(autoRewind)</tt>	Controls whether :meth ~ filerecordstream getnextrecord should.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L507'>getStats</a>()</tt>	Parse the file using dedicated reader and collect fields stats never.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L575'>clearStats</a>()</tt>	Resets stats collected so far.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L581'>getError</a>()</tt>	Not implemented csv file version does not provide storage for the error.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L589'>setError</a>(error)</tt>	Not implemented csv file version does not provide storage for the error.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L597'>isCompleted</a>()</tt>	Not implemented csv file is always considered completed.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L602'>setCompleted</a>(completed)</tt>	Not implemented csv file is always considered completed nothing to do.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L608'>getFieldNames</a>()</tt>	:returns list field names associated with the data.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L615'>getFields</a>()</tt>	:returns a sequence of :class ~ fieldmetainfo.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L626'>_updateSequenceInfo</a>(r)</tt>	Keep track of sequence and make sure time goes forward check if the current record is the beginning of a new sequence.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L679'>_getStartRow</a>(bookmark)</tt>	Extracts start row from the bookmark information.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L697'>_getTotalLineCount</a>()</tt>	Returns count of all lines in dataset including header lines.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L706'>getNextRecordIdx</a>()</tt>	:returns int the index of the record that will be read next from :meth ~.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L714'>getDataRowCount</a>()</tt>	:returns int count of data rows in dataset excluding header lines.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L737'>flush</a>()</tt>	Flushes the file.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L745'>__enter__</a>()</tt>	Context guard - enter.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L753'>__exit__</a>(yupe,value,traceback)</tt>	Context guard - exit ensures that the file is always closed at the end of the 'with' block.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L762'>__iter__</a>()</tt>	Support for the iterator protocol return itself.
<tt style='background-color:#E8E8E8;'> data.FileRecordStream <a href=' /data/file_record_stream.py#L767'>next</a>()</tt>	Implement the iterator protocol.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/record_stream.py#L32'>_getFieldIndexBySpecial</a>(fields,special)</tt>	Return index of the field matching the field meta special value.
<tt style='background-color:#E8E8E8;'> data.ModelRecordEncoder <a href=' /data/record_stream.py#L54'>__init__</a>(fields,aggregationPeriod)</tt>	:param fields non-empty sequence of nupic data fieldmeta fieldmetainfo.
<tt style='background-color:#E8E8E8;'> data.ModelRecordEncoder <a href=' /data/record_stream.py#L99'>rewind</a>()</tt>	Put us back at the beginning of the file again.
<tt style='background-color:#E8E8E8;'> data.ModelRecordEncoder <a href=' /data/record_stream.py#L104'>encode</a>(inputRow)</tt>	Encodes the given input row as a dict with the keys being the field names.
<tt style='background-color:#E8E8E8;'> data.ModelRecordEncoder <a href=' /data/record_stream.py#L177'>_computeTimestampRecordIdx</a>(recordTS)</tt>	Give the timestamp of a record a datetime object compute the record's timestamp index - this is the timestamp divided by the aggregation period.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L226'>close</a>()</tt>	Close the stream.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L232'>rewind</a>()</tt>	Put us back at the beginning of the file again).
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L238'>getNextRecord</a>(useCache)</tt>	Returns next available data record from the storage if usecache is.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L252'>getNextRecordDict</a>()</tt>	Returns next available data record from the storage as a dict with the keys being the field names.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L277'>getAggregationMonthsAndSeconds</a>()</tt>	Returns the aggregation period of the record stream as a dict containing 'months' and 'seconds'.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L299'>getRecordsRange</a>(bookmark,range)</tt>	Returns a range of records starting from the bookmark if 'bookmark'.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L308'>getNextRecordIdx</a>()</tt>	Returns the index of the record that will be read next from.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L315'>getLastRecords</a>(numRecords)</tt>	Returns a tuple successcode recordsarray where successcode - if the stream had enough records to return true/false.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L326'>removeOldData</a>()</tt>	Deletes all rows from the table if any data was found.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L331'>appendRecord</a>(record,inputRef)</tt>	Saves the record in the underlying storage.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L336'>appendRecords</a>(records,inputRef,progressCB)</tt>	Saves multiple records in the underlying storage.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L341'>getBookmark</a>()</tt>	Returns an anchor to the current position in the data passing this.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L350'>recordsExistAfter</a>(bookmark)</tt>	Returns true iff there are records left after the bookmark.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L355'>seekFromEnd</a>(numRecords)</tt>	Returns a bookmark numrecords from the end of the stream.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L360'>getStats</a>()</tt>	Returns storage stats like min and max values of the fields.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L365'>getFieldMin</a>(fieldName)</tt>	Returns current minimum value for the field 'fieldname'.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L382'>getFieldMax</a>(fieldName)</tt>	Returns current maximum value for the field 'fieldname'.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L399'>clearStats</a>()</tt>	Resets stats collected so far.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L404'>getError</a>()</tt>	Returns errors saved in the storage.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L409'>setError</a>(error)</tt>	Saves specified error in the storage.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L414'>isCompleted</a>()</tt>	Returns true if all records are already in the storage or false if more records is expected.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L421'>setCompleted</a>(completed)</tt>	Marks the stream completed true or false.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L426'>getFieldNames</a>()</tt>	Returns an array of field names associated with the data.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L431'>getFields</a>()</tt>	Returns a sequence of nupic data fieldmeta fieldmetainfo.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L439'>getResetFieldIdx</a>()</tt>	:returns index of the 'reset' field none if no such field.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L445'>getTimestampFieldIdx</a>()</tt>	Return index of the 'timestamp' field.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L450'>getSequenceIdFieldIdx</a>()</tt>	Return index of the 'sequenceid' field.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L455'>getCategoryFieldIdx</a>()</tt>	Return index of the 'category' field.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L460'>getLearningFieldIdx</a>()</tt>	Return index of the 'learning' field.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L465'>setTimeout</a>(timeout)</tt>	Set the read timeout in seconds int or floating point.
<tt style='background-color:#E8E8E8;'> data.RecordStreamIface <a href=' /data/record_stream.py#L470'>flush</a>()</tt>	Flush the file to disk.
<tt style='background-color:#E8E8E8;'> data.NumberStatsCollector <a href=' /data/stats_v2.py#L119'>getStats</a>(stats)</tt>	Override of getstats() in basestatscollector.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/stats_v2.py#L240'>generateStats</a>(filename,maxSamples)</tt>	Collect statistics for each of the fields in the user input data file and return a stats dict object.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/utils.py#L43'>parseTimestamp</a>(s)</tt>	Parses a textual datetime format and return a python datetime object.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/utils.py#L99'>escape</a>(s)</tt>	Escape commas tabs newlines and dashes in a string.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/utils.py#L117'>unescape</a>(s)</tt>	Unescapes a string that may contain commas tabs newlines and dashes.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/utils.py#L132'>parseSdr</a>(s)</tt>	Parses a string containing only 0's and 1's and return a python list object.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/utils.py#L145'>serializeSdr</a>(sdr)</tt>	Serialize python list object containing only 0's and 1's to string.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/utils.py#L153'>parseStringList</a>(s)</tt>	Parse a string of space-separated numbers returning a python list.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/utils.py#L160'>stripList</a>(listObj)</tt>	Convert a list of numbers to a string of space-separated numbers.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L101'>__init__</a>(streamDef,bookmark,saveOutput,isBlocking)</tt>	Base class constructor performs common initialization parameters.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L278'>_openStream</a>(dataUrl,isBlocking,maxTimeout,bookmark)</tt>	Open the underlying file stream this only supports 'file //' prefixed paths.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L299'>close</a>()</tt>	Close the stream.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L305'>getNextRecord</a>()</tt>	Returns combined data from all sources values only.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L372'>getDataRowCount</a>()</tt>	Iterates through stream to calculate total records after aggregation.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L387'>getLastRecords</a>(numRecords)</tt>	Saves the record in the underlying storage.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L392'>getRecordsRange</a>(bookmark,range)</tt>	Returns a range of records starting from the bookmark if 'bookmark'.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L401'>getNextRecordIdx</a>()</tt>	Returns the index of the record that will be read next from.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L408'>recordsExistAfter</a>(bookmark)</tt>	Returns true iff there are records left after the bookmark.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L413'>getAggregationMonthsAndSeconds</a>()</tt>	Returns the aggregation period of the record stream as a dict containing 'months' and 'seconds'.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L436'>appendRecord</a>(record,inputRef)</tt>	Saves the record in the underlying storage.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L441'>appendRecords</a>(records,inputRef,progressCB)</tt>	Saves multiple records in the underlying storage.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L450'>seekFromEnd</a>(numRecords)</tt>	Seeks to numrecords from the end and returns a bookmark to the new position.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L457'>getFieldNames</a>()</tt>	Returns all fields in all inputs list of plain names.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L464'>getFields</a>()</tt>	Returns a sequence of nupic data fieldmeta fieldmetainfo.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L471'>getBookmark</a>()</tt>	Returns a bookmark to the current position.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L477'>clearStats</a>()</tt>	Resets stats collected so far.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L483'>getStats</a>()</tt>	Returns stats like min and max values of the fields.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L510'>getError</a>()</tt>	Returns errors saved in the stream.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L516'>setError</a>(error)</tt>	Saves specified error in the stream.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L522'>isCompleted</a>()</tt>	Returns true if all records have been read.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L528'>setCompleted</a>(completed)</tt>	Marks the stream completed true or false.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L535'>setTimeout</a>(timeout)</tt>	Set the read timeout.
<tt style='background-color:#E8E8E8;'> data.StreamReader <a href=' /data/stream_reader.py#L540'>flush</a>()</tt>	Flush the file to disk.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/aggregator.py#L51'>initFilter</a>(input,filterInfo)</tt>	Initializes internal filter variables for further processing.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/aggregator.py#L114'>_filterRecord</a>(filterList,record)</tt>	Takes a record and returns true if record meets filter criteria.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/aggregator.py#L133'>_aggr_first</a>(inList)</tt>	Returns first non-none element in the list or none if all are none.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/aggregator.py#L143'>_aggr_last</a>(inList)</tt>	Returns last non-none element in the list or none if all are none.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/aggregator.py#L153'>_aggr_sum</a>(inList)</tt>	Returns sum of the elements in the list missing items are replaced with.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/aggregator.py#L172'>_aggr_mean</a>(inList)</tt>	Returns mean of non-none elements of the list.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/aggregator.py#L188'>_aggr_mode</a>(inList)</tt>	Returns most common value seen in the non-none elements of the list.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/aggregator.py#L216'>_aggr_weighted_mean</a>(inList,params)</tt>	Weighted mean uses params must be the same size as inlist and.
<tt style='background-color:#E8E8E8;'> data.Aggregator <a href=' /data/aggregator.py#L254'>__init__</a>(aggregationInfo,inputFields,timeFieldName,sequenceIdFieldName)</tt>	Construct an aggregator instance params.
<tt style='background-color:#E8E8E8;'> data.Aggregator <a href=' /data/aggregator.py#L426'>_getEndTime</a>(t)</tt>	Add the aggregation period to the input time t and return a datetime object years and months are handled as aspecial case due to leap years.
<tt style='background-color:#E8E8E8;'> data.Aggregator <a href=' /data/aggregator.py#L447'>_getFuncPtrAndParams</a>(funcName)</tt>	Given the name of an aggregation function returns the function pointer and param.
<tt style='background-color:#E8E8E8;'> data.Aggregator <a href=' /data/aggregator.py#L483'>_createAggregateRecord</a>()</tt>	Generate the aggregated output record.
<tt style='background-color:#E8E8E8;'> data.Aggregator <a href=' /data/aggregator.py#L508'>isNullAggregation</a>()</tt>	Return true if no aggregation will be performed either because the aggregationinfo was none or all aggregation params within it were 0.
<tt style='background-color:#E8E8E8;'> data.Aggregator <a href=' /data/aggregator.py#L515'>next</a>(record,curInputBookmark)</tt>	Return the next aggregated record if any parameters.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/aggregator.py#L720'>generateDataset</a>(aggregationInfo,inputFilename,outputFilename)</tt>	Generate a dataset of aggregated values parameters.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/aggregator.py#L838'>getFilename</a>(aggregationInfo,inputFile)</tt>	Generate the filename for aggregated dataset the filename is based on the input filename and the.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L41'>__init__</a>(name,seed,verbosity)</tt>	Initialize the dataset generator with a random seed and a name.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L50'>getDescription</a>()</tt>	Returns a description of the dataset.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L59'>setSeed</a>(seed)</tt>	Set the random seed and the numpy seed.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L70'>addField</a>(name,fieldParams,encoderParams)</tt>	Add a single field to the dataset.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L100'>addMultipleFields</a>(fieldsInfo)</tt>	Add multiple fields to the dataset.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L115'>defineField</a>(name,encoderParams)</tt>	Initialize field using relevant encoder parameters.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L129'>setFlag</a>(index,flag)</tt>	Set flag for field at index flags are special characters such as 's' for.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L141'>generateRecord</a>(record)</tt>	Generate a record each value is stored in its respective field.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L166'>generateRecords</a>(records)</tt>	Generate multiple records refer to definition for generaterecord.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L174'>getRecord</a>(n)</tt>	Returns the nth record.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L188'>getAllRecords</a>()</tt>	Returns all the records.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L200'>encodeRecord</a>(record,toBeAdded)</tt>	Encode a record as a sparse distributed representation.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L214'>encodeAllRecords</a>(records,toBeAdded)</tt>	Encodes a list of records.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L233'>addValueToField</a>(i,value)</tt>	Add 'value' to the field i.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L250'>addValuesToField</a>(i,numValues)</tt>	Add values to the field i.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L258'>getSDRforValue</a>(i,j)</tt>	Returns the sdr for jth value at column i.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L267'>getZeroedOutEncoding</a>(n)</tt>	Returns the nth encoding with the predictedfield zeroed out.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L278'>getTotaln</a>()</tt>	Returns the cumulative n for all the fields in the dataset.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L285'>getTotalw</a>()</tt>	Returns the cumulative w for all the fields in the dataset.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L292'>getEncoding</a>(n)</tt>	Returns the nth encoding.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L301'>getAllEncodings</a>()</tt>	Returns encodings for all the records.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L311'>getAllFieldNames</a>()</tt>	Returns all field names.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L317'>getAllFlags</a>()</tt>	Returns flags for all fields.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L324'>getAllDataTypes</a>()</tt>	Returns data types for all fields.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L331'>getFieldDescriptions</a>()</tt>	Returns descriptions for all fields.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L339'>saveRecords</a>(path)</tt>	Export all the records into a csv file in numenta format.
<tt style='background-color:#E8E8E8;'> data.generators.DataGenerator <a href=' /data/generators/data_generator.py#L366'>removeAllRecords</a>()</tt>	Deletes all the values in the dataset.
<tt style='background-color:#E8E8E8;'> data.generators._field <a href=' /data/generators/data_generator.py#L377'>__init__</a>(name,encoderSpec)</tt>	Initialize a field with various parameters such as n w flag datatype encodertype and tag predicted field.
<tt style='background-color:#E8E8E8;'> data.generators._field <a href=' /data/generators/data_generator.py#L430'>addValues</a>(values)</tt>	Add values to the field.
<tt style='background-color:#E8E8E8;'> data.generators._field <a href=' /data/generators/data_generator.py#L437'>addValue</a>(value)</tt>	Add value to the field.
<tt style='background-color:#E8E8E8;'> data.generators._field <a href=' /data/generators/data_generator.py#L444'>encodeValue</a>(value,toBeAdded)</tt>	Value is encoded as a sdr using the encoding parameters of the field.
<tt style='background-color:#E8E8E8;'> data.generators._field <a href=' /data/generators/data_generator.py#L456'>_setTypes</a>(encoderSpec)</tt>	Set up the datatypes and initialize encoders.
<tt style='background-color:#E8E8E8;'> data.generators._field <a href=' /data/generators/data_generator.py#L476'>_initializeEncoders</a>(encoderSpec)</tt>	Initialize the encoders.
<tt style='background-color:#E8E8E8;'> data.generators. <a href=' /data/generators/anomalyzer.py#L66'>add</a>(reader,writer,column,start)</tt>	Adds a value over a range of rows.
<tt style='background-color:#E8E8E8;'> data.generators. <a href=' /data/generators/anomalyzer.py#L84'>scale</a>(reader,writer,column,start)</tt>	Multiplies a value over a range of rows.
<tt style='background-color:#E8E8E8;'> data.generators. <a href=' /data/generators/anomalyzer.py#L102'>copy</a>(reader,writer,start,stop)</tt>	Copies a range of values to a new location in the data set.
<tt style='background-color:#E8E8E8;'> data.generators. <a href=' /data/generators/anomalyzer.py#L142'>sample</a>(reader,writer,n,start)</tt>	Samples n rows.
<tt style='background-color:#E8E8E8;'> data.generators.Distributions <a href=' /data/generators/distributions.py#L32'>__init__</a>()</tt>	A distribution is a set of values with certain statistical properties methods/properties that must be implemented by subclasses.
<tt style='background-color:#E8E8E8;'> data.generators.Distributions <a href=' /data/generators/distributions.py#L43'>getNext</a>()</tt>	Returns the next value of the disribution using knowledge about the current state of the distribution as stored in numvalues.
<tt style='background-color:#E8E8E8;'> data.generators.Distributions <a href=' /data/generators/distributions.py#L50'>getData</a>(n)</tt>	Returns the next n values for the distribution as a list.
<tt style='background-color:#E8E8E8;'> data.generators.Distributions <a href=' /data/generators/distributions.py#L57'>getDescription</a>()</tt>	Returns a dict of parameters pertinent to the distribution if any as well as state variables such as numvalues.
<tt style='background-color:#E8E8E8;'> data.generators.PatternMachine <a href=' /data/generators/pattern_machine.py#L37'>__init__</a>(n,w,num,seed)</tt>	@param n int number of available bits in pattern @param w (int/list) number of on bits in pattern.
<tt style='background-color:#E8E8E8;'> data.generators.PatternMachine <a href=' /data/generators/pattern_machine.py#L61'>get</a>(number)</tt>	Return a pattern for a number.
<tt style='background-color:#E8E8E8;'> data.generators.PatternMachine <a href=' /data/generators/pattern_machine.py#L75'>addNoise</a>(bits,amount)</tt>	Add noise to pattern.
<tt style='background-color:#E8E8E8;'> data.generators.PatternMachine <a href=' /data/generators/pattern_machine.py#L95'>numbersForBit</a>(bit)</tt>	Return the set of pattern numbers that match a bit.
<tt style='background-color:#E8E8E8;'> data.generators.PatternMachine <a href=' /data/generators/pattern_machine.py#L115'>numberMapForBits</a>(bits)</tt>	Return a map from number to matching on bits for all numbers that match a set of bits.
<tt style='background-color:#E8E8E8;'> data.generators.PatternMachine <a href=' /data/generators/pattern_machine.py#L138'>prettyPrintPattern</a>(bits,verbosity)</tt>	Pretty print a pattern.
<tt style='background-color:#E8E8E8;'> data.generators.PatternMachine <a href=' /data/generators/pattern_machine.py#L172'>_generate</a>()</tt>	Generates set of random patterns.
<tt style='background-color:#E8E8E8;'> data.generators.PatternMachine <a href=' /data/generators/pattern_machine.py#L183'>_getW</a>()</tt>	Gets a value of w for use in generating a pattern.
<tt style='background-color:#E8E8E8;'> data.generators.ConsecutivePatternMachine <a href=' /data/generators/pattern_machine.py#L202'>_generate</a>()</tt>	Generates set of consecutive patterns.
<tt style='background-color:#E8E8E8;'> data.generators.SequenceMachine <a href=' /data/generators/sequence_machine.py#L37'>__init__</a>(patternMachine,seed)</tt>	@param patternmachine patternmachine pattern machine instance.
<tt style='background-color:#E8E8E8;'> data.generators.SequenceMachine <a href=' /data/generators/sequence_machine.py#L50'>generateFromNumbers</a>(numbers)</tt>	Generate a sequence from a list of numbers.
<tt style='background-color:#E8E8E8;'> data.generators.SequenceMachine <a href=' /data/generators/sequence_machine.py#L72'>addSpatialNoise</a>(sequence,amount)</tt>	Add spatial noise to each pattern in the sequence.
<tt style='background-color:#E8E8E8;'> data.generators.SequenceMachine <a href=' /data/generators/sequence_machine.py#L91'>prettyPrintSequence</a>(sequence,verbosity)</tt>	Pretty print a sequence.
<tt style='background-color:#E8E8E8;'> data.generators.SequenceMachine <a href=' /data/generators/sequence_machine.py#L116'>generateNumbers</a>(numSequences,sequenceLength,sharedRange)</tt>	@param numsequences int number of sequences to return.
<tt style='background-color:#E8E8E8;'> support.Features <a href=' /support/features.py#L70'>hasFeature</a>(feature,group,addList,removeList)</tt>	This is the primary method of the class that will return true or false based on the current environment and user.
<tt style='background-color:#E8E8E8;'> support.Features <a href=' /support/features.py#L81'>getFeatures</a>(group,addList,removeList)</tt>	Returns a list of all the active features for the current env/user.
<tt style='background-color:#E8E8E8;'> support.Features <a href=' /support/features.py#L119'>_getFeaturesForGroup</a>(group)</tt>	Using feature_groups py calculate the set of features available to the given.
<tt style='background-color:#E8E8E8;'> support.Features <a href=' /support/features.py#L127'>getAllFeatures</a>()</tt>	Returns a list of all known features (essentially the contents of feature_list py).
<tt style='background-color:#E8E8E8;'> support.Features <a href=' /support/features.py#L135'>getAllGroups</a>()</tt>	Returns a list of all known feature groups.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/log_utils.py#L30'>createLogger</a>(obj)</tt>	Helper function to create a logger object for the current object with.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/decorators.py#L33'>logExceptions</a>(logger)</tt>	Returns a closure suitable for use as function/method decorator for logging exceptions that leave the scope of the decorated function.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/decorators.py#L69'>logEntryExit</a>(getLoggerCallback,entryExitLogLevel,logArgs,logTraceback)</tt>	Returns a closure suitable for use as function/method decorator for logging entry/exit of function/method.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/decorators.py#L141'>retry</a>(timeoutSec,initialRetryDelaySec,maxRetryDelaySec,retryExceptions)</tt>	Returns a closure suitable for use as function/method decorator for retrying a function being decorated.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/pymysqlhelpers.py#L93'>retrySQL</a>(timeoutSec,logger)</tt>	Return a closure suitable for use as a decorator for retrying a pymysql dao function on certain failures that warrant retries.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_custom.py#L54'>getCustomDict</a>(cls)</tt>	Return a dict containing all custom configuration properties parameters.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_custom.py#L65'>setCustomProperty</a>(cls,propertyName,value)</tt>	Set a single custom setting and persist it to the custom configuration store.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_custom.py#L78'>setCustomProperties</a>(cls,properties)</tt>	Set multiple custom properties and persist them to the custom configuration store.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_base.py#L361'>clear</a>(cls)</tt>	Clear out the entire configuration.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_custom.py#L109'>resetCustomConfig</a>(cls)</tt>	Clear all custom configuration settings and delete the persistent custom configuration store.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_custom.py#L126'>loadCustomConfig</a>(cls)</tt>	Loads custom configuration settings from their persistent storage.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_base.py#L421'>_readStdConfigFiles</a>(cls)</tt>	Read in all standard configuration files.
<tt style='background-color:#E8E8E8;'> support._CustomConfigurationFileWrapper <a href=' /support/configuration_custom.py#L166'>clear</a>(cls,persistent)</tt>	If persistent is true delete the temporary file.
<tt style='background-color:#E8E8E8;'> support._CustomConfigurationFileWrapper <a href=' /support/configuration_custom.py#L185'>getCustomDict</a>(cls)</tt>	Returns a dict of all temporary values in custom configuration file.
<tt style='background-color:#E8E8E8;'> support._CustomConfigurationFileWrapper <a href=' /support/configuration_custom.py#L204'>edit</a>(cls,properties)</tt>	Edits the xml configuration file with the parameters specified by.
<tt style='background-color:#E8E8E8;'> support._CustomConfigurationFileWrapper <a href=' /support/configuration_custom.py#L287'>_setPath</a>(cls)</tt>	Sets the path of the custom configuration file.
<tt style='background-color:#E8E8E8;'> support._CustomConfigurationFileWrapper <a href=' /support/configuration_custom.py#L295'>getPath</a>(cls)</tt>	Get the path of the custom configuration file.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_base.py#L69'>getString</a>(cls,prop)</tt>	Retrieve the requested property as a string if property does not exist.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_base.py#L91'>getBool</a>(cls,prop)</tt>	Retrieve the requested property and return it as a bool if property.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_base.py#L112'>getInt</a>(cls,prop)</tt>	Retrieve the requested property and return it as an int if property.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_base.py#L126'>getFloat</a>(cls,prop)</tt>	Retrieve the requested property and return it as a float if property.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_base.py#L140'>get</a>(cls,prop,default)</tt>	Get the value of the given configuration property as string this.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_base.py#L166'>set</a>(cls,prop,value)</tt>	Set the value of the given configuration property.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_base.py#L182'>dict</a>(cls)</tt>	Return a dict containing all of the configuration properties parameters.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_base.py#L229'>_readConfigFile</a>(cls,filename,path)</tt>	Parse the given xml file and return a dict describing the file.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_base.py#L370'>findConfigFile</a>(cls,filename)</tt>	Search the configuration path (specified via the nta_conf_path environment variable) for the given filename.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_base.py#L388'>getConfigPaths</a>(cls)</tt>	Return the list of paths to search for configuration files.
<tt style='background-color:#E8E8E8;'> support.Configuration <a href=' /support/configuration_base.py#L409'>setConfigPaths</a>(cls,paths)</tt>	Modify the paths we use to search for configuration files.
<tt style='background-color:#E8E8E8;'> support.NupicJobFailException <a href=' /support/exceptions.py#L55'>getWorkerCompletionMessage</a>()</tt>	Generates a worker completion message that is suitable for the.
<tt style='background-color:#E8E8E8;'> support.NupicJobFailException <a href=' /support/exceptions.py#L70'>mapCurrentException</a>(cls,e,errorCode,msg)</tt>	Raises nupicjobfailexception by mapping from another exception that is being handled in the caller's scope and preserves the current exception's.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/group_by.py#L25'>groupby2</a>()</tt>	Like itertools groupby with the following additions.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L92'>getCallerInfo</a>(depth)</tt>	Utility function to get information about function callers the information is the tuple (function/method name filename class).
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L115'>title</a>(s,additional,stream,frame)</tt>	Utility function to display nice titles it automatically extracts the name of the function/method it is called from.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L173'>bringToFront</a>(title)</tt>	Bring a top-level window with a given title.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L189'>getUserDocumentsPath</a>()</tt>	Find the user's "documents" directory os x "my documents" directory windows or home directory unix.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L239'>getArgumentDescriptions</a>(f)</tt>	Get the arguments default values and argument descriptions for a function.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L351'>initLogging</a>(verbose,console,consoleLevel)</tt>	Initilize nupic logging by reading in from the logging configuration file the.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L495'>reinitLoggingDir</a>()</tt>	Re- initialize the loging directory for the calling application that uses initlogging() for logging configuration.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L509'>_genLoggingFilePath</a>()</tt>	Generate a filepath for the calling app.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L522'>enableLoggingErrorDebugging</a>()</tt>	Overrides the python logging facility's handler handleerror function to.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L577'>intTo8ByteArray</a>(inValue)</tt>	Converts an int to a packed byte array with left most significant byte.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L600'>byteArrayToInt</a>(packed_data)</tt>	Converts a byte array into an integer.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L616'>getSpecialRowID</a>()</tt>	Special row id is 0xff ffff ffff ffff ffff 9 bytes of 0xff.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L629'>floatSecondsFromTimedelta</a>(td)</tt>	Convert datetime timedelta to seconds in floating point.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L638'>aggregationToMonthsSeconds</a>(interval)</tt>	Return the number of months and seconds from an aggregation dict that represents a date and time.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/__init__.py#L676'>aggregationDivide</a>(dividend,divisor)</tt>	Return the result from dividing two dicts that represent date and time.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/datafiles.py#L102'>processCategoryFile</a>(f,format,categoryColumn,categoryColumns)</tt>	Read the data out of the given category file returning a tuple categorycount listofcategories.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/lockattributes.py#L33'>_allow_new_attributes</a>(f)</tt>	A decorator that maintains the attribute lock state of an object it coperates with the lockattributesmetaclass see bellow that replaces.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/lockattributes.py#L77'>_simple_init</a>()</tt>	Trivial init method that just calls base class's __init__() this method is attached to classes that don't define __init__().
<tt style='background-color:#E8E8E8;'> support.ConsolePrinterMixin <a href=' /support/consoleprinter.py#L39'>__init__</a>(verbosity)</tt>	Initialize console printer functionality.
<tt style='background-color:#E8E8E8;'> support.ConsolePrinterMixin <a href=' /support/consoleprinter.py#L57'>cPrint</a>(level,message)</tt>	Print a message to the console.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/fshelpers.py#L30'>makeDirectoryFromAbsolutePath</a>(absDirPath)</tt>	Makes directory for the given directory path with default permissions.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/loophelpers.py#L34'>patientLoop</a>(logger,maxWaitExponent,finalErrorString,acceptableError)</tt>	Logger logging object maxwaitexponent 2 ** maxwaitexponent defines max wait time.
<tt style='background-color:#E8E8E8;'> support. <a href=' /support/enum.py#L32'>Enum</a>()</tt>	Utility function for creating enumerations in python example usage.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers.TestCaseBase <a href=' /support/unittesthelpers/testcasebase.py#L54'>printTestHeader</a>()</tt>	Print out what test we are running.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers.TestCaseBase <a href=' /support/unittesthelpers/testcasebase.py#L66'>printBanner</a>(msg)</tt>	Print out a banner.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers.TestCaseBase <a href=' /support/unittesthelpers/testcasebase.py#L78'>addExtraLogItem</a>(item)</tt>	Add an item to the log items list for the currently running session.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers.TestCaseBase <a href=' /support/unittesthelpers/testcasebase.py#L93'>__wrapMsg</a>(msg)</tt>	Called by our unittest testcase assertxxxxxx overrides to construct a.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers.TestCaseBase <a href=' /support/unittesthelpers/testcasebase.py#L110'>assertEqual</a>(first,second,msg)</tt>	Unittest testcase assertequal override adds extra log items to msg.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers.TestCaseBase <a href=' /support/unittesthelpers/testcasebase.py#L116'>assertNotEqual</a>(first,second,msg)</tt>	Unittest testcase assertnotequal override adds extra log items to msg.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers.TestCaseBase <a href=' /support/unittesthelpers/testcasebase.py#L122'>assertTrue</a>(expr,msg)</tt>	Unittest testcase asserttrue override adds extra log items to msg.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers.TestCaseBase <a href=' /support/unittesthelpers/testcasebase.py#L128'>assertFalse</a>(expr,msg)</tt>	Unittest testcase assertfalse override adds extra log items to msg.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers. <a href=' /support/unittesthelpers/testcasebase.py#L163'>longTest</a>(testMethod)</tt>	Decorator for specifying tests that only run when --long is specified.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers. <a href=' /support/unittesthelpers/test_framework_helpers.py#L38'>tagTest</a>(tag,comment)</tt>	A decorator for tagging a test class or test method with the given tag.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers.AbstractTemporalMemoryTest <a href=' /support/unittesthelpers/abstract_temporal_memory_test.py#L35'>getTMClass</a>()</tt>	Implement this method to specify the temporal memory class.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers.AbstractTemporalMemoryTest <a href=' /support/unittesthelpers/abstract_temporal_memory_test.py#L41'>getPatternMachine</a>()</tt>	Implement this method to provide the pattern machine.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers.AbstractTemporalMemoryTest <a href=' /support/unittesthelpers/abstract_temporal_memory_test.py#L47'>getDefaultTMParams</a>()</tt>	Override this method to set the default tm params for self tm.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers.AbstractTemporalMemoryTest <a href=' /support/unittesthelpers/abstract_temporal_memory_test.py#L59'>init</a>(overrides)</tt>	Initialize temporal memory and other member variables.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers. <a href=' /support/unittesthelpers/algorithm_test_helpers.py#L36'>getNumpyRandomGenerator</a>(seed)</tt>	Return a numpy random number generator with the given seed.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers. <a href=' /support/unittesthelpers/algorithm_test_helpers.py#L50'>convertPermanences</a>(sourceSP,destSP)</tt>	Transfer the permanences from source to dest sp's this is used in test.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers. <a href=' /support/unittesthelpers/algorithm_test_helpers.py#L69'>getSeed</a>()</tt>	Generate and log a 32-bit compatible seed value.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers. <a href=' /support/unittesthelpers/algorithm_test_helpers.py#L79'>convertSP</a>(pySp,newSeed)</tt>	Given an instance of a python spatial_pooler return an instance of the cpp spatial_pooler with identical parameters.
<tt style='background-color:#E8E8E8;'> support.unittesthelpers. <a href=' /support/unittesthelpers/algorithm_test_helpers.py#L146'>CreateSP</a>(imp,params)</tt>	Helper class for creating an instance of the appropriate spatial pooler using given parameters.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/permutations_runner.py#L101'>_escape</a>(s)</tt>	Escape commas tabs newlines and dashes in a string.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/permutations_runner.py#L116'>_engineServicesRunning</a>()</tt>	Return true if the engine services are running.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/permutations_runner.py#L234'>runWithConfig</a>(swarmConfig,options,outDir,outputLabel)</tt>	Starts a swarm given an dictionary configuration.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/permutations_runner.py#L275'>runWithJsonFile</a>(expJsonFilePath,options,outputLabel,permWorkDir)</tt>	Starts a swarm given a path to a json file containing configuration.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/permutations_runner.py#L308'>runWithPermutationsScript</a>(permutationsFilePath,options,outputLabel,permWorkDir)</tt>	Starts a swarm given a path to a permutations py script.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/permutations_runner.py#L345'>runPermutations</a>(_)</tt>	Deprecated use @ref runwithconfig.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/permutations_runner.py#L372'>_clientJobsDB</a>()</tt>	Returns the shared cjdao clientjobsdao instance.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/permutations_runner.py#L380'>_nupicHyperSearchHasErrors</a>(hyperSearchJob)</tt>	Check whether any experiments failed in our latest hypersearch.
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchRunner <a href=' /swarming/permutations_runner.py#L430'>runNewSearch</a>()</tt>	Start a new hypersearch job and monitor it to completion.
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchRunner <a href=' /swarming/permutations_runner.py#L442'>pickupSearch</a>()</tt>	Pick up the latest search from a saved jobid and monitor it to completion.
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchRunner <a href=' /swarming/permutations_runner.py#L618'>_launchWorkers</a>(cmdLine,numWorkers)</tt>	Launch worker processes to execute the given command line.
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchRunner <a href=' /swarming/permutations_runner.py#L637'>__startSearch</a>()</tt>	Starts hypersearch as a worker or runs it inline for the "dryrun" action.
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchRunner <a href=' /swarming/permutations_runner.py#L696'>peekSearchJob</a>()</tt>	Retrieves the runner's _hypersearchjob instance note only available after run().
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchRunner <a href=' /swarming/permutations_runner.py#L709'>getDiscoveredMetricsKeys</a>()</tt>	Returns a tuple of all metrics keys discovered while running hypersearch.
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchRunner <a href=' /swarming/permutations_runner.py#L725'>printModels</a>(cls,options)</tt>	Prints a listing of experiments that would take place without actually executing them.
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchRunner <a href=' /swarming/permutations_runner.py#L740'>generateReport</a>(cls,options,replaceReport,hyperSearchJob)</tt>	Prints all available results in the given hypersearch job and emits model information to the permutations report csv.
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchRunner <a href=' /swarming/permutations_runner.py#L1033'>loadSavedHyperSearchJob</a>(cls,permWorkDir,outputLabel)</tt>	Instantiates a _hypersearchjob instance from info saved in file.
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchRunner <a href=' /swarming/permutations_runner.py#L1051'>__saveHyperSearchJobID</a>(cls,permWorkDir,outputLabel,hyperSearchJob)</tt>	Saves the given _hypersearchjob instance's jobid to file.
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchRunner <a href=' /swarming/permutations_runner.py#L1076'>__loadHyperSearchJobID</a>(cls,permWorkDir,outputLabel)</tt>	Loads a saved jobid from file parameters.
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchRunner <a href=' /swarming/permutations_runner.py#L1098'>__getHyperSearchJobIDFilePath</a>(cls,permWorkDir,outputLabel)</tt>	Returns filepath where to store hypersearch jobid.
<tt style='background-color:#E8E8E8;'> swarming._ReportCSVWriter <a href=' /swarming/permutations_runner.py#L1210'>emit</a>(modelInfo)</tt>	Emit model info to csv file.
<tt style='background-color:#E8E8E8;'> swarming._ReportCSVWriter <a href=' /swarming/permutations_runner.py#L1269'>finalize</a>()</tt>	Close file and print report/backup csv file paths.
<tt style='background-color:#E8E8E8;'> swarming._ReportCSVWriter <a href=' /swarming/permutations_runner.py#L1291'>__openAndInitCSVFile</a>(modelInfo)</tt>	- backs up old report csv file - opens the report csv file in append or overwrite mode (per.
<tt style='background-color:#E8E8E8;'> swarming._NupicJob <a href=' /swarming/permutations_runner.py#L1399'>getJobID</a>()</tt>	Semi-private method for retrieving the jobid.
<tt style='background-color:#E8E8E8;'> swarming._NupicJob <a href=' /swarming/permutations_runner.py#L1410'>getParams</a>()</tt>	Semi-private method for retrieving the job-specific params parameters.
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchJob <a href=' /swarming/permutations_runner.py#L1739'>queryModelIDs</a>()</tt>	Queuries db for model ids of all currently instantiated models associated with this hypersearch job.
<tt style='background-color:#E8E8E8;'> swarming._HyperSearchJob <a href=' /swarming/permutations_runner.py#L1757'>getExpectedNumModels</a>(searchMethod)</tt>	Returns the total number of expected models if known -1 if it can't be determined.
<tt style='background-color:#E8E8E8;'> swarming._ClientJobUtils <a href=' /swarming/permutations_runner.py#L1778'>makeSearchJobParamsDict</a>(cls,options,forRunning)</tt>	Constructs a dictionary of hypersearch parameters suitable for converting to json and passing as the params argument to clientjobsdao.
<tt style='background-color:#E8E8E8;'> swarming._PermutationUtils <a href=' /swarming/permutations_runner.py#L1833'>getOptimizationMetricInfo</a>(cls,searchJobParams)</tt>	Retrives the optimization key name and optimization function.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/permutations_runner.py#L1858'>_backupFile</a>(filePath)</tt>	Back up a file.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/permutations_runner.py#L1880'>_getOneModelInfo</a>(nupicModelID)</tt>	A convenience function that retrieves inforamtion about a single model see also _itermodels().
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/permutations_runner.py#L1894'>_iterModels</a>(modelIDs)</tt>	Creates an iterator that returns modelinfo elements for the given modelids warning the order of modelinfo elements returned by the iterator.
<tt style='background-color:#E8E8E8;'> swarming._NupicModelInfo <a href=' /swarming/permutations_runner.py#L2183'>__unwrapParams</a>()</tt>	Unwraps self __rawinfo params into the equivalent python dictionary.
<tt style='background-color:#E8E8E8;'> swarming._NupicModelInfo <a href=' /swarming/permutations_runner.py#L2201'>getReportMetrics</a>()</tt>	Retrives a dictionary of metrics designated for report parameters.
<tt style='background-color:#E8E8E8;'> swarming._NupicModelInfo <a href=' /swarming/permutations_runner.py#L2212'>getOptimizationMetrics</a>()</tt>	Retrives a dictionary of metrics designagted for optimization parameters.
<tt style='background-color:#E8E8E8;'> swarming._NupicModelInfo <a href=' /swarming/permutations_runner.py#L2223'>getAllMetrics</a>()</tt>	Retrives a dictionary of metrics that combines all report and optimization metrics.
<tt style='background-color:#E8E8E8;'> swarming._NupicModelInfo <a href=' /swarming/permutations_runner.py#L2246'>__unwrapResults</a>()</tt>	Unwraps self __rawinfo results and caches it in self __cachedresults.
<tt style='background-color:#E8E8E8;'> swarming._NupicModelInfo <a href=' /swarming/permutations_runner.py#L2321'>getCompletionMsg</a>()</tt>	Returns model completion message.
<tt style='background-color:#E8E8E8;'> swarming._NupicModelInfo <a href=' /swarming/permutations_runner.py#L2335'>getStartTime</a>()</tt>	Returns model evaluation start time.
<tt style='background-color:#E8E8E8;'> swarming._NupicModelInfo <a href=' /swarming/permutations_runner.py#L2350'>getEndTime</a>()</tt>	Returns mode evaluation end time.
<tt style='background-color:#E8E8E8;'> swarming.InferenceElement <a href=' /swarming/experimentutils.py#L58'>getInputElement</a>(inferenceElement)</tt>	Get the sensor input element that corresponds to the given inference element.
<tt style='background-color:#E8E8E8;'> swarming.InferenceElement <a href=' /swarming/experimentutils.py#L65'>isTemporal</a>(inferenceElement)</tt>	Returns true if the inference from this timestep is predicted the input for the next timestep.
<tt style='background-color:#E8E8E8;'> swarming.InferenceElement <a href=' /swarming/experimentutils.py#L80'>getTemporalDelay</a>(inferenceElement,key)</tt>	Returns the number of records that elapse between when an inference is made and when the corresponding input record will appear.
<tt style='background-color:#E8E8E8;'> swarming.InferenceElement <a href=' /swarming/experimentutils.py#L118'>getMaxDelay</a>(inferences)</tt>	Returns the maximum delay for the inferenceelements in the inference.
<tt style='background-color:#E8E8E8;'> swarming.InferenceType <a href=' /swarming/experimentutils.py#L153'>isTemporal</a>(inferenceType)</tt>	Returns true if the inference type is 'temporal', i e requires a.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchWorker <a href=' /swarming/HypersearchWorker.py#L70'>__init__</a>(options,cmdLineArgs)</tt>	Instantiate the hypersearch worker parameters.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchWorker <a href=' /swarming/HypersearchWorker.py#L127'>_processUpdatedModels</a>(cjDAO)</tt>	For all models that modified their results since last time this method was called send their latest results to the hypersearch implementation.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchWorker <a href=' /swarming/HypersearchWorker.py#L234'>run</a>()</tt>	Run this worker.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/HypersearchWorker.py#L480'>main</a>(argv)</tt>	The main function of the hypersearchworker script this parses the command.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/api.py#L34'>createAndStartSwarm</a>(client,clientInfo,clientKey,params)</tt>	Create and start a swarm job.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/api.py#L73'>getSwarmModelParams</a>(modelID)</tt>	Retrieve the engine-level model params from a swarm model.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L209'>run</a>()</tt>	Runs the opf model parameters.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L292'>__runTaskMainLoop</a>(numIters,learningOffAt)</tt>	Main loop of the opf model runner.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L394'>_finalize</a>()</tt>	Run final activities after a model has run these include recording and.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L424'>__createModelCheckpoint</a>()</tt>	Create a checkpoint from the current model and store it in a dir named.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L450'>__deleteModelCheckpoint</a>(modelID)</tt>	Delete the stored checkpoint for the specified modelid this function is.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L482'>_createPredictionLogger</a>()</tt>	Creates the model's predictionlogger object which is an interface to write.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L500'>__getOptimizedMetricLabel</a>()</tt>	Get the label for the metric being optimized this function also caches.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L524'>_getMetricLabels</a>()</tt>	Returns a list of labels that correspond to metrics being computed.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L531'>_getFieldStats</a>()</tt>	Method which returns a dictionary of field statistics received from the input source.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L553'>_getMetrics</a>()</tt>	Protected function that can be overriden by subclasses its main purpose.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L563'>_updateModelDBResults</a>()</tt>	Retrieves the current results and updates the model's record in the model database.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L599'>__updateJobResultsPeriodic</a>()</tt>	Periodic check to see if this is the best model this should only have an.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L653'>__checkIfBestCompletedModel</a>()</tt>	Reads the current "best model" for the job and returns whether or not the.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L759'>_writePrediction</a>(result)</tt>	Writes the results of one iteration of a model the results are written to.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L778'>__writeRecordsCallback</a>()</tt>	This callback is called by self __predictionlogger writerecords().
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L789'>__flushPredictionCache</a>()</tt>	Writes the contents of this model's in-memory prediction cache to a permanent.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L810'>__deleteOutputCache</a>(modelID)</tt>	Delete's the output cache associated with the given modelid this actually.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L830'>_initPeriodicActivities</a>()</tt>	Creates and returns a periodicactivitymgr instance initialized with.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L876'>__checkCancelation</a>()</tt>	Check if the cancelation flag has been set for this model.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L911'>__checkMaturity</a>()</tt>	Save the current metric value and see if the model's performance has 'leveled off.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L948'>handleWarningSignal</a>(signum,frame)</tt>	Handles a "warning signal" from the scheduler this is received when the.
<tt style='background-color:#E8E8E8;'> swarming.OPFModelRunner <a href=' /swarming/ModelRunner.py#L963'>__setAsOrphaned</a>()</tt>	Sets the current model as orphaned this is called when the scheduler is.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L64'>__init__</a>(hsObj)</tt>	Instantiate our results database.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L134'>update</a>(modelID,modelParams,modelParamsHash,metricResult)</tt>	Insert a new entry or update an existing one if this is an update.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L310'>getNumErrModels</a>()</tt>	Return number of models that completed with errors.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L319'>getErrModelIds</a>()</tt>	Return list of models ids that completed with errors.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L328'>getNumCompletedModels</a>()</tt>	Return total number of models that completed.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L337'>getModelIDFromParamsHash</a>(paramsHash)</tt>	Return the modelid of the model with the given paramshash or none if not found.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L352'>numModels</a>(swarmId,includeHidden)</tt>	Return the total # of models we have in our database if swarmid is none or in a specific swarm.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L381'>bestModelIdAndErrScore</a>(swarmId,genIdx)</tt>	Return the model id of the model with the best result so far and it's score on the optimize metric.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L417'>getParticleInfo</a>(modelId)</tt>	Return particle info for a specific modelid.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L431'>getParticleInfos</a>(swarmId,genIdx,completed,matured)</tt>	Return a list of particlestates for all particles we know about in the given swarm their model ids and metric results.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L520'>getOrphanParticleInfos</a>(swarmId,genIdx)</tt>	Return a list of particlestates for all particles in the given swarm generation that have been orphaned.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L581'>getMaturedSwarmGenerations</a>()</tt>	Return a list of swarm generations that have completed and the best minimal errscore seen for each of them.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L632'>firstNonFullGeneration</a>(swarmId,minNumParticles)</tt>	Return the generation index of the first generation in the given swarm that does not have numparticles particles in it either still in the.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L659'>highestGeneration</a>(swarmId)</tt>	Return the generation index of the highest generation in the given swarm.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L672'>getParticleBest</a>(particleId)</tt>	Return the best score and position for a given particle the position.
<tt style='background-color:#E8E8E8;'> swarming.ResultsDB <a href=' /swarming/HypersearchV2.py#L683'>getResultsPerChoice</a>(swarmId,maxGenIdx,varName)</tt>	Return a dict of the errors obtained on models that were run with each value from a permutechoice variable.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L785'>__init__</a>(searchParams,workerID,cjDAO,jobID)</tt>	Instantiate the hyperseachv2 instance.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L1101'>_getStreamDef</a>(modelDescription)</tt>	Generate stream definition based on.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L1146'>__del__</a>()</tt>	Destructor note this is not guaranteed to be called bugs like circular references could prevent it from being called.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L1153'>close</a>()</tt>	Deletes temporary system objects/files.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L1162'>_readPermutationsFile</a>(filename,modelDescription)</tt>	Read the permutations file and initialize the following member variables _predictedfield field name of the field we are trying to.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L1390'>getExpectedNumModels</a>()</tt>	Computes the number of models that are expected to complete as part of this instances's hypersearch.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L1407'>getModelNames</a>()</tt>	Generates a list of model names that are expected to complete as part of this instances's hypersearch.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L1424'>getPermutationVariables</a>()</tt>	Returns a dictionary of permutation variables.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L1435'>getComplexVariableLabelLookupDict</a>()</tt>	Generates a lookup dictionary of permutation variables whose values are too complex for labels so that artificial labels have to be generated.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L1451'>getOptimizationMetricInfo</a>()</tt>	Retrives the optimization key name and optimization function.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L1463'>_checkForOrphanedModels</a>()</tt>	If there are any models that haven't been updated in a while consider them dead and mark them as hidden in our resultsdb.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L1525'>_hsStatePeriodicUpdate</a>(exhaustedSwarmId)</tt>	Periodically check to see if we should remove a certain field combination from evaluation because it is doing so poorly or move on to the next.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L1700'>_getCandidateParticleAndSwarm</a>(exhaustedSwarmId)</tt>	Find or create a candidate particle to produce a new model.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L2021'>_okToExit</a>()</tt>	Test if it's ok to exit this worker this is only called when we run.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L2100'>createModels</a>(numModels)</tt>	Create one or more new models for evaluation these should not be models.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L2302'>recordModelProgress</a>(modelID,modelParams,modelParamsHash,results)</tt>	Record or update the results for a model this is called by the.
<tt style='background-color:#E8E8E8;'> swarming.HypersearchV2 <a href=' /swarming/HypersearchV2.py#L2364'>runModel</a>(modelID,jobID,modelParams,modelParamsHash)</tt>	Run the given model.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L81'>_paramsFileHead</a>()</tt>	This is the first portion of every sub-experiment params file we generate between.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L109'>_paramsFileTail</a>()</tt>	This is the tail of every params file we generate between the head and the tail.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L126'>_appendReportKeys</a>(keys,prefix,results)</tt>	Generate a set of possible report keys for an experiment's results.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L162'>_matchReportKeys</a>(reportKeyREs,allReportKeys)</tt>	Extract all items from the 'allkeys' list whose key matches one of the regular expressions passed in 'reportkeys'.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L197'>_getReportItem</a>(itemName,results)</tt>	Get a specific item by name out of the results dict.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L218'>filterResults</a>(allResults,reportKeys,optimizeKey)</tt>	Given the complete set of results generated by an experiment (passed in 'results'), filter out and return only the ones the caller wants as.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L281'>_quoteAndEscape</a>(string)</tt>	String input string ascii or unicode.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L293'>_handleModelRunnerException</a>(jobID,modelID,jobsDAO,experimentDir)</tt>	Perform standard handling of an exception that occurs while running a model.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L346'>runModelGivenBaseAndParams</a>(modelID,jobID,baseDescription,params)</tt>	This creates an experiment directory with a base py description file.
<tt style='background-color:#E8E8E8;'> swarming.PeriodicActivityMgr <a href=' /swarming/utils.py#L521'>__init__</a>(requestedActivities)</tt>	Requestedactivities a sequence of periodicactivityrequest elements.
<tt style='background-color:#E8E8E8;'> swarming.PeriodicActivityMgr <a href=' /swarming/utils.py#L535'>tick</a>()</tt>	Activity tick handler services all activities.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L560'>generatePersistentJobGUID</a>()</tt>	Generates a "persistentjobguid" value.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L577'>rCopy</a>(d,f,discardNoneKeys,deepCopy)</tt>	Recursively copies a dict and returns the result.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L614'>rApply</a>(d,f)</tt>	Recursively applies f to the values in dict d.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L634'>clippedObj</a>(obj,maxElementSize)</tt>	Return a clipped version of obj suitable for printing this is useful when generating log messages by printing data structures but.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L678'>validate</a>(value)</tt>	Validate a python value against json schema validate value schemapath.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L714'>loadJsonValueFromFile</a>(inputFilePath)</tt>	Loads a json value from a file and converts it to the corresponding python object.
<tt style='background-color:#E8E8E8;'> swarming. <a href=' /swarming/utils.py#L732'>sortedJSONDumpS</a>(obj)</tt>	Return a json representation of obj with sorted keys on any embedded dicts.
<tt style='background-color:#E8E8E8;'> swarming.OPFDummyModelRunner <a href=' /swarming/DummyModelRunner.py#L339'>_loadDummyModelParameters</a>(params)</tt>	Loads all the parameters for this dummy model for any paramters.
<tt style='background-color:#E8E8E8;'> swarming.OPFDummyModelRunner <a href=' /swarming/DummyModelRunner.py#L352'>_computModelDelay</a>()</tt>	Computes the amount of time if any to delay the run of this model.
<tt style='background-color:#E8E8E8;'> swarming.OPFDummyModelRunner <a href=' /swarming/DummyModelRunner.py#L393'>_getMetrics</a>()</tt>	Protected function that can be overridden by subclasses its main purpose.
<tt style='background-color:#E8E8E8;'> swarming.OPFDummyModelRunner <a href=' /swarming/DummyModelRunner.py#L411'>run</a>()</tt>	Runs the given opf task against the given model instance.
<tt style='background-color:#E8E8E8;'> swarming.OPFDummyModelRunner <a href=' /swarming/DummyModelRunner.py#L575'>_createPredictionLogger</a>()</tt>	Creates the model's predictionlogger object which is an interface to write.
<tt style='background-color:#E8E8E8;'> swarming.OPFDummyModelRunner <a href=' /swarming/DummyModelRunner.py#L589'>__shouldSysExit</a>(iteration)</tt>	Checks to see if the model should exit based on the exitafter dummy.
<tt style='background-color:#E8E8E8;'> swarming.ModelChooser <a href=' /swarming/modelchooser.py#L66'>updateResultsForJob</a>(forceUpdate)</tt>	Chooses the best model for a given job.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator._CreateDirectoryException <a href=' /swarming/exp_generator/ExpGenerator.py#L80'>__init__</a>(dirPath,reason)</tt>	Dirpath the path that we attempted to create for experiment files.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator._ErrorReportingException <a href=' /swarming/exp_generator/ExpGenerator.py#L121'>__init__</a>(problem,precursor)</tt>	Problem a string-convertible object that describes the problem experienced by the error-reporting funciton.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L142'>_makeUsageErrorStr</a>(errorString,usageString)</tt>	Combines an error string and usage string into a regular format so they all look consistent.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L150'>_handleShowSchemaOption</a>()</tt>	Displays command schema to stdout and exit program.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L160'>_handleDescriptionOption</a>(cmdArgStr,outDir,usageStr,hsVersion)</tt>	Parses and validates the --description option args and executes the.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L198'>_handleDescriptionFromFileOption</a>(filename,outDir,usageStr,hsVersion)</tt>	Parses and validates the --descriptionfromfile option and executes the.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L233'>_isInt</a>(x,precision)</tt>	Return isint intvalue for a given floating point number.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L251'>_isString</a>(obj)</tt>	Returns whether or not the object is a string.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L260'>_quoteAndEscape</a>(string)</tt>	String input string ascii or unicode.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L272'>_indentLines</a>(str,indentLevels,indentFirstLine)</tt>	Indent all lines in the given string.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L300'>_isCategory</a>(fieldType)</tt>	Prediction function for determining whether a function is a categorical variable or a scalar variable.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L313'>_generateMetricSpecString</a>(inferenceElement,metric,params,field)</tt>	Generates the string representation of a metricspec object and returns the metric key associated with the metric.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L358'>_generateFileFromTemplates</a>(templateFileNames,outputFilePath,replacementDict)</tt>	Generates a file by applying token replacements to the given template file.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L409'>_generateEncoderChoicesV1</a>(fieldInfo)</tt>	Return a list of possible encoder parameter combinations for the given field and the default aggregation function to use.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L502'>_generateEncoderStringsV1</a>(includedFields)</tt>	Generate and return the following encoder related substitution variables encoderspecsstr.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L624'>_generatePermEncoderStr</a>(options,encoderDict)</tt>	Generate the string that defines the permutations to apply for a given encoder.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L760'>_generateEncoderStringsV2</a>(includedFields,options)</tt>	Generate and return the following encoder related substitution variables encoderspecsstr.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L981'>_handleJAVAParameters</a>(options)</tt>	Handle legacy options temporary.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L1010'>_getPropertyValue</a>(schema,propertyName,options)</tt>	Checks to see if property is specified in 'options' if not reads the.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L1023'>_getExperimentDescriptionSchema</a>()</tt>	Returns the experiment description schema this implementation loads it in.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L1038'>_generateExperiment</a>(options,outputDirPath,hsVersion,claDescriptionTemplateFile)</tt>	Executes the --description option which includes 1.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L1619'>_generateMetricsSubstitutions</a>(options,tokenReplacements)</tt>	Generate the token substitution for metrics related fields.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L1653'>_generateMetricSpecs</a>(options)</tt>	Generates the metrics for a given inferencetype.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L1859'>_generateExtraMetricSpecs</a>(options)</tt>	Generates the non-default metrics specified by the expgenerator params.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L1886'>_getPredictedField</a>(options)</tt>	Gets the predicted field and it's datatype from the options dictionary.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L1914'>_generateInferenceArgs</a>(options,tokenReplacements)</tt>	Generates the token substitutions related to the predicted field.
<tt style='background-color:#E8E8E8;'> swarming.exp_generator. <a href=' /swarming/exp_generator/ExpGenerator.py#L1947'>expGenerator</a>(args)</tt>	Parses validates and executes command-line options on success performs requested operation and exits program normally.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch. <a href=' /swarming/hypersearch/support.py#L50'>Enum</a>()</tt>	Utility function for creating enumerations in python example usage.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch. <a href=' /swarming/hypersearch/support.py#L117'>makeDirectoryFromAbsolutePath</a>(absDirPath)</tt>	Makes directory for the given directory path with default permissions.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ConfigurationBase <a href=' /swarming/hypersearch/support.py#L178'>getString</a>(cls,prop)</tt>	Retrieve the requested property as a string if property does not exist.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ConfigurationBase <a href=' /swarming/hypersearch/support.py#L199'>getBool</a>(cls,prop)</tt>	Retrieve the requested property and return it as a bool if property.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ConfigurationBase <a href=' /swarming/hypersearch/support.py#L219'>getInt</a>(cls,prop)</tt>	Retrieve the requested property and return it as an int if property.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ConfigurationBase <a href=' /swarming/hypersearch/support.py#L232'>getFloat</a>(cls,prop)</tt>	Retrieve the requested property and return it as a float if property.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ConfigurationBase <a href=' /swarming/hypersearch/support.py#L245'>get</a>(cls,prop,default)</tt>	Get the value of the given configuration property as string this.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ConfigurationBase <a href=' /swarming/hypersearch/support.py#L270'>set</a>(cls,prop,value)</tt>	Set the value of the given configuration property.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ConfigurationBase <a href=' /swarming/hypersearch/support.py#L285'>dict</a>(cls)</tt>	Return a dict containing all of the configuration properties parameters.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ConfigurationBase <a href=' /swarming/hypersearch/support.py#L330'>_readConfigFile</a>(cls,filename,path)</tt>	Parse the given xml file and return a dict describing the file.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ConfigurationBase <a href=' /swarming/hypersearch/support.py#L462'>clear</a>(cls)</tt>	Clear out the entire configuration.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ConfigurationBase <a href=' /swarming/hypersearch/support.py#L470'>findConfigFile</a>(cls,filename)</tt>	Search the configuration path (specified via the nta_conf_path environment variable) for the given filename.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ConfigurationBase <a href=' /swarming/hypersearch/support.py#L487'>getConfigPaths</a>(cls)</tt>	Return the list of paths to search for configuration files.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ConfigurationBase <a href=' /swarming/hypersearch/support.py#L507'>setConfigPaths</a>(cls,paths)</tt>	Modify the paths we use to search for configuration files.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ConfigurationBase <a href=' /swarming/hypersearch/support.py#L518'>_readStdConfigFiles</a>(cls)</tt>	Read in all standard configuration files.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Configuration <a href=' /swarming/hypersearch/support.py#L549'>getCustomDict</a>(cls)</tt>	Return a dict containing all custom configuration properties parameters.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Configuration <a href=' /swarming/hypersearch/support.py#L559'>setCustomProperty</a>(cls,propertyName,value)</tt>	Set a single custom setting and persist it to the custom configuration store.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Configuration <a href=' /swarming/hypersearch/support.py#L571'>setCustomProperties</a>(cls,properties)</tt>	Set multiple custom properties and persist them to the custom configuration store.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Configuration <a href=' /swarming/hypersearch/support.py#L588'>clear</a>(cls)</tt>	Clear all configuration properties from in-memory cache but do not alter the custom configuration file.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Configuration <a href=' /swarming/hypersearch/support.py#L600'>resetCustomConfig</a>(cls)</tt>	Clear all custom configuration settings and delete the persistent custom configuration store.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Configuration <a href=' /swarming/hypersearch/support.py#L616'>loadCustomConfig</a>(cls)</tt>	Loads custom configuration settings from their persistent storage.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Configuration <a href=' /swarming/hypersearch/support.py#L627'>_readStdConfigFiles</a>(cls)</tt>	Intercept the _readstdconfigfiles call from our base config class to read in base and custom configuration settings.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch._CustomConfigurationFileWrapper <a href=' /swarming/hypersearch/support.py#L655'>clear</a>(cls,persistent)</tt>	If persistent is true delete the temporary file.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch._CustomConfigurationFileWrapper <a href=' /swarming/hypersearch/support.py#L674'>getCustomDict</a>(cls)</tt>	Returns a dict of all temporary values in custom configuration file.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch._CustomConfigurationFileWrapper <a href=' /swarming/hypersearch/support.py#L692'>edit</a>(cls,properties)</tt>	Edits the xml configuration file with the parameters specified by.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch._CustomConfigurationFileWrapper <a href=' /swarming/hypersearch/support.py#L774'>_setPath</a>(cls)</tt>	Sets the path of the custom configuration file.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch._CustomConfigurationFileWrapper <a href=' /swarming/hypersearch/support.py#L781'>getPath</a>(cls)</tt>	Get the path of the custom configuration file.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ExtendedLogger <a href=' /swarming/hypersearch/ExtendedLogger.py#L47'>debug</a>(msg)</tt>	Log 'msg % args' with severity 'debug'.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ExtendedLogger <a href=' /swarming/hypersearch/ExtendedLogger.py#L59'>info</a>(msg)</tt>	Log 'msg % args' with severity 'info'.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ExtendedLogger <a href=' /swarming/hypersearch/ExtendedLogger.py#L71'>warning</a>(msg)</tt>	Log 'msg % args' with severity 'warning'.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ExtendedLogger <a href=' /swarming/hypersearch/ExtendedLogger.py#L85'>error</a>(msg)</tt>	Log 'msg % args' with severity 'error'.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ExtendedLogger <a href=' /swarming/hypersearch/ExtendedLogger.py#L97'>critical</a>(msg)</tt>	Log 'msg % args' with severity 'critical'.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ExtendedLogger <a href=' /swarming/hypersearch/ExtendedLogger.py#L111'>log</a>(level,msg)</tt>	Log 'msg % args' with the integer severity 'level'.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.ModelTerminator <a href=' /swarming/hypersearch/ModelTerminator.py#L59'>getTerminationCallbacks</a>(terminationFunc)</tt>	Returns the periodic checks to see if the model should continue running.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch. <a href=' /swarming/hypersearch/object_json.py#L147'>clean</a>(s)</tt>	Removes trailing whitespace on each line.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteVariable <a href=' /swarming/hypersearch/permutation_helpers.py#L40'>getState</a>()</tt>	Return the current state of this particle this is used for.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteVariable <a href=' /swarming/hypersearch/permutation_helpers.py#L46'>setState</a>(state)</tt>	Set the current state of this particle this is counterpart to getstate.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteVariable <a href=' /swarming/hypersearch/permutation_helpers.py#L51'>getPosition</a>()</tt>	For int vars returns position to nearest int.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteVariable <a href=' /swarming/hypersearch/permutation_helpers.py#L60'>agitate</a>()</tt>	This causes the variable to jiggle away from its current position.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteVariable <a href=' /swarming/hypersearch/permutation_helpers.py#L70'>newPosition</a>(globalBestPosition,rng)</tt>	Choose a new position based on results obtained so far from other particles and the passed in globalbestposition.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteVariable <a href=' /swarming/hypersearch/permutation_helpers.py#L84'>pushAwayFrom</a>(otherVars,rng)</tt>	Choose a new position that is as far away as possible from all 'othervars', where 'othervars' is a list of permutevariable instances.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteVariable <a href=' /swarming/hypersearch/permutation_helpers.py#L96'>resetVelocity</a>(rng)</tt>	Reset the velocity to be some fraction of the total distance this.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteFloat <a href=' /swarming/hypersearch/permutation_helpers.py#L114'>__init__</a>(min,max,stepSize,inertia)</tt>	Construct a variable that permutes over floating point values using the particle swarm optimization pso algorithm.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteFloat <a href=' /swarming/hypersearch/permutation_helpers.py#L156'>__repr__</a>()</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteFloat <a href=' /swarming/hypersearch/permutation_helpers.py#L164'>getState</a>()</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteFloat <a href=' /swarming/hypersearch/permutation_helpers.py#L172'>setState</a>(state)</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteFloat <a href=' /swarming/hypersearch/permutation_helpers.py#L179'>getPosition</a>()</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteFloat <a href=' /swarming/hypersearch/permutation_helpers.py#L192'>agitate</a>()</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteFloat <a href=' /swarming/hypersearch/permutation_helpers.py#L212'>newPosition</a>(globalBestPosition,rng)</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteFloat <a href=' /swarming/hypersearch/permutation_helpers.py#L238'>pushAwayFrom</a>(otherPositions,rng)</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteFloat <a href=' /swarming/hypersearch/permutation_helpers.py#L279'>resetVelocity</a>(rng)</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteInt <a href=' /swarming/hypersearch/permutation_helpers.py#L294'>__repr__</a>()</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteInt <a href=' /swarming/hypersearch/permutation_helpers.py#L302'>getPosition</a>()</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteChoices <a href=' /swarming/hypersearch/permutation_helpers.py#L333'>__repr__</a>()</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteChoices <a href=' /swarming/hypersearch/permutation_helpers.py#L338'>getState</a>()</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteChoices <a href=' /swarming/hypersearch/permutation_helpers.py#L346'>setState</a>(state)</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteChoices <a href=' /swarming/hypersearch/permutation_helpers.py#L352'>setResultsPerChoice</a>(resultsPerChoice)</tt>	Setup our resultsperchoice history based on the passed in resultsperchoice.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteChoices <a href=' /swarming/hypersearch/permutation_helpers.py#L371'>getPosition</a>()</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteChoices <a href=' /swarming/hypersearch/permutation_helpers.py#L375'>agitate</a>()</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteChoices <a href=' /swarming/hypersearch/permutation_helpers.py#L381'>newPosition</a>(globalBestPosition,rng)</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteChoices <a href=' /swarming/hypersearch/permutation_helpers.py#L436'>pushAwayFrom</a>(otherPositions,rng)</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteChoices <a href=' /swarming/hypersearch/permutation_helpers.py#L448'>resetVelocity</a>(rng)</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteEncoder <a href=' /swarming/hypersearch/permutation_helpers.py#L469'>__repr__</a>()</tt>	See comments in base class.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.PermuteEncoder <a href=' /swarming/hypersearch/permutation_helpers.py#L478'>getDict</a>(encoderName,flattenedChosenValues)</tt>	Return a dict that can be used to construct this encoder this dict.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Tests <a href=' /swarming/hypersearch/permutation_helpers.py#L523'>_testValidPositions</a>(varClass,minValue,maxValue,stepSize)</tt>	Run a bunch of iterations on a permutevar and collect which positions were visited.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Tests <a href=' /swarming/hypersearch/permutation_helpers.py#L570'>_testConvergence</a>(varClass,minValue,maxValue,targetValue)</tt>	Test that we can converge on the right answer.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Tests <a href=' /swarming/hypersearch/permutation_helpers.py#L673'>run</a>()</tt>	Run unit tests on this module.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Particle <a href=' /swarming/hypersearch/Particle.py#L66'>__init__</a>(hsObj,resultsDB,flattenedPermuteVars,swarmId)</tt>	Create a particle.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Particle <a href=' /swarming/hypersearch/Particle.py#L258'>getState</a>()</tt>	Get the particle state as a dict this is enough information to.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Particle <a href=' /swarming/hypersearch/Particle.py#L270'>initStateFrom</a>(particleId,particleState,newBest)</tt>	Init all of our variable positions velocities and optionally the best result and best position from the given particle.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Particle <a href=' /swarming/hypersearch/Particle.py#L297'>copyEncoderStatesFrom</a>(particleState)</tt>	Copy all encoder variables from particlestate into this particle.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Particle <a href=' /swarming/hypersearch/Particle.py#L332'>copyVarStatesFrom</a>(particleState,varNames)</tt>	Copy specific variables from particlestate into this particle.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Particle <a href=' /swarming/hypersearch/Particle.py#L368'>getPosition</a>()</tt>	Return the position of this particle this returns a dict() of key.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Particle <a href=' /swarming/hypersearch/Particle.py#L383'>getPositionFromState</a>(pState)</tt>	Return the position of a particle given its state dict.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Particle <a href=' /swarming/hypersearch/Particle.py#L398'>agitate</a>()</tt>	Agitate this particle so that it is likely to go to a new position.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.Particle <a href=' /swarming/hypersearch/Particle.py#L412'>newPosition</a>(whichVars)</tt>	Choose a new position based on results obtained so far from all other particles.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L68'>__init__</a>(hsObj)</tt>	Create our state object.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L96'>isDirty</a>()</tt>	Return true if our local copy of the state has changed since the last time we read from the db.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L102'>isSearchOver</a>()</tt>	Return true if the search should be considered over.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L106'>readStateFromDB</a>()</tt>	Set our state to that obtained from the engworkerstate field of the job record.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L231'>writeStateToDB</a>()</tt>	Update the state in the job record with our local changes if any.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L273'>getEncoderNameFromKey</a>(key)</tt>	Given an encoder dictionary key get the encoder name.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L285'>getEncoderKeyFromName</a>(name)</tt>	Given an encoder name get the key.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L297'>getFieldContributions</a>()</tt>	Return the field contributions statistics.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L392'>getAllSwarms</a>(sprintIdx)</tt>	Return the list of all swarms in the given sprint.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L406'>getActiveSwarms</a>(sprintIdx)</tt>	Return the list of active swarms in the given sprint these are swarms.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L425'>getNonKilledSwarms</a>(sprintIdx)</tt>	Return the list of swarms in the given sprint that were not killed.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L442'>getCompletedSwarms</a>()</tt>	Return the list of all completed swarms.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L456'>getCompletingSwarms</a>()</tt>	Return the list of all completing swarms.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L470'>bestModelInCompletedSwarm</a>(swarmId)</tt>	Return the best model id and it's errscore from the given swarm.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L482'>bestModelInCompletedSprint</a>(sprintIdx)</tt>	Return the best model id and it's errscore from the given sprint.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L494'>bestModelInSprint</a>(sprintIdx)</tt>	Return the best model id and it's errscore from the given sprint which may still be in progress.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L517'>setSwarmState</a>(swarmId,newStatus)</tt>	Change the given swarm's state to 'newstate' if 'newstate' is.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L620'>anyGoodSprintsActive</a>()</tt>	Return true if there are any more good sprints still being explored.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L639'>isSprintCompleted</a>(sprintIdx)</tt>	Return true if the given sprint has completed.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L647'>killUselessSwarms</a>()</tt>	See if we can kill off some speculative swarms if an earlier sprint.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.HsState <a href=' /swarming/hypersearch/HsState.py#L753'>isSprintActive</a>(sprintIdx)</tt>	If the given sprint exists and is active return active=true.
<tt style='background-color:#E8E8E8;'> swarming.hypersearch.SwarmTerminator <a href=' /swarming/hypersearch/SwarmTerminator.py#L68'>recordDataPoint</a>(swarmId,generation,errScore)</tt>	Record the best score for a swarm's generation index x returns list of swarmids to terminate.
<tt style='background-color:#E8E8E8;'> encoders.RandomDistributedScalarEncoder <a href=' /encoders/random_distributed_scalar.py#L169'>_seed</a>(seed)</tt>	Initialize the random seed.
<tt style='background-color:#E8E8E8;'> encoders.RandomDistributedScalarEncoder <a href=' /encoders/random_distributed_scalar.py#L179'>getDecoderOutputFieldTypes</a>()</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.RandomDistributedScalarEncoder <a href=' /encoders/random_distributed_scalar.py#L184'>getWidth</a>()</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.RandomDistributedScalarEncoder <a href=' /encoders/random_distributed_scalar.py#L193'>getBucketIndices</a>(x)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.RandomDistributedScalarEncoder <a href=' /encoders/random_distributed_scalar.py#L215'>mapBucketIndexToNonZeroBits</a>(index)</tt>	Given a bucket index return the list of non-zero bits if the bucket.
<tt style='background-color:#E8E8E8;'> encoders.RandomDistributedScalarEncoder <a href=' /encoders/random_distributed_scalar.py#L237'>encodeIntoArray</a>(x,output)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.RandomDistributedScalarEncoder <a href=' /encoders/random_distributed_scalar.py#L253'>_createBucket</a>(index)</tt>	Create the given bucket index recursively create as many in-between.
<tt style='background-color:#E8E8E8;'> encoders.RandomDistributedScalarEncoder <a href=' /encoders/random_distributed_scalar.py#L282'>_newRepresentation</a>(index,newIndex)</tt>	Return a new representation for newindex that overlaps with the.
<tt style='background-color:#E8E8E8;'> encoders.RandomDistributedScalarEncoder <a href=' /encoders/random_distributed_scalar.py#L307'>_newRepresentationOK</a>(newRep,newIndex)</tt>	Return true if this new candidate representation satisfies all our overlap rules.
<tt style='background-color:#E8E8E8;'> encoders.RandomDistributedScalarEncoder <a href=' /encoders/random_distributed_scalar.py#L364'>_countOverlapIndices</a>(i,j)</tt>	Return the overlap between bucket indices i and j.
<tt style='background-color:#E8E8E8;'> encoders.RandomDistributedScalarEncoder <a href=' /encoders/random_distributed_scalar.py#L376'>_countOverlap</a>(rep1,rep2)</tt>	Return the overlap between two representations rep1 and rep2 are lists of.
<tt style='background-color:#E8E8E8;'> encoders.RandomDistributedScalarEncoder <a href=' /encoders/random_distributed_scalar.py#L389'>_overlapOK</a>(i,j,overlap)</tt>	Return true if the given overlap between bucket indices i and j are acceptable.
<tt style='background-color:#E8E8E8;'> encoders.RandomDistributedScalarEncoder <a href=' /encoders/random_distributed_scalar.py#L408'>_initializeBucketMap</a>(maxBuckets,offset)</tt>	Initialize the bucket map assuming the given number of maxbuckets.
<tt style='background-color:#E8E8E8;'> encoders.DateEncoder <a href=' /encoders/date.py#L223'>getScalarNames</a>(parentFieldName)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.DateEncoder <a href=' /encoders/date.py#L259'>getEncodedValues</a>(input)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.DateEncoder <a href=' /encoders/date.py#L331'>getScalars</a>(input)</tt>	See method description in :meth ~ nupic encoders base encoder getscalars.
<tt style='background-color:#E8E8E8;'> encoders.DateEncoder <a href=' /encoders/date.py#L345'>getBucketIndices</a>(input)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.DateEncoder <a href=' /encoders/date.py#L366'>encodeIntoArray</a>(input,output)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.CoordinateEncoder <a href=' /encoders/coordinate.py#L78'>getWidth</a>()</tt>	See nupic encoders base encoder for more information.
<tt style='background-color:#E8E8E8;'> encoders.CoordinateEncoder <a href=' /encoders/coordinate.py#L83'>getDescription</a>()</tt>	See nupic encoders base encoder for more information.
<tt style='background-color:#E8E8E8;'> encoders.CoordinateEncoder <a href=' /encoders/coordinate.py#L88'>getScalars</a>(inputData)</tt>	See nupic encoders base encoder for more information.
<tt style='background-color:#E8E8E8;'> encoders.CoordinateEncoder <a href=' /encoders/coordinate.py#L93'>encodeIntoArray</a>(inputData,output)</tt>	See nupic encoders base encoder for more information.
<tt style='background-color:#E8E8E8;'> encoders.CoordinateEncoder <a href=' /encoders/coordinate.py#L116'>_neighbors</a>(coordinate,radius)</tt>	Returns coordinates around given coordinate within given radius.
<tt style='background-color:#E8E8E8;'> encoders.CoordinateEncoder <a href=' /encoders/coordinate.py#L131'>_topWCoordinates</a>(cls,coordinates,w)</tt>	Returns the top w coordinates by order.
<tt style='background-color:#E8E8E8;'> encoders.CoordinateEncoder <a href=' /encoders/coordinate.py#L148'>_hashCoordinate</a>(coordinate)</tt>	Hash a coordinate to a 64 bit integer.
<tt style='background-color:#E8E8E8;'> encoders.CoordinateEncoder <a href=' /encoders/coordinate.py#L157'>_orderForCoordinate</a>(cls,coordinate)</tt>	Returns the order for a coordinate.
<tt style='background-color:#E8E8E8;'> encoders.CoordinateEncoder <a href=' /encoders/coordinate.py#L171'>_bitForCoordinate</a>(cls,coordinate,n)</tt>	Maps the coordinate to a bit in the sdr.
<tt style='background-color:#E8E8E8;'> encoders.GeospatialCoordinateEncoder <a href=' /encoders/geospatial_coordinate.py#L65'>getDescription</a>()</tt>	See nupic encoders base encoder for more information.
<tt style='background-color:#E8E8E8;'> encoders.GeospatialCoordinateEncoder <a href=' /encoders/geospatial_coordinate.py#L70'>getScalars</a>(inputData)</tt>	See nupic encoders base encoder for more information.
<tt style='background-color:#E8E8E8;'> encoders.GeospatialCoordinateEncoder <a href=' /encoders/geospatial_coordinate.py#L75'>encodeIntoArray</a>(inputData,output)</tt>	See nupic encoders base encoder for more information.
<tt style='background-color:#E8E8E8;'> encoders.GeospatialCoordinateEncoder <a href=' /encoders/geospatial_coordinate.py#L94'>coordinateForPosition</a>(longitude,latitude,altitude)</tt>	Returns coordinate for given gps position.
<tt style='background-color:#E8E8E8;'> encoders.GeospatialCoordinateEncoder <a href=' /encoders/geospatial_coordinate.py#L114'>radiusForSpeed</a>(speed)</tt>	Returns radius for given speed.
<tt style='background-color:#E8E8E8;'> encoders. <a href=' /encoders/base.py#L60'>_isSequence</a>(obj)</tt>	Helper function to determine if a function is a list or sequence.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L91'>getWidth</a>()</tt>	Should return the output width in bits.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L99'>encodeIntoArray</a>(inputData,output)</tt>	Encodes inputdata and puts the encoded value into the numpy output array which is a 1-d array of length returned by :meth.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L113'>setLearning</a>(learningEnabled)</tt>	Set whether learning is enabled.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L124'>setFieldStats</a>(fieldName,fieldStatistics)</tt>	This method is called by the model to set the statistics like min and max for the underlying encoders if this information is available.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L139'>encode</a>(inputData)</tt>	Convenience wrapper for :meth encodeintoarray.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L153'>getScalarNames</a>(parentFieldName)</tt>	Return the field names for each of the scalar values returned by getscalars.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L181'>getDecoderOutputFieldTypes</a>()</tt>	Returns a sequence of field types corresponding to the elements in the decoded output field array.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L206'>setStateLock</a>(lock)</tt>	Setting this to true freezes the state of the encoder this is separate from the learning state which affects changing parameters.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L215'>_getInputValue</a>(obj,fieldName)</tt>	Gets the value of a given field from the input record.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L236'>getEncoderList</a>()</tt>	:return a reference to each sub-encoder in this encoder they are.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L261'>getScalars</a>(inputData)</tt>	Returns a numpy array containing the sub-field scalar value s for each sub-field of the inputdata.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L294'>getEncodedValues</a>(inputData)</tt>	Returns the input in the same format as is returned by :meth.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L332'>getBucketIndices</a>(inputData)</tt>	Returns an array containing the sub-field bucket indices for each sub-field of the inputdata.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L356'>scalarsToStr</a>(scalarValues,scalarNames)</tt>	Return a pretty print string representing the return values from :meth.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L380'>getDescription</a>()</tt>	**must be overridden by subclasses **.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L396'>getFieldDescription</a>(fieldName)</tt>	Return the offset and length of a given field within the encoded output.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L418'>encodedBitDescription</a>(bitOffset,formatted)</tt>	Return a description of the given bit in the encoded output.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L455'>pprintHeader</a>(prefix)</tt>	Pretty-print a header that labels the sub-fields of the encoded output.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L477'>pprint</a>(output,prefix)</tt>	Pretty-print the encoded output using ascii art.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L493'>decode</a>(encoded,parentFieldName)</tt>	Takes an encoded output and does its best to work backwards and generate the input that would have generated it.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L592'>decodedToStr</a>(decodeResults)</tt>	Return a pretty print string representing the return value from :meth.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L613'>getBucketValues</a>()</tt>	**must be overridden by subclasses **.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L632'>getBucketInfo</a>(buckets)</tt>	Returns a list of :class encoderresult namedtuples describing the inputs.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L668'>topDownCompute</a>(encoded)</tt>	Returns a list of :class encoderresult namedtuples describing the.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L706'>closenessScores</a>(expValues,actValues,fractional)</tt>	Compute closeness scores between the expected scalar value s and actual scalar value s.
<tt style='background-color:#E8E8E8;'> encoders.Encoder <a href=' /encoders/base.py#L760'>getDisplayWidth</a>()</tt>	Calculate width of display for bits plus blanks between fields.
<tt style='background-color:#E8E8E8;'> encoders.SDRCategoryEncoder <a href=' /encoders/sdrcategory.py#L134'>_seed</a>(seed)</tt>	Initialize the random seed.
<tt style='background-color:#E8E8E8;'> encoders.SDRCategoryEncoder <a href=' /encoders/sdrcategory.py#L144'>getDecoderOutputFieldTypes</a>()</tt>	[encoder class virtual method override].
<tt style='background-color:#E8E8E8;'> encoders.SDRCategoryEncoder <a href=' /encoders/sdrcategory.py#L178'>_newRep</a>()</tt>	Generate a new and unique representation returns a numpy array.
<tt style='background-color:#E8E8E8;'> encoders.SDRCategoryEncoder <a href=' /encoders/sdrcategory.py#L210'>getScalars</a>(input)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.SDRCategoryEncoder <a href=' /encoders/sdrcategory.py#L227'>getBucketIndices</a>(input)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.SDRCategoryEncoder <a href=' /encoders/sdrcategory.py#L248'>decode</a>(encoded,parentFieldName)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.SDRCategoryEncoder <a href=' /encoders/sdrcategory.py#L279'>_getTopDownMapping</a>()</tt>	Return the interal _topdownmappingm matrix used for handling the bucketinfo() and topdowncompute() methods.
<tt style='background-color:#E8E8E8;'> encoders.SDRCategoryEncoder <a href=' /encoders/sdrcategory.py#L301'>getBucketValues</a>()</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.SDRCategoryEncoder <a href=' /encoders/sdrcategory.py#L307'>getBucketInfo</a>(buckets)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.SDRCategoryEncoder <a href=' /encoders/sdrcategory.py#L324'>topDownCompute</a>(encoded)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.SDRCategoryEncoder <a href=' /encoders/sdrcategory.py#L340'>closenessScores</a>(expValues,actValues,fractional)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.LogEncoder <a href=' /encoders/logenc.py#L117'>getDecoderOutputFieldTypes</a>()</tt>	Encoder class virtual method override.
<tt style='background-color:#E8E8E8;'> encoders.LogEncoder <a href=' /encoders/logenc.py#L124'>_getScaledValue</a>(inpt)</tt>	Convert the input which is in normal space into log space.
<tt style='background-color:#E8E8E8;'> encoders.LogEncoder <a href=' /encoders/logenc.py#L141'>getBucketIndices</a>(inpt)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.LogEncoder <a href=' /encoders/logenc.py#L155'>encodeIntoArray</a>(inpt,output)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.LogEncoder <a href=' /encoders/logenc.py#L173'>decode</a>(encoded,parentFieldName)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.LogEncoder <a href=' /encoders/logenc.py#L212'>getBucketValues</a>()</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.LogEncoder <a href=' /encoders/logenc.py#L228'>getBucketInfo</a>(buckets)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.LogEncoder <a href=' /encoders/logenc.py#L241'>topDownCompute</a>(encoded)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.LogEncoder <a href=' /encoders/logenc.py#L254'>closenessScores</a>(expValues,actValues,fractional)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.DeltaEncoder <a href=' /encoders/delta.py#L37'>__init__</a>(w,minval,maxval,periodic)</tt>	[scalarencoder class method override].
<tt style='background-color:#E8E8E8;'> encoders.DeltaEncoder <a href=' /encoders/delta.py#L95'>topDownCompute</a>(encoded)</tt>	[scalarencoder class method override].
<tt style='background-color:#E8E8E8;'> encoders.ScalarEncoder <a href=' /encoders/scalar.py#L259'>_initEncoder</a>(w,minval,maxval,n)</tt>	Helper function there are three different ways of thinking about the representation.
<tt style='background-color:#E8E8E8;'> encoders.ScalarEncoder <a href=' /encoders/scalar.py#L303'>_checkReasonableSettings</a>()</tt>	Helper function check if the settings are reasonable for sp to work.
<tt style='background-color:#E8E8E8;'> encoders.ScalarEncoder <a href=' /encoders/scalar.py#L310'>getDecoderOutputFieldTypes</a>()</tt>	[encoder class virtual method override].
<tt style='background-color:#E8E8E8;'> encoders.ScalarEncoder <a href=' /encoders/scalar.py#L342'>_getFirstOnBit</a>(input)</tt>	Return the bit offset of the first bit to be set in the encoder output.
<tt style='background-color:#E8E8E8;'> encoders.ScalarEncoder <a href=' /encoders/scalar.py#L391'>getBucketIndices</a>(input)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.ScalarEncoder <a href=' /encoders/scalar.py#L415'>encodeIntoArray</a>(input,output,learn)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.ScalarEncoder <a href=' /encoders/scalar.py#L465'>decode</a>(encoded,parentFieldName)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.ScalarEncoder <a href=' /encoders/scalar.py#L585'>_generateRangeDescription</a>(ranges)</tt>	Generate description from a text description of the ranges.
<tt style='background-color:#E8E8E8;'> encoders.ScalarEncoder <a href=' /encoders/scalar.py#L599'>_getTopDownMapping</a>()</tt>	Return the interal _topdownmappingm matrix used for handling the bucketinfo() and topdowncompute() methods.
<tt style='background-color:#E8E8E8;'> encoders.ScalarEncoder <a href=' /encoders/scalar.py#L635'>getBucketValues</a>()</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.ScalarEncoder <a href=' /encoders/scalar.py#L649'>getBucketInfo</a>(buckets)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.ScalarEncoder <a href=' /encoders/scalar.py#L671'>topDownCompute</a>(encoded)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.ScalarEncoder <a href=' /encoders/scalar.py#L685'>closenessScores</a>(expValues,actValues,fractional)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders. <a href=' /encoders/utils.py#L26'>bitsToString</a>(arr)</tt>	Returns a string representing a numpy array of 0's and 1's.
<tt style='background-color:#E8E8E8;'> encoders.SparsePassThroughEncoder <a href=' /encoders/sparse_pass_through_encoder.py#L62'>__init__</a>(n,w,name,forced)</tt>	N is the total bits in input.
<tt style='background-color:#E8E8E8;'> encoders.SparsePassThroughEncoder <a href=' /encoders/sparse_pass_through_encoder.py#L71'>encodeIntoArray</a>(value,output)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.CategoryEncoder <a href=' /encoders/category.py#L82'>getDecoderOutputFieldTypes</a>()</tt>	[encoder class virtual method override].
<tt style='background-color:#E8E8E8;'> encoders.CategoryEncoder <a href=' /encoders/category.py#L99'>getScalars</a>(input)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.CategoryEncoder <a href=' /encoders/category.py#L107'>getBucketIndices</a>(input)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.CategoryEncoder <a href=' /encoders/category.py#L131'>decode</a>(encoded,parentFieldName)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.CategoryEncoder <a href=' /encoders/category.py#L166'>closenessScores</a>(expValues,actValues,fractional)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.CategoryEncoder <a href=' /encoders/category.py#L186'>getBucketValues</a>()</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.CategoryEncoder <a href=' /encoders/category.py#L198'>getBucketInfo</a>(buckets)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.CategoryEncoder <a href=' /encoders/category.py#L212'>topDownCompute</a>(encoded)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.AdaptiveScalarEncoder <a href=' /encoders/adaptivescalar.py#L72'>_setEncoderParams</a>()</tt>	Set the radius resolution and range these values are updated when minval.
<tt style='background-color:#E8E8E8;'> encoders.AdaptiveScalarEncoder <a href=' /encoders/adaptivescalar.py#L106'>_setMinAndMax</a>(input,learn)</tt>	Potentially change the minval and maxval using input.
<tt style='background-color:#E8E8E8;'> encoders.AdaptiveScalarEncoder <a href=' /encoders/adaptivescalar.py#L143'>getBucketIndices</a>(input,learn)</tt>	[overrides nupic encoders scalar scalarencoder getbucketindices].
<tt style='background-color:#E8E8E8;'> encoders.AdaptiveScalarEncoder <a href=' /encoders/adaptivescalar.py#L162'>encodeIntoArray</a>(input,output,learn)</tt>	[overrides nupic encoders scalar scalarencoder encodeintoarray].
<tt style='background-color:#E8E8E8;'> encoders.AdaptiveScalarEncoder <a href=' /encoders/adaptivescalar.py#L177'>getBucketInfo</a>(buckets)</tt>	[overrides nupic encoders scalar scalarencoder getbucketinfo].
<tt style='background-color:#E8E8E8;'> encoders.AdaptiveScalarEncoder <a href=' /encoders/adaptivescalar.py#L189'>topDownCompute</a>(encoded)</tt>	[overrides nupic encoders scalar scalarencoder topdowncompute].
<tt style='background-color:#E8E8E8;'> encoders.MultiEncoder <a href=' /encoders/multi.py#L86'>addEncoder</a>(name,encoder)</tt>	Adds one encoder.
<tt style='background-color:#E8E8E8;'> encoders.MultiEncoder <a href=' /encoders/multi.py#L111'>getWidth</a>()</tt>	Represents the sum of the widths of each fields encoding.
<tt style='background-color:#E8E8E8;'> encoders.MultiEncoder <a href=' /encoders/multi.py#L135'>addMultipleEncoders</a>(fieldEncodings)</tt>	:param fieldencodings dict of dicts mapping field names to the field params dict.
<tt style='background-color:#E8E8E8;'> encoders.PassThroughEncoder <a href=' /encoders/pass_through_encoder.py#L52'>getDecoderOutputFieldTypes</a>()</tt>	[encoder class virtual method override].
<tt style='background-color:#E8E8E8;'> encoders.PassThroughEncoder <a href=' /encoders/pass_through_encoder.py#L66'>getScalars</a>(input)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.PassThroughEncoder <a href=' /encoders/pass_through_encoder.py#L71'>getBucketIndices</a>(input)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.PassThroughEncoder <a href=' /encoders/pass_through_encoder.py#L76'>encodeIntoArray</a>(inputVal,outputVal)</tt>	See method description in base py.
<tt style='background-color:#E8E8E8;'> encoders.PassThroughEncoder <a href=' /encoders/pass_through_encoder.py#L93'>decode</a>(encoded,parentFieldName)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.PassThroughEncoder <a href=' /encoders/pass_through_encoder.py#L104'>getBucketInfo</a>(buckets)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.PassThroughEncoder <a href=' /encoders/pass_through_encoder.py#L109'>topDownCompute</a>(encoded)</tt>	See the function description in base py.
<tt style='background-color:#E8E8E8;'> encoders.PassThroughEncoder <a href=' /encoders/pass_through_encoder.py#L115'>closenessScores</a>(expValues,actValues)</tt>	Does a bitwise compare of the two bitmaps and returns a fractonal value between 0 and 1 of how similar they are.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/stats.py#L34'>pickByDistribution</a>(distribution,r)</tt>	Pick a value according to the provided distribution.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/stats.py#L58'>Indicator</a>(pos,size,dtype)</tt>	Returns an array of length size and type dtype that is everywhere 0 except in the index in pos.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/stats.py#L78'>MultiArgMax</a>(x)</tt>	Get tuple actually a generator of indices where the max value of array x occurs.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/stats.py#L98'>Any</a>(sequence)</tt>	Returns true if any element of the sequence satisfies true.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/stats.py#L112'>All</a>(sequence)</tt>	Returns true if all elements of the sequence satisfy true and x.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/stats.py#L125'>Product</a>(sequence)</tt>	Returns the product of the elements of the sequence.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/stats.py#L144'>MultiIndicator</a>(pos,size,dtype)</tt>	Returns an array of length size and type dtype that is everywhere 0 except in the indices listed in sequence pos.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/stats.py#L166'>Distribution</a>(pos,size,counts,dtype)</tt>	Returns an array of length size and type dtype that is everywhere 0 except in the indices listed in sequence pos.
<tt style='background-color:#E8E8E8;'> math.ConditionalProbabilityTable2D <a href=' /math/stats.py#L206'>__init__</a>(rowHint,ncols)</tt>	Constructs a new empty histogram with no rows or columns.
<tt style='background-color:#E8E8E8;'> math.ConditionalProbabilityTable2D <a href=' /math/stats.py#L223'>numRows</a>()</tt>	Gets the number of rows in the histogram.
<tt style='background-color:#E8E8E8;'> math.ConditionalProbabilityTable2D <a href=' /math/stats.py#L234'>grow</a>(rows,cols)</tt>	Grows the histogram to have rows rows and cols columns.
<tt style='background-color:#E8E8E8;'> math.ConditionalProbabilityTable2D <a href=' /math/stats.py#L270'>updateRow</a>(row,distribution)</tt>	Add distribution to row row.
<tt style='background-color:#E8E8E8;'> math.ConditionalProbabilityTable2D <a href=' /math/stats.py#L287'>inferRow</a>(distribution)</tt>	Computes the sumprop probability of each row given the input probability of each column.
<tt style='background-color:#E8E8E8;'> math.ConditionalProbabilityTable2D <a href=' /math/stats.py#L304'>inferRowEvidence</a>(distribution)</tt>	Computes the probability of evidence given each row from the probability of evidence given each column.
<tt style='background-color:#E8E8E8;'> math.ConditionalProbabilityTable2D <a href=' /math/stats.py#L326'>inferRowCompat</a>(distribution)</tt>	Equivalent to the category inference of zeta1 toplevel.
<tt style='background-color:#E8E8E8;'> math.ConditionalProbabilityTable2D <a href=' /math/stats.py#L342'>clean_outcpd</a>()</tt>	Hack to act like clean_outcpd on zeta1 toplevelnode.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/dist.py#L31'>logFactorial</a>(x)</tt>	Approximation to the log of the factorial function.
<tt style='background-color:#E8E8E8;'> math.DiscreteDistribution <a href=' /math/dist.py#L73'>sample</a>(rgen)</tt>	Generates a random sample from the discrete probability distribution and returns its value and the log of the probability of sampling that value.
<tt style='background-color:#E8E8E8;'> math.MultinomialDistribution <a href=' /math/dist.py#L106'>logProbability</a>(distn)</tt>	Form of distribution must be an array of counts in order of self keys.
<tt style='background-color:#E8E8E8;'> math.PoissonDistribution <a href=' /math/dist.py#L132'>sample</a>(rgen)</tt>	Generates a random sample from the poisson probability distribution and returns its value and the log of the probability of sampling that value.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/logarithms.py#L28'>lscsum</a>(lx,epsilon)</tt>	Accepts log-values as input exponentiates them computes the sum then converts the sum back to log-space and returns the result.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/logarithms.py#L70'>lscsum0</a>(lx)</tt>	Accepts log-values as input exponentiates them sums down the rows first dimension then converts the sum back to log-space and returns the result.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/logarithms.py#L109'>normalize</a>(lx)</tt>	Accepts log-values as input exponentiates them normalizes and returns the result.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/logarithms.py#L126'>nsum0</a>(lx)</tt>	Accepts log-values as input exponentiates them sums down the rows first dimension normalizes and returns the result.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/logarithms.py#L144'>lnsum0</a>(lx)</tt>	Accepts log-values as input exponentiates them sums down the rows first dimension normalizes then converts the sum back to.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/logarithms.py#L164'>logSumExp</a>(A,B,out)</tt>	Returns log(exp a + exp b a and b are numpy arrays.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/logarithms.py#L177'>logDiffExp</a>(A,B,out)</tt>	Returns log(exp a - exp b a and b are numpy arrays values in a should be.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/cross.py#L25'>cross_list</a>()</tt>	From http //book opensourceproject org cn/lamp/python/pythoncook2/opensource/0596007973/pythoncook2-chp-19-sect-9 html.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/cross.py#L34'>cross</a>()</tt>	From http //book opensourceproject org cn/lamp/python/pythoncook2/opensource/0596007973/pythoncook2-chp-19-sect-9 html.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/cross.py#L53'>dcross</a>()</tt>	Similar to cross(), but generates output dictionaries instead of tuples.
<tt style='background-color:#E8E8E8;'> math.DiscreteProposal <a href=' /math/proposal.py#L207'>propose</a>(current,r)</tt>	Generates a random sample from the discrete probability distribution and returns its value the log of the probability of sampling that value and the.
<tt style='background-color:#E8E8E8;'> math.PoissonProposal <a href=' /math/proposal.py#L262'>propose</a>(current,r)</tt>	Generates a random sample from the poisson probability distribution with with location and scale parameter equal to the current value passed in.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/roc_utils.py#L43'>ROCCurve</a>(y_true,y_score)</tt>	Compute receiver operating characteristic roc note this implementation is restricted to the binary classification task.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/roc_utils.py#L140'>AreaUnderCurve</a>(x,y)</tt>	Compute area under the curve auc using the trapezoidal rule parameters.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/roc_utils.py#L195'>_test</a>()</tt>	This is a toy example to show the basic functionality the dataset is.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/topology.py#L27'>coordinatesFromIndex</a>(index,dimensions)</tt>	Translate an index into coordinates using the given coordinate system.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/topology.py#L56'>indexFromCoordinates</a>(coordinates,dimensions)</tt>	Translate coordinates into an index using the given coordinate system.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/topology.py#L81'>neighborhood</a>(centerIndex,radius,dimensions)</tt>	Get the points in the neighborhood of a point.
<tt style='background-color:#E8E8E8;'> math. <a href=' /math/topology.py#L122'>wrappingNeighborhood</a>(centerIndex,radius,dimensions)</tt>	Like 'neighborhood', except that the neighborhood isn't truncated when it's near an edge.
