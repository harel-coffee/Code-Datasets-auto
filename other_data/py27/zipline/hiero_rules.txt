arg	to be executed during ||| cls	count=1
function	load ||| load market	count=1
function	a given portfolio of ||| batch order	count=1
arg	[arg_1] data_query_tz ||| [arg_2] [arg_1]	count=3
class	to persist ||| mutable index rolling	count=1
module_class	the [class_2] ||| [module_1] [class_2]	count=17
class	percentile bounds are ||| percentile filter	count=1
arg	kwargs passed [arg_2] ||| [arg_2] [arg_1]	count=3
function	to be executed ||| class callback	count=1
function	extra ||| handle extra	count=1
module	tradingcontrol to be checked ||| core	count=1
function_arg	convert [function_1] [arg_2] ||| utils [function_1] tuple [arg_2]	count=2
class	pipeline ||| pipeline	count=1
function	current data ||| current	count=1
function	weights ||| order target percent	count=1
class	the magnitude ||| size	count=1
function	accountcontrol ||| account control	count=2
function	of the generator ||| get generator	count=2
module	will be ||| core	count=1
function_arg	[function_1] data ||| [function_1] column close_locs [arg_2]	count=4
function	stop price for ||| stop price	count=2
function	position ||| find position	count=1
function	the current ||| current	count=1
arg	an ||| expected	count=1
function	[function_1] rows to ||| [function_2] [function_1]	count=3
function	[function_1] a window ||| [function_2] [function_1]	count=1
arg	time and ||| upper time	count=1
function	set a limit ||| set	count=3
arg	datetimes in [arg] ||| [arg] start end	count=2
function	[function] change ||| [function]	count=3
function	[function_1] the adjustment ||| [function_2] [function_1]	count=2
class	construct a new factor ||| factor	count=1
class	where this factor ||| factor	count=1
function_arg	last traded [arg_2] ||| [function_1] [arg_2]	count=1
class	the asset's start date ||| date bounds	count=1
class	to a sqlite file ||| sqlite	count=1
class	values where this factor ||| factor	count=1
function	[function] chain ||| [function]	count=2
function	given ||| percent	count=1
function	[function_1] overwrites ||| [function_2] [function_1]	count=3
function	dividend [function_2] ||| [function_2] [function_1]	count=1
function	last traded dt from ||| last traded dt	count=1
function_arg	[function_1] the viewpoint ||| [function_1] asset dt [arg_2]	count=5
function_arg	[function_1] [arg_2] of ||| [function_1] [arg_2]	count=20
function	a function ||| function	count=1
arg	lower ||| expr lower	count=1
function	to be ||| add	count=1
function	[function_1] split-adjusted-asof-date ||| [function_1] [function_2]	count=3
function_arg	[function_1] the given ||| [arg_2] [function_1]	count=4
arg	columns of ||| columns	count=1
function	[function_1] type ||| [function_2] [function_1]	count=2
function	adjustment ||| adjustment	count=1
function	set the values ||| set	count=1
function	array with the ||| array	count=1
function	adjustments that ||| adjustments from deltas with	count=1
function	window ||| window params	count=1
function	dir and a sqlite ||| files	count=1
function_arg	[function_1] a bcolzdailybarwriter ||| [function_1] [arg_2]	count=2
function_arg	return uniformly-distributed ||| values shape	count=1
arg	the zipline ||| environ	count=2
arg	the dt the ||| dt	count=1
function_arg	[function_1] filling ||| [function_1] expr lower [arg_2]	count=5
arg	the given shape ||| shape first_value	count=1
class	ensure that [class_1] [class_2] ||| pipeline filters [class_1] [class_2]	count=1
module	calculate the ||| data	count=1
function_arg	[function_1] of ||| [function_1] [arg_2]	count=8
module	given start and end ||| utils calendars	count=2
function	open an ||| open	count=1
function	following column names ||| load bars	count=1
function	trigger implementation for ||| trigger	count=1
module	pipeline ||| pipeline loaders blaze	count=1
function	given portfolio ||| order	count=1
function	close of ||| close	count=2
function	resource columns required to ||| required estimates	count=1
function_arg	[function_1] asset's ||| [function_1] [arg_2]	count=1
function	return [function_2] ||| [function_1] [function_2]	count=4
arg	with ||| name	count=1
module_class	[module_1] [class_2] ||| [module_1] data [class_2]	count=1
function	axes ||| verify indices	count=1
function	the frame expected by ||| to session frame	count=1
class	of columns to adjustments ||| estimates loader	count=1
function_arg	compute [arg_2] ||| [function_1] arrays [arg_2]	count=3
class	magnitude ||| size	count=1
function	the version ||| version	count=1
function	pragma foreign_keys state of ||| pragma	count=1
class	that should ||| events loader	count=1
function	[function_1] particular sid ||| [function_2] [function_1]	count=3
function	tz-aware timestamp ||| naive	count=1
class	be executed during ||| zipline test	count=1
module	store the ||| finance	count=1
arg	be exited ||| context_manager	count=1
arg	pandas categorical ||| categorical	count=1
function_arg	session [arg_2] ||| [function_1] column close_locs [arg_2]	count=1
function	patch pandas ||| patch	count=1
arg	to a callable ||| to	count=1
function_arg	name [arg_2] ||| [function_1] op op [arg_2]	count=1
function	given portfolio ||| percent	count=1
function_arg	[function_1] given ||| [function_1] sid [arg_2]	count=2
function_arg	[function_1] path ||| [arg_2] [function_1]	count=6
class	orders towards a given ||| trading algorithm	count=1
function	download data from a ||| download without	count=1
arg	value with the values ||| value	count=1
function	portfolio ||| order target	count=1
function	single equity ||| single equity	count=1
arg	time and [arg_2] ||| [arg_2] [arg_1]	count=1
arg	[arg] can ||| [arg]	count=3
function	be executed during teardown ||| instance	count=1
arg	internal method that ||| adjustments_dict table_name	count=1
function	returns the last ||| get last	count=1
arg	out, in format format ||| out format_ include_asset_exists	count=1
class	estimates data [class_2] ||| [class_1] [class_2]	count=2
function	returns the last traded ||| get last traded	count=1
function	[function_1] is sorted ||| [function_2] [function_1]	count=2
function	[function_1] with the ||| [function_2] [function_1]	count=3
function	with [function_2] ||| utils dumps [function_1] [function_2]	count=1
function	[function_1] overwrites ||| [function_1] [function_2]	count=3
arg	path as a timestamp ||| path	count=2
module_class	[module_1] in ||| [module_1] [class_2]	count=2
class	to ||| case	count=1
arg	of the window is ||| assets	count=1
class	[class] that ||| [class]	count=1
function	a tradingenvironment or assetfinder [function_1] [function_2] ||| utils dumps [function_1] [function_2]	count=1
module	retrieve nat with the ||| utils	count=1
class	expression strings and ||| expression	count=1
function	index of ||| index	count=1
function	be executed ||| callback	count=1
function	target [function] ||| order target [function]	count=3
function	dtype ||| dtype	count=2
function	there is a capital ||| capital	count=1
function	all the minutes for ||| minutes for	count=1
class	place ||| algorithm	count=1
arg	of sids ||| sids	count=2
module	construct ||| pipeline factors	count=5
arg	a backtest for ||| ctx algofile algotext define	count=1
function	of benchmark returns ||| benchmark returns	count=2
function	and close [function_2] ||| [function_1] for [function_2]	count=1
function	last [function_2] ||| [function_2] [function_1]	count=5
arg	target ||| target regression_length	count=1
module_class	assets [class_2] ||| [module_1] [class_2]	count=2
function	collect all overwrites that ||| collect overwrites	count=1
function_arg	columns required [arg_2] ||| [arg_2] [function_1]	count=1
class	restrictions of which ||| union restrictions	count=2
function	dataframe of trade ||| make trade	count=1
function	register a new accountcontrol ||| register account	count=1
arg	the get_calendar method ||| force	count=1
function	the last [function_2] ||| [function_1] [function_2]	count=5
function	all the adjustments that ||| adjustments	count=2
class	return from self ||| term	count=1
class	classifier} ||| mixin	count=1
function	minute data into ||| minute to	count=1
arg	array to ||| array	count=2
function_arg	mean from [arg_2] ||| [function_1] [arg_2]	count=4
module_class	[module_1] [class_2] to be paid on ||| [module_1] [class_2]	count=5
class	latest minute on or ||| continuous future session bar	count=1
arg	of assets ||| assets	count=1
function_arg	time [arg_2] ||| [function_1] [arg_2]	count=6
class	handle_data on the ||| trading algorithm	count=1
function	compute our result with ||| compute	count=1
module	locations where we ||| lib	count=2
function	from ||| predicate	count=1
class	this graph ||| term graph	count=1
function	bundle ||| bundle	count=1
function	the given calendar and ||| data	count=1
function	and ||| data	count=1
function_arg	create a 2d numpy [function_1] [arg_2] containing ||| boolean [function_1] [arg_2]	count=3
class	of commission ||| commission model	count=1
function	apply ||| apply async	count=2
function	close of the ||| market close	count=1
arg	end of the window ||| assets dts	count=1
class	one based ||| algorithm	count=1
function	args ||| args	count=1
module	a ||| utils	count=1
arg	creates trade_count trades for ||| sim_params env trading_calendar	count=1
function	pragma foreign_keys ||| pragma	count=1
function_arg	[function_1] [arg_2] ||| [function_1] to graph [arg_2]	count=1
function_arg	[function_1] this ||| [arg_2] [function_1]	count=8
function_arg	this sid [arg_2] ||| [arg_2] [function_1]	count=1
module	a pair of blaze ||| blaze	count=1
function	columns ||| estimates fields	count=1
arg	a float64multiply [arg_2] ||| [arg_2] [arg_1]	count=4
function	for ||| dates for	count=1
function	returns from yahoo ||| returns	count=1
function	[function_1] a url ||| [function_1] yahoo index [function_2]	count=1
function	with [function_2] ||| [function_2] [function_1]	count=1
function	handles the close ||| market close	count=1
arg	row in the ||| mask	count=1
class	the ||| computable term	count=2
function_arg	whether or not [function_1] [arg_2] ||| [function_1] [arg_2]	count=2
function	event for each ||| event	count=1
module	teardownclass ||| testing	count=1
arg	this order ||| is_buy	count=2
function	a subtest in ||| subtest	count=1
function	with tokenized representations ||| with persistent ids	count=1
function	merge adjustments for a ||| merge	count=1
function	close of ||| handle market close	count=1
function	orders towards a given ||| target percent	count=1
module	return from self downsample() ||| pipeline	count=1
arg	register a callback ||| cls callback	count=1
arg	of symbols ||| symbols	count=1
arg	beginning with [arg] and ||| [arg]	count=1
function	and return the data ||| data	count=1
function	[function_1] with the ||| [function_1] [function_2]	count=3
class	bcolz equity [class_2] ||| [class_1] [class_2]	count=1
module_class	[module_1] pricing ||| [module_1] usequity [class_2]	count=1
arg	from a url ||| url	count=1
function_arg	operator methods [arg_2] ||| [arg_2] [function_1]	count=6
function	futures ||| commodity future	count=1
function	last ||| last	count=2
arg	the writer if provided ||| asset_info price_start price_step_by_date	count=1
function	[function_1] both dividend ||| [function_2] [function_1]	count=1
class	of the ||| trading	count=1
module	given start ||| calendars	count=2
arg	a mask ||| mask	count=1
function	the sessions ||| sessions	count=2
function	[function_1] [function_2] ||| [function_2] [function_1] v b	count=2
arg	subcls ||| subcls	count=1
function	from the given ||| get	count=1
class	[class] given ||| [class]	count=3
function_arg	[function_1] [arg_2] == true ||| [function_1] [arg_2]	count=2
function	builds a [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] existing rootdir ||| [function_1] [arg_2]	count=1
arg	[arg_1] to cls ||| pipeline term pop params [arg_2] [arg_1]	count=3
module	loads price data ||| data	count=1
function	to the simplex ||| simplex	count=1
function	download data ||| download	count=1
function	array containing the raw ||| raw expected	count=1
function	frame ||| frame	count=1
function_arg	[function_1] [arg_2] for the columns in ||| [function_1] [arg_2]	count=1
arg	to path ||| path	count=1
function	either ||| spot	count=1
function_arg	asset for [arg_2] ||| [function_1] sid [arg_2]	count=1
function	[function_1] containing adjustments ||| [function_1] [function_2]	count=1
function	to the version ||| write version	count=1
function	format a [function_2] ||| [function_1] yahoo index [function_2]	count=3
function_arg	sid at [arg_2] ||| [arg_2] [function_1]	count=1
function	the last traded ||| last traded	count=1
function	towards a given ||| batch	count=1
function	time range [function_2] ||| [function_2] query in [function_1]	count=1
module	the temporary directory to ||| utils	count=1
function_arg	[function_1] relative ||| [function_1] [arg_2]	count=3
module	by the [module_2] ||| [module_1] [module_2]	count=4
module	to be called according ||| core	count=1
module	sets the ||| assets	count=1
function_arg	[function_1] of adjustments ||| [arg_2] [function_1]	count=4
function	[function_1] sessions ||| [function_1] [function_2]	count=5
arg	[arg_1] [arg_2] can be used by ||| [arg_2] [arg_1]	count=7
arg	to be executed ||| cls	count=1
function	utc [function_2] ||| utils [function_2] [function_1]	count=1
function	columns required ||| required estimates	count=1
function	collect all the adjustments ||| adjustments from deltas	count=2
function	date for which symbols ||| date	count=1
function_arg	quarter [arg_2] ||| [function_1] idx [arg_2]	count=4
function	the adjustments that occur ||| adjustments from	count=1
class	sessions ||| trading calendar	count=1
function	the last traded ||| last traded dt	count=1
function	frame expected by a ||| frame	count=1
function	register a ||| add class callback	count=1
module	the first trading ||| data	count=1
function_arg	index of [arg_2] ||| [function_1] dts [arg_2]	count=1
function	the percentile ||| percentile	count=1
function	show a [function_2] ||| [function_1] [function_2]	count=1
function	first [function] last ||| normalize [function] query	count=1
function	with corresponding ||| special	count=1
function	a given portfolio ||| batch	count=1
function	order by ||| order	count=1
function	type to return from ||| type	count=1
function	a batch ||| batch order	count=1
function	trade ||| make trade	count=1
function	between 0 and 100 ||| int	count=1
function	asset [function_2] ||| [function_1] [function_2]	count=4
function	[function_1] for that ||| [function_1] [function_2]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] expr lower [arg_2]	count=20
function	of the open and ||| open and	count=1
arg	the index [arg] split-adjusted-asof-date falls ||| [arg]	count=1
class	new factor that ||| factor	count=1
arg	the order's ||| fill_price order	count=1
function	constructor ||| from span	count=1
function	and the ||| data	count=1
function_arg	download data [arg_2] ||| [function_1] [arg_2]	count=2
function	get a series ||| get	count=1
function_arg	pipelineloader that [function_1] [arg_2] for the columns in ||| [function_1] [arg_2]	count=1
function	that a window ||| window params	count=1
arg	add entries ||| col_to_overwrites next_qtr_start_idx last_per_qtr quarters_with_estimates_for_sid	count=1
class	track ||| trading	count=1
function	given ||| batch order	count=1
function	session ||| session	count=5
function	a given ||| batch order	count=1
function_arg	[function_1] pandas categorical ||| [function_1] [arg_2]	count=1
function	dtype? ||| represent dtype	count=1
function	include while computing ||| mask	count=1
function	is a subclass ||| is subclass	count=3
module	exception [module] ||| [module]	count=1
module	self ||| pipeline	count=2
arg	either by raising ||| amount	count=1
arg	the given dt ||| dt	count=1
function_arg	a calendar with ||| calendar name	count=1
arg	the columns of events ||| events columns	count=1
function	yahoo finance ||| yahoo	count=2
arg	[arg] __new__ ||| [arg]	count=3
function	write both dividend ||| write dividend	count=3
function_arg	the value [arg_2] ||| [arg_2] [function_1]	count=5
function_arg	a window [arg_2] ||| [arg_2] [function_1]	count=3
class	created and/or ||| test	count=1
module_class	to be [class_2] ||| [module_1] [class_2]	count=8
module	of sids ||| assets	count=1
function	towards ||| batch order target percent	count=1
class	teardownclass ||| case	count=1
function_arg	name of [arg_2] ||| [function_1] op op [arg_2]	count=1
function	build a ||| format	count=1
function_arg	close of [arg_2] ||| [function_1] [arg_2]	count=1
arg	for term after ||| term refcounts	count=1
function_arg	compute a [arg_2] ||| [function_1] arrays [arg_2]	count=3
arg	for f from a ||| f	count=1
class	[class_1] are ||| pipeline filters [class_1] [class_2]	count=3
function	the corresponding session labels ||| session labels	count=1
function	[function_1] [function_2] v0 v1 ||| [function_1] [function_2]	count=1
arg	order ||| order transaction cost_per_unit	count=1
arg	the columns ||| columns	count=1
function	overwrite dates ||| overwrite	count=1
class	estimates data for ||| estimates loader	count=1
module	data with adjustments ||| data	count=1
arg	an option ||| option	count=1
class	pipeline results into ||| pipeline	count=1
module_class	of [class_2] ||| [module_1] [class_2]	count=8
function	all the adjustments that ||| adjustments from deltas with	count=1
function	previous ||| previous	count=6
arg	signature [arg] ||| [arg]	count=3
arg	filling from values that ||| upper checkpoints	count=1
function	the sessions in ||| sessions in	count=2
function	to the version table ||| version	count=1
function_arg	an tradingcalendar [arg_2] ||| [arg_2] [function_1]	count=1
arg	the dt the ||| assets dt	count=1
function	of trade data ||| make trade data	count=2
arg	if the order ||| order transaction cost_per_unit initial_commission	count=1
arg	to use getattr ||| name attrs	count=1
function	any splits for the ||| splits	count=1
class	executed during ||| test	count=1
function	timestamp field [function_2] ||| [function_2] [function_1]	count=1
function	compute a lifetimes ||| compute root mask	count=1
arg	count ||| count	count=3
class	term that computes from ||| computable term	count=1
module_class	the [class_2] ||| [module_1] [class_2] dir getpath	count=1
class	of our position to ||| position	count=1
arg	f ||| f	count=1
class	by delegating ||| mixin	count=1
arg	ratio ||| asset ratio	count=1
module	dates around some ||| loaders	count=1
function	load all of ||| load	count=1
function_arg	asset for [arg_2] ||| [function_1] [arg_2]	count=1
class	a given portfolio ||| trading	count=1
arg	information about the failure ||| datetime metadata	count=1
function_arg	[function_1] length window_length ||| [arg_2] [function_1]	count=4
function	sessions in ||| sessions in	count=1
function_arg	the name [arg_2] ||| [arg_2] [function_1]	count=1
arg	to use getattr instead ||| name attrs	count=1
function_arg	in [arg_2] ||| [function_1] index [arg_2]	count=1
function	close ||| market close	count=1
module	is greater than the ||| finance	count=1
class	latest minute on ||| continuous	count=1
function	[function_1] for ||| expected [function_2] [function_1] asset_id date colname	count=1
function	[function_1] [function_2] data from this module ||| [function_2] [function_1]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] column close_locs [arg_2]	count=4
module	delegating to ||| pipeline	count=1
function	load perform ||| load	count=1
arg	if ||| asset amount	count=1
function	the split ||| handle split	count=1
function	which the adjustment at ||| adjustment	count=1
class	be ||| zipline	count=1
class	[class_1] [class_2] given ||| [class_1] [class_2]	count=6
function_arg	message for [arg_2] ||| [arg_2] [function_1]	count=2
arg	sid in sids ||| sids	count=1
function	dividend ||| dividend	count=1
class	compute this term ||| computable term	count=1
class	for the ||| trading algorithm	count=1
module	an int64index of ||| assets	count=1
function	[function] a ||| naive [function]	count=2
arg	checks the callable_ ||| callable_	count=1
function	return an 2d array ||| bar values 2d	count=1
arg	convenience ||| inputs window_length center_of_mass	count=1
class	date ||| date	count=1
function	the ||| downsampled	count=1
function	dataframe with minute ||| minute frame	count=1
function	a number of minutes ||| minutes	count=1
arg	*exactly once* on ||| asset amount portfolio algo_datetime	count=1
function	a given portfolio ||| batch order target	count=1
module	before calling the ||| utils	count=1
arg	and the [arg] ||| assets [arg]	count=1
class	this factor that ||| factor	count=1
function_arg	[function_1] [arg_2] and ||| [function_1] dts [arg_2]	count=3
function	[function_1] the split-adjusted-asof-date ||| [function_1] [function_2]	count=3
arg	be executed during teardownclass ||| cls	count=1
function	calendar by type ||| calendar type	count=1
class	to the cache ||| cache	count=1
arg	a calendar ||| calendar	count=1
class	self downsample() ||| computable term	count=1
function	iterable of sources ||| sources	count=1
function	be executed during ||| class	count=1
class	to be executed ||| zipline test	count=1
function	retrieve the value at ||| value	count=1
class	the start of ||| trading	count=1
function	generator ||| generator	count=1
class	the [class_2] ||| [class_2] [class_1]	count=1
module	function ||| utils	count=2
function	to be ||| class	count=1
arg	order hasn't had ||| order transaction	count=1
function	a given ||| target percent	count=1
function	register an ||| register	count=1
function	orders towards a ||| batch order	count=1
module	the state of this ||| finance performance	count=2
function	[function_1] price for ||| [function_1] [function_2]	count=6
module	this object ||| finance	count=1
class	asset ||| asset finder	count=1
function	towards a given portfolio ||| batch order target	count=1
function	a ||| batch order target	count=1
module	[module] that ||| [module]	count=6
function	string representations of ||| parse date str	count=1
function	executed ||| add class callback	count=2
arg	dates ||| dates assets mask	count=1
function	dataframe with minute ||| minute frame to session	count=1
arg	[arg_1] pred ||| [arg_1] [arg_2]	count=1
function	prices to ||| price to penny	count=1
module	factor ||| pipeline factors	count=6
function	active at the time ||| active	count=1
function	cancel all open ||| cancel all	count=1
function	the stop ||| stop	count=1
module_class	assets in ||| assets asset	count=1
function	calendar ||| register calendar	count=1
module	a function before calling ||| utils	count=1
class	of our position ||| position	count=1
function	until [function_2] ||| [function_2] [function_1]	count=2
function_arg	subclass [arg_2] ||| [arg_2] [function_1]	count=1
arg	nested dictionary ||| current_date_func asset_finder	count=1
function	minutes in ||| minutes in	count=2
function	self downsample() ||| downsampled	count=1
arg	input as a numpy ||| ndarray_or_adjusted_array	count=1
function	[function_1] returns ||| [function_2] [function_1]	count=5
function	is a ||| is	count=1
function	[function] the ||| [function] max order	count=1
function	[function_1] [function_2] ||| [function_2] asof split [function_1]	count=6
function	around some data query ||| query	count=1
class	during teardownclass ||| test case	count=1
class	previous ||| trading calendar	count=3
function	close ||| handle market close	count=1
function	event for ||| event	count=2
function	data ||| data	count=8
arg	of the window ||| assets	count=1
arg	the index [arg] ||| [arg]	count=3
arg	value with [arg_2] ||| utils getattrs [arg_1] [arg_2]	count=1
arg	a new key ||| key	count=1
arg	pop entries [arg_1] [arg_2] on the values ||| [arg_2] [arg_1]	count=2
class	registered tradingcontrol ||| control	count=1
function	all the adjustments ||| adjustments	count=2
function	value of the desired ||| get adjusted value	count=1
module	by [module] ||| [module]	count=3
module	load ||| pipeline loaders blaze	count=1
function	10 year [function] rates from ||| get daily 10yr [function]	count=1
function	epoch ||| epoch	count=1
function	a context manager that ||| context	count=1
function	determines ||| idx	count=2
class	a new factor ||| factor	count=2
arg	create a specifier for ||| root_symbol_str offset	count=1
class	for ||| bar	count=1
function_arg	v0 v1 [function_1] [arg_2] v1 == true ||| [function_1] [arg_2]	count=1
arg	given dt ||| assets dt	count=1
module	an [module] triple ||| [module]	count=1
module_class	[module_1] position ||| [module_1] [class_2]	count=9
arg	if the order ||| order transaction	count=1
arg	is well-defined on data ||| data	count=1
function	of minutes ||| minutes	count=1
arg	term after computation ||| term	count=1
function	both dividend [function_2] ||| [function_2] [function_1]	count=1
arg	given expectations ||| expected_args expect_starargs expect_kwargs	count=1
arg	option ||| option	count=1
module_class	cash [class_2] ||| [module_1] [class_2] earn	count=3
function	get the ||| get	count=3
module	of this ||| finance performance	count=3
function	rows to ||| rows	count=1
class	the result of ||| result	count=1
arg	backtest for the given ||| ctx algofile algotext define	count=1
function	prices ||| prices	count=1
class	sqlite file to be ||| sqlite	count=1
function	of trade data for ||| make trade data for	count=1
arg	the order hasn't had ||| order transaction cost_per_unit	count=1
function	columns required to serve ||| required	count=1
class	safe to persist ||| mutable index rolling	count=1
arg	creates trade_count trades ||| sim_params env trading_calendar	count=1
function	adjustment at the given ||| adjustment	count=1
function	portfolio of ||| batch order target	count=1
module	be called according ||| core	count=1
function	sid ||| sid	count=2
arg	self from target ||| target regression_length mask	count=1
function	teardownclass ||| add	count=1
module	set of sids ||| assets	count=1
arg	directory for all ||| environ	count=1
function	index of ||| sorted index	count=1
function	[function_1] time of ||| [function_2] [function_1]	count=2
function	as the ||| as ts	count=1
class	expression strings ||| numerical expression	count=1
function	[function_1] after the ||| [function_2] [function_1]	count=2
function_arg	[function_1] term ||| [arg_2] [function_1]	count=1
function	an tradingcalendar whose ||| get calendar	count=1
arg	span ||| span	count=1
function	[function_1] adjustments with ||| [function_2] [function_1]	count=2
function	returns the ||| get	count=1
function	inputs for the ||| inputs for	count=2
function	teardownclass ||| class	count=1
function	given time range ||| range	count=1
class	next ||| trading calendar	count=2
function	load benchmark returns ||| load	count=1
function	session label returns the ||| session	count=1
function	prices to two ||| round price to penny	count=1
function	builds a [function_2] ||| [function_2] [function_1]	count=1
arg	callback to be ||| callback	count=1
module	new tradingcontrol to be ||| core	count=1
function	load a ||| load	count=1
function	dividends that should ||| dividends	count=1
function	[function_1] utc ||| [function_2] [function_1]	count=1
function_arg	[function_1] (e ||| utils make [function_1] [arg_2]	count=1
class	ensure that [class_1] [class_2] ||| [class_1] [class_2]	count=1
arg	fall before the lower ||| expr lower	count=1
function	methods ||| methods	count=1
arg	on ||| op	count=3
arg	label return ||| session_label	count=1
function	value [function_2] ||| [function_2] [function_1]	count=2
function	a configuration object ||| create test zipline	count=1
arg	values such [arg_2] ||| [arg_1] [arg_2]	count=1
arg	lower ||| lower	count=1
module	dataset that has a ||| pipeline loaders	count=1
function	query ||| query	count=3
class	on this array ||| adjusted array	count=1
function	or returns a dataset ||| new dataset	count=1
function_arg	[function_1] serve columns ||| [function_1] [arg_2]	count=3
function	since [function] ||| dt to [function]	count=1
function	the last traded dt ||| get last traded dt	count=1
arg	an asset and ||| asset	count=1
arg	[arg_1] [arg_2] ||| [arg_1] [arg_2]	count=104
function	either ||| get spot	count=1
class	our position ||| max position	count=1
module	state of this ||| finance	count=2
function	towards ||| target	count=1
class	of which the ||| union	count=1
module_class	the cash [class_2] ||| [module_1] [class_2] earn	count=3
arg	[arg_1] and tz ||| [arg_2] [arg_1]	count=1
arg	treasury yield curves for ||| trading_day trading_days bm_symbol	count=1
function	given portfolio ||| batch	count=1
function	split adjustments with ||| split adjustments with	count=3
function	the expression type to ||| type	count=1
arg	of the ||| assets	count=2
class	whether [class] is a ||| [class]	count=1
class	return from self ||| computable term	count=1
function	url for ||| url	count=1
function	[function_1] returns from ||| [function_1] [function_2]	count=5
function_arg	compute [arg_2] ||| [function_1] arrays dates assets [arg_2]	count=1
arg	[arg_1] if the ||| [arg_2] [arg_1]	count=2
function	when the simulation ||| handle simulation end	count=1
arg	the failure ||| datetime metadata	count=1
arg	url returning a bytesio ||| url	count=1
arg	[arg_1] price ||| [arg_2] [arg_1]	count=6
arg	ownershipperiods from ||| key_from_row value_from_row	count=1
function	[function_1] [function_2] ||| [function_1] [function_2]	count=1434
class	factor that computes self ||| factor	count=1
class	that our [class] string has ||| numerical [class]	count=1
function_arg	[function_1] to order ||| [arg_2] [function_1]	count=1
class	calendar [class_2] ||| [class_2] [class_1]	count=6
function	convert a pandas ||| to	count=1
module_class	list of [class_2] ||| [module_1] [class_2]	count=8
function	within the percentile ||| percentile	count=1
function	dict mapping to lists ||| ownership	count=1
arg	url returning a ||| url	count=1
arg	deprecated use ||| frequency	count=1
class	leverage in decimal form ||| max leverage	count=1
function	value for ||| value for	count=2
module	this ||| finance performance	count=2
function	futures testing data ||| commodity future	count=1
arg	two sets this ||| msg	count=1
function	sets the commission ||| commission	count=1
class	and ||| trading	count=2
function_arg	the root [arg_2] ||| [function_1] [arg_2]	count=4
class	place orders ||| trading	count=1
function	the limit ||| limit	count=1
arg	asset/date/column combination we generate ||| asset_info	count=1
function_arg	the asset [arg_2] ||| [arg_2] [function_1]	count=2
function	of extra rows needed ||| dependencies	count=1
module	dataset that has a ||| pipeline loaders blaze	count=1
function	the construction of the ||| get	count=1
arg	index [arg] ||| [arg]	count=3
function	[function_1] [function_2] ||| [function_2] query in [function_1]	count=7
arg	callback to be executed ||| cls callback	count=1
function	expected return [function_2] ||| [function_1] [function_2]	count=4
class	start date ||| date bounds	count=1
module	a factor ||| pipeline factors	count=1
arg	and return pricing ||| dts	count=1
function	the most ||| most	count=1
class	register ||| calendar dispatcher	count=1
arg	be ||| cls	count=1
function_arg	[function_1] relative to ||| [arg_2] [function_1]	count=6
arg	winsorized row ||| mask groupby	count=1
function	containing [function] values ||| [function] boolean	count=1
function	for the ||| create overwrites for	count=1
function	calendar [function_2] ||| [function_2] [function_1]	count=1
function	orders towards a given ||| order	count=1
arg	result ||| result	count=2
function	a tuple [function] a range ||| [function]	count=1
function	adjusting prices to two ||| price to penny	count=1
function	expression to ||| expression to	count=2
function	an 2d array ||| bar values 2d	count=1
function	or assetfinder [function] ||| dumps [function]	count=1
class	the given ||| trading algorithm	count=1
arg	to mark ||| msg stacklevel	count=1
function	fail if ||| validate	count=1
function	array with session ||| session	count=1
function	occur before the split-adjusted-asof-date ||| asof	count=1
function	of the pipeline that ||| pipeline	count=1
function	adjustments ||| adjustments from	count=2
function	a [function] of all ||| [function] between	count=1
function	calendar ||| trading calendar	count=3
function	range properly [function_2] ||| [function_2] query in [function_1]	count=1
function_arg	[function_1] given ||| [arg_2] [function_1]	count=5
function_arg	[function_1] of the ||| [function_1] [arg_2]	count=4
function	from self ||| downsampled	count=1
class	extra ||| execution plan	count=1
function	[function_1] rows of ||| [function_2] [function_1]	count=1
function	prices to two ||| to	count=1
arg	key [arg_2] ||| [arg_2] [arg_1]	count=1
function_arg	[function_1] values ||| [arg_2] [function_1]	count=2
function	to a computation date ||| compute	count=1
function_arg	window [arg_2] ||| [function_1] data [arg_2]	count=2
arg	zipline ||| environ	count=4
function	to return ||| to	count=1
arg	to a sqlite database ||| equities futures exchanges root_symbols	count=1
class	towards a given ||| algorithm	count=1
arg	row in ||| mask	count=1
arg	relative ||| paths environ	count=1
function	get the root ||| zipline root	count=1
module	of [module_2] ||| [module_1] [module_2]	count=1
arg	mask ||| arrays dates assets mask	count=1
function_arg	pipelineloader that [function_1] [arg_2] the columns in testingdataset ||| [function_1] loader [arg_2]	count=1
class	latest minute ||| continuous future session bar	count=1
function_arg	compute a [arg_2] ||| [function_1] arrays dates assets [arg_2]	count=1
module	given ||| utils calendars	count=5
module	from ||| pipeline	count=1
module	where we ||| lib	count=2
function	binary ||| binary	count=3
class	to be ||| zipline	count=1
arg	the values in attrs ||| attrs	count=1
function	overwrite dates [function_2] ||| [function_2] [function_1]	count=1
function	for ||| create overwrites for	count=1
class	to adjust a position ||| algorithm	count=1
arg	all elements of tup ||| tup	count=1
function	an 2d array containing ||| 2d	count=1
function	from yahoo into ||| load from yahoo	count=1
class	read by sqliteadjustmentreader ||| adjustment writer	count=1
module	pair of blaze ||| loaders blaze	count=1
function	for that ||| for	count=1
function_arg	[function_1] values ||| matching [function_1] [arg_2]	count=1
class	to be executed ||| test	count=1
function	[function_1] price ||| [function_2] [function_1]	count=7
function_arg	message [arg_2] ||| [arg_2] [function_1]	count=2
module	given start and ||| utils calendars	count=2
class	position ||| max position	count=1
function	of asset ||| asset	count=1
module	a list of ||| assets	count=1
function	[function_1] benchmark returns ||| [function_2] [function_1]	count=1
function	to be executed ||| add class	count=1
module	an [module] triple is ||| [module]	count=1
function	random ||| random	count=1
function	of center of ||| center of	count=1
class	iterator over the terms ||| term	count=1
function_arg	default zipline ||| default extension environ	count=1
function	towards a ||| batch order	count=1
class	output of this factor ||| factor	count=1
function_arg	pipelineloader [function_1] [arg_2] columns in testingdataset ||| [function_1] loader [arg_2]	count=1
class	collect ||| earnings estimates loader	count=1
function_arg	index of [arg_2] ||| [arg_2] [function_1]	count=1
function	the frame expected by ||| frame to session frame	count=1
function_arg	[function_1] an event ||| [function_1] trade protocol [arg_2]	count=1
function	ensure that there is ||| ensure	count=1
function_arg	extra rows [arg_2] ||| [arg_2] [function_1]	count=2
arg	data ||| data out	count=1
arg	suffix to ||| seq suffix	count=1
class	during ||| test case	count=2
function	orders ||| order target	count=1
function	an order in the ||| order percent	count=1
function	the sessions in that ||| sessions in	count=1
module_class	[module_1] and/or stock ||| [class_2] [module_1]	count=1
function	[function_1] by type ||| [function_1] [function_2]	count=2
function_arg	[function_1] given engine ||| [arg_2] [function_1]	count=1
module	during teardownclass ||| testing	count=1
arg	collects both overwrites and ||| group dates requested_qtr_data last_per_qtr	count=1
function_arg	matches the result ||| regex result	count=2
arg	a url ||| url	count=1
module	place orders towards ||| core	count=1
arg	name ||| name	count=1
function	number of seconds ||| seconds	count=1
arg	new key [arg_2] ||| [arg_1] [arg_2]	count=1
arg	self from target ||| target	count=1
function	parse a ||| parse	count=1
arg	at the given engine ||| engine	count=1
function	asymmetric rounding function ||| asymmetric round	count=1
function	that is the current ||| current	count=1
function	merge two ranges with ||| merge	count=1
module	of blaze ||| pipeline loaders blaze	count=1
arg	given shape ||| shape first_value	count=1
function_arg	price for [arg_2] ||| [function_1] [arg_2]	count=4
function	the open [function_2] ||| [function_2] [function_1]	count=5
function	towards a given portfolio ||| target	count=1
function_arg	[function_1] [arg_2] ||| [function_1] query in range [arg_2]	count=2
class	panel ||| panel	count=1
arg	the columns [arg_2] ||| [arg_2] [arg_1]	count=3
arg	of self each day ||| mask groupby	count=2
function	clean up ||| clean	count=1
arg	of adjustments ||| asset	count=1
function	towards a ||| batch order target	count=1
function	cache directory ||| cache	count=1
arg	[arg_1] desired version ||| [arg_1] [arg_2]	count=1
function	z-scores ||| zscore	count=1
class	towards ||| trading algorithm	count=2
class	calendar and an ||| trading calendar	count=2
module	dates around ||| pipeline loaders	count=1
function	from ||| from	count=2
function	orders towards a given ||| batch	count=1
function	if ||| if	count=1
class	[class] either ||| [class]	count=1
module	which symbols will be ||| core	count=1
arg	events ||| events	count=1
class	[class_1] [class_2] ||| pipeline [class_2] [class_1]	count=3
function	when the simulation ||| simulation end	count=1
function	a batch of ||| batch	count=1
function	return an 2d ||| bar values 2d	count=1
function_arg	between [arg_2] ||| [arg_2] [function_1]	count=1
class	whether [class] ||| [class]	count=1
class	with ||| with seeded random pipeline engine	count=1
function_arg	default [arg_2] ||| [arg_2] [function_1]	count=1
arg	way that "improves" the ||| prefer_round_down diff	count=1
arg	ingest command ||| bundle before after keep_last	count=1
function_arg	into [arg_2] ||| [arg_2] [function_1]	count=1
arg	callable_ to ||| callable_	count=1
function	metaclasses ||| with metaclasses	count=1
function	frame expected by ||| frame	count=1
arg	self each ||| groupby	count=2
function	adjusting prices to two ||| round price to	count=1
function	retrieves the future ||| future	count=1
function	that z-scores each ||| zscore	count=1
function	last traded ||| last traded	count=1
arg	a url returning a ||| url	count=1
class	the asset's start date ||| date	count=1
class	a factor ||| factor	count=3
function	calendar by [function_2] ||| [function_2] [function_1]	count=1
function	that are between ||| between time	count=1
arg	count + 1 that ||| count	count=1
function	a window ||| window params	count=1
function	the close ||| close	count=1
function	active at ||| active	count=1
function	set a limit on ||| set max	count=1
function	dataframe with minute ||| minute frame to	count=1
function	a url ||| url	count=1
function	download data from ||| download	count=1
function	[function_1] pairs ||| [function_1] [function_2] matching	count=1
arg	all its children ||| parents	count=1
function	executed ||| add class	count=1
class	order ||| max order	count=1
arg	dt is not ||| dt	count=1
function	towards a given portfolio ||| order	count=1
arg	convenience constructor ||| cls inputs window_length	count=3
function_arg	[function_1] tradingcontrolviolation either ||| [arg_2] [function_1]	count=1
function	columns required to ||| required	count=1
function	get the name of ||| name for	count=1
function	adjustments that [function_2] ||| [function_2] split [function_1]	count=1
module_class	[module_1] [class_2] ||| [module_1] usequity [class_2]	count=1
function	2d array containing cls ||| bar values 2d	count=1
class	with self seeded_random_engine ||| with seeded random pipeline engine	count=1
function	commission paid yet pay ||| calculate per unit commission	count=1
function	enter ||| enter	count=1
function	adjustments that occur in ||| adjustments from	count=1
function	towards ||| batch	count=1
function	for the ||| for	count=3
class	compute ||| pipeline engine	count=2
arg	converts the input into ||| func argname arg	count=2
function	[function_1] [function_2] ||| [function_2] data for asset [function_1]	count=2
class	values falling between the ||| percentile filter	count=1
function	[function_1] [function_2] from this module ||| [function_2] [function_1]	count=1
function	calculate initial ||| initial	count=1
function	last traded dt from ||| get last traded	count=1
class	sync ||| working dir	count=1
function	all overwrites ||| overwrites	count=1
arg	backtest for the given ||| before_trading_start analyze	count=1
arg	[arg_1] data_query_tz ||| [arg_1] [arg_2]	count=3
function	as the timestamp ||| as ts	count=1
arg	of size count ||| count	count=1
function	place orders towards ||| batch order target	count=1
module	store the cash ||| finance performance	count=2
function	dtype for the given ||| dtype	count=1
function_arg	db at [arg_2] ||| [function_1] [arg_2]	count=3
function	string representations of dates ||| date str	count=1
function	with minute ||| minute frame to	count=1
arg	uniformly-distributed dates in ||| shape	count=1
module	to return from self ||| pipeline	count=1
arg	the given testcase ||| testcase	count=1
arg	fall before the lower ||| lower	count=1
arg	[arg] where ||| [arg]	count=3
class	an ||| asset finder	count=1
function	making binary operator methods ||| reflected binary operator	count=1
arg	order hasn't had a ||| order transaction	count=1
function	raw ||| raw expected	count=1
class	to ||| computable term	count=2
function_arg	[function_1] ratio ||| [arg_2] [function_1]	count=2
arg	if the given ||| asset amount	count=1
function	limit price ||| limit price	count=4
function	yahoo finance for index ||| yahoo index	count=1
function	data for each ||| data for	count=2
class	previous ||| previous earnings estimates	count=1
class	[class_1] of ||| [class_2] [class_1]	count=2
function	the adjustments that ||| adjustments from deltas	count=2
function	[function_1] for index ||| [function_2] [function_1]	count=3
function	type ||| downsampled type	count=1
function	place orders ||| order target percent	count=1
arg	the order hasn't had ||| order	count=1
arg	reference_date_value ||| reference_date_value	count=2
arg	backtest ||| handle_data initialize before_trading_start analyze	count=1
class	expression ||| expression	count=3
arg	backtest for the given ||| initialize before_trading_start analyze	count=1
function	[function_1] [function_2] ||| [function_2] data for [function_1]	count=6
function	date for which ||| date	count=1
function	an 2d array containing ||| values 2d	count=1
function	to two places ||| to	count=1
function	trade data for each ||| trade data for	count=1
class	[class_1] position ||| [class_2] [class_1]	count=4
function	a window of ||| window params	count=1
function	asset info dataframe into ||| asset info	count=1
function	[function_1] the sessions ||| [function_1] [function_2]	count=5
function	[function_1] index ||| [function_1] [function_2]	count=2
function_arg	create a [function_1] [arg_2] containing ||| [function_1] [arg_2]	count=6
module_class	in [module_1] [class_2] list ||| [module_1] [class_2]	count=1
function	if each element ||| element	count=1
function	that a window of ||| window params	count=1
function	and ||| check	count=3
function	[function_1] adjustments ||| [function_1] [function_2]	count=4
arg	corresponding to reference_date_value ||| reference_date_value	count=1
function	teardown ||| add instance	count=1
arg	the end of the ||| assets dts	count=1
arg	order's ||| fill_price order	count=1
class	that should load the ||| events loader	count=1
function	bind a ||| bind	count=1
arg	a callback to be ||| callback	count=1
arg	backtest ||| initialize before_trading_start analyze	count=1
function	find ||| find	count=1
module	of [module_2] ||| [module_2] [module_1]	count=1
module	any parent directories needed ||| utils	count=1
arg	a mask of all ||| dates assets mask	count=1
arg	row in the input ||| arrays dates	count=1
function	load by ||| load adjusted	count=1
arg	g as a ||| g	count=1
function_arg	asset [arg_2] ||| [function_1] sid [arg_2]	count=1
function	an order ||| order	count=1
function	the sessions from the ||| sessions	count=1
module	be checked prior ||| core	count=1
function	the last traded dt ||| last traded	count=1
arg	mappings ||| mappings	count=1
arg	preprocessor that converts ||| func argname arg	count=2
module	to the arguments of ||| utils	count=1
class	teardownclass ||| test case	count=2
arg	draw g ||| g	count=1
function	[function_1] yahoo finance ||| [function_2] index [function_1]	count=2
function	the adjustments that ||| adjustments from	count=2
class	field's aggregation ||| daily history aggregator	count=2
function	adjusting prices to ||| to penny	count=1
function	return ||| downsampled	count=1
module	that has ||| pipeline loaders blaze	count=1
function	utils calendar ||| trading calendar	count=1
function	prices to ||| to	count=1
arg	each day ||| mask groupby	count=2
class	compute ||| engine	count=1
module	orders ||| core	count=1
function	to ||| class	count=1
class	to be ||| test	count=1
function	patch pandas read_csv ||| patch	count=1
function_arg	[function_1] uniformly-distributed dates ||| [arg_2] [function_1]	count=1
function	enter [function_2] ||| [function_2] [function_1]	count=2
function_arg	pipelineloader that [function_1] [arg_2] for the columns in ||| [function_1] loader [arg_2]	count=1
function	[function_1] time of ||| [function_1] [function_2]	count=2
function	numpy dtype ||| dtype	count=1
function	the current data in ||| current	count=1
module	that ||| pipeline loaders blaze	count=3
arg	operator ||| op left	count=1
function_arg	with session [arg_2] ||| [function_1] column close_locs [arg_2]	count=1
arg	float64multiply [arg_2] ||| [arg_1] [arg_2]	count=4
function	first axis ||| first axis	count=2
arg	the indicated assets ||| indexes stocks start end	count=1
function	resolve ||| resolve	count=1
module	self ||| pipeline factors	count=1
arg	time and [arg_2] ||| [arg_1] [arg_2]	count=1
function	until which ||| determine end	count=1
function	yahoo ||| yahoo	count=3
function	a ||| batch	count=1
class	a ||| trading algorithm	count=2
function_arg	rows [arg_2] ||| [function_1] [arg_2]	count=2
class	of strings ||| label array	count=1
class	to be ||| zipline test case	count=1
arg	float64multiply window for each ||| assets dts field is_perspective_after	count=1
class	exist at all ||| simple	count=1
module	for producing ||| pipeline factors	count=1
function	of the session ||| session	count=1
class	each registered tradingcontrol ||| control	count=1
arg	in dates ||| dates	count=1
arg	getattr ||| name attrs	count=1
class	executed during teardownclass ||| test case	count=1
arg	compute pipeline, providing values ||| start_session chunksize	count=1
function	equity ||| equity	count=1
function	minutes which should be ||| minutes	count=1
class	the cache ||| expiring cache	count=1
module	be resolved to their ||| core	count=1
function	convert the asset ||| asset	count=1
function	future ||| current future	count=1
arg	derived price ||| dividends stock_dividends	count=1
function	stop/limit [function] are reasonable ||| check stoplimit [function]	count=1
class	orders towards a given ||| trading	count=1
function	numpy array ||| ascending	count=1
function	[function_1] limit price ||| [function_1] [function_2]	count=1
function	of trade data ||| trade data	count=1
class	construct a factor ||| factor	count=3
function	datashape ||| datashape	count=1
function	exist ||| make simple	count=1
arg	mask of ||| assets mask	count=1
arg	writer if provided ||| asset_info price_start price_step_by_date	count=1
function	were alive at ||| only active	count=1
arg	[arg] as ||| [arg]	count=3
function_arg	a calendar [arg_2] ||| [function_1] [arg_2]	count=1
function	a calendar [function_2] ||| [function_2] [function_1]	count=1
arg	bundle ||| bundle assets_version show_progress	count=1
arg	range defined ||| max_percentile	count=1
class	executed during ||| case	count=1
module	given ||| calendars	count=13
function	a list ||| list	count=1
function	prices to two ||| price to penny	count=1
function	normalize ||| normalize	count=1
function	wiki metadata ||| format metadata	count=1
arg	of half life ||| halflife	count=1
function	wiki dataset ||| wiki	count=1
function	a given portfolio of ||| order	count=1
module	of a ||| utils	count=1
function	dir ||| files	count=1
function_arg	and the [arg_2] ||| [function_1] [arg_2]	count=2
function	to a computation ||| compute	count=1
function	and raises a ||| check	count=1
arg	[arg_1] [arg_2] be used by a ||| [arg_2] [arg_1]	count=4
function	lower-than-daily ||| downsample	count=1
arg	given ||| default_none	count=1
function	a dataset ||| dataset	count=1
class	new expression strings ||| numerical expression	count=1
function	this sid ||| sid	count=1
function	fail if the ||| validate	count=1
class	factor that fall within ||| factor	count=1
arg	of path as ||| path	count=2
class	towards a ||| trading	count=1
module	behavior of ||| assets	count=1
function	# of extra rows ||| extra rows	count=1
module	to return ||| pipeline	count=1
arg	size count + ||| session_label count	count=1
function	that returns the position ||| find position	count=1
module	arguments of a function ||| utils	count=1
arg	term ||| term	count=2
function	during ||| add class	count=1
function	required to serve ||| required estimates	count=1
module	downgrades assets ||| assets	count=1
function	that z-scores each day's ||| zscore	count=1
function	orders towards a given ||| target	count=1
function	compressed gzipped file ||| compressed	count=1
arg	input ||| arrays	count=1
class	exist at ||| simple	count=1
function	extra arguments ||| args	count=5
function_arg	handle a [arg_2] ||| [function_1] [arg_2]	count=3
class	algorithm ||| algorithm	count=2
function	returns the next close ||| next close	count=1
class	bcolz equity [class_2] ||| [class_2] [class_1]	count=1
class	for the ||| loader	count=1
class	to ||| zipline test	count=1
arg	the kwargs passed to ||| kwargs	count=1
function	[function_1] [function_2] ||| [function_1] idx for [function_2]	count=9
function	[function_1] traded ||| [function_1] [function_2]	count=4
arg	backtest for the ||| initialize before_trading_start analyze	count=1
function_arg	[function_1] [arg_2] ||| [function_1] price [arg_2]	count=1
function	split [function_2] ||| [function_1] [function_2]	count=7
function	[function_1] a treasury ||| [function_2] [function_1]	count=1
function	some data query ||| query	count=1
function	most ||| most	count=1
function_arg	[function_1] mask ||| [function_1] arrays dates assets [arg_2]	count=1
module_class	[module_1] working ||| [module_1] [class_2]	count=1
function_arg	window of [arg_2] ||| [function_1] data [arg_2]	count=3
function	collect all the adjustments ||| adjustments	count=2
arg	and tz ||| tz	count=1
function	get the limit price ||| get limit price	count=1
function	the first ||| first	count=1
function	dataset ||| new dataset	count=1
arg	and data_query_tz ||| data_query_tz	count=1
function	earned unpaid ||| pay	count=1
arg	n ||| n	count=2
function_arg	to repeat [arg_2] ||| [function_1] first axis array [arg_2]	count=4
class	bcolz equity ||| usequity	count=1
function	write a [function_2] ||| [function_1] [function_2]	count=2
function	compute a lifetimes ||| compute root	count=1
function	convert a timeseries into ||| to	count=1
arg	on a filter ||| op	count=1
class	[class_1] algorithm ||| [class_1] [class_2]	count=1
function	place orders ||| batch order target percent	count=1
module	percentiles ||| pipeline filters	count=1
function	dt returns the last ||| get last	count=1
function	futures testing ||| future	count=1
class	bcolz equity pricing ||| usequity pricing	count=2
function_arg	compute a [arg_2] ||| [arg_2] [function_1]	count=4
function_arg	[function_1] dts ||| [arg_2] [function_1]	count=1
arg	constructor ||| cls	count=4
function	format [function_2] ||| [function_1] yahoo index [function_2]	count=3
arg	the [arg] ||| assets [arg]	count=1
function	handle ||| handle violation	count=2
arg	given engine [arg_2] ||| [arg_2] [arg_1]	count=1
module_class	[module_1] array ||| [module_1] adjusted [class_2]	count=1
arg	pipeline, providing values for ||| start_session chunksize	count=1
function	extra rows needed for ||| dependencies	count=1
arg	attrs ||| attrs default	count=1
function	with session ||| session	count=1
function	[function_1] stop price ||| [function_2] [function_1]	count=1
arg	to serve columns ||| columns	count=1
arg	lower date ||| expr lower	count=1
module	[module] db by ||| [module]	count=1
function	to ||| numbers to	count=1
arg	dt from the viewpoint ||| data_frequency	count=1
class	symbol ||| trading algorithm	count=1
function	value [function_2] ||| [function_1] [function_2]	count=1
function	the value at ||| get value	count=1
module	containing the loaded data ||| data bundles	count=1
function	occur after [function_2] ||| [function_2] [function_1]	count=1
class	and/or [class_2] ||| [class_1] [class_2] earn	count=1
function	open ||| open	count=4
function_arg	[function_1] cls ||| [arg_2] [function_1]	count=3
function	sid at ||| sid	count=1
function_arg	from a [arg_2] ||| [arg_2] [function_1]	count=1
class	calendar ||| trading calendar	count=2
class	columns to adjustments ||| estimates loader	count=1
function	[function_1] context manager ||| [function_1] instance [function_2]	count=1
arg	two ||| msg path	count=1
arg	derived ||| dividends stock_dividends	count=1
function	a commission ||| commission	count=1
arg	in terms of span ||| span	count=1
function	the expected [function_2] ||| [function_2] [function_1]	count=5
function	order in the ||| order	count=1
module	function before calling the ||| utils	count=1
arg	for term after computation ||| term	count=1
function	close [function_2] ||| [function_2] [function_1]	count=1
arg	with the ingest command ||| bundle before after keep_last	count=1
arg	the data_query_time and ||| data_query_time	count=1
module	the state of the ||| finance	count=1
function	that day's ||| calculate dates	count=1
module	function before calling ||| utils	count=1
arg	dt the open ||| assets dt	count=1
function	data to load perform ||| load	count=1
function_arg	[function_1] on a ||| [arg_2] [function_1]	count=5
class	asset metadata to a ||| asset dbwriter	count=1
function	2d array ||| bar values 2d	count=1
class	terms ||| term	count=3
arg	float64multiply objects [arg] ||| [arg] dts	count=1
arg	given bundle ||| bundle	count=1
function	[function_1] normalize ||| [function_2] timestamp [function_1]	count=4
arg	end of ||| assets dts	count=2
function_arg	[function_1] ratio ||| [function_1] [arg_2]	count=2
arg	length window_length is ||| window_length	count=1
function_arg	to repeat [arg_2] ||| [arg_2] [function_1]	count=8
function	teardown ||| instance	count=2
function	builds ||| build	count=1
function	to ||| round price to	count=1
module	in a dataset that ||| pipeline loaders blaze	count=2
function	dataframe of trade data ||| trade data	count=1
function	pipeline [function_2] ||| [function_2] [function_1]	count=1
function	value of the desired ||| adjusted value	count=1
module	given percentiles ||| pipeline filters	count=1
function	returns all the minutes ||| minutes	count=1
function	axis ||| axis	count=2
function	pipeline that [function_2] ||| [function_2] [function_1]	count=1
class	checked on each ||| trading algorithm	count=1
function_arg	run [arg_2] ||| [function_1] [arg_2]	count=3
function	a utc ||| utc	count=1
function	update the timestamp field ||| timestamp	count=1
module	is ||| pipeline loaders	count=1
function	load ||| load adjusted array	count=2
arg	[arg_1] db table ||| [arg_2] [arg_1]	count=2
function	both dividend [function_2] ||| [function_1] [function_2]	count=1
function	a given portfolio of ||| batch	count=1
function	compute our result ||| compute	count=1
function	format expected ||| format	count=1
function	trade data [function_2] ||| [function_2] [function_1]	count=4
function	open [function_2] ||| [function_1] [function_2]	count=1
module	downgrade [module] db by ||| [module]	count=1
function	inputs [function_2] ||| [function_2] [function_1]	count=3
module	factor ||| factors	count=1
arg	of length window_length ||| window_length	count=1
class	format ||| frame loader	count=1
class	of ||| trading	count=1
arg	a given [arg_2] ||| [arg_2] [arg_1]	count=2
arg	to ||| cls	count=1
function_arg	the close [arg_2] ||| [arg_2] [function_1]	count=1
function	adjustments that ||| date adjustments	count=1
function	adjustments for [function_2] ||| [function_1] [function_2] sids	count=1
function	the raw ||| raw expected	count=1
class	towards a given ||| trading algorithm	count=1
module	if not ||| finance	count=1
function	place ||| batch order target	count=1
function	get ||| get	count=9
function	be executed during ||| add	count=1
function	portfolio of ||| target	count=1
arg	with [arg] and ending ||| [arg]	count=1
arg	be executed during ||| cls	count=1
function	[function_1] in ||| [function_1] [function_2]	count=4
arg	[arg_1] and tz ||| [arg_1] [arg_2]	count=1
arg	constructor for passing ||| cls	count=3
function	the future ||| current future	count=1
class	of columns to adjustments ||| earnings estimates loader	count=1
function	vectors [function] ||| [function]	count=2
function_arg	pipeline [arg_2] ||| [arg_2] [function_1]	count=1
function	orders towards ||| batch order target percent	count=1
function_arg	mean from row ||| demean mask groupby	count=1
module	is the ||| finance	count=2
function	an 2d ||| expected bar values 2d	count=1
function	futures testing ||| commodity future	count=1
class	self ||| computable term	count=2
function	indicating ||| element of	count=1
arg	values in attrs ||| attrs default	count=1
arg	[arg_1] [arg_2] be used by a ||| loaders validate column specs [arg_2] [arg_1]	count=4
class	from self ||| term	count=1
function	for [function_2] ||| [function_2] [function_1]	count=7
arg	check if a ||| a	count=1
arg	data_query_time and [arg_2] ||| [arg_1] [arg_2]	count=1
function	merge split [function_2] ||| [function_2] [function_1]	count=4
function	sid collect all overwrites ||| collect overwrites	count=1
class	make a term that ||| term	count=1
function_arg	[function_1] the order's ||| [arg_2] [function_1]	count=2
module	construct ||| factors	count=5
function	a given portfolio ||| order target percent	count=1
function	columns registered with ||| columns	count=1
function	[function_1] for each ||| [function_2] [function_1]	count=5
function	to be executed during ||| callback	count=1
function	show [function_2] ||| [function_1] [function_2]	count=1
function	prices to two places ||| to	count=1
function	towards a given portfolio ||| batch order	count=1
module	the ||| finance	count=4
function	creates a ||| to dict	count=3
arg	adjustments for a particular ||| all_adjustments_for_sid col_to_all_adjustments	count=1
arg	kwargs [arg_2] ||| [arg_2] [arg_1]	count=3
function_arg	operator methods on ||| operator op	count=2
module	dataset that ||| pipeline loaders blaze	count=2
function	given ||| batch order target	count=1
class	term [class_2] ||| [class_2] [class_1]	count=2
class	return the result ||| result	count=1
arg	calendar ||| calendar	count=1
function	to the version ||| version	count=1
arg	of the python magic ||| commute	count=1
arg	backtest for ||| before_trading_start analyze	count=1
function	the close of ||| handle market close	count=1
function_arg	[function_1] for this ||| [function_1] [arg_2]	count=8
function	dataframe with minute ||| minute	count=1
arg	backtest ||| ctx algofile algotext define	count=1
function	towards a given ||| order target percent	count=1
class	file to ||| working file	count=1
rep	the previous [function_arg_2] ||| [module_class_1] [function_arg_2]	count=4
function	load benchmark ||| load market	count=1
function	[function_1] sid ||| [function_1] [function_2]	count=12
function	with ||| with	count=2
arg	iterable of assets ||| assets	count=1
arg	the order ||| order transaction	count=1
function	collect all [function_2] ||| [function_2] [function_1]	count=10
class	orders towards ||| algorithm	count=1
module	calling the ||| utils	count=1
module	pricing data with ||| data	count=1
class	make a term ||| computable term	count=1
function	known value and ||| and	count=1
function	register a ||| class callback	count=1
class	gross leverage ||| max leverage	count=1
function	for this ||| for	count=1
function	add a ||| add	count=1
function	during teardownclass ||| add class	count=1
function	containing adjustments for ||| adjustments for	count=2
arg	suffix ||| seq suffix	count=1
function	constructor ||| from halflife	count=1
arg	[arg_1] if ||| [arg_2] [arg_1]	count=2
module	the quandl wiki ||| data bundles	count=1
function	binary ||| build binary	count=1
function	function to ||| schedule function	count=1
class	a ||| algorithm	count=1
function	path ||| path	count=3
class	a calendar ||| calendar dispatcher	count=1
arg	registers a ||| name calendar_type force	count=1
function	given time range properly ||| range	count=1
function	compute a like-shaped array ||| compute	count=1
arg	to mark a ||| msg stacklevel	count=1
function	raw [function] an ||| expected [function]	count=1
function	return dtype for the ||| return dtype	count=1
function_arg	[function_1] needed ||| [function_1] [arg_2]	count=5
class	price adjustment ||| sqlite adjustment	count=1
function	caches ||| caches	count=1
arg	algorithm_returns needs to ||| algorithm_returns	count=1
arg	numpy ||| __funcname	count=2
function	an order in ||| order	count=1
function	[function_1] with corresponding ||| [function_1] [function_2]	count=1
module	a pair of blaze ||| loaders blaze	count=1
function	for index ||| index	count=1
function	alternating ||| make alternating	count=1
function	modified [function_2] ||| [function_2] [function_1]	count=4
function	for adjusting prices to ||| to penny	count=1
function	orders towards ||| percent	count=1
class	trading_calendar used to read ||| bar reader	count=1
arg	column within each row ||| mask groupby	count=1
function_arg	repeat [arg_2] ||| [arg_2] [function_1]	count=8
function_arg	with session [arg_2] ||| [arg_2] [function_1]	count=1
arg	cannot take ||| on_error	count=1
class	amount of commission ||| commission model	count=1
function	ensure that we're going ||| ensure	count=1
function_arg	close [arg_2] ||| [function_1] [arg_2]	count=1
module	pair of blaze ||| blaze	count=1
arg	data a ||| data	count=1
module	that the [module_2] ||| [module_1] [module_2]	count=2
class	run ||| random pipeline engine	count=1
module	any parent ||| utils	count=1
function	paid yet pay ||| per unit	count=1
arg	[arg] v0 ||| [arg]	count=1
class	of commission to ||| commission	count=1
module_class	the [class_2] ||| [module_1] [class_2] restrictions	count=1
function_arg	[function_1] order's ||| [function_1] limit price [arg_2]	count=2
function	expression ||| expression	count=1
function	adjustments for a particular ||| adjustments for	count=1
function	data for each sid ||| data for	count=1
arg	convenience [arg_2] ||| [arg_2] [arg_1]	count=20
module	a dataset that ||| pipeline loaders blaze	count=2
arg	path as a ||| path	count=2
arg	the desired version ||| desired_version	count=1
class	before handle_data on the ||| trading	count=1
function	store missing values ||| missing	count=2
function_arg	[function_1] elem ||| [arg_2] [function_1]	count=1
arg	of events ||| events	count=1
function	the percentile ||| percentile between	count=1
arg	a dictionary of ||| d	count=1
class	the calendar ||| trading calendar	count=2
arg	result of transaction ||| transaction	count=1
arg	array based on ||| array	count=1
arg	a calendar for ||| name calendar	count=1
function	to data ||| get data	count=1
arg	functionally similar to ||| reason	count=1
class	and/or [class_2] ||| [class_2] [class_1]	count=1
function	retrieve asset types ||| lookup asset types	count=1
arg	columns of [arg_2] ||| loaders validate column specs [arg_2] [arg_1]	count=1
function	[function_1] all overwrites ||| [function_2] [function_1]	count=3
function	[function_1] [function_2] of a ||| [function_2] [function_1]	count=3
module_class	[module_1] order ||| [module_1] [class_2] init dt asset amount	count=1
class	[class_1] [class_2] max_shares ||| [class_2] [class_1]	count=2
arg	row of ||| mask groupby	count=1
class	to adjust ||| trading algorithm	count=1
function	convert ||| to	count=3
arg	register a ||| cls	count=1
arg	the lower date ||| lower	count=1
class	from self downsample() ||| term	count=1
function_arg	[function_1] backtest for ||| [function_1] [arg_2]	count=1
class	register ||| test case	count=2
arg	asset's [arg_2] ||| [arg_1] [arg_2]	count=1
module_class	[module_1] static ||| [module_1] [class_2] restrictions	count=1
arg	tz ||| tz	count=2
module	column ||| pipeline data	count=1
module	the data provided by ||| data	count=1
module_class	[module_1] factor that ||| [module_1] [class_2]	count=2
module	executed during teardownclass ||| testing	count=1
class	registered tradingcontrol object ||| control	count=1
arg	sorted ||| method ascending	count=1
class	one based on ||| algorithm	count=1
function	db at ||| downgrade	count=1
module	is in the ||| finance	count=1
function	the adjustment at the ||| adjustment	count=1
class	registered tradingcontrol ||| trading control	count=1
class	update the position by ||| position	count=1
arg	an existing rootdir ||| cls rootdir end_session	count=1
arg	a tradingcontrolviolation either ||| asset amount	count=1
function	is a [function_2] ||| [function_2] [function_1]	count=2
class	position by the ||| position	count=1
class	factor that fall ||| factor	count=1
function	the dividends ||| dividends	count=1
arg	backtest for the ||| ctx algofile algotext define	count=1
function	handles the close ||| close	count=1
class	the start of ||| trading algorithm	count=1
function	clear ||| clear	count=1
function	register ||| add class callback	count=2
arg	for this ||| is_buy	count=2
arg	is a float64multiply ||| dts field	count=1
function	[function_1] op ||| [function_1] name [function_2]	count=1
class	executed during ||| zipline test	count=1
function	yahoo finance [function_2] ||| [function_1] [function_2]	count=1
class	previous ||| previous earnings	count=1
function_arg	traded dt [arg_2] ||| [arg_2] [function_1]	count=2
function	[function_1] sessions from ||| [function_1] [function_2]	count=5
function	environment ||| environment	count=1
class	with ||| with seeded random pipeline	count=1
class	price adjustment ratios ||| adjustment	count=1
function_arg	[function_1] [arg_2] ||| [function_1] op op [arg_2]	count=8
arg	[arg] can be ||| [arg]	count=3
arg	a path ||| path	count=1
function	that z-scores ||| zscore	count=1
function	list ||| list	count=1
class	magnitude of our position ||| position size	count=1
function_arg	[function_1] shape ||| boolean [function_1] [arg_2]	count=1
class	factor that computes ||| factor	count=1
arg	pipeline, providing values ||| start_session chunksize	count=1
class	estimates data ||| earnings estimates	count=1
function	[function_1] in ||| [function_2] [function_1]	count=4
class	executed ||| zipline	count=1
class	expression [class_2] ||| [class_2] [class_1]	count=2
arg	adds a suffix to ||| seq suffix	count=1
class	of which ||| union	count=1
function	returns a list ||| get adjustment list	count=1
class	the [class_2] ||| [class_1] [class_2]	count=1
function	schedules a function to ||| schedule function	count=1
arg	from target ||| target regression_length mask	count=1
class	exist ||| simple pipeline	count=1
class	downsample() ||| term	count=1
function	returns from ||| returns	count=1
function	handles the close of ||| close	count=1
function	orders towards a ||| order	count=1
module	of a function before ||| utils	count=1
function	the ratios ||| ratios	count=1
class	result ||| result	count=1
function	utc ||| utc	count=2
class	allowed leverage ||| max leverage	count=1
function	to return from ||| downsampled	count=1
function	the first axis ||| first axis	count=2
function_arg	[function_1] shape ||| [function_1] [arg_2]	count=2
class	during teardownclass ||| zipline test case	count=1
module	the [module_2] ||| [module_1] [module_2]	count=10
function	url for querying ||| url	count=1
class	this [class] is well-formed ||| [class]	count=1
function	to return from self ||| downsampled	count=1
function	given portfolio of ||| batch	count=1
function	executed during teardownclass ||| class callback	count=1
function	invert a dictionary into ||| invert	count=1
function	pairs ||| pairs	count=1
function	[function_1] [function_2] from this module ||| data [function_2] [function_1]	count=1
function	in ||| in sorted	count=1
function	to be executed during ||| class	count=1
module	for [module_1] [module_2] ||| [module_1] [module_2]	count=4
function	portfolio ||| order	count=1
arg	given ||| dt	count=4
function_arg	[function_1] array of ||| [arg_2] [function_1]	count=1
function	to ||| to penny	count=1
function_arg	[function_1] directory ||| [function_1] [arg_2]	count=3
arg	dates ||| dates	count=3
function	format [function_2] ||| [function_1] [function_2]	count=3
function	capital ||| capital	count=1
arg	specifier ||| root_symbol_str offset	count=1
arg	baseline ||| baseline	count=1
arg	a mask of all ||| assets mask	count=1
arg	dts that ||| dts	count=1
function	terms of center of ||| center of	count=1
function	a given ||| batch	count=1
function	the stop [function_2] ||| [function_1] [function_2]	count=2
function	download [function] 10 year ||| [function] 10yr treasury	count=1
function_arg	[function_1] a mask ||| [arg_2] [function_1]	count=1
module	a blaze ||| pipeline loaders blaze	count=1
function	first ||| first	count=1
function	[function_1] event ||| [function_1] [function_2]	count=2
function	minute ||| minute frame to	count=1
function	of all ||| all	count=1
arg	if the order hasn't ||| order transaction	count=1
function	the stop price ||| stop price	count=2
function	[function_1] pairs ||| [function_2] [function_1]	count=1
function_arg	[function_1] be cancelled? ||| [arg_2] [function_1]	count=2
function	to ||| price to penny	count=1
function	message for ||| message	count=1
function	url [function_2] ||| [function_2] index [function_1]	count=1
function	to ||| round price to penny	count=1
function_arg	repeat [arg_2] ||| [function_1] first axis array [arg_2]	count=4
class	executed ||| zipline test	count=1
function	be ||| class callback	count=2
module	blaze expression ||| blaze	count=1
function	[function_1] after the ||| [function_2] asof split [function_1]	count=1
function	corresponding session labels ||| minute index to session labels	count=1
class	that this algorithm ||| trading algorithm	count=1
function	to two ||| price to	count=1
function	[function_1] data for ||| [function_1] [function_2]	count=4
class	panel that is ||| panel	count=1
function	for adjusting prices to ||| round price to	count=1
function	progress ||| progress	count=1
arg	use getattr instead ||| name attrs	count=1
module	by the given label ||| utils calendars	count=1
function	at [function_2] ||| [function_1] [function_2]	count=1
function	applied for [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] trigger implementation ||| [function_2] [function_1]	count=2
function	[function_1] than the ||| [function_1] [function_2]	count=1
function	of tuples ||| tuples	count=1
function	adjusting prices to two ||| to	count=1
class	not safe to persist ||| mutable index rolling	count=1
function_arg	[function_1] [arg_2] of ||| [function_1] asset dt [arg_2]	count=20
function	[function_1] overwrites that ||| [function_1] [function_2]	count=3
class	this algorithm ||| algorithm	count=1
class	a ||| test	count=1
function	representing data to load ||| load	count=1
function	split [function_2] ||| [function_2] [function_1]	count=11
arg	[arg_1] field at ||| [arg_2] [arg_1]	count=2
function	to two places in ||| price to	count=1
function	adjusting prices to two ||| price to	count=1
function	repeat ||| repeat	count=2
function	merge split adjustments with ||| merge split adjustments with	count=1
function	previous session ||| previous session	count=1
class	file ||| working file	count=1
arg	for term after ||| term	count=1
function	the minutes [function_2] ||| [function_2] [function_1]	count=9
class	argument ||| argument	count=1
class	to compute this term ||| computable term	count=1
function	frame expected by a ||| frame to session frame	count=1
class	restrictions [class_2] ||| [class_2] [class_1]	count=8
class	each registered tradingcontrol object ||| control	count=1
function	handles the close ||| handle market close	count=1
function	the raw values ||| raw expected values	count=1
function	a ||| order target percent	count=1
function	[function_1] of benchmark ||| [function_1] [function_2]	count=1
arg	if the given order ||| amount	count=1
arg	pop entries [arg_1] [arg_2] based on the values ||| pipeline term pop params [arg_2] [arg_1]	count=2
module	the start ||| data	count=1
arg	float64multiply window for ||| dts field is_perspective_after	count=1
function	accountcontrol to ||| account control	count=1
function	minute ||| minute frame to session	count=1
function	projection [function_2] ||| [function_2] [function_1] v b	count=2
function	last traded dt ||| last traded	count=1
arg	a cached object ||| key	count=1
function	arguments ||| args	count=6
module	do we ||| lib	count=1
module	[module_1] given ||| [module_1] [module_2]	count=4
function	to two places in ||| price to penny	count=1
function	configuration object that is ||| create test zipline	count=1
arg	ratio ||| ratio	count=1
arg	each row in ||| mask	count=1
function	columns required to serve ||| required estimates fields	count=1
function	to be ||| add class callback	count=1
function_arg	[function_1] zipline ||| [function_1] extension [arg_2]	count=1
arg	getattr instead ||| attrs	count=1
arg	a float64multiply window for ||| dts field is_perspective_after	count=1
arg	order hasn't ||| order transaction cost_per_unit initial_commission	count=1
class	with self seeded_random_engine ||| with seeded random pipeline	count=1
arg	there is a float64multiply ||| assets dts field	count=1
arg	called *exactly once* on ||| asset amount portfolio algo_datetime	count=1
module	a blaze ||| loaders blaze	count=1
function	invert a ||| invert	count=1
function	pipeline ||| run pipeline	count=1
class	our [class] ||| [class]	count=2
function	returns the previous open ||| previous open	count=1
class	place orders towards a ||| trading algorithm	count=1
module	for locations where we ||| lib	count=2
function	after ||| post	count=1
class	with self ||| with seeded random	count=1
class	a calendar ||| trading calendar	count=1
arg	suffix to word ||| word seq suffix	count=1
function	the pipeline ||| pipeline	count=1
function	calendar by type ||| register calendar type	count=3
arg	given shape ||| shape	count=1
function	occur after [function_2] ||| [function_1] [function_2]	count=1
function	timestamp to ||| to	count=1
function	executed ||| callback	count=1
function	batch of ||| batch	count=1
function	[function_1] subclass ||| [function_2] [function_1]	count=1
function	given portfolio of ||| order	count=1
module	be checked prior to ||| core	count=1
function	quarter ||| quarter	count=3
class	register a ||| test	count=1
arg	between start_date and end_date ||| start_date end_date	count=2
function	expression ||| downsampled	count=1
function	executed during ||| add class callback	count=1
arg	a dict of mappings ||| mappings	count=1
module_class	[module_1] allowed leverage ||| [module_1] [class_2]	count=2
class	position to ||| position	count=1
function	sources ||| sources	count=1
function	given ||| order target percent	count=1
class	of the [class_2] ||| [class_1] [class_2]	count=1
module	be executed during teardownclass ||| testing	count=1
class	register ||| trading calendar dispatcher	count=1
class	be executed during teardownclass ||| zipline test case	count=1
function	asset ||| asset	count=4
function	function ||| schedule function	count=1
function	given portfolio of ||| batch order target	count=1
class	a ||| case	count=1
function_arg	[function_1] on ||| [arg_2] [function_1]	count=5
function	dataframe of trade ||| trade	count=1
function	determines the date ||| idx	count=1
class	and an iterable of ||| trading	count=1
function	[function_1] forward ||| [function_2] query [function_1]	count=1
function	get the limit ||| get limit	count=2
function	[function_1] with ||| [function_2] [function_1]	count=3
function	an 2d array ||| values 2d	count=1
function	held ||| position size	count=1
module	symbols will be resolved ||| core	count=1
function	towards a ||| order	count=1
function	into ||| maybe from	count=1
function	all overwrites that should ||| overwrites	count=1
arg	place [arg_2] ||| [arg_2] target [arg_1]	count=1
module	the first ||| data	count=1
module	left side is ||| finance	count=1
class	to be executed during ||| zipline test	count=1
function	adjustments that occur in ||| adjustments	count=1
class	be executed during teardownclass ||| zipline	count=1
function	between ||| between time	count=1
function	function as deprecated ||| deprecated	count=1
module	a factor ||| factors	count=1
function	dataframe to [function_2] ||| [function_2] timestamp [function_1]	count=1
arg	window for each ||| is_perspective_after	count=1
module	the latest ||| data	count=1
arg	a float64multiply window for ||| assets dts field is_perspective_after	count=1
function	sorted ||| sorted	count=1
function	minute data into ||| minute	count=1
function	creates a dictionary representing ||| to dict	count=3
function	[function_1] split-adjusted-asof-date ||| [function_2] [function_1]	count=3
function	returns the position ||| find position	count=1
function	will ||| make test	count=1
module	to the arguments ||| utils	count=1
class	indicating whether [class] ||| [class]	count=1
module	is complete run the ||| finance performance	count=1
function	string representations of dates ||| parse date str	count=1
function	an interval [function] keyed ||| minute exclusion [function]	count=1
function	value and ||| and	count=1
function	format expected by ||| format	count=1
arg	graph g ||| g	count=1
function	symbol lookup maps ||| symbol maps	count=2
function	check that a window ||| check window params	count=1
function	type to return ||| type	count=1
function	a dataframe of trade ||| make trade	count=1
module	that has a sid ||| pipeline loaders	count=1
module	with the ||| loaders	count=2
arg	[arg] of ||| asset dt [arg]	count=3
arg	relative to ||| paths	count=2
function_arg	[function_1] a given ||| [arg_2] [function_1]	count=2
function	asymmetric rounding function ||| asymmetric round price	count=1
function	adjusting prices to two ||| to penny	count=1
function	show [function_2] ||| [function_2] [function_1]	count=1
arg	a specifier for ||| root_symbol_str offset	count=1
class	get ||| bar reader	count=2
function	the limit price ||| limit price	count=2
function	is [function_2] ||| [function_2] [function_1]	count=2
class	be executed during teardownclass ||| case	count=1
function	version table ||| write version	count=1
function_arg	[function_1] binary operator ||| [arg_2] [function_1]	count=5
function	returns ||| load data	count=1
function	and raises a standard ||| check data query	count=1
function_arg	provided query [arg_2] ||| [arg_2] [function_1]	count=3
function	index ||| index	count=2
arg	calendar for retrieval ||| calendar	count=1
function_arg	than the [arg_2] ||| [function_1] limit price [arg_2]	count=1
function	string representations ||| str	count=1
module	data to ||| data	count=1
function	sids ||| daily trade source	count=1
function	a pandas timestamp ||| ensure timestamp	count=1
arg	create a specifier ||| root_symbol_str offset	count=1
arg	standard set ||| equities futures exchanges root_symbols	count=1
function	write [function_2] ||| [function_2] [function_1]	count=4
function	[function] pipelineloader ||| [function] seeded random	count=1
arg	sid in sids list ||| sids	count=1
arg	of all ||| dates assets	count=1
class	persist ||| mutable index rolling	count=1
function	the first [function] last ||| normalize [function] query	count=1
function	[function_1] range ||| [function_2] [function_1]	count=1
function	expression [function_2] ||| [function_2] [function_1]	count=1
function	to be executed ||| add class callback	count=1
module	symbols will be ||| core	count=1
function	querying yahoo finance for ||| yahoo	count=1
function	teardownclass ||| callback	count=1
class	and stock ||| tracker	count=1
function_arg	return uniformly-distributed integers ||| values shape	count=1
function	2d array ||| 2d	count=1
function	pragma ||| pragma	count=1
function	close of [function_2] ||| [function_2] [function_1]	count=1
class	estimates data for the ||| estimates loader	count=1
function	the next [function_2] ||| [function_1] [function_2]	count=3
arg	self each day ||| groupby	count=2
function	[function_1] occur after ||| [function_2] asof [function_1]	count=1
arg	path as ||| path	count=2
arg	dates ||| dates assets	count=1
function	version table ||| version	count=1
function_arg	convert a tuple [function_1] [arg_2] ||| utils [function_1] tuple [arg_2]	count=1
class	calendar ||| calendar dispatcher	count=1
arg	algorithm_returns needs ||| algorithm_returns sim_params	count=1
class	of ||| union	count=1
arg	such that pred ||| pred	count=1
class	and/or stock ||| position tracker	count=1
function	the adjustments that occur ||| adjustments	count=1
function	open and [function_2] ||| [function_1] [function_2]	count=4
function_arg	[function_1] quarter boundary ||| [function_1] [arg_2]	count=12
function	containing the raw ||| raw	count=1
function	binary [function_2] ||| [function_2] [function_1]	count=2
function	percent ||| percent	count=1
class	a calendar ||| calendar	count=1
function	columns required to ||| required estimates fields	count=1
function	[function_1] benchmark returns ||| [function_1] [function_2]	count=1
class	[class] is ||| [class]	count=1
class	indicating whether [class] is ||| [class]	count=1
function	is a capital ||| calculate capital	count=1
arg	algorithm_returns needs to be ||| algorithm_returns sim_params	count=1
class	[class_1] [class_2] either self max_shares ||| [class_2] [class_1]	count=2
function	to lists ||| ownership map	count=1
function	run a ||| run	count=2
function	api [function_2] ||| [function_2] [function_1]	count=1
class	by ||| mixin	count=1
function	subtest in a unittest ||| subtest	count=1
function	into ||| to	count=1
class	be executed ||| case	count=1
module	a function ||| utils	count=1
module	to be checked ||| core	count=1
class	[class_1] [class_2] payments to be paid ||| [class_1] [class_2] earn	count=1
module	that has a sid ||| pipeline loaders blaze	count=1
function	[function_1] window of ||| [function_1] [function_2]	count=1
function	collect split [function_2] ||| [function_1] asof [function_2]	count=4
class	compute ||| simple pipeline engine	count=1
function	the given calendar ||| data	count=1
function	session ||| minute index to session	count=1
arg	fail if the ||| amount portfolio algo_datetime	count=3
class	the terms ||| term	count=1
function_arg	window [arg_2] ||| [function_1] [arg_2]	count=1
class	of ||| trading algorithm	count=2
class	order ||| trading algorithm	count=3
class	time calendar and an ||| trading calendar	count=1
arg	[arg_1] to cls ||| [arg_2] [arg_1]	count=3
function_arg	root [arg_2] ||| [function_1] [arg_2]	count=5
module	an iterator of ||| testing	count=1
arg	special_opens_or_closes ||| special_opens_or_closes	count=1
function	that all ||| all	count=1
function_arg	[function_1] name is ||| [arg_2] [function_1]	count=3
class	strings ||| label	count=1
function	treasury ||| treasury data	count=1
function	extra to ||| extra	count=1
function	recarry of asset ||| asset	count=1
arg	on [arg] ||| [arg] attrs	count=3
arg	for each indicated security ||| indexes stocks start end	count=1
arg	testcase ||| testcase	count=1
module	price data ||| data	count=1
function_arg	pipelineloader [function_1] [arg_2] for the columns in ||| [function_1] loader [arg_2]	count=1
function	[function_1] properly forward ||| [function_2] query in [function_1]	count=4
function	sid collect [function_2] ||| [function_2] [function_1]	count=9
class	whether [class] is ||| [class]	count=1
function	dt returns the last ||| last	count=1
function	batch ||| batch	count=1
function	[function_1] trigger implementation ||| [function_1] [function_2]	count=2
arg	each quarter boundary ||| group dates requested_qtr_data last_per_qtr	count=1
function_arg	[function_1] a backtest ||| [arg_2] [function_1]	count=1
arg	new key ||| key	count=1
function	price for ||| price	count=2
function_arg	stop price [arg_2] ||| [arg_2] [function_1]	count=2
function	return the previous ||| previous	count=1
class	executed ||| test	count=1
arg	terms of span ||| span	count=1
function	adjustments for ||| adjustments for	count=3
arg	adjustments applied assuming that ||| field is_perspective_after	count=1
function	the limit [function_2] ||| [function_2] [function_1]	count=2
function	end session label ||| session	count=1
function	pragma foreign_keys state ||| pragma	count=1
arg	argument preprocessor that converts ||| func argname arg	count=2
function	[function_1] was attached ||| [function_2] [function_1]	count=3
function	value [function_2] ||| expected [function_2] [function_1] asset_id date colname	count=1
function	check that all ||| all	count=1
function_arg	modified time [arg_2] ||| [arg_2] [function_1]	count=6
arg	url ||| url	count=1
module	int64index of ||| assets	count=1
function	the first [function_2] ||| [function_2] [function_1]	count=1
function	given a datashape ||| datashape	count=1
function	adjustments that occur ||| adjustments	count=3
module	of pricing data with ||| data	count=1
arg	asset's field at ||| field	count=1
function	[function_1] for ||| [function_2] [function_1]	count=21
function	instance of an tradingcalendar ||| get calendar	count=1
function	pipeline that was attached ||| pipeline output	count=1
function	that all [function_2] ||| utils [function_2] [function_1]	count=1
module	be checked ||| core	count=1
function	lifetimes ||| lifetimes	count=1
function_arg	[function_1] of dt ||| [arg_2] [function_1]	count=1
module	assets ||| assets	count=7
class	the high [class] returns the ||| [class]	count=1
function	the expected return dtype ||| binop return dtype	count=1
function	raw values ||| raw expected values	count=1
arg	float64multiply window ||| dts field is_perspective_after	count=1
arg	the callable_ ||| callable_	count=1
arg	a zipline ||| environ	count=1
module	for factors ||| pipeline factors	count=1
function	all the adjustments ||| adjustments from deltas	count=2
function	adjusting prices to ||| price to penny	count=1
function_arg	return [arg_2] ||| [function_1] [arg_2]	count=8
arg	term after computation ||| term refcounts	count=1
function_arg	subclass of [arg_2] ||| [arg_2] [function_1]	count=1
function	adjustments for all ||| adjustments for all	count=1
class	commission ||| commission	count=1
arg	start_date ||| start_date	count=2
arg	a callback to ||| callback	count=1
function_arg	a list [arg_2] ||| [function_1] [arg_2]	count=3
arg	by the get_calendar method ||| force	count=1
arg	shares of asset ||| asset	count=1
function	a capital ||| calculate capital	count=1
module	to ||| utils	count=1
module	arguments of a ||| utils	count=1
arg	or before the dt ||| dt	count=1
class	asynchronous call ||| sequential pool	count=1
arg	at each quarter boundary ||| group dates requested_qtr_data last_per_qtr	count=1
arg	given dt ||| dt perspective_dt	count=1
function	of an tradingcalendar whose ||| get calendar	count=1
arg	applied assuming ||| field is_perspective_after	count=1
arg	algorithm_returns needs ||| algorithm_returns sim_params trading_calendar treasury_curves	count=1
class	the expression ||| computable term	count=1
module_class	[module_1] [class_2] be paid on each ||| [module_1] [class_2] earn	count=5
function	[function_1] time range ||| [function_1] [function_2]	count=1
function	for this sid at ||| for sid	count=1
class	expression ||| term	count=1
function	place orders ||| order target	count=1
class	given ||| bcolz minute	count=1
function	0 and 100 ||| int	count=1
arg	[arg_1] the price ||| [arg_2] [arg_1]	count=8
function	rows of ||| rows	count=1
function	[function_1] mass ||| [function_2] [function_1]	count=2
class	from self downsample() ||| computable term	count=1
function_arg	[function_1] directory for ||| [function_1] [arg_2]	count=3
arg	float64multiply ||| assets dts field	count=1
function_arg	is of a given [function_1] [arg_2] ||| utils make [function_1] [arg_2]	count=1
function	close of the ||| handle market close	count=1
class	get ||| expiring cache	count=1
function_arg	value of the ||| value assets	count=1
module_class	[module_1] previous ||| [module_1] [class_2]	count=2
module	function before ||| utils	count=1
arg	word ||| word seq	count=1
class	orders ||| algorithm	count=1
function	utc tz-naive timestamp to ||| to utc	count=1
class	pipeline results into a ||| pipeline	count=1
function	and adjustments [function_2] ||| [function_1] [function_2]	count=4
function	[function] v0 ||| [function] matching	count=1
function	fill ||| fill	count=1
arg	modify a preprocessor ||| preprocessor	count=1
class	downsample() ||| computable term	count=2
function	the following column names ||| load bars	count=1
module	to ||| pipeline	count=2
arg	pipeline, providing values for ||| pipeline start_session chunksize	count=1
class	latest ||| continuous future	count=1
class	a given portfolio ||| algorithm	count=1
arg	tradingcontrolviolation either by raising ||| amount	count=1
function	making [function_2] ||| [function_2] [function_1]	count=2
function	day's ||| calculate dates	count=2
function	[function_1] from ||| [function_2] [function_1]	count=1
function	place ||| target	count=1
function	at ||| at	count=1
function	along the first ||| first	count=1
function	[function_1] after ||| [function_2] [function_1]	count=2
function	after the ||| post	count=1
class	the start ||| trading	count=1
function	is the current ||| current	count=1
arg	[arg_1] asset ||| [arg_2] [arg_1]	count=2
class	new expression strings and ||| numerical expression	count=1
arg	float64multiply [arg_2] ||| [arg_2] [arg_1]	count=4
arg	a sqlite database ||| equities futures exchanges root_symbols	count=1
function	the first [function] last dates ||| normalize [function] query	count=1
class	of commission to charge ||| commission	count=1
function	during teardownclass ||| add	count=1
function	[function_1] value and ||| [function_2] [function_1]	count=3
function	finder ||| finder	count=1
class	tradingcontrol object ||| control	count=1
arg	of a cached object ||| key dt	count=1
function	get [function_2] ||| [function_2] [function_1]	count=4
function	until [function_2] ||| [function_1] idx for [function_2]	count=2
function	the root ||| root	count=1
function_arg	tradingcalendar whose [arg_2] ||| [function_1] [arg_2]	count=1
module_class	[module_1] [class_2] payments to be paid ||| [module_1] [class_2] earn	count=5
function	store missing values ||| is missing	count=1
arg	[arg_1] sid ||| [arg_2] [arg_1]	count=6
function	orders towards ||| order target	count=1
function	[function_1] price ||| [function_1] [function_2]	count=7
arg	array ||| array	count=3
arg	a mask of ||| dates assets mask	count=2
function	converts a utc tz-naive ||| utc	count=1
arg	with [arg] for ||| [arg]	count=1
module	return from ||| pipeline	count=1
arg	the given binary operator ||| op	count=1
class	to be executed during ||| test case	count=1
function_arg	[function_1] path as ||| [arg_2] [function_1]	count=4
arg	pattern ||| pattern	count=2
function	batch ||| batch order	count=2
arg	f from ||| f	count=1
function	convert a pandas timestamp ||| to	count=1
class	start date ||| date	count=1
class	place orders ||| trading algorithm	count=1
arg	mask of all ||| assets mask	count=1
module_class	[module_1] [class_2] ||| [module_1] [class_2]	count=154
arg	columns of [arg_2] ||| [arg_2] [arg_1]	count=1
function	an tradingcalendar whose ||| calendar	count=1
class	executed during teardownclass ||| zipline test case	count=1
function	that was attached ||| output	count=1
function	collect all [function_2] ||| [function_1] [function_2]	count=10
class	run ||| pipeline engine	count=1
function	minute data into an ||| minute to	count=1
class	teardownclass ||| zipline test	count=1
function	of the [function_2] ||| [function_2] [function_1]	count=1
function_arg	properly forward [arg_2] ||| [function_1] query in range [arg_2]	count=1
function_arg	ensure that [arg_2] ||| [arg_2] [function_1]	count=5
class	the amount of commission ||| commission	count=1
class	that should load the ||| loader	count=1
class	leverage ||| max leverage	count=2
function	plus ||| ensure element	count=1
function	expected return [function_2] ||| [function_2] [function_1]	count=4
module	[module_1] quandl ||| [module_1] [module_2]	count=2
arg	filling ||| upper checkpoints	count=1
function	orders ||| batch order target	count=1
function	baseline ||| novel deltas	count=1
class	time calendar ||| calendar	count=1
function	[function_1] [function_2] ||| [function_1] yahoo index [function_2]	count=6
function_arg	[function_1] values such ||| matching [function_1] [arg_2]	count=1
arg	a calendar for retrieval ||| calendar	count=1
class	would cause the magnitude ||| size	count=1
class	a bcolz equity pricing ||| usequity pricing	count=1
function_arg	[function_1] [arg_2] v0 v1 == true ||| [function_1] [arg_2]	count=2
function	apply a function but ||| apply async	count=1
module_class	this [class_2] ||| [module_1] [class_2]	count=3
function	stop [function_2] ||| [function_2] [function_1]	count=2
class	indicating whether [class] is a ||| [class]	count=1
function_arg	percentile [arg_2] ||| [arg_2] [function_1]	count=3
function	towards a given ||| order target	count=1
function	prices to two places ||| to penny	count=1
arg	before the lower date ||| expr lower	count=1
function_arg	[function_1] this order ||| [function_1] [arg_2]	count=8
arg	order ||| order	count=3
arg	for this order ||| is_buy	count=2
function	[function_1] a progress ||| [function_2] [function_1]	count=1
function	[function_1] forward ||| [function_2] [function_1]	count=4
function	extra [function_2] ||| [function_1] [function_2]	count=3
class	checked on ||| trading algorithm	count=1
arg	kwargs for f ||| f	count=1
arg	is a float64multiply window ||| dts field is_perspective_after	count=1
arg	[arg] if some ||| [arg]	count=3
function	last traded dt ||| get last traded	count=1
function	before the split-adjusted-asof-date ||| asof date	count=1
arg	compute pipeline, providing values ||| pipeline start_session chunksize	count=1
function	during teardownclass ||| class	count=1
arg	representations of a ||| str	count=1
function	place orders towards ||| order	count=1
function	a batch of orders ||| batch order	count=1
function	lists of ownershipperiod ||| ownership	count=1
class	minute ||| market impact base	count=2
arg	algorithm_returns needs to ||| algorithm_returns sim_params trading_calendar	count=1
function	message ||| message	count=1
function	and adjustments for ||| get adjustments for	count=2
function	given ||| order target	count=1
arg	object ||| obj	count=1
function	benchmark [function_2] ||| [function_2] [function_1]	count=3
function	during teardownclass ||| callback	count=1
module	that would have changed ||| pipeline loaders blaze	count=1
function	the dividends that should ||| dividends	count=1
arg	the kwargs [arg_2] ||| [arg_2] [arg_1]	count=3
function_arg	create a 2d [function_1] [arg_2] containing ||| [function_1] [arg_2]	count=6
function	prices from [function] ||| load raw [function]	count=1
function	in to the version ||| version	count=1
function_arg	[function_1] filling from ||| [arg_2] [function_1]	count=5
function	to lists ||| ownership	count=1
function	and determines ||| idx	count=2
function	[function_1] particular sid ||| [function_1] [function_2]	count=3
function	load all of ||| load extensions	count=1
function	tradingcalendar ||| calendar	count=1
function_arg	index [arg_2] ||| [function_1] dts [arg_2]	count=1
arg	asset/date/column combination we generate ||| asset_info calendar	count=1
function	[function] for ||| get history [function]	count=2
function_arg	is of a given [function_1] [arg_2] ||| [function_1] [arg_2]	count=1
function	a given portfolio ||| percent	count=1
function_arg	[function_1] given sid ||| [arg_2] [function_1]	count=2
function	portfolio of ||| order	count=1
function	for the given sid ||| create overwrites for	count=1
class	of which the left ||| union	count=1
function	series ||| series	count=1
function	and ||| check data	count=1
function	to be executed during ||| class callback	count=1
function_arg	add a [arg_2] ||| [function_1] to graph [arg_2]	count=1
function	applies pre-processors to the ||| preprocess	count=1
function	number of extra ||| extra	count=1
module	of the ||| finance	count=1
function	verifies inputs [function_2] ||| [function_1] [function_2]	count=1
function_arg	query [arg_2] ||| [arg_2] [function_1]	count=3
class	given portfolio ||| algorithm	count=1
arg	f from a subset ||| f	count=1
function	sid [function_1] [function_2] sids ||| [function_1] [function_2] sids	count=2
class	the data stored ||| adjusted	count=1
function	converts a utc ||| utc	count=1
function_arg	[function_1] bcolzdailybarwriter ||| [arg_2] [function_1]	count=1
function	needs to ||| to workspace value	count=2
function	of ||| batch order target percent	count=1
function_arg	[function_1] a dictionary ||| [arg_2] [function_1]	count=1
arg	uniformly-distributed integers between 0 ||| shape	count=1
function_arg	from [arg_2] ||| [function_1] [arg_2]	count=1
arg	order hasn't ||| order	count=1
function	daily frequency ||| daily	count=1
arg	self from target ||| target regression_length	count=1
class	concrete boundcolumn object when ||| bound column descr	count=1
arg	the data_query_time ||| data_query_time	count=1
function	of ||| order target percent	count=1
function	to two ||| round price to	count=1
function	from ||| get	count=1
class	of commission ||| commission	count=1
class	the expression ||| term	count=1
function_arg	pipelineloader [function_1] [arg_2] the columns in testingdataset ||| [function_1] [arg_2]	count=1
function	an 2d array ||| 2d	count=1
function	from a ||| from	count=2
function	with a binary ||| build binary	count=1
function	[function] data ||| earliest [function]	count=1
module	[module_1] this ||| [module_1] [module_2]	count=4
arg	each row in the ||| mask	count=1
arg	ownershipperiods from a db ||| key_from_row value_from_row	count=1
function	write data into ||| write data	count=1
class	for given ||| minute bar	count=1
class	this factor ||| factor	count=2
function_arg	than [arg_2] ||| [function_1] limit price [arg_2]	count=1
function_arg	[function_1] a float64multiply ||| [arg_2] [function_1]	count=1
function	portfolio of ||| target percent	count=1
class	set ||| mutable index rolling panel	count=1
arg	[arg_1] events ||| [arg_2] [arg_1]	count=3
class	[class_1] for the ||| [class_2] [class_1]	count=3
function	pandas timestamp object ||| ensure timestamp	count=1
function_arg	[function_1] of path ||| [function_1] [arg_2]	count=4
function	dividends ||| dividends	count=1
class	for [class_2] ||| [class_2] [class_1]	count=2
class	percentile bounds ||| percentile	count=1
function	be executed during teardownclass ||| add class	count=1
class	handle ||| trading control	count=1
function	collect all the adjustments ||| adjustments from deltas with	count=1
arg	directory ||| environ	count=1
module	page of [module] ||| [module]	count=1
arg	needed ||| all_dates start_date end_date min_extra_rows	count=1
arg	mark ||| msg stacklevel	count=1
class	orders towards a ||| trading	count=1
module	during ||| testing	count=1
arg	for the given ||| dt	count=1
function	corresponding session labels ||| session labels	count=1
function	a capital ||| capital	count=1
function	default ||| default	count=1
class	trading_calendar used ||| bar reader	count=1
function	the given quarter ||| quarter	count=1
class	towards a given portfolio ||| trading	count=1
arg	[arg_1] [arg_2] based on the values ||| pipeline term pop params [arg_2] [arg_1]	count=4
function	name ||| name for	count=1
function	place ||| batch order target percent	count=1
arg	container ||| container	count=1
function	[function] other ||| [function] to my	count=3
function	and [function_2] ||| [function_1] [function_2]	count=4
function	the given ||| data	count=1
arg	the given ||| dt	count=2
function	coerces integral floats to ||| to	count=1
class	gross leverage in ||| leverage	count=1
arg	term ||| term refcounts	count=1
function	clean ||| clean	count=1
arg	pricing ||| dts	count=1
function_arg	[function_1] a given ||| [function_1] sid [arg_2]	count=2
function	be executed during teardownclass ||| class callback	count=1
arg	to an ||| asset	count=1
function_arg	[function_1] uniformly-distributed integers ||| [arg_2] [function_1]	count=1
function	batch of ||| batch order	count=1
function	computation date ||| compute	count=1
module	the given label ||| utils calendars	count=2
class	[class_1] [class_2] self max_shares ||| [class_2] [class_1]	count=2
class	pipeline results ||| simple pipeline	count=1
class	position to be greater ||| max position	count=1
function	add ||| add	count=1
arg	order hasn't ||| order transaction	count=1
class	merge ||| earnings estimates loader	count=1
function	[function_1] and the ||| [function_2] [function_1]	count=3
arg	is f self other ||| f	count=1
function_arg	[function_1] either ||| [arg_2] [function_1]	count=1
arg	be called *exactly once* ||| amount portfolio algo_datetime	count=1
module	the ||| pipeline data	count=2
function	values ||| values	count=1
function	a [function] of ||| [function] between	count=1
class	[class] payments ||| [class]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] dts [arg_2]	count=2
function_arg	default [arg_2] ||| [function_1] extension [arg_2]	count=1
function	the should ||| should	count=1
function_arg	[function_1] exists ||| [arg_2] [function_1]	count=2
class	place ||| trading	count=1
function	[function_1] all ||| [function_2] [function_1]	count=6
arg	binary operator ||| op left right	count=1
function	labels for ||| for	count=1
function	a pandas timestamp ||| timestamp	count=1
function_arg	the split [arg_2] ||| [function_1] [arg_2]	count=4
arg	pred ||| pred	count=1
function	inputs ||| inputs	count=1
arg	representations of ||| str	count=1
function	the future ||| future	count=1
function_arg	[function_1] count ||| [function_1] last axis array [arg_2]	count=2
class	created and/or torn down ||| test	count=1
class	stored expression [class_2] ||| [class_2] [class_1]	count=2
function	2d array containing ||| 2d	count=1
arg	before the dt ||| assets dt	count=1
module	the ||| pipeline	count=1
function	[function_1] adjustments that ||| [function_2] [function_1]	count=3
function	returns a dataset ||| new dataset	count=1
class	data stored ||| adjusted	count=1
arg	given [arg] ||| [arg] dt	count=3
arg	of delimiters ||| delimiters	count=1
function	order ||| order value	count=1
function	construction of the ||| get	count=1
arg	fail if the asset ||| asset amount portfolio algo_datetime	count=1
function	should all open orders ||| should cancel	count=1
function	returns a ||| data	count=1
module	[module_1] given label ||| [module_1] [module_2]	count=4
function	list ||| get adjustment list	count=1
function	lists of ownershipperiod objects ||| merge ownership	count=1
function	get the name of ||| name	count=1
function	the previous [function_2] ||| [function_1] [function_2]	count=3
function	an tradingcalendar ||| calendar	count=1
function	get [function_2] ||| [function_1] [function_2]	count=4
arg	cls ||| cls	count=2
class	adjustment ||| adjustment writer	count=1
class	latest ||| continuous future session bar	count=1
function	[function_1] to lists ||| [function_2] [function_1]	count=1
function	calculate the ratios to ||| ratios	count=1
class	executed ||| case	count=1
function	place a batch of ||| batch order	count=1
function_arg	[function_1] be exited ||| [function_1] [arg_2]	count=2
module	which is ||| finance	count=1
function	the open ||| open	count=1
arg	given bundle ||| bundle assets_version show_progress	count=1
arg	algorithm_returns needs to ||| algorithm_returns sim_params	count=1
function_arg	[function_1] a url ||| [function_1] [arg_2]	count=1
function	asset for a ||| asset	count=1
function_arg	[function_1] mask of ||| [function_1] arrays [arg_2]	count=1
function	[function_1] adjustment ||| [function_2] [function_1]	count=2
arg	table ||| table	count=1
function_arg	traded [arg_2] ||| [arg_2] [function_1]	count=2
function	place a batch ||| batch order	count=1
class	register a ||| test case	count=1
function	and close ||| and close	count=2
arg	float64multiply window for ||| assets dts field is_perspective_after	count=1
function_arg	session [arg_2] ||| [arg_2] [function_1]	count=1
class	to adjust a ||| algorithm	count=1
arg	of self from target ||| target regression_length mask	count=1
function	[function_1] dividend payouts ||| [function_1] [function_2]	count=1
arg	is f self ||| f	count=1
arg	of mappings ||| mappings	count=1
class	latest minute ||| continuous future	count=1
function	check if each element ||| element	count=1
function	handle a tradingcontrolviolation ||| handle violation	count=1
function	a [function] ||| [function] to	count=1
function	is not nan ||| notnan	count=1
function	[function_1] stop ||| [function_1] [function_2]	count=1
class	set ||| rolling panel	count=2
module	make ||| pipeline loaders	count=1
function	simulation ||| handle simulation	count=1
module	that would have ||| pipeline loaders blaze	count=1
function	the name of ||| name	count=1
function	check that [function_2] ||| [function_1] [function_2]	count=2
arg	each sid in sids ||| sids	count=1
arg	applied assuming that the ||| field is_perspective_after	count=1
arg	of ||| assets	count=7
function	the expression type ||| type	count=1
function	symbol [function_2] ||| [function_1] [function_2]	count=1
module	'held' held [module] functionally similar ||| [module]	count=1
class	our position to be ||| position	count=1
function	values we expect to ||| values	count=1
function	initial ||| initial	count=1
class	expression ||| computable	count=1
function_arg	[function_1] values such ||| [function_1] [arg_2]	count=1
function	list ||| adjustment list	count=1
function	inputs for ||| inputs for	count=2
function	minutes for [function_2] ||| [function_2] [function_1]	count=2
module	construct a ||| factors	count=5
function	benchmark ||| benchmark	count=1
class	tradingcontrol ||| control	count=1
arg	sids list ||| sids	count=1
function	[function_1] the adjustment ||| [function_1] idx for [function_2]	count=1
function_arg	invert a [arg_2] ||| [function_1] [arg_2]	count=1
module	create a [module] bundle ||| [module]	count=1
class	pipeline ||| simple pipeline engine	count=1
module_class	[module_1] array ||| [module_1] [class_2]	count=1
function_arg	[function_1] data ||| [arg_2] [function_1]	count=4
function	numpy [function] ||| make alternating boolean [function]	count=3
arg	each ||| mask groupby	count=2
function	the given calendar ||| market data	count=1
function	write both [function_2] ||| [function_1] [function_2]	count=3
arg	asset's [arg_2] ||| [arg_2] [arg_1]	count=1
function	open and ||| open and	count=1
function_arg	[function_1] range defined ||| [function_1] min_percentile [arg_2]	count=4
function	[function_1] adjustments that ||| [function_1] [function_2]	count=1
function	each element ||| element	count=1
class	[class_1] algorithm ||| [class_2] [class_1]	count=1
arg	data a [arg_2] ||| [arg_2] [arg_1]	count=1
function	[function_1] [function_2] a ||| [function_2] [function_1]	count=16
function	[function_1] rows of ||| [function_1] [function_2]	count=1
function	into a [function_2] ||| [function_2] [function_1]	count=3
class	with self ||| with seeded random pipeline	count=1
class	are ||| filter	count=1
function	this needs [function_2] ||| [function_2] [function_1]	count=2
class	towards ||| algorithm	count=1
module	validate that the expression ||| pipeline loaders blaze	count=1
class	name? ||| calendar dispatcher	count=1
function	time range [function_2] ||| [function_2] [function_1]	count=1
function	place orders towards ||| batch order	count=1
arg	[arg_1] end ||| [arg_2] [arg_1]	count=2
function	place orders ||| batch order	count=1
module_class	[module_1] argument ||| [module_1] [class_2]	count=8
function_arg	[function_1] [arg_2] ||| [function_1] tup [arg_2]	count=1
function	all [function_2] ||| [function_2] [function_1]	count=2
module_class	equity [class_2] ||| [module_1] usequity [class_2]	count=1
function	[function_1] event for ||| [function_2] [function_1]	count=2
arg	checks the data_query_time and ||| data_query_time	count=1
function	[function_1] root ||| [function_2] [function_1]	count=1
function	portfolio of ||| percent	count=1
arg	the order ||| order transaction cost_per_unit	count=1
arg	the order ||| order	count=1
module_class	[module_1] [class_2] to be paid on ||| [module_1] [class_2] earn	count=5
arg	treasury yield curves ||| trading_day trading_days bm_symbol	count=1
module	orders towards a given ||| core	count=1
module	state of [module_2] ||| [module_2] [module_1]	count=1
arg	mask ||| dates assets mask	count=1
function	[function_1] equity ||| [function_1] [function_2]	count=1
function	[function_1] for that ||| [function_2] [function_1]	count=2
arg	restride array to ||| array	count=2
module	as 'rejected', which is ||| finance	count=1
class	asset metadata ||| asset dbwriter	count=1
class	form time calendar ||| calendar	count=1
class	[class] is a ||| [class]	count=1
module	given start ||| utils calendars	count=2
class	be executed during teardownclass ||| test	count=1
function	order in the ||| order percent	count=1
function	whether it's a valid ||| is	count=1
function	[function_1] value and ||| [function_1] [function_2]	count=3
function	close [function_2] ||| [function_1] for [function_2]	count=1
function	register ||| register trading	count=1
class	be executed ||| zipline	count=1
class	track and ||| trading	count=1
arg	[arg_1] window ||| [arg_2] [arg_1]	count=4
function	[function_1] benchmark ||| [function_1] [function_2]	count=1
function	[function_1] close ||| [function_2] [function_1]	count=9
arg	[arg_1] an ||| [arg_2] target [arg_1]	count=1
function	the expected ||| binop	count=1
function	on the provided query ||| query bounds	count=1
arg	order hasn't had a ||| order transaction cost_per_unit initial_commission	count=1
function	[function_1] and close ||| [function_2] [function_1]	count=3
arg	bcolzdailybarwriter ||| minute_frame calendar	count=1
function	for adjusting prices to ||| to	count=1
function	minutes in that ||| minutes in	count=2
arg	satisfies the given expectations ||| expected_args expect_starargs expect_kwargs	count=1
function	dividends that should be ||| dividends	count=1
function_arg	[function_1] ratio and ||| [function_1] [arg_2]	count=2
class	orders ||| trading algorithm	count=2
function	of trade data for ||| trade data for	count=1
function	can provide ||| sliding windows	count=1
function_arg	[function_1] start ||| [arg_2] [function_1]	count=3
module	the expression ||| pipeline	count=1
function	self ||| downsampled	count=1
function	from ||| from categorical	count=2
arg	of path as a ||| path	count=2
arg	[arg] split-adjusted-asof-date falls ||| [arg]	count=1
arg	directory for zipline ||| environ	count=2
module	blaze expression ||| loaders blaze	count=1
function	adjustments that occur before ||| date adjustments	count=1
function	single [function_2] ||| [function_2] [function_1]	count=1
module	to the ||| utils	count=1
class	magnitude of ||| size	count=1
class	percentile bounds [class_2] ||| pipeline filters [class_1] [class_2]	count=1
function	for a [function_1] [function_2] ||| [function_1] [function_2]	count=2
function	raw ||| raw	count=1
arg	exited ||| context_manager	count=1
function	into ||| from	count=2
arg	[arg_1] of all ||| [arg_2] [arg_1]	count=4
function	symbol ||| symbol	count=3
arg	dt the open ||| dt	count=1
function	window of ||| window	count=1
function	and adjustments for a ||| get adjustments for	count=1
arg	pop entries [arg_1] [arg_2] __new__ based on the ||| [arg_2] [arg_1]	count=2
function	returns the current ||| get	count=1
function	timestamp field of ||| timestamp	count=1
class	cache ||| expiring cache	count=2
class	portfolio of ||| trading algorithm	count=1
function	trade data [function_2] ||| [function_1] [function_2]	count=4
function	a pandas categorical ||| categorical	count=1
function_arg	sid [arg_2] ||| [function_1] [arg_2]	count=1
function	a dictionary containing adjustments ||| adjustments	count=1
class	to which this column ||| column	count=1
function	of ||| order target	count=1
function_arg	[function_1] either by ||| [function_1] [arg_2]	count=1
class	position to be ||| max position	count=1
class	restricted_list ||| restricted list order	count=2
function	for the given sid ||| overwrites for	count=1
function	[function_1] accountcontrol to ||| [function_1] [function_2]	count=1
function	[function_1] [function_2] sids ||| [function_1] [function_2] sids	count=11
class	that our [class] string ||| numerical [class]	count=1
function	arguments ||| query args	count=1
function	adjustments for ||| get adjustments for	count=2
function	sid [function_1] [function_2] sids ||| [function_1] [function_2]	count=2
function	split adjustments that ||| split adjustments	count=2
module	[module] a ||| [module]	count=3
class	this array ||| adjusted array	count=1
arg	specifier for a ||| root_symbol_str offset	count=1
module	towards a given ||| core	count=1
function	pipelineloader that [function] with ||| make [function]	count=1
class	[class] returns ||| [class]	count=2
function	schedules a function ||| schedule function	count=1
function	sid at each quarter ||| sid	count=1
class	compute ||| asset finder	count=1
function	the close ||| handle market close	count=1
function	in a [function_2] ||| [function_2] [function_1]	count=2
function	get ||| get last	count=2
function	range [function_2] ||| [function_2] query in [function_1]	count=1
function_arg	list [arg_2] ||| [arg_2] [function_1]	count=3
arg	window for ||| is_perspective_after	count=1
arg	algorithm_returns ||| algorithm_returns sim_params	count=1
arg	the order hasn't ||| order transaction cost_per_unit	count=1
function	to two ||| to	count=1
function	last traded dt ||| last traded dt	count=1
function_arg	download [arg_2] ||| [arg_2] [function_1]	count=1
class	[class_1] from self ||| [class_2] [class_1]	count=3
function	the corresponding session labels ||| to session labels	count=1
function	returns the previous close ||| previous close	count=1
function	return the minutes ||| minutes	count=1
class	array ||| array	count=2
function	given portfolio ||| batch order	count=1
arg	tradingcontrolviolation either by ||| asset amount	count=1
function	symbol lookup ||| symbol	count=1
function	configuration object ||| create test zipline	count=1
function	to two places ||| to penny	count=1
function_arg	[function_1] a mask ||| [function_1] arrays dates assets [arg_2]	count=1
function	all the adjustments ||| adjustments from	count=2
arg	time ||| time	count=1
arg	[arg_1] nested dictionary ||| [arg_1] [arg_2]	count=1
class	new expression strings ||| expression	count=1
function_arg	[function_1] row ||| [arg_2] [function_1]	count=3
class	to be executed ||| case	count=1
function	the limit [function_2] ||| [function_1] [function_2]	count=2
arg	target ||| target	count=1
function	for a ||| for	count=2
function	of ||| batch order target	count=1
function	overwrites that ||| overwrites	count=1
function	towards a ||| target	count=1
function	impact ||| impact	count=1
arg	a float64multiply window ||| dts field is_perspective_after	count=1
function	split ||| handle split	count=2
function	portfolio ||| percent	count=1
arg	tradingcontrolviolation either ||| amount	count=1
arg	columns ||| columns	count=2
class	calendar and an iterable ||| trading calendar	count=1
class	handle_data on the ||| trading	count=1
arg	backtest for the given ||| handle_data initialize before_trading_start analyze	count=1
function	[function] of ||| [function] of	count=3
function	in [function_2] ||| [function_2] [function_1]	count=1
function	weights ||| batch order target percent	count=1
class	pipeline results ||| simple pipeline engine	count=1
function_arg	[function_1] dt ||| [function_1] dts [arg_2]	count=1
class	run ||| seeded random pipeline engine	count=1
arg	into a dictionary ||| d	count=1
arg	[arg_1] [arg_2] ||| [arg_2] target [arg_1]	count=1
module	dataframe representing assets ||| assets	count=2
arg	[arg_1] that pred ||| [arg_2] [arg_1]	count=1
function	compute a ||| compute root	count=1
module	and ||| core	count=1
module	of [module] sid's file ||| [module]	count=1
module	the temporary ||| utils	count=1
function	held ||| max position size	count=1
class	[class_1] from self ||| pipeline [class_2] [class_1]	count=3
arg	at the given dt ||| dt	count=1
function	orders ||| batch order target percent	count=1
function	value ||| value	count=5
function	needs [function_2] ||| [function_2] [function_1]	count=2
function_arg	[function_1] the viewpoint ||| [arg_2] [function_1]	count=5
arg	that "improves" [arg_2] ||| [arg_2] [arg_1]	count=2
function	returns a list ||| adjustment list	count=1
function	check [function_2] ||| [function_2] [function_1]	count=2
module	held [module] functionally similar ||| [module]	count=1
function	a pandas dataframe ||| dataframe	count=1
class	self ||| term	count=1
module_class	[module_1] leverage in ||| [module_1] [class_2]	count=2
arg	restride array ||| array	count=2
module	window of pricing data ||| data	count=1
class	pipeline results into ||| pipeline engine	count=1
class	format ||| data frame loader	count=1
arg	into a dictionary of ||| d	count=1
module	'rejected', which is ||| finance	count=1
function	be executed ||| class	count=1
function	asymmetric rounding function for ||| asymmetric round price	count=1
arg	each day ||| groupby	count=2
function	next [function_2] ||| [function_2] [function_1]	count=4
arg	half life ||| halflife	count=1
function	all pairs ||| all pairs	count=1
module	is ||| finance performance	count=2
function_arg	pipelineloader [function_1] [arg_2] the columns in testingdataset ||| [function_1] loader [arg_2]	count=1
function	required ||| required estimates	count=1
class	towards a ||| trading algorithm	count=1
arg	collects both overwrites ||| group dates requested_qtr_data last_per_qtr	count=1
function	a commission [function_2] ||| [function_2] [function_1]	count=4
function	place ||| batch	count=1
function_arg	time of [arg_2] ||| [function_1] [arg_2]	count=8
function	shares we would like ||| txn volume	count=1
arg	given [arg_2] ||| [arg_2] [arg_1]	count=2
function	data directory ||| data	count=1
class	term that computes from ||| term	count=1
function	the corresponding session labels ||| minute index to session labels	count=1
function	in to the version ||| write version	count=1
function	the split-adjusted-asof-date ||| asof date	count=1
class	checked ||| trading algorithm	count=1
class	to return from ||| term	count=1
function_arg	the name [arg_2] ||| [function_1] op op [arg_2]	count=1
function	show a progress ||| show progress	count=3
arg	or iterable of assets ||| assets	count=1
function	overwrite ||| overwrite	count=2
arg	compare two sets ||| msg	count=1
function	place orders towards a ||| order	count=1
arg	as [arg] ||| order [arg]	count=1
arg	[arg] split-adjusted-asof-date ||| [arg]	count=1
function	paid yet pay the ||| calculate per unit	count=1
module_class	cash and/or ||| performance position	count=1
class	to be executed during ||| zipline	count=1
arg	uniformly-distributed dates ||| shape	count=1
arg	binary operator ||| op	count=1
function_arg	[function_1] viewpoint ||| [arg_2] [function_1]	count=5
function	values ||| product upper triangle	count=1
function	downsampling ||| select sampling indices	count=1
function	a compressed gzipped file ||| compressed	count=1
arg	tup ||| tup	count=1
function	parse [function_2] ||| [function_1] [function_2]	count=1
function	returns ||| returns	count=1
function	previous [function_2] ||| [function_2] [function_1]	count=2
function	a tradingenvironment or assetfinder [function_1] [function_2] ||| [function_1] [function_2]	count=1
function	and raises ||| check data	count=1
module	values associated with the ||| pipeline loaders	count=2
function	of extra [function_2] ||| [function_2] [function_1]	count=5
function	returns the previous ||| previous	count=2
arg	pipeline, providing values ||| pipeline start_session chunksize	count=1
function	get the name ||| name for	count=1
arg	given coordinates ||| sid dt field	count=1
function	to be executed ||| callback	count=1
module	the ||| loaders	count=4
function	the expression type to ||| downsampled type	count=1
function	orders towards a ||| batch order target	count=1
function_arg	[function_1] derived price ||| [function_1] [arg_2]	count=5
arg	converts the ||| func argname arg	count=2
arg	terms of half life ||| halflife	count=1
arg	compare two ||| msg	count=1
module	arguments ||| utils	count=1
arg	time and tz ||| time tz	count=1
function	ndarray ||| ndarray	count=1
function	a dataframe of trade ||| trade	count=1
function	utc tz-naive [function_2] ||| utils [function_2] [function_1]	count=1
arg	dt find ||| dt	count=1
function	executed during ||| callback	count=1
function	the next known value ||| next	count=1
function	adjustedarray [function] ||| [function]	count=2
function_arg	data root [arg_2] ||| [function_1] [arg_2]	count=1
function	required to serve ||| required	count=1
class	adjustment ratios ||| adjustment	count=1
class	[class_1] [class_2] that ||| pipeline [class_2] [class_1]	count=3
function	z-scores each day's ||| zscore	count=1
function	of benchmark ||| benchmark	count=1
function	containing adjustments for all ||| adjustments for all	count=1
module_class	cash [class_2] ||| [module_1] [class_2]	count=2
function	towards a ||| batch	count=1
function	be ||| callback	count=1
function	[function_1] url for ||| [function_1] yahoo index [function_2]	count=1
class	of an asynchronous call ||| sequential pool	count=1
class	pipeline results into a ||| simple pipeline engine	count=1
function_arg	[function_1] [arg_2] ||| [function_1] arrays dates assets [arg_2]	count=2
module	place orders towards a ||| core	count=1
function	preprocessing decorator that coerces ||| coerce	count=1
class	[class_1] order exceeds ||| [class_2] [class_1]	count=2
arg	backtest for ||| initialize before_trading_start analyze	count=1
function	compute our stored ||| compute	count=1
function	binary [function_2] ||| [function_1] [function_2]	count=2
function	minutes ||| minutes	count=5
module	will be resolved to ||| core	count=1
arg	a callback to ||| cls callback	count=1
function	alias ||| alias	count=2
class	from self ||| computable	count=2
function	adjustments [function_2] ||| [function_2] [function_1]	count=13
class	exchange ||| calendar	count=2
class	expression ||| numerical expression	count=2
function	adjustments for [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] stop ||| [function_2] [function_1]	count=1
function	at [function_2] ||| [function_2] [function_1]	count=1
function	dividend payouts [function_2] ||| [function_2] [function_1]	count=1
arg	to some timed rules ||| func date_rule time_rule half_days	count=1
function	be ||| class	count=1
function_arg	v0 v1 [function_1] [arg_2] v0 v1 == true ||| matching [function_1] [arg_2]	count=1
function	be ||| add	count=1
function	db ||| downgrade	count=1
function	[function_1] operator methods ||| [function_1] [function_2]	count=3
module_class	[module_1] minutes ||| [module_1] [class_2]	count=4
function	place orders ||| batch order target	count=1
arg	objects [arg] ||| [arg] dts	count=1
arg	input ||| arrays dates	count=1
function	configuration object that ||| create test zipline	count=1
function	the ratios to apply ||| ratios	count=1
function	worse than ||| worse than	count=1
function_arg	[function_1] [arg_2] ||| [function_1] last axis array [arg_2]	count=8
class	of commission to charge ||| commission model	count=1
function	the ||| get	count=1
arg	draw g as a ||| g	count=1
module	with the ||| pipeline loaders	count=2
class	position to ||| max position	count=1
arg	the number ||| on_error	count=1
module	data into ||| data	count=1
class	calculate [class] ||| [class]	count=1
function	the should trigger implementation ||| should trigger	count=1
class	from self ||| computable term	count=1
function	metadata ||| metadata	count=3
arg	row ||| mask groupby	count=2
arg	on data ||| data	count=1
class	a factor that computes ||| factor	count=1
function	given ||| target	count=1
function	with minute ||| minute	count=1
function	unary ||| unary	count=1
function_arg	quarter [arg_2] ||| [arg_2] [function_1]	count=4
function	the given calendar and ||| market data	count=1
function	get the root ||| root	count=1
class	be ||| test case	count=2
class	next ||| next earnings estimates	count=1
function	string representations ||| parse date str	count=1
module	to be checked prior ||| core	count=1
arg	a dt returns ||| dt	count=1
function	adjustments ||| get adjustments	count=1
function	times along the first ||| first	count=1
arg	some timed rules ||| func date_rule time_rule half_days	count=1
function	[function_1] from ||| [function_1] [function_2]	count=1
arg	given dt ||| dt	count=5
function	last traded ||| get last traded dt	count=1
module	data from a ||| data	count=1
function	place a batch ||| batch	count=1
function	the last traded ||| get last traded	count=1
class	during ||| zipline test	count=1
function	asymmetric ||| asymmetric round price	count=1
function_arg	[function_1] time ||| [arg_2] [function_1]	count=4
class	one ||| algorithm	count=1
function_arg	in [arg_2] ||| [arg_2] [function_1]	count=1
class	towards a given portfolio ||| trading algorithm	count=1
function_arg	[function_1] given datetime ||| [arg_2] [function_1]	count=1
function_arg	tradingcalendar [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] [arg_2] for the columns in ||| [function_1] loader [arg_2]	count=1
arg	[arg_1] min_percentile ||| [arg_2] [arg_1]	count=2
arg	time and tz ||| upper time tz	count=1
function	of asset lifetimes ||| asset lifetimes	count=2
class	teardownclass ||| zipline	count=1
module	expression ||| pipeline	count=1
function	only ||| only	count=1
module	data ||| pipeline loaders	count=1
function	adjustments that ||| adjustments from deltas	count=2
function_arg	[function_1] uniformly-distributed ||| [function_1] [arg_2]	count=2
arg	mask [arg_2] ||| [arg_2] [arg_1]	count=4
function	minutes for that ||| minutes for	count=1
function	construction of the generator ||| get generator	count=1
arg	window ||| is_perspective_after	count=1
function	table for ||| table	count=1
function	teardownclass ||| add class callback	count=2
arg	count times along ||| count	count=2
class	commission ||| commission model	count=1
function	[function_1] traded ||| [function_2] [function_1]	count=4
arg	commission if the order ||| order transaction cost_per_unit initial_commission	count=1
arg	register a callback ||| callback	count=1
function	[function_1] occur after ||| [function_2] [function_1]	count=2
arg	backtest ||| before_trading_start analyze	count=1
function_arg	open [arg_2] ||| [function_1] [arg_2]	count=1
class	adjustment ||| sqlite adjustment writer	count=1
function	get a path ||| path	count=3
module_class	be [class_2] ||| [module_1] [class_2]	count=8
function	a treasury ||| treasury	count=1
arg	[arg_1] of ||| [arg_2] [arg_1]	count=16
arg	the given engine to ||| engine	count=1
function	is a subclass of ||| is subclass	count=1
function	[function_1] adjustment at ||| [function_2] [function_1]	count=2
function_arg	whether or not asset [function_1] [arg_2] ||| [function_1] [arg_2]	count=2
arg	operator ||| op	count=2
function	the previous known value ||| previous	count=1
function	binary operator methods ||| binary operator	count=4
function	return an 2d array ||| 2d	count=1
arg	prefix ||| prefix	count=1
function	builds a dict ||| build	count=1
function	asymmetric rounding function for ||| asymmetric	count=1
arg	of transaction ||| transaction	count=1
function	load ||| load extensions	count=1
function	next known [function_2] ||| [function_2] [function_1]	count=1
function	a given ||| target	count=1
function	asset for ||| asset	count=1
class	the ||| trading algorithm	count=8
module	a [module] bundle ||| [module]	count=1
module	construct a new ||| factors	count=2
function_arg	[function_1] the given ||| [function_1] [arg_2]	count=4
module	[module_1] cash ||| [module_1] [module_2]	count=8
arg	the ingest command ||| bundle before after keep_last	count=1
function	asymmetric rounding function for ||| asymmetric round	count=1
function	[function_1] for a ||| [function_1] [function_2]	count=2
function	trade data for each ||| make trade data for	count=1
function	the open [function_2] ||| [function_1] [function_2]	count=5
class	given ||| trading	count=1
arg	place an ||| asset amount limit_price stop_price	count=1
class	of strings ||| label	count=1
function	load benchmark ||| load	count=1
function	weights ||| target percent	count=1
function	open orders ||| open orders	count=2
class	should ||| cancel policy	count=1
arg	a like-shaped array of ||| dates assets	count=1
function	check that the raw [function_1] [function_2] an ||| expected [function_2] [function_1] asset_id date colname	count=1
function	trade data for ||| trade data for	count=1
function_arg	mean from [arg_2] ||| [arg_2] [function_1]	count=4
function	resource columns required ||| required estimates fields	count=1
arg	representations ||| str	count=1
module	[module_1] expression ||| [module_1] [module_2]	count=4
function	sid collect all ||| collect	count=1
arg	given sid ||| sid default_none	count=2
arg	of ||| dates assets	count=2
function_arg	limit price [arg_2] ||| [arg_2] [function_1]	count=2
function	[function_1] tokenized representations ||| [function_2] [function_1]	count=1
arg	either by raising ||| asset amount	count=1
class	orders towards ||| trading algorithm	count=1
module	loaded ||| bundles	count=1
function	[function_1] for all ||| [function_1] [function_2]	count=4
class	open [class] returns ||| [class]	count=1
module_class	[module_1] tracker ||| [module_1] [class_2]	count=8
arg	in sids list ||| sids	count=1
arg	uniformly-distributed integers ||| shape	count=1
function	an array with session ||| session	count=1
function	parse a treasury ||| parse treasury	count=3
function	integral floats to ||| to	count=1
function	build ||| format	count=1
function	order ||| order percent	count=1
module	towards a given portfolio ||| core	count=1
arg	for each row ||| mask	count=1
function_arg	[function_1] of ||| [function_1] arrays [arg_2]	count=1
arg	key value ||| key value	count=2
arg	self each day ||| mask groupby	count=2
function	[function_1] until which ||| [function_2] [function_1]	count=2
function_arg	[function_1] needed to ||| [arg_2] [function_1]	count=5
function	trade [function_2] ||| [function_2] [function_1]	count=5
arg	data_query_time [arg_2] ||| [arg_1] [arg_2]	count=1
arg	teardownclass ||| cls	count=1
function	kind ||| kind	count=1
function	sequence of tuples ||| tuples	count=1
function	load all ||| load	count=1
class	latest minute on ||| continuous future session bar	count=1
function	split adjustments [function_2] ||| [function_1] [function_2]	count=3
arg	db table ||| table	count=1
arg	of the [arg_2] ||| [arg_2] [arg_1]	count=1
arg	place an ||| limit_price stop_price	count=1
module	in this ||| lib	count=1
class	argument objects ||| argument	count=1
arg	a tradingcontrolviolation either by ||| asset amount	count=1
function	utc tz-naive timestamp ||| utc	count=1
function	a dataframe with minute ||| minute	count=1
arg	dt find that ||| dt	count=1
arg	a pandas categorical ||| categorical	count=1
function	a ||| add	count=1
function	2d array containing ||| values 2d	count=1
arg	kwargs ||| kwargs	count=1
class	price adjustment ratios ||| adjustment writer	count=1
function	place orders towards a ||| order target	count=1
function	an 2d ||| bar values 2d	count=1
function	all the minutes ||| minutes	count=1
function	[function_1] url for ||| [function_2] [function_1]	count=1
function	[function_1] [function_2] ||| utils [function_2] [function_1]	count=6
function_arg	[function_1] [arg_2] columns in testingdataset ||| [function_1] loader [arg_2]	count=1
function	type to return ||| downsampled type	count=1
module	before ||| utils	count=1
function	to two places in ||| to	count=1
function	[function_1] returns from ||| [function_2] [function_1]	count=5
class	for ||| loader	count=1
function	dir and ||| files	count=1
function	daily ||| get daily	count=1
function	stop [function_2] ||| [function_1] [function_2]	count=2
class	pipeline results ||| pipeline	count=1
arg	the given expectations ||| expected_args expect_starargs expect_kwargs	count=1
arg	range [arg] ||| [arg]	count=1
function	timestamp field ||| timestamp	count=1
module	returns the ||| data	count=3
function	write both [function_2] ||| [function_2] [function_1]	count=3
arg	sorted ||| ascending	count=1
function	can ||| can	count=1
function	type ||| type	count=2
class	place orders towards a ||| algorithm	count=1
class	during teardownclass ||| zipline test	count=1
function	[function_1] [function_2] ||| [function_2] index [function_1]	count=10
function	adjusting prices to ||| to	count=1
class	to ||| zipline	count=1
class	executed during ||| zipline	count=1
function	all open orders ||| cancel	count=1
function	held for ||| max position size	count=1
function	last axis ||| last axis	count=2
function	load the next ||| next	count=1
function	alias for ||| alias	count=1
module	making ||| filters	count=1
function	of center of ||| from center of	count=1
function	for ||| overwrites for	count=1
function	minute data ||| minute to	count=1
module	executed during ||| testing	count=1
function	the last [function_2] ||| [function_2] [function_1]	count=5
function	value at ||| get value	count=1
function	db at the ||| downgrade	count=1
arg	content with the ||| content	count=1
arg	that the end ||| dts	count=1
function	are [function] ||| [function]	count=3
arg	algorithm_returns needs to be ||| algorithm_returns sim_params trading_calendar	count=1
function	to the version table ||| write version	count=1
class	return from ||| computable term	count=1
class	given estimates data ||| earnings estimates	count=1
class	executed during ||| zipline test case	count=1
class	a given portfolio of ||| algorithm	count=1
class	price adjustment ||| adjustment	count=1
function	register a new accountcontrol ||| register account control	count=1
function	worse than ||| price worse than	count=2
function	extra rows to load/compute ||| extra rows	count=1
arg	didn't ||| start_date end_date extra_rows	count=1
class	latest minute on ||| continuous future session bar reader	count=1
function_arg	window of [arg_2] ||| [function_1] [arg_2]	count=1
module	towards a ||| core	count=1
function	get a [function_2] ||| [function_1] [function_2]	count=4
function	[function] of ||| [function]	count=4
arg	that pred ||| pred	count=1
function	with session ||| to session	count=1
function	trigger implementation ||| trigger	count=1
arg	each indicated ||| indexes stocks start end	count=1
function	type to ||| type	count=1
arg	expected ||| expected msg	count=1
function	parse a [function_2] ||| [function_2] [function_1]	count=1
module	the start and ||| data	count=1
arg	a dictionary ||| d	count=1
function	clean up data downloaded ||| clean	count=1
arg	order ||| order transaction	count=1
function	the provided query ||| query	count=1
function	place ||| order target percent	count=1
function_arg	[function_1] [arg_2] ||| [function_1] subcls [arg_2]	count=6
arg	in the input ||| arrays dates	count=1
module	side is ||| finance	count=1
function_arg	run a [arg_2] ||| [arg_2] [function_1]	count=4
function	compute a ||| compute root mask	count=1
class	leverage in ||| max leverage	count=1
function	times along the last ||| last	count=1
class	track ||| algorithm	count=1
function_arg	context manager [arg_2] ||| [arg_2] [function_1]	count=1
function	in [function_2] ||| [function_1] [function_2]	count=1
arg	order hasn't had ||| order	count=1
function	that returns a list ||| adjustment list	count=1
function_arg	[function_1] the result ||| [arg_2] [function_1]	count=1
arg	in the input ||| arrays	count=1
function	[function_1] data ||| [function_2] [function_1]	count=4
function	are between ||| between time	count=1
function	values we expect ||| expected values	count=1
module_class	[module_1] sqlite ||| [module_1] [class_2]	count=2
function	adjustments for [function_2] ||| [function_1] [function_2]	count=1
arg	value with the ||| value	count=1
function	commission paid yet pay ||| unit commission	count=1
function	center ||| from center	count=1
function	minutes for [function_2] ||| [function_1] [function_2]	count=2
class	a term ||| computable term	count=1
class	to return from ||| computable	count=1
function	split adjustments [function_2] ||| [function_2] [function_1]	count=7
function	be executed ||| add	count=1
function	to two places in ||| round price to	count=1
module_class	in this [class_2] ||| [module_1] [class_2]	count=3
function	utils calendar ||| calendar	count=1
function_arg	[function_1] with ||| [arg_2] [function_1]	count=4
module_class	[module_1] checked on ||| [module_1] [class_2]	count=4
class	write ||| bcolz daily bar writer	count=1
class	[class_1] [class_2] payments to be paid ||| [class_1] [class_2]	count=1
class	latest minute ||| continuous	count=1
arg	callback to be ||| cls callback	count=1
function	load all of the ||| load	count=1
function	simplex domain ||| simplex	count=1
function	extra rows ||| extra rows	count=5
function	for the given sid ||| for	count=1
class	[class] given dt ||| [class]	count=3
function_arg	calendar [arg_2] ||| [function_1] [arg_2]	count=1
function	trade data ||| trade data	count=1
function	traded ||| last traded	count=2
function	version ||| version	count=1
function	window of ||| window params	count=1
function	[function_1] price for ||| [function_2] [function_1]	count=6
arg	of cls ||| cls	count=1
class	a sqlite file ||| sqlite	count=1
arg	ownershipperiods from [arg_2] ||| [arg_2] [arg_1]	count=2
function	orders towards ||| order target percent	count=1
function_arg	v0 v1 [function_1] [arg_2] == true ||| [function_1] [arg_2]	count=1
function	the simulation ||| handle simulation end	count=1
function	order in ||| order	count=1
class	during ||| zipline test case	count=3
function	during teardown ||| add instance	count=1
function_arg	matches the [arg_2] ||| [function_1] [arg_2]	count=1
function	time range properly ||| range	count=1
function	utc tz-naive ||| utc	count=1
function	string representations of ||| date str	count=1
function_arg	[function_1] boundary ||| [function_1] [arg_2]	count=10
module	for a list of ||| assets	count=1
function	z-scores each day's results ||| zscore	count=1
function	a given portfolio of ||| target percent	count=1
class	this term ||| term	count=3
arg	fail if the algo ||| amount portfolio algo_datetime	count=1
arg	mark a function ||| msg stacklevel	count=1
function	compute a lifetimes matrix ||| compute	count=1
function	[function_1] root ||| [function_1] [function_2]	count=1
arg	sid ||| sid	count=2
function_arg	[function_1] derived ||| [function_1] [arg_2]	count=5
arg	the lower date ||| expr lower	count=1
module	the loaded data ||| data bundles	count=1
function_arg	value [arg_2] ||| [arg_2] [function_1]	count=5
class	a sqlite file to ||| sqlite	count=1
module_class	- datetime datetime that [module_1] [class_2] was placed ||| [module_1] [class_2]	count=1
arg	algorithm_returns needs ||| algorithm_returns sim_params trading_calendar	count=1
function	collect ||| collect pre	count=1
arg	for a given sid ||| sid default_none	count=1
function	[function_1] [function_2] ||| [function_2] for [function_1]	count=6
function	next known ||| next	count=1
function	traded ||| traded	count=3
function	format ||| format	count=3
class	given portfolio of ||| algorithm	count=1
function	[function_1] traded dt ||| [function_2] [function_1]	count=4
function	resource columns required to ||| required estimates fields	count=1
arg	[arg_1] [arg_2] ||| calculate [arg_1] [arg_2]	count=3
arg	values such [arg_2] ||| [arg_2] [arg_1]	count=1
class	a ||| zipline	count=1
module	state of [module_2] ||| [module_1] [module_2]	count=1
module	pricing data ||| data	count=1
class	the benchmark ||| benchmark	count=1
arg	callback to be executed ||| callback	count=1
module	if ||| finance	count=1
function	of the open ||| open	count=1
function	to explicitly allow none ||| optionally	count=1
arg	the input ||| arrays	count=1
arg	objects [arg] adjustedarraywindow ||| [arg] dts	count=1
function	merge adjustments for ||| merge	count=1
arg	getattr on [arg] ||| [arg] attrs	count=3
arg	[arg_1] [arg_2] ||| [arg_2] [arg_1]	count=201
function	variables ||| variables	count=1
function	simplex ||| simplex	count=1
function	exist for the ||| make simple	count=1
class	to return from self ||| computable	count=1
function	the version ||| write version	count=1
class	estimates data for ||| earnings estimates loader	count=2
class	pipeline results into ||| simple pipeline	count=1
arg	order hasn't ||| order transaction cost_per_unit	count=1
module	that has ||| pipeline loaders	count=1
function	2d array ||| values 2d	count=1
class	given portfolio of ||| trading algorithm	count=1
arg	array of ||| dates assets	count=1
function	nanoseconds since [function] ||| dt to [function]	count=1
class	tradingcontrol ||| trading control	count=2
module_class	data [class_2] ||| [module_1] [class_2]	count=5
function	a list ||| get adjustment list	count=1
function	value representing the value ||| value	count=1
function	be executed during ||| add class callback	count=1
class	to ||| test case	count=2
function	the position ||| position	count=1
arg	[arg_1] cls ||| pipeline term pop params [arg_2] [arg_1]	count=2
class	latest ||| continuous future session bar reader	count=1
class	latest minute ||| continuous future session bar reader	count=1
module	we ||| lib	count=4
function	adjustments with ||| adjustments with	count=2
function	[function_1] lifetimes ||| [function_1] [function_2]	count=5
function	sid [function_1] [function_2] ||| [function_1] [function_2]	count=24
class	the high [class] ||| [class]	count=1
function_arg	last traded [arg_2] ||| [arg_2] [function_1]	count=2
arg	whose signature [arg] ||| [arg]	count=3
function	paid yet pay the ||| unit	count=1
module	place ||| core	count=1
function	prices to two ||| price to	count=1
function	minute data into an ||| minute	count=1
function_arg	[function_1] (e ||| [arg_2] [function_1]	count=1
module	build ||| data bundles	count=1
arg	float64multiply objects [arg] adjustedarraywindow ||| [arg] dts	count=1
function	# of extra ||| extra	count=1
arg	the lower ||| lower	count=1
function	by type ||| type	count=1
arg	[arg_1] [arg_2] on the values ||| [arg_2] [arg_1]	count=4
module	is used to ||| testing	count=1
function	adjustments for a ||| get adjustments for	count=2
arg	a range [arg] ||| [arg]	count=1
function	time range ||| range	count=1
module	the state of ||| performance	count=1
function	the minutes for that ||| minutes for	count=1
function	the asset for a ||| asset	count=1
arg	to order ||| data order	count=1
function	[function_1] a subclass ||| [function_1] [function_2]	count=1
class	raw ||| with seeded random pipeline engine	count=1
function	into a ||| maybe from	count=1
function_arg	[function_1] a bcolzdailybarwriter ||| [arg_2] [function_1]	count=2
function	the close of ||| close	count=1
function	a path ||| path	count=3
function	for this sid ||| for sid	count=3
function	asymmetric ||| asymmetric round	count=1
arg	price ||| order	count=1
function_arg	pipelineloader [function_1] [arg_2] for the columns in ||| [function_1] [arg_2]	count=1
module	the latest minute ||| data	count=1
function	compute the expected return ||| binop return	count=1
function	last traded dt from ||| last traded	count=1
module	the arguments of a ||| utils	count=1
function	[function_1] applied for ||| [function_1] [function_2]	count=4
class	the magnitude of our ||| size	count=1
function_arg	[function_1] to path ||| [function_1] [arg_2]	count=3
arg	if the order ||| order transaction cost_per_unit	count=1
function	in ||| in	count=4
arg	to order ||| order	count=1
function_arg	[function_1] asset's ||| [arg_2] [function_1]	count=1
module	decorator that ||| utils	count=1
class	date ||| asset date	count=1
arg	the order hasn't had ||| order transaction	count=1
function_arg	pipeline [arg_2] ||| [function_1] pipeline [arg_2]	count=1
function	the raw [function] ||| expected [function]	count=1
module	returns the zipline utils ||| data	count=1
function	other that coerces ||| coerce numbers	count=1
function	orders towards ||| batch order target	count=1
arg	be cancelled? ||| event	count=1
class	high [class] ||| [class]	count=1
function	for the ||| overwrites for	count=1
module	a dataset that has ||| pipeline loaders blaze	count=1
class	collect ||| split adjusted estimates loader	count=2
function	coerces ||| coerce numbers	count=1
arg	pop entries [arg] ||| cls [arg]	count=2
function	order ||| order	count=5
function	ratios ||| ratios	count=1
arg	a mask of ||| assets mask	count=1
function_arg	dtype for [arg_2] ||| [arg_2] [function_1]	count=1
function	compute ||| compute root	count=1
function	our current in-view ||| current	count=1
function	futures testing data ||| future	count=1
function	unzip ||| unzip	count=1
function	load by ||| load	count=1
arg	suffix ||| suffix	count=2
function	return the data ||| data	count=1
class	a term that ||| computable term	count=1
function	returns the last traded ||| last traded dt	count=1
class	asset metadata to a ||| asset	count=1
function	[function_1] finder ||| [function_2] [function_1]	count=1
function	method that ||| method	count=1
function	quarter ||| zeroth quarter	count=2
function	paid yet pay ||| unit	count=1
class	asset ||| asset	count=2
function	range properly [function_2] ||| [function_2] [function_1]	count=1
function	given ||| batch order target percent	count=1
function	return all the sessions ||| sessions	count=1
arg	if the ||| asset amount	count=1
function	is a capital ||| capital	count=1
function	10 year [function] rates ||| get daily 10yr [function]	count=1
arg	a ||| cls	count=1
function	compute a lifetimes matrix ||| compute root	count=1
function_arg	last traded [arg_2] ||| [function_1] asset dt [arg_2]	count=1
module	of ||| core	count=1
function	dictionary containing adjustments for ||| adjustments for	count=1
module	towards ||| core	count=1
function	get a ||| get	count=3
function	results of the pipeline ||| pipeline	count=1
function	method corresponding to ||| method	count=1
function	type to ||| downsampled type	count=1
arg	n ||| n mask	count=2
function	based on the dividends ||| dividends	count=1
class	that ||| events loader	count=1
class	amount of commission to ||| commission	count=1
function	as attributes ||| set	count=1
function	asset info dataframe ||| asset info	count=2
arg	[arg_1] constructor ||| [arg_2] [arg_1]	count=2
function	register a new ||| register trading control	count=1
function_arg	[function_1] filling from ||| [function_1] expr lower [arg_2]	count=5
function	dataframe of trade data ||| make trade data	count=1
module	given portfolio ||| core	count=1
class	of commission to ||| commission model	count=1
arg	[arg_1] zipline ||| [arg_1] [arg_2]	count=2
function	symbol lookup [function_2] ||| [function_2] [function_1]	count=1
class	pipeline results ||| pipeline engine	count=1
function	was [function] ||| was [function]	count=3
function	prices to two ||| round price to	count=1
class	position by ||| position	count=1
module_class	[module_1] gross leverage ||| [module_1] [class_2]	count=2
function	subtest in a ||| subtest	count=1
function	make futures testing data ||| make commodity future	count=1
function	[function_1] for a ||| [function_2] [function_1]	count=2
function	given portfolio of ||| order target	count=1
arg	the given binary operator ||| op left	count=1
class	that should ||| loader	count=1
function	[function_1] for each ||| [function_1] [function_2]	count=5
function	[function_1] adjustment ||| [function_1] for [function_2]	count=1
function	a batch of orders ||| batch	count=1
arg	before the lower ||| lower	count=1
module	the assets ||| assets	count=1
arg	g ||| g	count=1
module	a [module] this ||| [module]	count=1
function	previous close ||| previous close	count=1
module	keyed by [module] ||| [module]	count=3
function	round ||| round	count=1
class	to ||| term	count=1
function	during ||| class	count=1
function	coerce self into a ||| as categorical frame	count=1
function	series of benchmark ||| benchmark	count=1
class	tracker ||| tracker	count=1
class	during teardownclass ||| test	count=1
function	format [function_2] ||| [function_2] [function_1]	count=6
function	[function_1] dataframe to ||| [function_2] [function_1]	count=1
function	2d ||| 2d	count=1
function	a particular sid ||| sid	count=1
function_arg	add a [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	v0 v1 [function_1] [arg_2] v1 == true ||| matching [function_1] [arg_2]	count=1
function	executed ||| add	count=1
function_arg	[function_1] this ||| [function_1] [arg_2]	count=8
function_arg	this sid [arg_2] ||| [function_1] [arg_2]	count=1
function	and close of the ||| and close	count=1
arg	on order ||| order	count=1
module_class	of this [class_2] ||| [module_1] [class_2]	count=4
arg	convenience constructor for passing ||| cls inputs window_length center_of_mass	count=1
function	as the timestamp ||| as	count=1
module	pricing data with adjustments ||| data	count=1
function	a list of all ||| all	count=1
class	a column ||| column	count=1
function	portfolio of ||| batch	count=1
function	name of ||| name	count=1
arg	content with ||| content	count=1
function	representing the value ||| value	count=1
class	new expression ||| numerical expression	count=1
arg	expected ||| expected	count=1
function	function to ||| function	count=1
function	the adjustment at ||| adjustment	count=1
function_arg	path [arg_2] ||| [function_1] [arg_2]	count=7
arg	application of getattr on [arg_1] [arg_2] ||| utils getattrs [arg_1] [arg_2]	count=3
function	session label returns ||| session	count=1
function	labels for ||| dates for	count=1
function	two [function] ||| assert [function]	count=3
function_arg	[function_1] each indicated ||| [arg_2] [function_1]	count=1
arg	portfolio of weights ||| weights	count=1
arg	argument list raises expections ||| present exc_unexpected exc_missing	count=1
arg	a suffix to word ||| word seq suffix	count=1
function	close of the ||| close	count=2
function	arguments ||| data query args	count=1
function	required ||| required estimates fields	count=1
function	a given portfolio of ||| order target percent	count=1
arg	a standard set ||| equities futures exchanges root_symbols	count=1
function	a function to ||| schedule function	count=1
module_class	[module_1] latest minute ||| [module_1] [class_2]	count=2
function	of benchmark returns from ||| benchmark returns	count=1
function	[function_1] metadata ||| [function_1] [function_2]	count=1
function	as ||| as	count=1
function	return a [function] of ||| [function] between	count=1
arg	time and ||| time	count=1
class	cache ||| cache	count=1
function	capital ||| calculate capital	count=1
arg	cached object ||| key	count=1
class	- offset ||| before	count=1
arg	for f from ||| f	count=1
function_arg	[function_1] [arg_2] ||| [function_1] min_percentile [arg_2]	count=8
function	towards a given ||| batch order target percent	count=1
class	merge ||| adjusted estimates loader	count=1
function	self other that coerces ||| coerce	count=1
function	compute and cache a ||| compute	count=1
function	the adjustments ||| adjustments from deltas with	count=1
function_arg	from [arg_2] ||| matching [function_1] [arg_2]	count=7
function	this needs ||| workspace value	count=1
function	a ||| batch order target percent	count=1
function_arg	[function_1] existing rootdir ||| [arg_2] [function_1]	count=1
function	the raw [function] an ||| expected [function]	count=1
function_arg	[function_1] url returning ||| [function_1] [arg_2]	count=1
function_arg	subclass of [arg_2] ||| [function_1] subcls [arg_2]	count=1
class	a term that ||| term	count=1
arg	equity by its ticker ||| symbol_str	count=1
function	exist for ||| make simple	count=1
arg	to pass to an ||| asset	count=1
class	[class_1] of which ||| [class_2] [class_1]	count=2
function	applied for this sid ||| for sid	count=1
arg	use getattr instead ||| attrs	count=1
function	into a [function_2] ||| [function_1] [function_2]	count=3
function	method ||| method	count=2
function_arg	the root directory ||| zipline root environ	count=1
arg	executed during ||| cls	count=1
arg	beginning with [arg] and ending ||| [arg]	count=1
arg	a suffix to ||| seq suffix	count=1
module	to be executed ||| testing	count=1
class	[class] either self ||| [class]	count=1
function_arg	[function_1] time and ||| [function_1] [arg_2]	count=4
class	to adjust a ||| trading algorithm	count=1
function	the following column names ||| bars	count=1
function	to be ||| callback	count=1
arg	to use getattr ||| attrs	count=1
class	a given ||| trading	count=1
function	download ||| download	count=1
function	year [function] rates ||| get daily 10yr [function]	count=1
function_arg	[function_1] of adjustments ||| [function_1] [arg_2]	count=4
module	be called according to ||| core	count=1
function	commission paid yet pay ||| per unit commission	count=1
function	that occur after the ||| post	count=1
function	load perform normalization and ||| load	count=1
function_arg	kind [arg_2] ||| utils make [function_1] [arg_2]	count=1
function	into a pandas timestamp ||| timestamp	count=1
arg	[arg_1] in attrs ||| utils getattrs [arg_1] [arg_2]	count=1
function	and end session label ||| session	count=1
arg	pop entries [arg_1] [arg_2] on the values ||| pipeline term pop params [arg_2] [arg_1]	count=2
class	registered tradingcontrol object ||| trading control	count=1
arg	equity by ||| as_of_date fuzzy	count=1
function	simplex domain implemented according ||| simplex	count=1
arg	elem ||| elem	count=1
function	other that coerces ||| coerce	count=1
function	the given ||| market data	count=1
function	orders towards a given ||| batch order target	count=1
function	that [function] ||| make [function]	count=1
function	patch pandas read_csv to ||| patch	count=1
function	executed ||| class	count=1
arg	passed to cls ||| cls	count=1
class	asset's start date ||| asset date	count=1
arg	convenience constructor ||| cls inputs window_length center_of_mass	count=1
arg	a preprocessor ||| preprocessor	count=1
arg	[arg_1] [arg_2] __new__ based on the ||| [arg_2] [arg_1]	count=6
function	check [function_2] ||| [function_1] [function_2]	count=2
class	to be executed during ||| case	count=1
function	the epoch ||| epoch	count=1
function	valid categorical missing_value ||| assert valid categorical missing	count=1
arg	before the dt the ||| dt	count=1
function_arg	a list [arg_2] ||| [arg_2] [function_1]	count=3
class	given portfolio ||| trading algorithm	count=1
class	leverage in ||| leverage	count=1
arg	for each indicated ||| indexes stocks start end	count=1
function	calendar by ||| calendar	count=1
class	the result of calling ||| result	count=1
module	data with ||| data	count=1
function_arg	[function_1] pandas categorical ||| [arg_2] [function_1]	count=1
class	a panel that ||| panel	count=1
arg	sids ||| sids	count=5
module	portfolio of ||| core	count=1
arg	of all ||| assets	count=1
function	the sessions [function_2] ||| [function_1] [function_2]	count=2
function	an 2d ||| values 2d	count=1
arg	on a filter subclass ||| op	count=1
class	to return ||| computable term	count=1
class	be ||| test	count=1
function	the last ||| last	count=2
function_arg	[function_1] standard set ||| [function_1] [arg_2]	count=1
module	arguments of ||| utils	count=1
arg	count ||| session_label count	count=1
function	[function_1] dividend ||| [function_1] [function_2]	count=1
function	download data from a ||| download without progress	count=1
function_arg	the value [arg_2] ||| [function_1] [arg_2]	count=5
class	stored expression ||| expression	count=1
module	[module_1] quandl wiki ||| [module_1] [module_2]	count=2
function	[function_1] and the ||| [function_1] [function_2]	count=3
function	op ||| for op	count=1
class	created and/or torn ||| test	count=1
module_class	in this array ||| lib adjusted array	count=1
function	applied for the ||| for	count=1
class	to be ||| test case	count=1
function	portfolio object ||| portfolio	count=1
function	return an 2d ||| expected bar values 2d	count=1
function_arg	close of [arg_2] ||| [arg_2] [function_1]	count=1
arg	a particular ||| all_adjustments_for_sid col_to_all_adjustments	count=1
arg	used to mark ||| msg stacklevel	count=1
function	payouts and the ||| data	count=1
function_arg	create a 2d [function_1] [arg_2] ||| [function_1] [arg_2]	count=4
function	given portfolio of ||| target percent	count=1
class	[class_1] calendar ||| [class_1] [class_2]	count=4
arg	algorithm_returns needs to be ||| algorithm_returns	count=1
function	[function_1] url ||| [function_2] [function_1]	count=1
function	paid yet pay ||| calculate per unit	count=1
module	downsample() ||| pipeline	count=1
function	orders towards ||| batch order	count=1
function	query a ||| query	count=1
function_arg	the percentile [arg_2] ||| [function_1] [arg_2]	count=1
class	a calendar ||| trading calendar dispatcher	count=1
function	portfolio ||| target percent	count=1
function_arg	[function_1] [arg_2] ||| [function_1] size [arg_2]	count=2
arg	data_query_time and ||| data_query_time	count=1
function	a given portfolio of ||| batch order target	count=1
function	return a [function] of all ||| [function] between	count=1
arg	tradingcontrolviolation either ||| asset amount	count=1
function	is hidden ||| hidden	count=1
function	overwrites ||| overwrites	count=1
function	[function_1] [function_2] this module ||| [function_2] [function_1]	count=1
class	a term ||| term	count=2
class	term from self ||| computable term	count=1
arg	cost of a ||| cost	count=1
function	given portfolio of ||| percent	count=1
function	prices to two places ||| price to penny	count=1
function	handle a tradingcontrolviolation ||| handle	count=1
arg	a list of sids ||| sids	count=1
arg	given binary operator ||| op left right	count=1
function	to [function_2] ||| [function_2] timestamp [function_1]	count=1
function_arg	[function_1] of delimiters ||| [arg_2] [function_1]	count=1
module_class	[module_1] a sqlite ||| [module_1] [class_2]	count=2
arg	trading ||| end initialize capital_base	count=1
arg	"improves" the price ||| price prefer_round_down diff	count=3
function	[function_1] [function_2] columns ||| [function_1] [function_2]	count=18
module_class	the cash [class_2] ||| [module_1] [class_2]	count=7
arg	computed at ||| name chunks	count=1
arg	given dt with adjustments ||| dt	count=1
arg	the dt ||| dt	count=1
function_arg	db [arg_2] ||| [arg_2] [function_1]	count=2
function	get the value of ||| get	count=1
function	to ||| class callback	count=2
function	extra ||| expect extra	count=1
module	data for ||| data	count=1
function_arg	asset for [arg_2] ||| [arg_2] [function_1]	count=2
module	of pandas ||| assets	count=1
arg	two sets ||| msg path	count=1
function	modified time of ||| modified time	count=4
function_arg	[function_1] [arg_2] ||| [function_1] sid [arg_2]	count=6
module	that would have ||| pipeline loaders	count=1
function_arg	v0 v1 [function_1] [arg_2] v0 v1 == true ||| [function_1] [arg_2]	count=1
arg	data a nested dictionary ||| data current_date_func asset_finder	count=1
arg	dt the ||| dt	count=1
module	dataset that has ||| pipeline loaders	count=1
class	[class_1] position to ||| [class_2] [class_1]	count=4
function	the adjustments ||| adjustments	count=2
function	get a series of ||| get	count=1
function	the dtype of the ||| dtype	count=1
function_arg	[function_1] row of ||| [arg_2] [function_1]	count=3
arg	of the indicated assets ||| indexes stocks start end	count=1
arg	binary operator ||| op left	count=1
function	limit [function_2] ||| [function_2] [function_1]	count=3
class	return all the ||| trading	count=1
module	of ||| testing	count=1
function_arg	[function_1] of cls ||| [arg_2] [function_1]	count=3
function_arg	message for [arg_2] ||| [function_1] [arg_2]	count=2
arg	row ||| mask	count=1
function	orders ||| batch	count=1
module	quandl wiki ||| bundles	count=1
class	register ||| zipline	count=1
module	held [module] functionally ||| [module]	count=1
class	to return ||| computable	count=1
class	the cache ||| cache	count=1
arg	mark a function as ||| msg stacklevel	count=1
class	of this graph ||| term graph	count=1
function	compute the expected ||| binop	count=1
function	sync the temporary ||| commit	count=1
module	return ||| pipeline	count=1
arg	by picking out the ||| stacked_last_per_qtr	count=2
arg	value with ||| value	count=1
class	[class] payments to ||| [class]	count=1
arg	suffix to ||| suffix	count=1
class	executed during ||| test case	count=1
function	round a to ||| round	count=1
function_arg	[function_1] tradingcontrolviolation either ||| [function_1] [arg_2]	count=1
arg	from target ||| target regression_length	count=1
arg	for term after computation ||| term refcounts	count=1
function	2d array containing cls ||| values 2d	count=1
function	next session ||| next session	count=1
function	making binary [function_2] ||| [function_1] [function_2]	count=1
module	the arguments of ||| utils	count=1
function	of a dataframe to ||| to	count=1
function	a computation date ||| compute	count=1
function	position ||| position	count=1
function	as ||| as ts	count=2
class	result of calling ||| result	count=1
module	notice/expiration date behavior of ||| assets	count=1
class	to return ||| term	count=1
arg	called *exactly once* ||| amount portfolio algo_datetime	count=1
function	projection [function_2] ||| [function_2] [function_1]	count=2
function	as the ||| as	count=1
function	towards ||| order	count=1
function	fill price ||| fill	count=1
arg	[arg_1] value ||| [arg_2] [arg_1]	count=3
arg	the order hasn't ||| order transaction	count=1
arg	values such ||| values	count=1
function	which the adjustment ||| adjustment	count=1
function	after [function_2] ||| [function_1] [function_2]	count=1
function	of trade ||| make trade	count=1
arg	the given binary operator ||| op left right	count=1
function	asymmetric rounding function ||| asymmetric	count=1
function	the adjustments that ||| adjustments	count=2
module	be resolved ||| core	count=1
class	exist at all during ||| simple pipeline	count=1
class	add ||| term graph	count=1
function	enter a ||| enter	count=1
function	the close of the ||| handle market close	count=1
arg	[arg] for ||| [arg] adjustments_dict	count=1
arg	order hasn't had a ||| order transaction cost_per_unit	count=1
function	place orders towards ||| order target percent	count=1
function	metadata ||| format metadata	count=1
function	the split-adjusted-asof-date ||| asof	count=2
function	array with the given ||| array	count=1
function	a configuration object that ||| create test zipline	count=1
function	of extra ||| extra	count=2
function_arg	[function_1] an event ||| [arg_2] [function_1]	count=1
function	that coerces ||| coerce	count=2
function	run ||| run	count=4
arg	label ||| session_label	count=1
arg	label return the ||| session_label	count=1
arg	seed ||| seed	count=1
function	to return an object ||| to	count=1
function	and the given quarter ||| quarter	count=1
function	a portfolio object to ||| portfolio	count=1
function	date ||| date	count=2
function_arg	rows [arg_2] ||| [arg_2] [function_1]	count=2
module_class	[module_1] from ||| [module_1] [class_2]	count=1
arg	two ||| msg	count=1
arg	with [arg] and ||| [arg]	count=1
function	return from self downsample() ||| downsampled	count=1
function	a utc tz-naive ||| utc	count=1
arg	for each row in ||| mask	count=1
arg	executed ||| cls	count=1
function	portfolio ||| order target percent	count=1
function	extra rows to ||| extra rows	count=1
function	2d ||| bar values 2d	count=2
module	from ||| bundles	count=1
module	downgrade [module] db ||| [module]	count=1
function	adjusting prices to ||| price to	count=1
function	this sid at each ||| sid	count=1
arg	registers ||| name calendar_type force	count=1
module	tradingcontrol to be ||| core	count=1
arg	calendar for ||| calendar	count=1
class	array ||| adjusted array	count=1
function	provide a portfolio object ||| portfolio	count=1
arg	surround content with ||| content	count=1
function	be ||| add class callback	count=2
arg	of length window_length is ||| window_length	count=1
class	a term that computes ||| computable term	count=1
function	element ||| element	count=1
function_arg	open an [arg_2] ||| [function_1] [arg_2]	count=1
arg	given dt with ||| dt perspective_dt	count=1
function_arg	forward [arg_2] ||| [arg_2] [function_1]	count=1
function	for all the sessions ||| for sessions	count=1
function_arg	columns required [arg_2] ||| [function_1] [arg_2]	count=1
function	sid [function] ||| merge [function] adjustments for all	count=3
function	adjustments that ||| adjustments from	count=2
function	into a pandas timestamp ||| ensure timestamp	count=1
function	the commission ||| commission	count=1
class	place orders towards ||| trading	count=1
function	[function_1] in that ||| [function_1] [function_2]	count=4
function	lists of ||| merge ownership	count=1
function	for the given ||| overwrites for	count=1
class	compute new expression ||| numerical expression	count=1
function	creates a dictionary ||| to dict	count=3
function	[function_1] binary ||| [function_2] [function_1]	count=1
function	[function_1] [function_2] ||| [function_1] name [function_2]	count=1
class	this array ||| array	count=1
function_arg	price for this ||| price is_buy	count=4
function	to load ||| load	count=1
arg	the order hasn't ||| order	count=1
function	series of benchmark returns ||| benchmark returns	count=1
arg	in sids ||| sids	count=1
arg	of tup ||| tup	count=1
class	return from self downsample() ||| computable term	count=1
function	executed during teardownclass ||| add class	count=1
function	[function_1] and close ||| [function_1] [function_2]	count=3
function	number of minutes ||| minutes	count=1
arg	of path ||| path	count=2
class	term [class_2] ||| pipeline [class_2] [class_1]	count=2
function_arg	create a 2d numpy [function_1] [arg_2] ||| [function_1] [arg_2]	count=2
function	be executed ||| add class	count=1
function	and the ||| check	count=1
function	executed during teardown ||| add instance	count=1
function	in that ||| in	count=2
arg	valid kwargs for f ||| f	count=1
function	[function_1] the session ||| [function_2] [function_1]	count=6
function	into a numpy dtype ||| dtype	count=1
class	minutes return all the ||| trading	count=1
function	to [function_2] ||| [function_1] [function_2]	count=1
module	calling the function ||| utils	count=1
function	the asset [function_2] ||| [function_1] [function_2]	count=3
module	expression ||| blaze	count=1
function	for a calendar ||| calendar	count=1
function	that returns a list ||| list	count=1
class	column ||| column	count=3
arg	that the end of ||| assets dts	count=1
function	a calendar by type ||| register calendar type	count=1
class	be executed during ||| case	count=1
function	all the sessions ||| sessions	count=2
class	result of ||| result	count=1
function	all [function_2] ||| [function_1] [function_2] matching	count=1
function	the close of the ||| market close	count=1
arg	kwargs passed ||| kwargs	count=1
arg	end of the ||| assets dts	count=2
function	trade data ||| make trade data	count=2
function	returns the last ||| last	count=1
function_arg	convert a tuple [function_1] [arg_2] ||| [function_1] [arg_2]	count=1
function	last [function_2] ||| [function_1] [function_2]	count=5
arg	given dt with ||| dt	count=1
function	in a ||| in	count=1
function	of extra rows to ||| extra rows	count=1
arg	whose name is ||| name	count=1
function	be executed during ||| add class	count=1
function_arg	[function_1] a float64multiply ||| [function_1] sliding windows [arg_2]	count=1
class	position to be ||| position	count=1
module_class	of this position ||| finance performance position	count=1
class	which this column ||| column	count=1
function	[function_1] adjustments ||| [function_1] asof [function_2]	count=2
function	[function_1] than ||| [function_1] [function_2]	count=1
function	compute our ||| compute	count=2
function	of trade [function_2] ||| [function_1] [function_2]	count=5
function	orders towards a given ||| order target percent	count=1
class	be executed ||| zipline test	count=1
function	teardownclass ||| add class	count=1
function	worse [function_2] ||| [function_2] [function_1]	count=2
function	string representations ||| date str	count=1
arg	this ||| is_buy	count=2
class	the start of each ||| trading	count=1
function	sid at each ||| sid	count=1
arg	a tradingcontrolviolation either by ||| amount	count=1
module	orders towards ||| core	count=1
arg	seed ||| seed dates sids	count=1
function	coerce self into ||| as categorical	count=1
arg	mark a ||| msg stacklevel	count=1
class	of ||| algorithm	count=1
class	for the given sid ||| trading algorithm	count=1
function	subclass of ||| subclass	count=1
function	range [function_2] ||| [function_2] [function_1]	count=1
function_arg	the value of ||| value assets	count=1
function	dataset ||| dataset	count=1
class	[class_1] pricing ||| [class_2] [class_1]	count=2
function	and adjustments ||| adjustments	count=1
arg	[arg] loaded ||| [arg] start	count=3
arg	field at ||| field	count=2
function	that a window of ||| window	count=1
function_arg	[function_1] dts ||| [function_1] index [arg_2]	count=1
function_arg	the split [arg_2] ||| [arg_2] [function_1]	count=4
function	to be executed during ||| add	count=1
function	commission ||| commission	count=2
arg	sids ||| sids default_none	count=1
module	the quandl ||| data bundles	count=1
function	previous event for ||| previous event	count=2
class	commission to charge ||| commission	count=1
arg	two sets this is ||| msg path	count=1
class	return ||| computable	count=1
function	a pandas timestamp object ||| timestamp	count=1
function	register a ||| callback	count=1
arg	presence of an ||| expected	count=1
function	[function_1] accountcontrol ||| [function_2] [function_1]	count=1
function	close of [function_2] ||| [function_1] for [function_2]	count=1
arg	length window_length [arg_2] ||| [arg_2] [arg_1]	count=2
function	this sid at ||| sid	count=1
function_arg	matches [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] [function_2] ||| [function_2] asset [function_1]	count=8
function	open and [function_2] ||| [function_2] [function_1]	count=4
arg	relative ||| paths	count=1
function	simplex domain implemented ||| simplex	count=1
function	a dataset ||| new dataset	count=1
function	an array of ||| array	count=1
class	get ||| future session bar reader	count=1
function	adjustments with the dict ||| adjustments with	count=1
arg	kwargs examples ||| kwargs	count=1
function	value ||| get value	count=2
function	to [function_2] ||| [function_2] [function_1]	count=2
function	into microseconds since midnight ||| to micros	count=1
function	[function_1] generator ||| [function_1] [function_2]	count=3
function	portfolio of ||| batch order	count=1
class	given ||| trading algorithm	count=2
module	with the ||| utils	count=1
arg	algorithm_returns needs ||| algorithm_returns	count=1
function_arg	the asset [arg_2] ||| [function_1] [arg_2]	count=1
module	the function ||| utils	count=1
function	and raises ||| check	count=1
function	adjustments ||| adjustments	count=7
class	file to ||| file	count=1
arg	either by raising or ||| amount	count=1
function	properly forward ||| ffill	count=1
arg	content ||| content	count=1
arg	with adjustments applied assuming ||| field is_perspective_after	count=1
class	panel that is the ||| panel	count=1
class	compute this term ||| term	count=1
class	during teardownclass ||| zipline	count=1
function_arg	[function_1] relative to ||| [function_1] [arg_2]	count=6
function	worse than the ||| price worse than	count=2
function_arg	[function_1] standard set ||| [arg_2] [function_1]	count=1
function	[function_1] for the ||| [function_2] [function_1]	count=1
function_arg	properly forward [arg_2] ||| [arg_2] [function_1]	count=1
function	exclusively ||| strictly	count=1
class	this factor that fall ||| factor	count=1
function	and adjustments [function_2] ||| [function_2] [function_1]	count=4
function	show a [function_2] ||| [function_2] [function_1]	count=1
function	ndarray ||| ensure ndarray	count=1
function	tradingcalendar whose ||| calendar	count=1
function	compute a ||| compute	count=3
function	extra rows of ||| extra rows	count=2
arg	desired asset's field at ||| field	count=1
function	[function_1] accountcontrol to ||| [function_2] [function_1]	count=1
function	containing adjustments [function_2] ||| [function_1] [function_2]	count=2
function	there is a capital ||| calculate capital	count=1
arg	new key value ||| key value	count=2
arg	fail if the given ||| amount portfolio algo_datetime	count=1
class	to be executed ||| test case	count=1
function	of trade ||| trade	count=1
arg	algorithm_returns ||| algorithm_returns	count=1
function	[function] desired value ||| [function]	count=1
arg	to path ||| path content	count=1
function	[function_1] [function_2] v0 v1 ||| [function_1] [function_2] matching	count=1
function	adjustments with the ||| adjustments with	count=2
function_arg	[function_1] given ||| [function_1] [arg_2]	count=3
function_arg	returns [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	[function_1] of the ||| [arg_2] [function_1]	count=4
function	handle a ||| handle	count=1
function	previous [function_2] ||| [function_1] [function_2]	count=2
function	portfolio ||| batch order target percent	count=1
function	register a ||| register	count=2
arg	size count + ||| count	count=1
function	terms of center of ||| from center of	count=1
function	both dividend ||| dividend	count=1
arg	list of sids ||| sids	count=1
arg	a pandas categorical ||| cls categorical	count=1
module	set of ||| assets	count=1
arg	if the ||| amount	count=1
function	[function_1] dividend payouts ||| [function_2] [function_1]	count=1
class	over the terms ||| term	count=1
arg	serve columns ||| columns	count=1
arg	cost ||| cost	count=1
function	enter [function_2] ||| [function_1] instance [function_2]	count=2
arg	step == 1 ||| a b	count=1
arg	epsilon of ||| epsilon	count=1
class	adjustment ||| adjustment	count=1
function	a given ||| order	count=1
function	row labels for ||| for	count=1
module	representing assets ||| assets	count=2
function_arg	[function_1] [arg_2] the columns in testingdataset ||| [function_1] [arg_2]	count=1
function	towards a given ||| target percent	count=1
function	should trigger implementation for ||| should trigger	count=1
module	dates ||| pipeline loaders	count=1
function_arg	[function_1] zipline ||| [arg_2] [function_1]	count=1
module	to return from ||| pipeline	count=1
class	a loader ||| loader	count=1
module	[module_1] this ||| [module_2] [module_1]	count=4
module	pipeline ||| pipeline loaders	count=1
function_arg	required to [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	matches [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	create a 2d numpy [function_1] [arg_2] containing ||| [function_1] [arg_2]	count=3
function	register a new tradingcontrol ||| register	count=1
function	[function] with ||| make [function]	count=1
function	[function_1] adjustments for ||| [function_1] [function_2]	count=1
class	of this factor that ||| factor	count=1
class	place orders towards a ||| trading	count=1
function	[function_1] axes ||| [function_2] [function_1]	count=3
function	given portfolio ||| order target percent	count=1
arg	values of self each ||| groupby	count=2
function	load by delegating ||| load adjusted array	count=1
function	orders ||| batch order	count=1
arg	the baseline ||| baseline	count=1
function	[function_1] data ||| [function_1] [function_2]	count=4
function_arg	message [arg_2] ||| [function_1] [arg_2]	count=2
arg	well-defined on data ||| data	count=1
arg	for the given datetime ||| dt	count=1
arg	range defined by min_percentile ||| min_percentile max_percentile mask	count=1
function	tree ||| tree	count=1
function	value of the desired ||| value	count=1
function	for a given ||| for	count=1
function	this needs to ||| to workspace value	count=2
arg	algorithm_returns ||| algorithm_returns sim_params trading_calendar	count=1
arg	the end [arg_2] ||| [arg_2] [arg_1]	count=8
function	[function_1] after the ||| [function_2] asof [function_1]	count=1
function_arg	percentile [arg_2] ||| [function_1] min_percentile [arg_2]	count=2
module	data to a ||| data	count=1
function	[function_1] subclass ||| [function_1] [function_2]	count=1
function	convert a timeseries ||| to	count=1
module	the state of this ||| finance	count=2
function	show ||| show	count=1
arg	shape ||| shape	count=1
function	an array ||| array	count=1
function_arg	[function_1] backtest ||| [function_1] [arg_2]	count=1
arg	relative to [arg_2] ||| [arg_2] [arg_1]	count=2
function	the minutes for all ||| minutes for	count=1
function	check ||| check	count=1
class	to return from self ||| term	count=1
function	extension file ||| extension	count=1
function	retrieves the future ||| current future	count=1
function	place orders ||| target	count=1
function_arg	pipelineloader that [function_1] [arg_2] the columns in testingdataset ||| [function_1] [arg_2]	count=1
arg	resample an array with ||| column close_locs	count=1
function_arg	extra rows [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	[function_1] given shape ||| boolean [function_1] [arg_2]	count=1
function	open [function_2] ||| [function_2] [function_1]	count=1
arg	the order hasn't had ||| order transaction cost_per_unit initial_commission	count=1
arg	midnight_utcs ||| midnight_utcs	count=1
function	download [function] 10 ||| [function] 10yr treasury	count=1
function	a calendar ||| register calendar	count=1
function	a ||| callback	count=1
arg	preprocessor ||| preprocessor	count=1
function	a subclass of ||| subclass	count=1
arg	length window_length is well-defined ||| window_length	count=1
function_arg	[function_1] given engine ||| [function_1] [arg_2]	count=1
function	towards a given portfolio ||| order target percent	count=1
arg	to cls ||| cls	count=1
class	new expression ||| expression	count=1
arg	delimiters ||| delimiters	count=1
arg	if the order hasn't ||| order	count=1
function_arg	[function_1] given shape ||| [arg_2] [function_1]	count=3
function	a ||| class	count=1
function	the timestamp field of ||| timestamp	count=1
module_class	[module_1] restricted_list ||| [module_1] [class_2]	count=2
class	during ||| test	count=1
class	register ||| trading algorithm	count=1
function	orders ||| percent	count=1
function	orders towards a given ||| batch order target percent	count=1
module	a [module] ||| [module]	count=1
function_arg	price for [arg_2] ||| [arg_2] [function_1]	count=4
function	a list ||| adjustment list	count=1
function	an 2d array containing ||| expected bar values 2d	count=1
function	date and determines ||| idx	count=2
function_arg	asset [arg_2] ||| [arg_2] [function_1]	count=2
function	open and close ||| open and close	count=2
function	orders towards ||| batch	count=1
arg	the given shape ||| shape	count=1
function	expression type to return ||| downsampled type	count=1
class	given estimates data for ||| earnings estimates loader	count=1
function_arg	[function_1] [arg_2] ||| [function_1] from yahoo [arg_2]	count=6
function	coerce self into ||| as	count=2
class	exist at all ||| simple pipeline	count=1
function	for the given ||| market data	count=1
function	given portfolio of ||| order target percent	count=1
class	exist at all during ||| simple pipeline engine	count=1
function	provided query ||| query	count=1
function_arg	a path [arg_2] ||| [arg_2] [function_1]	count=7
function	when the simulation ||| handle simulation	count=1
function	collect ||| collect	count=4
function	ratios to apply to ||| ratios	count=1
function	adjustment at the ||| adjustment	count=1
function	operator methods ||| operator	count=2
module	the given percentiles ||| filters	count=1
function	in our current in-view ||| current	count=1
arg	the kwargs passed ||| kwargs	count=1
module	the data for the ||| core	count=1
function	[function_1] sid ||| [function_2] [function_1]	count=12
class	pipeline results into a ||| simple pipeline	count=1
class	compute new expression ||| expression	count=1
module	a dataframe representing assets ||| assets	count=2
function	than ||| than	count=1
function_arg	or not asset was [function_1] [arg_2] ||| assets was [function_1] [arg_2] asset	count=2
arg	compare two sets ||| msg path	count=1
function_arg	a subclass [arg_2] ||| [function_1] subcls [arg_2]	count=1
arg	[arg_1] cls ||| [arg_2] [arg_1]	count=2
function	the next [function_2] ||| [function_2] [function_1]	count=3
function	all the adjustments that ||| adjustments from	count=2
arg	ratio and return the ||| asset ratio	count=1
arg	registers a calendar ||| calendar	count=1
function	format a [function_2] ||| [function_1] [function_2]	count=3
arg	lower date ||| lower	count=1
arg	data_query_time and [arg_2] ||| [arg_2] [arg_1]	count=1
function	[function_1] adjustments ||| [function_2] [function_1]	count=6
class	before handle_data on the ||| trading algorithm	count=1
function	symbol metadata ||| symbol metadata	count=2
module	to be executed during ||| testing	count=1
function	percentile ||| percentile between	count=1
class	latest minute on or ||| continuous future session	count=1
function	expression [function_2] ||| [function_1] [function_2]	count=1
class	to ||| zipline test case	count=2
function_arg	split [arg_2] ||| [arg_2] [function_1]	count=4
arg	[arg_1] constructor for ||| [arg_2] [arg_1]	count=6
function	towards a given portfolio ||| percent	count=1
function	window ||| window	count=2
class	to return from self ||| computable term	count=1
function	the adjustment ||| adjustment	count=1
class	our position ||| position	count=1
arg	dictionary of sets ||| d	count=1
function_arg	than [arg_2] ||| [arg_2] [function_1]	count=1
class	factor that ||| factor	count=4
module	decorator ||| utils	count=1
function	and ||| and	count=2
function	first [function] last dates ||| normalize [function] query	count=1
arg	subset of kwargs examples ||| kwargs	count=1
arg	a suffix ||| seq suffix	count=1
module	an ||| testing	count=1
function_arg	traded [arg_2] ||| [function_1] [arg_2]	count=1
function	version ||| write version	count=1
class	exist ||| simple pipeline engine	count=1
function	write ||| write	count=5
arg	given engine [arg_2] ||| [arg_1] [arg_2]	count=1
function	register ||| register trading control	count=2
function	during teardownclass ||| add class callback	count=1
arg	cached object ||| key dt	count=1
arg	values [arg_2] ||| [arg_1] [arg_2]	count=1
arg	count times ||| count	count=2
class	stock ||| tracker	count=1
function	expression type to ||| downsampled type	count=1
arg	the dt the open ||| dt	count=1
arg	given engine to ||| engine	count=1
arg	in timezone tz ||| t tz day_offset	count=1
module	data for the ||| data	count=1
arg	[arg_1] table ||| [arg_2] [arg_1]	count=2
class	cause the magnitude ||| size	count=1
module	iterator of ||| testing	count=1
class	the ||| term	count=1
arg	time [arg_2] ||| [arg_2] [arg_1]	count=1
arg	row in the input ||| arrays	count=1
arg	a dt find ||| dt	count=1
function	adjusting prices to ||| round price to	count=1
arg	operator ||| op left right	count=1
arg	time corresponding to reference_date_value ||| reference_date_value	count=1
function	clean up data ||| clean	count=1
arg	is a float64multiply ||| assets dts field	count=1
function	enter a [function_2] ||| [function_1] instance [function_2]	count=3
function	querying yahoo finance ||| yahoo	count=1
module_class	[module_1] [class_2] on each ||| [module_1] [class_2]	count=10
function	callable_ ||| verify callable argspec	count=1
function	last traded ||| get last traded	count=1
function_arg	[function_1] of ||| [arg_2] [function_1]	count=9
function	[function_1] returns ||| [function_1] [function_2]	count=5
function_arg	price [arg_2] ||| [arg_2] [function_1]	count=4
module	dataset that ||| pipeline loaders	count=2
function	of extra [function_2] ||| [function_1] [function_2]	count=5
function	the limit price for ||| limit price	count=1
class	file to the final ||| working file	count=1
class	register ||| test	count=1
function_arg	the asset [arg_2] ||| [function_1] sid [arg_2]	count=1
module	we build an adjustedarray ||| lib	count=1
function_arg	path relative ||| path paths environ	count=1
class	be read by sqliteadjustmentreader ||| adjustment writer	count=1
function	the value ||| value	count=3
function	the [function_1] [function_2] ||| [function_1] [function_2]	count=2
function	of seconds ||| seconds	count=1
module	badorderparameters exception [module] ||| [module]	count=1
function	benchmark returns from ||| benchmark returns	count=2
function	the name of ||| name for	count=1
function	series for use in ||| series	count=1
function	next known value and ||| next and	count=1
class	estimates data [class_2] ||| [class_2] [class_1]	count=2
function_arg	compute [arg_2] ||| [arg_2] [function_1]	count=4
function	register a new ||| register	count=3
class	[class_1] for the ||| [class_1] [class_2]	count=3
module	the list of ||| utils	count=1
function	schedules a function to ||| function	count=1
class	latest minute on ||| continuous future session	count=1
function	to two places ||| round price to	count=1
function_arg	[function_1] count ||| [function_1] first axis array [arg_2]	count=2
module	the latest minute on ||| data	count=1
function	range ||| range	count=1
arg	tradingcontrolviolation either by raising ||| asset amount	count=1
arg	filling from ||| upper checkpoints	count=1
class	with self seeded_random_engine ||| with seeded	count=1
function	adjustments ||| adjustments from deltas	count=2
function	adjustments that [function_2] ||| [function_2] [function_1]	count=3
class	previous ||| previous earnings estimates loader	count=2
function	pandas timestamp ||| timestamp	count=2
module	'held' held [module] functionally ||| [module]	count=1
function	set a ||| set	count=4
function	string representations of ||| str	count=1
function	a computation ||| compute	count=1
module_class	[module_1] sqlite file ||| [module_1] [class_2]	count=2
function	[function] of the ||| [function] of	count=3
function	next event for each ||| next event	count=1
function	[function_1] session ||| [function_1] for [function_2]	count=6
function	treasury ||| treasury	count=2
function	minutes [function_2] ||| [function_2] [function_1]	count=9
module	dataset that has ||| pipeline loaders blaze	count=1
function_arg	handle a [arg_2] ||| [arg_2] [function_1]	count=3
class	term ||| term	count=3
function	should be applied for ||| for	count=2
class	magnitude of [class_2] ||| [class_2] [class_1]	count=6
function	dir and a ||| files	count=1
module	register ||| testing	count=1
function	held for ||| size	count=1
function	set a ||| set max position	count=1
class	to adjust ||| algorithm	count=1
function_arg	[function_1] start ||| [function_1] dts [arg_2]	count=3
function	of resource columns required ||| required estimates	count=1
arg	continuous_future ||| continuous_future	count=1
arg	for term ||| term	count=1
class	strings ||| label array	count=1
function	session ||| index to session	count=1
function_arg	[function_1] uniformly-distributed dates ||| [function_1] [arg_2]	count=1
function	towards a given portfolio ||| batch order target percent	count=1
module	given start and ||| calendars	count=2
function_arg	[function_1] of cls ||| [function_1] subcls [arg_2]	count=3
function	[function] columns ||| split next [function] previous event	count=2
class	be executed during ||| zipline test case	count=1
function	of ||| batch order	count=1
class	for the given ||| trading	count=1
arg	an epsilon of ||| epsilon	count=1
function	place orders towards ||| order target	count=1
function	along the first axis ||| first axis	count=1
function_arg	[function_1] result ||| [function_1] [arg_2]	count=1
rep	the next [function_arg_2] ||| [module_class_1] [function_arg_2]	count=4
class	window worth of ||| rolling panel	count=1
arg	epsilon of a ||| epsilon	count=1
arg	add entries to the ||| col_to_overwrites next_qtr_start_idx last_per_qtr quarters_with_estimates_for_sid	count=1
function	apply a function but ||| apply	count=1
arg	the end ||| dts	count=1
arg	calendar for retrieval by ||| calendar	count=1
function	register ||| add class	count=1
function	a function ||| schedule function	count=1
function	make futures testing ||| make commodity future	count=1
function	return ||| values	count=2
module	the left side is ||| finance	count=1
function	[function_1] treasury ||| [function_1] [function_2]	count=1
arg	kwargs [arg_2] ||| pipeline term pop params [arg_2] [arg_1]	count=3
arg	callback ||| cls callback	count=1
function	return [function_2] ||| [function_2] [function_1]	count=4
function	the number of extra ||| extra	count=1
module_class	data to [class_2] ||| [module_1] [class_2]	count=8
arg	symbols ||| symbols	count=1
function	adjustments for a particular ||| get adjustments for	count=1
module	self ||| factors	count=1
function	is sorted ||| is sorted	count=1
arg	testcase this ||| testcase	count=1
arg	mask of all ||| dates assets mask	count=2
function	following column names ||| bars	count=1
function	collect all overwrites ||| collect overwrites	count=2
module_class	[module_1] [class_2] payments to be paid ||| [module_1] [class_2]	count=5
class	a panel that is ||| panel	count=1
function	active at the ||| active	count=1
function_arg	a calendar [arg_2] ||| [arg_2] [function_1]	count=1
arg	values such that ||| values	count=1
function	set the ||| set	count=2
function	compute a lifetimes ||| compute	count=1
arg	of dt ||| dt	count=1
function	worse than the ||| worse than	count=1
arg	expectations ||| expected_args expect_starargs expect_kwargs	count=1
function	to data ||| data	count=1
module	for [module] ||| [module]	count=1
arg	mask ||| assets mask	count=1
module	executed ||| testing	count=1
function	and ||| init	count=1
module	parameter is the ||| finance	count=1
arg	drop columns that didn't ||| start_date end_date extra_rows	count=1
function	builds a dict mapping ||| build	count=1
function	to be executed during ||| add class callback	count=1
function	for a [function_2] ||| [function_2] [function_1]	count=1
function	along the last axis ||| last axis	count=1
class	adjustment ratios ||| adjustment writer	count=1
arg	backtest for the ||| before_trading_start analyze	count=1
function	minutes which should ||| minutes	count=1
function	given quarter ||| quarter	count=1
arg	writer if provided ||| dates asset_info price_start price_step_by_date	count=1
module	to be ||| core	count=4
function	from a ||| from categorical	count=1
function	format a [function_2] ||| [function_2] [function_1]	count=6
module	any parent directories ||| utils	count=1
arg	registers a calendar ||| name calendar	count=1
function_arg	[function_1] dt ||| [arg_2] [function_1]	count=1
function	in open_or_closes with corresponding ||| special	count=1
function	retrieve the value at ||| get value	count=1
arg	f from a ||| f	count=1
function	applies pre-processors to ||| preprocess	count=1
class	asset ||| asset dbwriter	count=1
function_arg	[function_1] [arg_2] ||| [function_1] arrays [arg_2]	count=8
class	be executed during ||| test case	count=1
function	values we expect to ||| expected values	count=1
arg	name is ||| name	count=1
module	a blaze expression ||| loaders blaze	count=1
function_arg	returns a [arg_2] ||| [arg_2] [function_1]	count=1
function	to ||| to	count=10
arg	on a ||| op	count=3
arg	given dt with adjustments ||| dt perspective_dt	count=1
arg	each ||| groupby	count=2
arg	convenience ||| inputs window_length	count=3
arg	[arg_1] window ||| [arg_1] [arg_2]	count=4
module	store the [module_2] ||| [module_1] [module_2]	count=2
function	prices to two places ||| price to	count=1
function	portfolio of ||| order target percent	count=1
function_arg	operator methods [arg_2] ||| [function_1] [arg_2]	count=6
function	2d array containing cls ||| 2d	count=1
function	futures ||| future	count=1
class	gross leverage ||| leverage	count=1
function	place ||| batch order	count=1
module	by the given ||| utils calendars	count=2
module	track and ||| core	count=1
function	traded dt from the ||| traded dt	count=1
module	that the ||| pipeline loaders	count=1
function	adjustments [function_2] ||| [function_1] [function_2] sids	count=1
function	verifies inputs ||| expect	count=3
arg	mask ||| mask	count=2
function	[function_1] window ||| [function_1] [function_2]	count=1
function	prices to ||| to penny	count=1
function	extra ||| extra	count=5
module	is ||| finance	count=4
function	tz-aware ||| naive	count=1
function	[function_1] maps ||| [function_1] [function_2]	count=1
function	from the ||| get	count=1
arg	or before the dt ||| assets dt	count=1
function_arg	into [arg_2] ||| utils [function_1] tuple [arg_2]	count=1
function	for all the ||| for	count=1
function	the expected return ||| binop return	count=2
module	this ||| finance	count=4
function	of ||| batch	count=1
function	[function_1] [function_2] ||| [function_2] for asset [function_1]	count=2
function	[function_1] generator ||| [function_2] [function_1]	count=3
function	load the previous ||| previous	count=1
module	is complete run ||| finance	count=1
module	representing the state of ||| performance	count=1
function	an 2d array ||| expected bar values 2d	count=1
function_arg	sid at [arg_2] ||| [function_1] [arg_2]	count=1
arg	directory for all zipline-managed ||| environ	count=1
arg	an epsilon of a ||| epsilon	count=1
function	matches the ||| regex	count=1
function	shares we would like ||| get txn volume	count=1
function_arg	to repeat [arg_2] ||| [function_1] last axis array [arg_2]	count=4
arg	dt return the ||| dt	count=1
arg	check if two ranges ||| a b	count=1
arg	callable_ ||| callable_	count=1
function	and adjustments for ||| adjustments for	count=1
function	adjustments [function_2] ||| [function_1] [function_2]	count=9
function	sid collect [function_2] ||| [function_1] [function_2]	count=9
function	benchmark returns ||| benchmark returns	count=2
arg	time and tz ||| lower upper time tz	count=1
arg	[arg_1] window for ||| [arg_1] [arg_2]	count=4
function	be executed ||| add class callback	count=1
function	for each sid ||| for	count=1
function	are between ||| between	count=1
arg	filling from values ||| upper checkpoints	count=1
class	[class_1] given ||| [class_2] [class_1]	count=2
function	center ||| center	count=1
function	or returns a dataset ||| dataset	count=1
module_class	in [module_1] [class_2] list ||| [module_1] [class_2] restrictions	count=1
module	quandl ||| bundles	count=1
class	register a ||| zipline test	count=1
function	next known [function_2] ||| [function_1] [function_2]	count=1
function	a dataframe to ||| to	count=1
arg	time and ||| lower upper time	count=1
class	given sid ||| portal	count=1
function	a calendar by type ||| calendar type	count=1
function	a tuple [function] a ||| [function]	count=1
module	and store the cash ||| finance performance	count=1
arg	cls ||| cls msg	count=1
function	place orders towards ||| percent	count=1
class	be ||| case	count=1
class	file to the ||| file	count=1
function	for querying yahoo finance ||| yahoo	count=1
class	pipeline ||| simple pipeline	count=1
function	current data in view ||| current	count=1
function	[function_1] forward ||| [function_2] query in [function_1]	count=3
module	given ||| core	count=1
class	track ||| trading algorithm	count=1
function	[function_1] than the ||| [function_2] [function_1]	count=1
class	with self seeded_random_engine ||| with seeded random	count=1
function	handle a ||| handle violation	count=1
function	is ||| is	count=3
function	zipline utils calendar ||| calendar	count=1
module	of a function ||| utils	count=1
function_arg	download data [arg_2] ||| [arg_2] [function_1]	count=2
module	construct a ||| pipeline factors	count=5
function	to load perform ||| load	count=1
class	magnitude of our ||| size	count=1
function	[function] to use ||| test [function]	count=5
function	the next session ||| next session	count=2
function_arg	[function_1] on a ||| [function_1] [arg_2]	count=5
class	the expression ||| computable	count=1
function	adjustments ||| adjustments from deltas with	count=1
class	restrictions of which the ||| union restrictions	count=1
arg	compare two sets this ||| msg	count=1
arg	key ||| key	count=1
function	labelarrays rather than ndarrays? ||| is categorical	count=1
function	a given portfolio ||| order	count=1
function	api [function_2] ||| [function_1] [function_2]	count=1
arg	[arg_1] end of ||| [arg_2] [arg_1]	count=2
function	pandas timestamp objects ||| timestamp	count=1
function	trade data for ||| make trade data for	count=1
function	get the name ||| name	count=1
arg	python magic ||| commute	count=1
function	load all of the ||| load extensions	count=1
function	return from ||| downsampled	count=1
function_arg	convert a [function_1] [arg_2] ||| [function_1] [arg_2]	count=2
class	and ||| algorithm	count=1
class	specifying that this algorithm ||| trading algorithm	count=1
function	to include while computing ||| mask	count=1
class	with self ||| with seeded	count=1
function	required to ||| required	count=1
function	the asset info dataframe ||| asset info	count=1
function	futures testing data that ||| commodity future	count=1
function	overwrites that should ||| overwrites	count=1
function_arg	assert that [arg_2] ||| [arg_2] [function_1]	count=1
arg	count + 1 ||| count	count=1
module_class	[module_1] minute ||| [module_1] [class_2]	count=2
class	a ||| zipline test case	count=2
function_arg	a window [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] the adjustment ||| [function_1] for [function_2]	count=1
function_arg	run [arg_2] ||| [arg_2] [function_1]	count=6
function	a [function] ||| fetch [function]	count=1
arg	existing rootdir ||| cls rootdir end_session	count=1
class	latest minute on ||| continuous future	count=1
function	make ||| make	count=2
arg	[arg] v0 v1 ||| [arg]	count=1
arg	by picking out ||| stacked_last_per_qtr	count=2
arg	url returning ||| url	count=1
function	that applies pre-processors ||| preprocess	count=1
function	extra to the ||| expect extra	count=1
arg	during ||| cls	count=1
function	of an tradingcalendar whose ||| calendar	count=1
class	that our [class] ||| [class]	count=2
arg	timezone tz ||| t tz day_offset	count=1
module	state of ||| performance	count=1
function	ratios to apply ||| ratios	count=1
function	executed ||| class callback	count=2
arg	a float64multiply ||| dts field	count=1
module	of pricing data ||| data	count=1
module	pipeline this ||| pipeline	count=1
arg	compare two ||| msg path	count=1
function	expression type ||| downsampled type	count=1
class	exist at ||| simple pipeline	count=1
class	execution of this graph ||| term graph	count=1
class	return ||| term	count=1
function	modified [function_2] ||| [function_1] [function_2]	count=4
function	after [function_2] ||| [function_2] [function_1]	count=1
function	earliest [function_2] ||| data [function_1] possible [function_2]	count=2
class	get ||| algorithm simulator	count=1
arg	attrs ||| attrs	count=1
arg	epsilon ||| epsilon	count=1
function	seconds ||| seconds	count=1
function	on the dividends that ||| dividends	count=1
function	prices to ||| round price to	count=1
function	asymmetric rounding ||| asymmetric round	count=1
function	set a rule ||| set	count=1
function	[function_1] for the ||| [function_1] [function_2]	count=1
function	check that the raw [function_1] [function_2] an ||| [function_2] [function_1]	count=1
function_arg	an tradingcalendar [arg_2] ||| [function_1] [arg_2]	count=1
class	a ||| zipline test	count=1
function	in a [function_2] ||| [function_1] [function_2]	count=2
module_class	equity [class_2] ||| [module_1] [class_2]	count=1
function	session ||| to session	count=2
function	place orders towards ||| batch order target percent	count=1
function	[function_1] return dtype ||| [function_2] [function_1]	count=2
function	supplied kwargs as attributes ||| set	count=1
class	100 ||| random loader	count=1
module	this is used to ||| testing	count=1
function	executed during ||| add	count=1
function	executed during ||| class	count=1
function	returns a list ||| list	count=1
function	[function_1] occur after ||| [function_2] asof split [function_1]	count=1
function_arg	convert a [function_1] [arg_2] ||| utils [function_1] tuple [arg_2]	count=2
function	utc [function_2] ||| [function_2] [function_1]	count=3
function	a recarry of asset ||| asset	count=1
function	a url for querying ||| url	count=1
function	of an tradingcalendar ||| calendar	count=1
arg	start ||| start	count=2
arg	a suffix to ||| suffix	count=1
class	new expression strings and ||| expression	count=1
function	orders towards a given ||| order target	count=1
arg	*exactly once* on ||| amount portfolio algo_datetime	count=1
arg	an epsilon ||| epsilon	count=1
function	index ||| sorted index	count=1
arg	asset's ||| asset	count=1
arg	data_query_time [arg_2] ||| [arg_2] [arg_1]	count=1
function	lists ||| merge ownership	count=1
function	given portfolio of ||| batch order	count=1
function	value for ||| bar value	count=1
function	towards a given portfolio ||| target percent	count=1
arg	commission if the order ||| order transaction cost_per_unit	count=1
module_class	[module_1] leverage ||| [module_1] [class_2]	count=2
arg	the dt the open ||| assets dt	count=1
function	data history ||| history	count=1
function	assetfinder [function] ||| dumps [function]	count=1
arg	a mask [arg_2] ||| [arg_2] [arg_1]	count=4
arg	fail if we would ||| amount portfolio algo_datetime	count=1
function_arg	[function_1] for this ||| [arg_2] [function_1]	count=8
class	equity ||| usequity	count=1
function	a batch of ||| batch order	count=1
function	values we ||| expected values	count=1
function	timestamps of the open ||| open	count=1
function	to two places ||| round price to penny	count=1
function	parse a [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] first axis array [arg_2]	count=8
module	the arguments ||| utils	count=1
function	in the format ||| format	count=1
arg	[arg_1] that pred ||| [arg_1] [arg_2]	count=1
module_class	- datetime datetime that [module_1] [class_2] was placed ||| [module_1] [class_2] init dt asset amount	count=1
class	raw ||| pipeline engine	count=1
function	exist for ||| simple	count=1
function	sessions from the ||| sessions	count=1
function	load perform normalization ||| load	count=1
function	merge split adjustments ||| merge split adjustments	count=2
function	load by ||| load adjusted array	count=1
class	portfolio of ||| trading	count=1
function	short positions ||| long only	count=1
arg	our ||| dates assets	count=1
function	date find that day's ||| calculate dates	count=1
class	term that computes ||| computable term	count=1
function	[function_1] dtype for ||| [function_1] [function_2]	count=4
function	of the previous session ||| previous session	count=1
class	latest minute on or ||| continuous future	count=1
module	loads data ||| data	count=1
function	a binary ||| binary	count=1
function	that occur after ||| post	count=1
function	the corresponding session labels ||| index to session labels	count=1
function	projection ||| projection	count=1
class	for given ||| bcolz minute bar	count=2
function	traded dt from ||| traded dt	count=1
class	leverage in decimal ||| max leverage	count=1
function	of ||| order	count=1
function	split ||| split	count=7
function	an 2d ||| 2d	count=1
function_arg	[function_1] needed ||| [arg_2] [function_1]	count=5
module	be ||| core	count=5
function	the format expected ||| format	count=1
class	[class_1] calendar ||| [class_2] [class_1]	count=4
function	group ||| group	count=1
class	this algorithm ||| trading algorithm	count=1
module	be called ||| core	count=1
function	[function_1] a url ||| [function_2] [function_1]	count=1
function	next event for ||| next event	count=2
arg	[arg] v0 v1 ||| values [arg]	count=2
function	to be ||| add class	count=1
function	of center of mass ||| from center of mass	count=1
function	raw values we ||| raw expected values	count=1
function	time ||| time	count=3
arg	in which asset ||| asset	count=2
module	a ||| core	count=1
function	[function_1] until ||| [function_2] [function_1]	count=2
function_arg	close [arg_2] ||| [arg_2] [function_1]	count=1
module	the cash ||| finance performance	count=2
class	the magnitude [class_2] ||| [class_2] [class_1]	count=4
module	[module] db ||| [module]	count=1
arg	a float64multiply window ||| assets dts field is_perspective_after	count=1
class	be executed during ||| zipline	count=1
function	subtracts the mean from ||| demean	count=1
class	to ||| algorithm	count=1
function	any splits for ||| splits	count=1
class	with self seeded_random_engine ||| with	count=1
arg	[arg_1] [arg_2] based on the values ||| [arg_2] [arg_1]	count=4
function	[function_1] op ||| [function_2] [function_1]	count=1
class	position ||| position	count=2
class	price adjustment ratios ||| sqlite adjustment	count=1
arg	the callable_ to make ||| callable_	count=1
function	to be executed ||| add	count=1
function	[function_1] adjustment at ||| [function_1] for [function_2]	count=1
function	traded dt from ||| traded	count=1
function	the minutes for ||| minutes for	count=4
function	in the format expected ||| format	count=1
function	were alive at ||| only active assets	count=1
arg	[arg_1] and data_query_tz ||| [arg_2] [arg_1]	count=3
function	quarter ||| get zeroth quarter	count=2
function	construct a subtest in ||| subtest	count=1
function	asset that can provide ||| sliding windows	count=1
function	the generator ||| get generator	count=1
function	the stop [function_2] ||| [function_2] [function_1]	count=2
arg	min_percentile ||| min_percentile	count=1
module_class	construct [class_2] ||| [module_1] [class_2]	count=4
function	computation ||| compute	count=1
function_arg	assert that [arg_2] ||| [function_1] trade protocol [arg_2]	count=1
function	overwrite dates [function_2] ||| [function_1] [function_2]	count=1
class	leverage in decimal form ||| leverage	count=1
function	the name ||| name for	count=1
function_arg	name [arg_2] ||| [arg_2] [function_1]	count=1
arg	time ||| lower upper time	count=1
class	estimates data for the ||| earnings estimates loader	count=1
arg	the given testcase this ||| testcase	count=1
arg	two sets this ||| msg path	count=1
arg	either by raising or ||| asset amount	count=1
function	order in ||| order percent	count=1
function	[function_1] time range ||| [function_2] [function_1]	count=1
arg	of size count + ||| session_label count	count=1
function	returns a ||| load data	count=1
module	do we represent this ||| lib	count=1
function	[function_1] rows ||| [function_2] [function_1]	count=8
function	symbol [function_2] ||| [function_2] [function_1]	count=1
class	register ||| case	count=1
function	[function_1] [function_2] ||| [function_1] for [function_2]	count=27
function	sids ||| create daily trade source	count=1
function_arg	[function_1] count times ||| [arg_2] [function_1]	count=4
class	an ||| asset	count=1
arg	to reference_date_value ||| reference_date_value	count=1
function	verifies inputs [function_2] ||| [function_2] [function_1]	count=1
module	that has a ||| pipeline loaders	count=1
module_class	a path relative to [module_1] [class_2] directory ||| [module_1] [class_2]	count=1
arg	that an option ||| option	count=1
class	by delegating to ||| mixin	count=1
class	ensure that our [class_1] [class_2] ||| [class_1] [class_2]	count=1
function_arg	[function_1] elem ||| [function_1] tup [arg_2]	count=1
class	latest ||| continuous	count=1
function	towards a given ||| batch order	count=1
function	a given portfolio of ||| percent	count=1
function	a ||| batch order	count=1
function	to two places in ||| to penny	count=1
arg	dict of mappings ||| mappings	count=1
arg	a dictionary of sets ||| d	count=1
module_class	in this [class_2] ||| [module_1] adjusted [class_2]	count=1
function	[function_1] adjustments for ||| [function_2] [function_1]	count=1
class	and/or ||| position	count=1
arg	current dt ||| dt	count=1
class	term ||| computable term	count=1
function	pandas categorical ||| categorical	count=1
class	given portfolio of ||| trading	count=1
function	previous open ||| previous open	count=1
function	[function] adjustments for ||| [function]	count=1
function	the adjustments that ||| adjustments from deltas with	count=1
function_arg	traded dt [arg_2] ||| [function_1] [arg_2]	count=1
arg	fail [arg_2] ||| [arg_2] [arg_1]	count=8
function	benchmark [function_2] ||| [function_1] [function_2]	count=3
function	a given portfolio ||| order target	count=1
arg	count + 1 ||| session_label count	count=1
function	trade [function_2] ||| [function_1] [function_2]	count=5
arg	about the failure ||| datetime metadata	count=1
arg	of size count + ||| count	count=1
arg	a float64multiply [arg_2] ||| [arg_1] [arg_2]	count=4
function	in a given time ||| in	count=1
function	-> # of extra ||| extra	count=1
class	the position by ||| position	count=1
class	gross leverage in decimal ||| leverage	count=1
function_arg	[function_1] serve columns ||| [arg_2] [function_1]	count=3
function	[function_1] this sid ||| [function_1] [function_2]	count=10
function	the next known ||| next	count=1
function	[function_1] for ||| [function_1] [function_2]	count=20
arg	data_query_tz ||| data_query_tz	count=1
arg	with [arg] for the ||| [arg]	count=1
arg	to be ||| cls	count=1
class	executed ||| test case	count=2
class	that this [class] is ||| [class]	count=1
function	the raw ||| raw	count=1
function	a url [function_2] ||| [function_2] [function_1]	count=3
arg	to a ||| to	count=1
function	during ||| callback	count=1
arg	of a cached object ||| key	count=1
class	return from ||| term	count=1
function	[function_1] adjustment ||| [function_1] idx for [function_2]	count=1
function	that a window ||| window	count=1
arg	boundary ||| group dates requested_qtr_data last_per_qtr	count=1
arg	registers a calendar for ||| calendar	count=1
arg	particular ||| all_adjustments_for_sid col_to_all_adjustments	count=1
class	during ||| case	count=1
function	place orders towards ||| target	count=1
class	pipeline results into a ||| pipeline engine	count=1
function	emits random arrays seeded ||| seeded random	count=1
arg	of the desired ||| assets	count=1
class	raw ||| seeded random pipeline engine	count=1
module	that has a ||| pipeline loaders blaze	count=1
class	file ||| file	count=1
function	2d numpy [function] ||| make alternating boolean [function]	count=3
function	just assets [function] ||| [function]	count=1
arg	either ||| asset amount	count=1
class	a sqlite ||| sqlite	count=1
function	a ||| add class	count=1
function_arg	[function_1] be cancelled? ||| [function_1] [arg_2]	count=2
function	be executed during teardownclass ||| add	count=1
function_arg	[function_1] to order ||| [function_1] [arg_2]	count=1
function	decorator that verifies inputs ||| expect	count=3
class	leverage in decimal ||| leverage	count=1
function	[function_1] binary ||| [function_1] [function_2]	count=1
arg	either by ||| asset amount	count=1
module	a given ||| core	count=1
function	[function_1] [function_2] ||| [function_2] split [function_1]	count=3
arg	[arg] if ||| [arg]	count=3
arg	calendar for retrieval ||| name calendar	count=1
function	the expression type ||| downsampled type	count=1
module_class	[module_1] pricing ||| [module_1] [class_2]	count=1
arg	[arg_1] an ||| [arg_2] [arg_1]	count=3
function	a ||| add class callback	count=2
function	benchmark returns from yahoo ||| benchmark returns	count=1
function	pandas dataframe ||| dataframe	count=1
function	sessions ||| sessions	count=2
function	load by delegating ||| load	count=1
function	[function_1] info dataframe ||| [function_1] [function_2]	count=3
function	kind ||| kind check	count=1
class	orders towards a ||| algorithm	count=1
function	dtype for ||| dtype	count=1
module	[module] nanoseconds ||| [module]	count=3
function	between ||| between	count=1
arg	order's ||| fill_price	count=1
class	tracker ||| performance tracker	count=1
class	adjustment ratios ||| sqlite adjustment writer	count=1
function	last ||| get last	count=1
module	be executed during ||| testing	count=1
function	close of ||| market close	count=1
function	be executed during teardownclass ||| add class callback	count=1
function	calendar by ||| register calendar	count=1
arg	for a given ||| default_none	count=1
arg	value with [arg_2] ||| [arg_2] [arg_1]	count=1
function	[function_1] subclass of ||| [function_1] [function_2]	count=1
function	be applied for the ||| for	count=1
arg	end ||| dts	count=1
module_class	this [class_2] ||| [module_1] performance [class_2]	count=1
module	the data ||| data	count=1
arg	size count ||| session_label count	count=1
function_arg	[function_1] each indicated ||| [function_1] from yahoo [arg_2]	count=1
function	a binary ||| build binary	count=1
arg	count + ||| count	count=1
function	a sid collect ||| collect	count=1
arg	size count + 1 ||| session_label count	count=1
function	dividend payouts and the ||| dividend data	count=1
class	for the given ||| trading algorithm	count=1
function	array containing the raw ||| raw	count=1
function_arg	the percentile [arg_2] ||| [function_1] min_percentile [arg_2]	count=2
function	[function_1] return dtype ||| [function_1] [function_2]	count=2
function	[function_1] containing adjustments ||| [function_2] [function_1]	count=1
function	[function_1] methods ||| [function_1] [function_2]	count=1
module	[module_1] [module_2] ||| [module_2] [module_1]	count=8
module	dates around some data ||| loaders	count=1
class	leverage ||| leverage	count=1
function	[function_1] of benchmark ||| [function_2] [function_1]	count=1
module	for producing ||| factors	count=1
function	limit price for ||| limit price	count=2
arg	[arg_1] [arg_2] used by a earningsestimatesloader ||| [arg_2] [arg_1]	count=4
function	**kwargs ||| parse argspec	count=1
arg	adds a suffix ||| suffix	count=1
class	given estimates data ||| estimates	count=1
arg	of self from target ||| target regression_length	count=1
function_arg	whether or not asset [function_1] [arg_2] ||| assets [function_1] [arg_2] asset	count=2
class	cause the magnitude of ||| size	count=1
function	utc tz-naive [function_2] ||| [function_2] [function_1]	count=3
module	clear the ||| assets	count=1
function	config a configuration object ||| create test zipline	count=1
class	exist at ||| simple pipeline engine	count=1
arg	constructor for passing decay_rate ||| cls	count=3
class	to ||| test	count=1
function	get the [function_2] ||| [function_2] [function_1]	count=6
class	adjustments ||| earnings estimates loader	count=2
class	data ||| data	count=1
function	of ||| target percent	count=1
module	in this ||| finance	count=1
module_class	construct a [class_2] ||| [module_1] [class_2]	count=4
function	of ||| target	count=1
arg	order hasn't had a ||| order	count=1
function	values we expect ||| values	count=1
function	a sid collect all ||| collect	count=1
function	given portfolio of ||| batch order target percent	count=1
arg	[arg] a ||| [arg]	count=1
function	maps ||| maps	count=1
function	timestamp ||| timestamp	count=1
arg	of size count ||| session_label count	count=1
arg	fail if we ||| amount portfolio algo_datetime	count=1
function	a valid categorical missing_value ||| assert valid categorical missing	count=1
module	overwrite ||| utils calendars	count=1
arg	compare two sets this ||| msg path	count=1
function	given ||| batch	count=1
module	any ||| utils	count=2
function	required to serve ||| required estimates fields	count=1
arg	given a dt find ||| dt	count=1
function	a portfolio object ||| portfolio	count=1
class	adjustment ratios ||| sqlite adjustment	count=1
class	with ||| with seeded	count=1
arg	sqlite database ||| equities futures exchanges root_symbols	count=1
arg	the number of ||| on_error	count=1
class	argument objects the name ||| argument	count=1
function_arg	[function_1] on ||| [function_1] [arg_2]	count=5
function	dividend payouts [function_2] ||| [function_1] [function_2]	count=1
function	the frame expected by ||| session frame	count=1
class	on the ||| trading algorithm	count=1
arg	indicated assets ||| indexes stocks start end	count=1
arg	the dt ||| assets dt	count=1
module	for a set of ||| assets	count=1
arg	executed during teardownclass ||| cls	count=1
function	[function_1] maps ||| [function_2] [function_1]	count=1
function	adjustments [function_2] ||| [function_2] asof split [function_1]	count=2
class	latest minute on or ||| continuous future session bar reader	count=1
function	adjustments that [function_2] ||| [function_2] asof split [function_1]	count=2
function	[function_1] a treasury ||| [function_1] [function_2]	count=1
function	during ||| class callback	count=2
function	register ||| callback	count=1
class	equity pricing ||| usequity pricing	count=1
class	with ||| with	count=1
function	the provided query ||| query bounds	count=1
function	[function_1] return ||| [function_1] [function_2]	count=2
arg	bundle ||| bundle assets_version	count=1
function_arg	[function_1] viewpoint ||| [function_1] asset dt [arg_2]	count=5
function	orders towards ||| target percent	count=1
module	of [module] ||| [module]	count=6
function	to ||| callback	count=1
module	dates around some data ||| pipeline loaders	count=1
class	of the data stored ||| adjusted	count=1
function	split ||| pre split	count=1
function	a given time range ||| range	count=1
function	ingest ||| ingest	count=1
arg	if ||| amount	count=1
arg	kwargs for f from ||| f	count=1
function	orders ||| target percent	count=1
module	a set of sids ||| assets	count=1
function	a utc [function_2] ||| utils [function_2] [function_1]	count=1
function	download ||| download without progress	count=1
function	ensure that we're ||| ensure	count=1
class	gross leverage in decimal ||| max leverage	count=1
arg	ratio and return ||| asset ratio	count=1
class	be ||| zipline test	count=1
module	nat with the ||| utils	count=1
function	should [function_2] ||| [function_1] [function_2]	count=3
function	extra [function_2] ||| [function_2] [function_1]	count=3
module	a dataset that ||| pipeline loaders	count=2
module	blaze ||| loaders blaze	count=3
module	list of ||| assets	count=1
function	pipeline ||| attach pipeline	count=1
function	exist ||| simple	count=1
arg	values ||| values	count=3
function	and ||| check data query	count=1
function	a pd timedelta ||| timedelta	count=2
function_arg	root directory ||| zipline root environ	count=1
arg	target ||| target regression_length mask	count=1
class	all the calendar ||| trading calendar	count=2
function	for the given quarter ||| for	count=1
function	rows to load/compute ||| rows	count=1
class	be executed during teardownclass ||| test case	count=1
function_arg	name of [arg_2] ||| [arg_2] [function_1]	count=1
arg	end ||| end	count=1
function	check that all axes ||| verify indices all	count=1
function	lists of ownershipperiod ||| merge ownership	count=1
arg	build a zipline ||| environ	count=1
class	the given estimates data ||| estimates	count=1
arg	return pricing ||| dts	count=1
module_class	[module_1] checked ||| [module_1] [class_2]	count=4
function	callable_ ||| callable argspec	count=1
arg	[arg_1] on data ||| [arg_2] [arg_1]	count=2
arg	fail if the given ||| asset amount portfolio algo_datetime	count=1
function_arg	value of ||| value assets	count=1
arg	callback to ||| cls callback	count=1
function	data root ||| data root	count=2
function	load all ||| load extensions	count=1
function	given portfolio ||| batch order target percent	count=1
function_arg	traded [arg_2] ||| [function_1] asset dt [arg_2]	count=1
function	as the timestamp column ||| as ts	count=1
class	towards ||| trading	count=1
function	of resource columns required ||| required estimates fields	count=1
function	a progress ||| progress	count=1
function	compile into ||| to	count=1
class	the position by the ||| position	count=1
function_arg	[function_1] [arg_2] v1 == true ||| [function_1] [arg_2]	count=2
class	exchange ||| trading calendar	count=1
function	[function_1] rows ||| [function_1] [function_2]	count=8
function	towards a given ||| batch order target	count=1
arg	constructor for ||| cls	count=3
function	futures testing data that ||| future	count=1
function	dtype for the ||| dtype	count=1
function	[function_1] and ||| [function_1] [function_2]	count=5
function	that [function] ||| [function] equity	count=2
function	[function_1] progress ||| [function_2] [function_1]	count=1
class	bound ||| bound	count=1
function	set a rule specifying ||| set	count=1
arg	asset ||| asset	count=3
function	an order in the ||| order	count=1
arg	in dates where ||| dates	count=1
function	[function_1] [function_2] of a ||| utils [function_2] [function_1]	count=3
function	tz-naive timestamp to ||| to	count=1
class	by delegating to self ||| mixin	count=1
class	executed during teardownclass ||| case	count=1
function_arg	v0 v1 [function_1] [arg_2] == true ||| matching [function_1] [arg_2]	count=1
function	the mean from ||| demean	count=1
function	basis ||| basis	count=1
module	the ||| utils	count=16
function	load benchmark returns and ||| load market	count=1
class	the given estimates data ||| earnings estimates	count=1
arg	to ||| to	count=1
arg	internal method that returns ||| adjustments_dict table_name	count=1
function	open and close of ||| open and close	count=1
function_arg	the close [arg_2] ||| [function_1] [arg_2]	count=1
function	make a calendar ||| calendar	count=1
class	of our position ||| max position	count=1
class	given ||| minute	count=1
arg	array based ||| array	count=1
arg	[arg_1] pred ||| [arg_2] [arg_1]	count=1
class	from ||| frame loader	count=1
arg	given binary operator ||| op	count=1
class	orders towards a given ||| algorithm	count=1
arg	the columns [arg_2] ||| loaders validate column specs [arg_2] [arg_1]	count=3
arg	given portfolio of weights ||| weights	count=1
class	checked on each bar ||| trading algorithm	count=1
function_arg	window [arg_2] ||| [arg_2] [function_1]	count=3
function	and close of ||| and close	count=2
function	to ||| add	count=1
function	the close of ||| market close	count=1
function	[function_1] after ||| [function_2] asof split [function_1]	count=1
function	url ||| without progress	count=1
module	of a [module] this ||| [module]	count=1
arg	ratio and return ||| ratio	count=1
function_arg	db at [arg_2] ||| [arg_2] [function_1]	count=3
arg	place ||| limit_price stop_price	count=2
function_arg	root [arg_2] ||| [arg_2] [function_1]	count=5
function	[function_1] for index ||| [function_1] [function_2]	count=3
function	set the values stored ||| set	count=1
function	for each sid and ||| for	count=1
function	register ||| class	count=1
function	columns required to ||| required estimates	count=1
function_arg	[function_1] name is ||| [function_1] [arg_2]	count=3
arg	a [arg] ||| [arg]	count=11
module	is complete run ||| finance performance	count=1
arg	*exactly once* on each ||| asset amount portfolio algo_datetime	count=1
class	created ||| test	count=1
function	orders towards a ||| batch	count=1
function	pandas timestamp object ||| timestamp	count=1
arg	dts ||| dts	count=2
function	adjustments [function_2] ||| [function_2] split [function_1]	count=1
function_arg	create a [function_1] [arg_2] ||| [function_1] [arg_2]	count=4
arg	values [arg_2] ||| [arg_2] [arg_1]	count=1
arg	if the order hasn't ||| order transaction cost_per_unit initial_commission	count=1
function	table ||| table	count=1
function	all overwrites that ||| overwrites	count=1
arg	way that "improves" ||| prefer_round_down diff	count=1
class	during ||| zipline	count=1
arg	given dt ||| dt data_frequency	count=1
arg	g as ||| g	count=1
function_arg	stop price [arg_2] ||| [function_1] [arg_2]	count=2
function	load a dataframe ||| load	count=1
function	[function_1] [function_2] sids ||| [function_1] [function_2]	count=11
function	timestamp field [function_2] ||| [function_1] [function_2]	count=1
function	interval [function] keyed by ||| minute exclusion [function]	count=1
class	return from ||| computable	count=1
module_class	the [class_2] ||| [module_1] [class_2] init dt asset amount	count=1
module	given start and end ||| calendars	count=2
function	values are [function] ||| [function]	count=3
function	making binary ||| reflected binary	count=2
function	both dividend payouts ||| dividend	count=1
arg	order hasn't had ||| order transaction cost_per_unit	count=1
function	adjustments that occur ||| adjustments from	count=1
arg	the given engine ||| engine	count=1
arg	fail if [arg_2] ||| [arg_2] [arg_1]	count=2
class	next ||| next	count=1
function	on the provided query ||| query	count=1
function	into [function_2] ||| [function_2] [function_1]	count=3
module_class	to be checked ||| core trading algorithm	count=1
function	and raises a standard ||| check	count=1
arg	size count ||| count	count=1
class	open ||| trading calendar	count=1
module	of [module] sid's ||| [module]	count=1
function	current ||| current	count=1
function	[function_1] close ||| [function_1] [function_2]	count=9
class	the ||| computable	count=1
function	the simplex ||| simplex	count=1
function	the previous known ||| previous	count=1
arg	cost of ||| cost	count=1
arg	a given sid ||| sid default_none	count=2
function_arg	traded dt [arg_2] ||| [function_1] asset dt [arg_2]	count=1
function	order by ||| order value	count=1
function	orders ||| orders	count=1
arg	dtype with ||| dtype	count=1
arg	a db table ||| table	count=1
arg	before the dt ||| dt	count=1
function	overwrites that [function_2] ||| [function_2] [function_1]	count=4
function	the simplex domain ||| simplex	count=1
arg	window for each asset ||| is_perspective_after	count=1
function_arg	[function_1] [arg_2] ||| [function_1] limit price [arg_2]	count=4
function	adjustments that occur ||| adjustments from deltas	count=1
function	[function_1] axis ||| [function_2] [function_1]	count=8
arg	a cached object ||| key dt	count=1
function	be executed during teardown ||| add instance	count=1
arg	use getattr ||| name attrs	count=1
arg	[arg_1] [arg_2] on the values ||| pipeline term pop params [arg_2] [arg_1]	count=4
function	cache ||| cache	count=2
function_arg	[function_1] length window_length ||| [function_1] data [arg_2]	count=4
function	register a ||| register trading	count=1
function	[function_1] properly forward ||| [function_2] query [function_1]	count=1
function	is a [function_2] ||| [function_1] [function_2]	count=2
module	portfolio ||| core	count=1
class	register ||| zipline test case	count=2
function	[function_1] with ||| [function_1] [function_2]	count=3
function	of the ||| get	count=1
function	[function_1] limit ||| [function_2] [function_1]	count=1
function	collect all ||| collect	count=1
function	a url for ||| url	count=1
module	a pair of blaze ||| pipeline loaders blaze	count=1
function	return dtype for ||| return dtype	count=2
function	name of ||| name for	count=1
class	collect ||| estimates loader	count=4
class	previous ||| previous	count=1
arg	a dt find that ||| dt	count=1
function	for the given calendar ||| data	count=1
class	the given sid ||| trading	count=1
arg	[arg_1] field at ||| [arg_1] [arg_2]	count=2
function_arg	[function_1] directory for ||| [arg_2] [function_1]	count=3
function	portfolio object to ||| portfolio	count=1
class	trading_calendar used to ||| bar reader	count=1
function	place orders ||| order	count=1
arg	fail if ||| amount portfolio algo_datetime	count=4
module	out the ||| assets	count=1
function	given a sid collect ||| collect	count=1
arg	max_leverage ||| max_leverage	count=1
function	alias for retrieval ||| alias	count=1
function	last traded dt from ||| get last traded dt	count=1
class	[class_1] stock ||| [class_1] [class_2] earn	count=1
function_arg	kind [arg_2] ||| [arg_2] [function_1]	count=1
function	for the given ||| create overwrites for	count=1
arg	from the kwargs ||| kwargs	count=1
arg	within each row ||| mask groupby	count=1
arg	the data_query_time [arg_2] ||| [arg_1] [arg_2]	count=1
arg	"improves" the ||| prefer_round_down diff	count=1
module	required ||| pipeline loaders	count=1
function	collect split ||| collect split	count=1
function	the dividends that ||| dividends	count=1
arg	a nested dictionary ||| current_date_func asset_finder	count=1
function	orders towards a given ||| batch order	count=1
function	following column names for ||| bars	count=1
arg	surround content with the ||| content	count=1
function_arg	repeat [arg_2] ||| [function_1] last axis array [arg_2]	count=4
function	expected return ||| binop return	count=1
class	raw ||| random pipeline engine	count=1
class	minute ||| market	count=1
function	dataframe to ||| to	count=1
function	merge split [function_2] ||| [function_1] [function_2]	count=4
function_arg	[function_1] python magic ||| [function_1] op op [arg_2]	count=2
arg	of self from target ||| target	count=1
arg	dt ||| dt	count=12
function	to be executed ||| class	count=1
arg	price ||| price	count=1
function	[function_1] dtype ||| [function_2] [function_1]	count=4
function	containing the raw values ||| raw expected values	count=1
function	to ||| add class callback	count=2
function_arg	[function_1] [arg_2] ||| [function_1] idx [arg_2]	count=4
function_arg	subclass [arg_2] ||| [function_1] subcls [arg_2]	count=1
function_arg	tradingcalendar whose [arg_2] ||| [arg_2] [function_1]	count=1
module	the ||| data	count=15
function	[function] of ||| [function] sid	count=3
arg	the order hasn't ||| order transaction cost_per_unit initial_commission	count=1
arg	each indicated security ||| indexes stocks start end	count=1
function_arg	[function_1] array of ||| [function_1] arrays [arg_2]	count=1
arg	ratio and ||| ratio	count=1
arg	[arg] adjustedarraywindow ||| [arg] dts	count=3
function_arg	and the [arg_2] ||| [arg_2] [function_1]	count=2
function	url for [function_2] ||| [function_2] [function_1]	count=4
function	adjusting prices to two ||| round price to penny	count=1
function	applies pre-processors ||| preprocess	count=1
function_arg	[function_1] path as ||| [function_1] [arg_2]	count=4
module_class	[module_1] and/or stock ||| [module_1] [class_2]	count=4
function	for all ||| for all	count=1
arg	given engine to the ||| engine	count=1
arg	of kwargs examples ||| kwargs	count=1
function	the first [function_2] ||| [function_1] [function_2]	count=1
class	to compute this term ||| term	count=1
class	get ||| session bar reader	count=1
function	return an 2d array ||| expected bar values 2d	count=1
arg	operator to ||| op	count=1
class	argument objects the ||| argument	count=1
arg	algorithm_returns needs to be ||| algorithm_returns sim_params trading_calendar treasury_curves	count=1
function	making [function_2] ||| [function_1] [function_2]	count=2
function	be executed during teardownclass ||| class	count=1
function_arg	pipelineloader that [function_1] [arg_2] columns in testingdataset ||| [function_1] [arg_2]	count=1
module_class	data [class_2] ||| [module_1] data [class_2]	count=1
function	orders ||| order target percent	count=1
arg	for a particular ||| all_adjustments_for_sid col_to_all_adjustments	count=1
function_arg	sid [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] event ||| [function_2] [function_1]	count=2
arg	called *exactly once* on ||| amount portfolio algo_datetime	count=1
function	show a ||| show	count=1
function_arg	[function_1] path ||| [function_1] [arg_2]	count=6
function	the close ||| market close	count=1
function	asymmetric ||| asymmetric	count=1
function	download data from ||| download without progress	count=1
function	should ||| should	count=2
function_arg	the root [arg_2] ||| [arg_2] [function_1]	count=4
function	[function_1] overwrites that ||| [function_2] [function_1]	count=3
function	applied for [function_2] ||| [function_1] [function_2]	count=3
function	place orders ||| batch	count=1
arg	there is a float64multiply ||| dts field	count=1
function	for adjusting prices to ||| round price to penny	count=1
arg	shape ||| shape first_value	count=1
arg	add entries to ||| col_to_overwrites next_qtr_start_idx last_per_qtr quarters_with_estimates_for_sid	count=1
function	the [function_1] [function_2] ||| data [function_1] possible [function_2]	count=2
function	the previous open ||| previous open	count=2
arg	[arg] where the ||| [arg]	count=3
class	to adjustments ||| estimates loader	count=1
arg	calendar for ||| name calendar	count=1
function	numpy dtype ||| ensure dtype	count=1
function	minutes for ||| minutes for	count=3
function	with the dict ||| with	count=1
arg	negative shares of asset ||| asset	count=1
function	place orders towards ||| batch	count=1
function	creates ||| to dict	count=5
function	for the given ||| data	count=1
function_arg	percentile [arg_2] ||| [function_1] [arg_2]	count=1
module_class	[module_1] static ||| [module_1] [class_2]	count=1
class	loader ||| loader	count=1
function	orders towards ||| order	count=1
function	expression type to return ||| type	count=1
function_arg	[function_1] this order ||| [arg_2] [function_1]	count=8
function	the root ||| zipline root	count=1
class	time calendar [class_2] ||| [class_2] [class_1]	count=6
class	a given portfolio of ||| trading algorithm	count=1
class	period ||| period	count=1
function	have expected dtype kinds ||| kinds	count=1
function	to normalize ||| normalize timestamp to	count=1
function	place orders towards a ||| batch order	count=1
function	a subtest in a ||| subtest	count=1
class	the start of each ||| trading algorithm	count=1
arg	two sets ||| msg	count=1
class	compute new expression strings ||| expression	count=1
class	commission to ||| commission model	count=1
module	a ||| testing	count=1
function	[function_1] range properly ||| [function_1] [function_2]	count=1
function	a datashape ||| datashape	count=1
module	is complete ||| finance	count=1
function	place ||| target percent	count=1
class	be executed ||| test	count=1
arg	kwargs passed to cls ||| cls kwargs	count=1
function	[function_1] pandas categorical ||| [function_1] [function_2]	count=1
class	rule ||| stateful rule	count=1
function	kwargs as attributes ||| set	count=1
function_arg	from a [arg_2] ||| [function_1] [arg_2]	count=1
function	a pandas timestamp object ||| ensure timestamp	count=1
function	a ||| target percent	count=1
arg	data [arg_2] ||| [arg_2] [arg_1]	count=1
class	write ||| bar writer	count=1
function_arg	[function_1] [arg_2] columns in testingdataset ||| [function_1] [arg_2]	count=1
function	place a batch of ||| batch	count=1
class	price adjustment ratios ||| sqlite adjustment writer	count=1
arg	fail if ||| asset amount portfolio algo_datetime	count=2
function	tuple [function] a range ||| [function]	count=1
function_arg	index [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	open [arg_2] ||| [arg_2] [function_1]	count=1
class	asset's start date ||| date bounds	count=1
arg	if the given ||| amount	count=1
function	collect split ||| collect pre split	count=1
arg	values such that pred ||| values pred	count=1
function	and [function_2] ||| [function_2] [function_1]	count=4
function	asymmetric rounding ||| asymmetric	count=1
module_class	[module_1] order ||| [module_1] [class_2]	count=1
function	modified ||| modified	count=3
module	blaze expression ||| pipeline loaders blaze	count=1
function	get a [function_2] ||| [function_2] [function_1]	count=4
function	to load perform normalization ||| load	count=1
function	adjustments for a ||| adjustments for	count=1
class	asset metadata ||| asset	count=1
function	of asset [function_2] ||| [function_2] [function_1]	count=1
arg	specifier for ||| root_symbol_str offset	count=1
arg	relative to [arg_2] ||| [arg_1] [arg_2]	count=2
module	a function before ||| utils	count=1
function	date for ||| date	count=2
class	commission to charge ||| commission model	count=1
function	place orders towards a ||| target	count=1
class	be executed ||| zipline test case	count=1
module_class	[module_1] and/or stock ||| [module_1] [class_2] earn	count=5
function	sessions from the given ||| sessions	count=1
function	calendar by [function_2] ||| [function_1] [function_2]	count=1
function	pipeline ||| pipeline	count=1
class	the asset's start date ||| asset date bounds	count=1
function	into a dictionary ||| into	count=1
function	values we ||| values	count=1
arg	the input ||| arrays dates	count=1
class	ensure [class_1] [class_2] ||| pipeline filters [class_1] [class_2]	count=1
function	[function_1] limit ||| [function_1] [function_2]	count=1
function_arg	provided query [arg_2] ||| [function_1] [arg_2]	count=3
function	of benchmark [function_2] ||| [function_2] [function_1]	count=3
class	open [class] ||| [class]	count=1
function	the timestamp ||| timestamp	count=1
class	rule ||| rule	count=1
arg	from a url returning ||| url	count=1
arg	getattr instead ||| name attrs	count=1
function	recarry of asset lifetimes ||| asset lifetimes	count=1
function	return the minutes for ||| minutes for	count=1
function	retrieve the value ||| value	count=2
class	100 ||| seeded random loader	count=1
arg	dts that are ||| dts	count=1
function_arg	[function_1] a dictionary ||| [function_1] [arg_2]	count=1
class	the magnitude of ||| size	count=1
function	given portfolio ||| batch order target	count=1
arg	count times along the ||| count	count=2
function	returns a dataset ||| dataset	count=1
function	schedules a function ||| function	count=1
arg	that the columns ||| columns	count=1
class	with self ||| with seeded random pipeline engine	count=1
arg	quarter boundary ||| group dates requested_qtr_data last_per_qtr	count=1
function	subtest in ||| subtest	count=1
class	return from self downsample() ||| computable	count=1
function	a deprecated ||| deprecated	count=1
class	that this algorithm ||| algorithm	count=1
function	prices to ||| round price to penny	count=1
function	dividend [function_2] ||| [function_1] [function_2]	count=1
class	portfolio ||| algorithm	count=1
arg	before the dt the ||| assets dt	count=1
arg	the kwargs [arg_2] ||| pipeline term pop params [arg_2] [arg_1]	count=3
function_arg	calendar with ||| calendar name	count=1
function	tokenized representations ||| persistent ids	count=1
arg	algorithm_returns needs to ||| algorithm_returns sim_params trading_calendar treasury_curves	count=1
class	expression ||| computable term	count=2
function	[function_1] treasury ||| [function_2] [function_1]	count=1
arg	value ||| value	count=1
class	orders towards a ||| trading algorithm	count=1
function	corresponding ||| special	count=1
function	fall within the percentile ||| percentile	count=1
arg	register a callback to ||| callback	count=1
function	self other that coerces ||| coerce numbers	count=1
function	for ||| for	count=12
class	that should load ||| events loader	count=1
function	[function_1] for all ||| [function_1] [function_2] sids	count=5
arg	columns that didn't ||| start_date end_date extra_rows	count=1
function	[function_1] url ||| [function_1] yahoo index [function_2]	count=1
function	downsample() ||| downsampled	count=1
class	amount of commission to ||| commission model	count=1
function	adjustments that ||| adjustments	count=4
function	the open and ||| open and	count=2
function	calculate the ratios ||| ratios	count=1
function	data query ||| query	count=1
function	coerce self into a ||| as categorical	count=1
module	to be ||| testing	count=1
module	pipeline ||| pipeline	count=3
arg	is f ||| f	count=1
function	[function_1] index ||| [function_2] [function_1]	count=2
arg	application of getattr on [arg_1] [arg_2] ||| [arg_1] [arg_2]	count=3
function	set ||| set	count=7
arg	commission if the order ||| order transaction	count=1
arg	[arg] containing ||| [arg]	count=2
arg	converts ||| func argname arg	count=2
function	a calendar by ||| register calendar	count=1
function	of sources ||| sources	count=1
function_arg	split [arg_2] ||| [function_1] [arg_2]	count=4
function	the columns registered with ||| columns	count=1
function	method corresponding ||| method	count=1
function	the ratios to ||| ratios	count=1
function_arg	or not asset was [function_1] [arg_2] ||| [function_1] [arg_2]	count=2
function	zipline utils calendar ||| trading calendar	count=1
function	the version table ||| version	count=1
function	should load the next ||| next	count=1
class	exist ||| simple	count=1
arg	the given datetime ||| dt	count=1
arg	a backtest for the ||| ctx algofile algotext define	count=1
class	asset metadata to ||| asset	count=1
arg	[arg_1] the end ||| [arg_2] [arg_1]	count=4
function	first [function_2] ||| [function_2] [function_1]	count=1
function	register ||| class callback	count=2
arg	time ||| upper time	count=1
class	given ||| algorithm	count=1
function	the open and close ||| open and close	count=1
function	an order in ||| order percent	count=1
function_arg	return uniformly-distributed ||| datetime values shape	count=1
class	exist at all ||| simple pipeline engine	count=1
function	[function_1] dividend ||| [function_2] [function_1]	count=1
class	expression strings ||| expression	count=1
class	during teardownclass ||| case	count=1
function_arg	[function_1] uniformly-distributed integers ||| [function_1] [arg_2]	count=1
function	[function_1] date for ||| [function_2] [function_1]	count=1
class	name? ||| trading calendar dispatcher	count=1
class	executed ||| zipline test case	count=2
function	making binary [function_2] ||| [function_2] [function_1]	count=1
function	the last ||| get last	count=1
class	for [class] ||| [class]	count=1
function	value at ||| value	count=1
arg	from target ||| target	count=1
function	until which the ||| determine end	count=1
function_arg	[function_1] either ||| [function_1] [arg_2]	count=1
class	of this factor ||| factor	count=1
arg	[arg_1] events ||| loaders validate column specs [arg_2] [arg_1]	count=3
class	date ||| date bounds	count=2
class	tradingcontrol object ||| trading control	count=1
arg	of self each day ||| groupby	count=2
arg	relative to the zipline ||| paths environ	count=2
arg	two sets this is ||| msg	count=1
arg	of asset ||| asset	count=1
function	that returns the position ||| position	count=1
class	and ||| trading algorithm	count=1
arg	a preprocessor to ||| preprocessor	count=1
arg	term after ||| term	count=1
function	for all sids ||| for all sids	count=1
module_class	of argument ||| utils argument	count=1
function	for this [function_2] ||| [function_2] [function_1]	count=4
arg	term after ||| term refcounts	count=1
function	after the split-adjusted-asof-date ||| post asof	count=3
function_arg	[function_1] [arg_2] ||| [function_1] expected [arg_2]	count=1
function	[function_1] subclass of ||| [function_2] [function_1]	count=1
arg	g as a graph ||| g	count=1
class	place orders towards ||| algorithm	count=1
function	download data ||| download without	count=1
function	[function_1] an array ||| [function_2] [function_1]	count=1
function	register a new tradingcontrol ||| register trading control	count=1
function	set ||| set max position	count=1
function	the asset ||| asset	count=2
function	from [function] ||| load raw [function]	count=1
class	asset's start date ||| date	count=1
arg	end [arg_2] ||| [arg_2] [arg_1]	count=8
arg	mask of ||| dates assets mask	count=2
class	orders ||| trading	count=1
function	[function_1] than ||| [function_2] [function_1]	count=1
arg	for f ||| f	count=1
function	towards a given ||| percent	count=1
function_arg	[function_1] count times ||| [function_1] first axis array [arg_2]	count=2
function	url ||| url	count=1
module	datashape ||| loaders blaze	count=1
function	yahoo finance for ||| yahoo	count=1
function	following column names for ||| load bars	count=1
function	list of all ||| all	count=1
function	next event ||| next event	count=2
function_arg	[function_1] the order's ||| [function_1] limit price [arg_2]	count=2
arg	a calendar for retrieval ||| name calendar	count=1
arg	used to mark a ||| msg stacklevel	count=1
arg	in dates where the ||| dates	count=1
function	coerce self into ||| as categorical frame	count=1
arg	data_query_time ||| data_query_time	count=1
module	that would have changed ||| pipeline loaders	count=1
function	[function_1] close of ||| [function_2] [function_1]	count=5
function	the stop/limit [function] are reasonable ||| check stoplimit [function]	count=1
function	data for ||| data for	count=2
function	store missing values ||| not missing	count=1
module_class	[module_1] new factor ||| [module_1] [class_2]	count=2
arg	range defined ||| max_percentile mask	count=1
function	first and last characters ||| delimit	count=1
function_arg	[function_1] a url ||| [arg_2] [function_1]	count=1
function	[function_1] time ||| [function_2] [function_1]	count=3
class	all values falling between ||| percentile filter	count=1
class	minutes ||| bar reader	count=1
function	place ||| percent	count=1
function	a given portfolio ||| batch order	count=1
function	an adjustedarray [function] ||| [function]	count=2
function	ratios to ||| ratios	count=1
arg	the index [arg] split-adjusted-asof-date ||| [arg]	count=1
function	type to return from ||| downsampled type	count=1
module	for the quandl ||| data bundles	count=1
function	rows to load/compute of ||| rows	count=1
module	a blaze expression ||| blaze	count=1
function	towards ||| target percent	count=1
function	wiki metadata ||| metadata	count=1
function	prices to two places ||| round price to	count=1
arg	the data_query_time and data_query_tz ||| data_query_time data_query_tz	count=1
arg	getattr ||| attrs	count=1
function	set a limit ||| set max position	count=1
function	prices to ||| price to	count=1
function	[function_1] session ||| [function_2] [function_1]	count=10
function	the stop price for ||| stop price	count=1
function_arg	and the derived ||| data dividends stock_dividends	count=1
arg	a specifier for a ||| root_symbol_str offset	count=1
function	pipeline [function_2] ||| [function_1] [function_2]	count=1
function	place orders towards ||| target percent	count=1
function	context manager that should ||| context	count=1
function_arg	[function_1] backtest for ||| [arg_2] [function_1]	count=1
function	orders towards a ||| target percent	count=1
function	check that [function_2] ||| [function_2] [function_1]	count=2
function	towards ||| order target	count=1
class	write ||| daily bar writer	count=1
function	place ||| order	count=1
class	and an ||| trading	count=1
function	orders towards a ||| target	count=1
function	the should [function_2] ||| [function_2] [function_1]	count=3
arg	the end of ||| assets dts	count=2
function	dataframe to [function_2] ||| [function_2] [function_1]	count=1
function	object ||| object	count=1
arg	convenience constructor for passing ||| cls inputs window_length	count=3
class	the open [class] returns the ||| [class]	count=1
function	overwrites that [function_2] ||| [function_1] [function_2]	count=4
function	2d array containing ||| expected bar values 2d	count=1
arg	each row ||| mask groupby	count=1
function	towards a ||| order target	count=1
arg	[arg_1] in attrs ||| [arg_2] [arg_1]	count=1
function_arg	forward [arg_2] ||| [function_1] query in range [arg_2]	count=1
module	state of this ||| finance performance	count=3
arg	backtest for ||| ctx algofile algotext define	count=1
arg	a winsorized row ||| mask groupby	count=1
function	the minutes ||| minutes	count=2
class	register a ||| zipline	count=1
function	get the value ||| get	count=1
function_arg	invert a [arg_2] ||| [arg_2] [function_1]	count=1
module	cost parameter is the ||| finance	count=1
function	overlap ||| overlap	count=1
function	[function_1] an array ||| [function_1] [function_2]	count=1
function	than the ||| than	count=1
function	coerce self into a ||| as	count=2
class	from ||| term	count=1
arg	kwargs passed [arg_2] ||| pipeline term pop params [arg_2] [arg_1]	count=3
function	[function_1] open ||| [function_2] [function_1]	count=2
class	from self downsample() ||| computable	count=1
function	split adjustments with the ||| split adjustments with	count=1
function	[function_1] utc ||| [function_1] [function_2]	count=1
function	single ||| single	count=1
function	accountcontrol to ||| account	count=1
function	[function] the number ||| [function] max order	count=1
function	containing adjustments [function_2] ||| [function_2] [function_1]	count=3
class	if the ||| trading	count=1
function	the split ||| split	count=1
function	[function_1] a window ||| [function_1] [function_2]	count=1
module_class	cash [class_2] ||| [class_2] [module_1]	count=5
function	a number of seconds ||| seconds	count=1
arg	[arg_1] of the ||| [arg_2] [arg_1]	count=12
arg	algorithm_returns ||| algorithm_returns sim_params trading_calendar treasury_curves	count=1
function	convert a ||| to	count=2
function	extra to ||| expect extra	count=1
function	within the percentile ||| percentile between	count=1
function	that [function] with ||| make [function]	count=1
function	the pipeline that ||| pipeline	count=1
class	the open [class] returns ||| [class]	count=1
class	our stored expression ||| expression	count=1
module	dates around ||| loaders	count=1
function	rows ||| rows	count=3
function	matches ||| regex	count=1
arg	*exactly once* ||| asset amount portfolio algo_datetime	count=1
class	order ||| order	count=3
function_arg	convert [function_1] [arg_2] ||| [function_1] [arg_2]	count=2
arg	an asset ||| asset	count=1
function	round a ||| round	count=1
module	blaze ||| blaze	count=1
function	year [function] rates from ||| get daily 10yr [function]	count=1
arg	count + 1 that ||| session_label count	count=1
function	the asset [function_2] ||| [function_2] [function_1]	count=3
function	place orders towards a ||| batch	count=1
function	is [function_2] ||| [function_1] [function_2]	count=2
function	floats to ||| to	count=1
function_arg	[function_1] shape ||| [arg_2] [function_1]	count=3
module_class	calculate the [class_2] ||| [module_1] [class_2]	count=2
function	making ||| reflected	count=1
arg	to charge on order ||| order	count=1
class	a term from self ||| computable term	count=1
function	parse [function_2] ||| [function_2] [function_1]	count=1
function	that are between ||| between	count=1
function	worse [function_2] ||| [function_1] [function_2]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] trade protocol [arg_2]	count=1
function	objects in the format ||| format	count=1
function	and raises a ||| check data	count=1
function	and 100 ||| int	count=1
arg	verify that the columns ||| columns	count=1
arg	to word ||| word	count=1
function	find that day's ||| calculate dates	count=1
function	[function_1] stop price ||| [function_1] [function_2]	count=1
function	of resource columns required ||| required	count=1
function	true/false ||| bool	count=1
function	info dataframe into a ||| info	count=1
function	previous event ||| previous event	count=2
function_arg	[function_1] directory ||| [arg_2] [function_1]	count=3
class	retrieve ||| asset finder	count=1
function	[function_1] [function_2] ||| [function_2] query [function_1]	count=2
function_arg	[function_1] relative ||| [arg_2] [function_1]	count=3
function	pandas timestamp ||| ensure timestamp	count=1
arg	given dt according ||| dt	count=1
function	subclass ||| subclass	count=1
module	list of ||| utils	count=1
arg	the given dt according ||| dt	count=1
function	batch of orders ||| batch order	count=1
arg	count + ||| session_label count	count=1
function	compute a like-shaped ||| compute	count=1
class	on each registered tradingcontrol ||| control	count=1
function	[function] adjustments ||| [function]	count=1
class	a term [class_2] ||| pipeline [class_2] [class_1]	count=2
function_arg	a window [arg_2] ||| [function_1] data [arg_2]	count=2
function	all the adjustments that ||| adjustments from deltas	count=2
function	a sequence of tuples ||| tuples	count=1
class	commission to charge on ||| commission	count=1
function	needs ||| workspace value	count=1
module	into an int64index of ||| assets	count=1
function	an 2d array containing ||| bar values 2d	count=1
module	track ||| core	count=1
function	the format expected by ||| format	count=1
arg	convenience constructor for ||| cls inputs window_length center_of_mass	count=1
function	round a to the ||| round	count=1
module	given percentiles ||| filters	count=1
class	our position to ||| max position	count=1
class	calendar ||| trading calendar dispatcher	count=1
function	applied for ||| for	count=2
arg	if the given order ||| asset amount	count=1
function	of asset [function_2] ||| [function_1] [function_2]	count=1
function	given ||| order	count=1
function	[function_1] [function_2] ||| [function_1] instance [function_2]	count=5
function	containing adjustments ||| adjustments	count=1
class	that this [class] is well-formed ||| [class]	count=1
module_class	[module_1] and/or ||| [class_2] [module_1]	count=1
function_arg	[function_1] ratio and ||| [arg_2] [function_1]	count=2
function	calendars ||| calendars	count=1
function	until which [function_2] ||| [function_2] [function_1]	count=3
arg	a result of transaction ||| transaction	count=1
module	the ||| assets	count=2
class	each registered tradingcontrol ||| trading control	count=1
function	[function_1] metadata ||| [function_2] [function_1]	count=1
arg	in [arg] ||| [arg] start end	count=2
class	a given ||| trading algorithm	count=1
arg	convenience constructor for ||| cls inputs window_length	count=5
function	invert a dictionary ||| invert	count=1
function	dtype of ||| dtype	count=1
function	[function] to ||| test [function]	count=5
function	for the given calendar ||| market data	count=1
class	a ||| trading	count=1
function	decorator that applies pre-processors ||| preprocess	count=1
function	the expression ||| downsampled	count=1
function	a subclass ||| subclass	count=1
function	hasn't had a commission ||| commission	count=1
class	benchmark ||| benchmark	count=1
function	resource columns required ||| required estimates	count=1
function_arg	a subclass [arg_2] ||| [arg_2] [function_1]	count=1
arg	given bundle ||| bundle assets_version	count=1
arg	an event ||| event	count=1
function	accountcontrol ||| account	count=1
function	a calendar by ||| calendar	count=1
arg	before the lower ||| expr lower	count=1
function_arg	[function_1] either by ||| [arg_2] [function_1]	count=1
module	of this ||| finance	count=2
class	next ||| next earnings estimates loader	count=2
function	[function_1] the session ||| [function_1] for [function_2]	count=6
function	2d ||| expected bar values 2d	count=2
class	expression strings and a ||| numerical expression	count=1
arg	data [arg_2] ||| [arg_1] [arg_2]	count=1
function	for [function_2] ||| [function_1] [function_2]	count=6
arg	string in us/eastern time ||| time_str	count=1
function	orders ||| target	count=1
function	as deprecated ||| deprecated	count=1
function_arg	[function_1] [arg_2] ||| [function_1] extension [arg_2]	count=1
function	that coerces ||| coerce numbers	count=1
function	[function_1] sessions ||| [function_2] [function_1]	count=5
arg	register a callback to ||| cls callback	count=1
function_arg	list [arg_2] ||| [function_1] [arg_2]	count=3
class	teardownclass ||| test	count=1
function_arg	[function_1] [arg_2] ||| [function_1] pipeline [arg_2]	count=1
function	an iterable of sources ||| sources	count=1
function	[function_1] after ||| [function_2] asof [function_1]	count=1
function_arg	[function_1] python magic ||| [arg_2] [function_1]	count=2
arg	[arg_1] nested dictionary ||| [arg_2] [arg_1]	count=1
arg	template formatters into docstring ||| owner_name docstring formatters	count=1
function	to ||| add class	count=1
function	apply a function ||| apply	count=1
function	earliest ||| earliest	count=1
function	towards a ||| target percent	count=1
class	compute new expression strings ||| numerical expression	count=1
arg	register ||| cls	count=1
function	range properly ||| range	count=1
function	compute ||| compute	count=8
function	invert ||| invert	count=1
class	high [class] returns ||| [class]	count=1
function	[function_1] [function_2] ||| [function_2] asof [function_1]	count=6
function	a calendar [function_2] ||| [function_1] [function_2]	count=1
function	to utc ||| to utc	count=2
class	the amount of commission ||| commission model	count=1
module	be executed ||| testing	count=1
function	expected ||| binop	count=1
function	register a new ||| register trading	count=1
arg	values in attrs ||| attrs	count=1
function	towards ||| percent	count=1
function	split-adjusted-asof-date ||| asof date	count=1
function	timestamp field of a ||| timestamp	count=1
function	the last traded dt ||| last traded dt	count=1
class	a given portfolio of ||| trading	count=1
module	given label ||| calendars	count=1
class	with self ||| with	count=1
function	[function_1] session label ||| [function_1] [function_2]	count=1
function	first [function_2] ||| [function_1] [function_2]	count=1
class	executed during teardownclass ||| zipline	count=1
arg	[arg_1] the zipline ||| [arg_2] [arg_1]	count=2
arg	key [arg_2] ||| [arg_1] [arg_2]	count=1
function	a ||| order target	count=1
function	numpy array is sorted ||| is sorted ascending	count=1
function	[function_1] to ||| [function_1] [function_2]	count=1
function	a context manager ||| context	count=1
function	[function_1] data for ||| [function_2] [function_1]	count=4
function	simulation ||| handle simulation end	count=1
function	write both dividend payouts ||| write dividend	count=1
function	to the simplex domain ||| simplex	count=1
function_arg	worse than [arg_2] ||| [function_1] limit price [arg_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] sliding windows [arg_2]	count=15
function	dataframe ||| dataframe	count=1
function	applied for the given ||| for	count=1
function_arg	return uniformly-distributed dates ||| datetime values shape	count=1
function	sessions from ||| sessions	count=1
function	the close of the ||| close	count=1
function	a dataframe with minute ||| minute frame to	count=1
function	of earned unpaid ||| pay	count=1
class	sqlite file to ||| sqlite	count=1
function	check that a window ||| check window	count=1
class	to be executed ||| zipline	count=1
function	towards a given ||| order	count=1
arg	a float64multiply ||| assets dts field	count=1
function	single [function_2] ||| [function_1] [function_2]	count=1
arg	uniformly-distributed integers between ||| shape	count=1
function	a ||| order	count=1
class	new factor ||| factor	count=2
function	after the [function_2] ||| [function_1] [function_2]	count=1
module	filter ||| pipeline classifiers	count=2
function	a window of ||| window	count=1
function	the adjustments that occur ||| adjustments from deltas	count=1
function	sids ||| trade source	count=1
function	the asset for ||| asset	count=1
module_class	[module_1] [class_2] be paid on each ||| [module_1] [class_2]	count=5
module	before calling the function ||| utils	count=1
function	an order ||| order percent	count=1
function	2d array ||| expected bar values 2d	count=1
function	return dtype ||| return dtype	count=2
function	returns the position ||| position	count=1
function	[function_1] by type ||| [function_2] [function_1]	count=2
class	track and ||| algorithm	count=1
arg	a bcolzdailybarwriter ||| minute_frame calendar	count=1
function	given portfolio ||| target percent	count=1
function	raw [function] ||| expected [function]	count=1
function	the minutes [function_2] ||| [function_1] [function_2]	count=9
function	collect all the adjustments ||| adjustments from	count=2
function_arg	[function_1] [arg_2] ||| [function_1] [arg_2]	count=959
arg	self each ||| mask groupby	count=2
function	assets [function] ||| [function]	count=1
arg	ownershipperiods from a ||| key_from_row value_from_row	count=1
arg	functionally similar ||| reason	count=1
arg	with error handling ||| tup	count=1
function	register ||| add	count=1
function_arg	time of [arg_2] ||| [arg_2] [function_1]	count=8
function	alternating ||| alternating	count=1
arg	each row ||| mask	count=1
arg	operator to use ||| op	count=1
function	executed during ||| add class	count=1
function	[function_1] [function_2] this module ||| data [function_2] [function_1]	count=1
function	the name of the ||| name	count=1
arg	represent this dtype with ||| dtype	count=1
function	place orders towards a ||| order target percent	count=1
module_class	be checked on ||| core trading algorithm	count=1
function_arg	[function_1] binary operator ||| [function_1] [arg_2]	count=5
class	from ||| computable term	count=2
function	same units as ||| na t for	count=1
function	minutes which ||| minutes	count=1
arg	given engine ||| engine	count=1
arg	dt the ||| assets dt	count=1
arg	transaction ||| transaction	count=1
arg	[arg_1] zipline ||| [arg_2] [arg_1]	count=2
function	url [function_2] ||| [function_2] [function_1]	count=3
class	pricing ||| pricing	count=1
class	towards a ||| algorithm	count=1
function	from self downsample() ||| downsampled	count=1
function	open_or_closes with corresponding ||| special	count=1
function	write [function_2] ||| [function_1] [function_2]	count=4
function	lists of ownershipperiod objects ||| ownership	count=1
function	[function_1] applied for ||| [function_2] [function_1]	count=4
function	apply a function ||| apply async	count=1
arg	draw g as ||| g	count=1
arg	from values ||| values	count=1
function	from yahoo into ||| from yahoo	count=2
function_arg	price [arg_2] ||| [function_1] [arg_2]	count=4
class	the start ||| trading algorithm	count=1
function	resource columns required ||| required	count=1
function	extra to the ||| extra	count=1
function	for each ||| for	count=1
function	a url [function_2] ||| [function_2] index [function_1]	count=1
function	resolve a ||| resolve	count=1
arg	calendar for retrieval by ||| name calendar	count=1
function	the stop/limit [function] are ||| check stoplimit [function]	count=1
module	a given portfolio ||| core	count=1
function	[function_1] tokenized representations ||| utils dumps [function_1] [function_2]	count=1
function	a calendar ||| calendar	count=3
function	[function_1] and ||| [function_2] [function_1]	count=5
function	all [function_2] ||| utils [function_2] [function_1]	count=1
arg	tradingcontrolviolation either by ||| amount	count=1
arg	float64multiply window for each ||| dts field is_perspective_after	count=1
class	working ||| working	count=1
class	commission to ||| commission	count=1
function	for [function_2] ||| [function_1] [function_2] sids	count=1
function	basis even if ||| basis	count=1
arg	commission if the order ||| order	count=1
function	compressed gzipped file to ||| compressed	count=1
function	apply ||| apply	count=1
class	minutes ||| trading calendar	count=1
arg	[arg_1] [arg_2] v0 v1 == true ||| [arg_1] [arg_2]	count=6
module	datashape ||| pipeline loaders blaze	count=1
function	returns the last traded ||| get last traded dt	count=1
function	context manager that ||| context	count=1
class	[class_1] our position ||| [class_2] [class_1]	count=6
function	to two places in ||| round price to penny	count=1
function	the simplex domain implemented ||| simplex	count=1
function	stop price ||| stop price	count=2
function_arg	pipelineloader that [function_1] [arg_2] columns in testingdataset ||| [function_1] loader [arg_2]	count=1
function	data [function_2] ||| [function_2] [function_1]	count=5
function_arg	open an [arg_2] ||| [arg_2] [function_1]	count=1
class	a new factor that ||| factor	count=1
class	all the [class_2] ||| [class_1] [class_2]	count=1
function	extra rows needed ||| dependencies	count=1
function	next known value ||| next	count=1
class	our position to ||| position	count=1
function	pipeline that [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] sid at ||| [function_2] [function_1]	count=9
function	calendar [function_2] ||| [function_1] [function_2]	count=1
function	containing the raw ||| raw expected	count=1
function_arg	[function_1] count ||| [arg_2] [function_1]	count=4
arg	if the order hasn't ||| order transaction cost_per_unit	count=1
arg	for term ||| term refcounts	count=1
function	[function_1] the split-adjusted-asof-date ||| [function_2] [function_1]	count=3
class	to return from ||| computable term	count=1
function	given ||| target percent	count=1
arg	fail if the algo ||| asset amount portfolio algo_datetime	count=1
arg	values of self each ||| mask groupby	count=2
function	message for the ||| message	count=1
module	data for the given ||| data	count=1
module	we represent ||| lib	count=1
arg	dictionary of ||| d	count=1
function	[function_1] window ||| [function_2] [function_1]	count=1
class	latest minute on or ||| continuous	count=1
function	check that ||| check	count=1
class	open [class] returns the ||| [class]	count=1
function	pandas timestamp objects are ||| timestamp	count=1
arg	fixture's attribute by default ||| attr_name	count=1
arg	preprocessor to ||| preprocessor	count=1
function	apply a ||| apply async	count=1
arg	adds a suffix to ||| suffix	count=1
function	[function_1] traded dt ||| [function_1] [function_2]	count=4
function	bookkeeping of earned unpaid ||| pay	count=1
arg	on the number ||| on_error	count=1
class	that ||| loader	count=1
arg	the columns of ||| columns	count=1
function_arg	[function_1] bcolzdailybarwriter ||| [function_1] [arg_2]	count=1
function	frame expected by ||| session frame	count=1
function	coerces ||| coerce	count=2
arg	should be exited ||| context_manager	count=1
arg	desired version ||| desired_version	count=1
function	fail if the leverage ||| validate	count=1
function	the simulation ||| handle simulation	count=1
class	the asset's start date ||| asset date	count=1
function	load the next known ||| next	count=1
function_arg	[function_1] a backtest ||| [function_1] [arg_2]	count=1
class	percentile bounds [class_2] ||| [class_2] [class_1]	count=1
function	previous known ||| previous	count=1
function	the last axis ||| last axis	count=2
module	returns the zipline ||| data	count=1
function_arg	[function_1] seed ||| [arg_2] [function_1]	count=3
class	to the cache ||| expiring cache	count=1
class	a factor that ||| factor	count=2
arg	asset's field at ||| asset field	count=2
function	returns the next ||| next	count=1
function	a numpy dtype ||| dtype	count=1
arg	[arg_1] the asset ||| [arg_2] [arg_1]	count=2
function	[function_1] range ||| [function_1] [function_2]	count=1
function_arg	modified time [arg_2] ||| [function_1] [arg_2]	count=6
function_arg	[function_1] given datetime ||| [function_1] [arg_2]	count=1
class	specifying that this algorithm ||| algorithm	count=1
class	register a ||| zipline test case	count=1
function	occur after the split-adjusted-asof-date ||| post asof	count=1
function	and raises a ||| check data query	count=1
function_arg	ensure that [arg_2] ||| [function_1] sliding windows [arg_2]	count=5
arg	columns [arg_2] ||| [arg_2] [arg_1]	count=3
function	[function] two ||| [function] timestamp	count=1
function	bind ||| bind	count=1
function	portfolio ||| batch order	count=1
module	downgrades the assets ||| assets	count=1
function	pipelineloader that [function] ||| make [function]	count=1
function	to repeat ||| repeat	count=2
class	magnitude [class_2] ||| [class_2] [class_1]	count=4
function	split adjustments [function_2] ||| [function_2] asof [function_1]	count=2
function	a given portfolio of ||| batch order target percent	count=1
function_arg	[function_1] uniformly-distributed ||| [arg_2] [function_1]	count=2
function_arg	[function_1] cls ||| [function_1] subcls [arg_2]	count=3
function_arg	return [arg_2] ||| [arg_2] [function_1]	count=8
module	to ||| testing	count=2
function	on the dividends ||| dividends	count=1
class	algorithm ||| trading algorithm	count=1
class	that should load ||| loader	count=1
class	order exceeds ||| max order	count=1
function_arg	than the [arg_2] ||| [arg_2] [function_1]	count=1
function	return an 2d array ||| values 2d	count=1
arg	by min_percentile ||| min_percentile	count=1
module	orders towards a ||| core	count=1
class	return from self ||| computable	count=1
arg	given testcase ||| testcase	count=1
class	self downsample() ||| term	count=1
function	query ||| query bounds	count=2
function	name ||| name	count=1
class	gross leverage in ||| max leverage	count=1
arg	be cancelled? parameters ||| event	count=1
class	for writing ||| bcolz minute bar writer	count=1
class	the open [class] ||| [class]	count=1
function	compute a lifetimes matrix ||| compute root mask	count=1
function	overwrites that should be ||| overwrites	count=1
function	modified time ||| modified time	count=4
function	executed during ||| class callback	count=1
class	expression string with numexpr ||| numerical expression	count=1
function	create a deprecated ||| deprecated	count=1
function	lists of ||| ownership	count=1
module	is ||| factors	count=1
function	calendar ||| calendar	count=6
arg	order ||| order transaction cost_per_unit initial_commission	count=1
module_class	list of argument ||| utils argument	count=1
arg	a way that "improves" ||| prefer_round_down diff	count=1
arg	the kwargs ||| kwargs	count=1
module	cash ||| performance	count=1
arg	dictionary into a dictionary ||| d	count=1
class	our position to be ||| max position	count=1
class	the given sid ||| trading algorithm	count=1
function	a utc tz-naive timestamp ||| utc	count=1
function	data to load ||| load	count=1
function	[function_1] event for ||| [function_1] [function_2]	count=2
function	occur before the split-adjusted-asof-date ||| asof date	count=1
module	and store the ||| finance	count=1
class	a term [class_2] ||| [class_2] [class_1]	count=2
function	end session label returns ||| session	count=1
function	continuous ||| continuous	count=1
function	executed during teardownclass ||| class	count=1
arg	a set of symbols ||| symbols	count=1
module	of ||| assets	count=6
module	of blaze ||| blaze	count=1
function	adjusting prices to ||| round price to penny	count=1
function	[function_1] a subclass ||| [function_2] [function_1]	count=1
class	minutes ||| minute bar reader	count=1
class	pipeline results into ||| simple pipeline engine	count=1
class	each registered tradingcontrol object ||| trading control	count=1
class	orders towards ||| trading	count=1
arg	the values in attrs ||| attrs default	count=1
class	an asynchronous call ||| sequential pool	count=1
function	percent of the current ||| percent	count=1
function	tuple [function] a ||| [function]	count=1
function	merge split ||| merge split	count=1
module_class	this position ||| finance performance position	count=1
function_arg	limit price [arg_2] ||| [function_1] [arg_2]	count=2
class	sqlite file ||| sqlite	count=1
class	estimates data ||| estimates	count=1
function	asset [function_2] ||| [function_2] [function_1]	count=4
arg	to the desired version ||| desired_version	count=1
function	numpy array [function_2] ||| [function_2] [function_1]	count=2
arg	exists ||| environ	count=1
module	associated with the ||| loaders	count=2
function	[function_1] equity ||| [function_2] [function_1]	count=1
arg	the data_query_time [arg_2] ||| [arg_2] [arg_1]	count=1
arg	modify a preprocessor to ||| preprocessor	count=1
function	check that a ||| check	count=1
class	given portfolio ||| trading	count=1
arg	either ||| amount	count=1
class	boundcolumn object when ||| bound column descr	count=1
module	values associated with the ||| loaders	count=2
function	download ||| download without	count=1
function	label and a window ||| window	count=1
arg	given datetime ||| dt	count=1
module	the ||| pipeline loaders	count=4
module_class	[module_1] position ||| [module_1] performance [class_2]	count=1
function_arg	[function_1] needed to ||| [function_1] [arg_2]	count=5
function	[function_1] for all ||| [function_2] [function_1]	count=9
function	portfolio of ||| batch order target percent	count=1
arg	wiki dataset ||| asset_db_writer minute_bar_writer daily_bar_writer	count=1
function	all axes ||| verify indices all	count=1
arg	get_calendar method ||| force	count=1
module_class	a path relative to [module_1] [class_2] directory ||| [module_1] [class_2] dir getpath	count=1
class	a term that computes ||| term	count=1
arg	the presence of an ||| expected	count=1
function	overwrite ||| overwrite novel deltas	count=1
class	all the [class_2] ||| [class_2] [class_1]	count=1
function	[function_1] [function_2] ||| [function_1] asof [function_2]	count=8
function	orders towards ||| target	count=1
function	place orders towards a ||| target percent	count=1
arg	elements of tup ||| tup	count=1
function	[function_1] finder ||| [function_1] [function_2]	count=1
module	validate that the ||| pipeline loaders	count=1
function	the last traded dt ||| get last traded	count=1
module	that ||| pipeline loaders	count=3
function	handles the close of ||| handle market close	count=1
module	with the list of ||| utils	count=1
class	and an iterable ||| trading	count=1
function	occur after the ||| post	count=1
module	dates around some ||| pipeline loaders	count=1
function	[function_1] open ||| [function_1] [function_2]	count=2
arg	uniformly-distributed ||| shape	count=2
arg	an ||| asset	count=4
function	be executed during ||| callback	count=1
function	to two ||| price to penny	count=1
module	[module] nanoseconds since ||| [module]	count=3
function	a function as deprecated ||| deprecated	count=1
class	position to be greater ||| position	count=1
function	symbol lookup [function_2] ||| [function_1] [function_2]	count=1
module	return an iterator of ||| testing	count=1
module	equity ||| pipeline loaders	count=1
arg	that "improves" ||| prefer_round_down diff	count=1
class	to be executed during ||| test	count=1
function	data ||| get data	count=1
class	[class_1] stock ||| [class_2] [class_1]	count=1
function	retrieve asset types for ||| lookup asset types	count=1
module	that the expression ||| pipeline loaders blaze	count=2
class	towards a given portfolio ||| algorithm	count=1
function	towards ||| batch order target	count=1
arg	to use getattr instead ||| attrs	count=1
module	given portfolio of ||| core	count=1
function	a given ||| order target	count=1
arg	if the order ||| order	count=1
function	set a ||| set max	count=1
function	of center of mass ||| center of mass	count=1
function	that returns a list ||| get adjustment list	count=1
arg	an asset and dt ||| asset	count=1
function_arg	[function_1] seed ||| [function_1] loader [arg_2]	count=3
class	magnitude of the given ||| size	count=1
function	url for [function_2] ||| [function_2] index [function_1]	count=2
function	make a ||| make	count=1
function	that applies pre-processors to ||| preprocess	count=1
arg	a calendar ||| name calendar	count=1
class	to be executed during ||| zipline test case	count=1
function	set a limit ||| set max	count=1
function	the expected [function_2] ||| [function_1] [function_2]	count=5
function	split [function_2] ||| [function_1] asof [function_2]	count=4
class	to be executed ||| zipline test case	count=1
function	the version table ||| write version	count=1
class	price adjustment ||| adjustment writer	count=1
arg	weights ||| weights	count=1
module	construct a new filter ||| factors	count=1
arg	adds a suffix ||| seq suffix	count=1
class	file to the ||| working file	count=1
function	basis even ||| basis	count=1
function	pd timedelta ||| timedelta	count=2
arg	a dt ||| dt	count=3
function	register a ||| register trading control	count=1
function	update the timestamp ||| timestamp	count=1
function	register a new check ||| register	count=1
function	simulation date and determines ||| idx	count=2
class	to adjustments ||| earnings estimates loader	count=1
function	a ||| target	count=1
function	executed during teardown ||| instance	count=1
function	load benchmark returns and ||| load	count=1
arg	size count + 1 ||| count	count=1
class	in ||| asset	count=1
function	a series of benchmark ||| benchmark	count=1
function	[function_1] type ||| [function_1] [function_2]	count=2
class	[class_1] for ||| [class_1] [class_2]	count=3
arg	pattern ||| pattern msg	count=1
arg	number of ||| on_error	count=1
function_arg	context manager [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	[function_1] given sid ||| [function_1] [arg_2]	count=2
arg	of span ||| span	count=1
arg	checks the callable_ to ||| callable_	count=1
arg	formatters ||| formatters	count=1
function	close ||| close	count=4
function	during teardownclass ||| class callback	count=1
function	the data ||| data	count=1
function	of the [function_2] ||| [function_1] [function_2]	count=1
arg	a callback ||| cls callback	count=1
module	dates ||| loaders	count=1
arg	check if a path ||| path	count=1
arg	"improves" ||| prefer_round_down diff	count=1
function_arg	query [arg_2] ||| [function_1] [arg_2]	count=3
function	all the adjustments ||| adjustments from deltas with	count=1
class	place orders ||| algorithm	count=1
function	minutes for all ||| minutes for	count=2
module_class	[module_1] latest ||| [module_1] [class_2]	count=2
function_arg	worse than [arg_2] ||| [arg_2] [function_1]	count=1
function	of trade [function_2] ||| [function_2] [function_1]	count=5
class	towards a given ||| trading	count=1
function_arg	[function_1] with ||| [function_1] [arg_2]	count=4
arg	to mark a function ||| msg stacklevel	count=1
function	creating an empty asset ||| empty asset	count=1
function	[function_1] sessions from ||| [function_2] [function_1]	count=5
arg	that converts ||| func argname arg	count=2
function	trigger implementation for the ||| trigger	count=1
class	of the algorithm ||| trading algorithm	count=2
function_arg	from [arg_2] ||| [arg_2] [function_1]	count=8
arg	either by ||| amount	count=1
function	yahoo finance [function_2] ||| [function_2] [function_1]	count=1
arg	in attrs ||| attrs	count=1
arg	[arg_1] tz ||| [arg_2] [arg_1]	count=1
function	towards ||| batch order	count=1
function	all ||| all	count=7
arg	the sorted ||| method ascending	count=1
function	forward ||| ffill	count=1
function	explicitly allow none ||| optionally	count=1
function	the pipeline [function_2] ||| [function_1] [function_2]	count=1
module	we build an ||| lib	count=1
class	next ||| next earnings	count=1
function	overwrite dates in ||| overwrite	count=1
module	from self downsample() ||| pipeline	count=1
function	executed during teardownclass ||| callback	count=1
arg	[arg_1] desired version ||| [arg_2] [arg_1]	count=1
module	pair of blaze ||| pipeline loaders blaze	count=1
arg	compute rowwise array ||| data nbins_or_partition_bounds	count=1
arg	backtest for ||| handle_data initialize before_trading_start analyze	count=1
arg	[arg_1] tz ||| [arg_1] [arg_2]	count=1
function	minute data ||| minute	count=1
function	[function_1] pandas categorical ||| [function_2] [function_1]	count=1
module	before calling ||| utils	count=1
function	a given ||| batch order target percent	count=1
function	that can provide ||| sliding windows	count=1
function	[function_1] range properly ||| [function_2] [function_1]	count=1
function	load the previous known ||| previous	count=1
function	the previous close ||| previous close	count=2
function	register ||| register	count=3
arg	a specifier ||| root_symbol_str offset	count=1
class	of our position to ||| max position	count=1
function	event ||| event	count=2
function_arg	[function_1] of path ||| [arg_2] [function_1]	count=4
arg	shares and/or dollar value ||| asset max_shares max_notional	count=1
arg	[arg_1] [arg_2] __new__ based on the ||| pipeline term pop params [arg_2] [arg_1]	count=6
function	mask ||| mask	count=1
module	of ||| utils	count=2
function	convert a pd timedelta ||| timedelta	count=2
function	builds a ||| build	count=1
function	[function_1] [function_2] ||| [function_2] timestamp [function_1]	count=4
function_arg	value [arg_2] ||| [function_1] [arg_2]	count=5
function	the next close ||| next close	count=2
function	handles the close of ||| market close	count=1
class	[class_1] order ||| [class_2] [class_1]	count=2
module	associated with the ||| pipeline loaders	count=2
class	self ||| computable	count=1
function	to make a calendar ||| calendar	count=1
function	was attached ||| output	count=1
arg	[arg_1] of events ||| [arg_2] [arg_1]	count=4
function	apply a ||| apply	count=1
function_arg	are between [arg_2] ||| [arg_2] [function_1]	count=1
arg	[arg] v0 ||| values [arg]	count=2
function	format a ||| format	count=1
class	high [class] returns the ||| [class]	count=1
function	next ||| next	count=4
function	session label ||| session	count=2
function	load ||| load adjusted	count=1
function	will ||| test	count=1
arg	dt returns the ||| dt	count=3
module_class	the cash and/or ||| finance performance position	count=1
module	at the ||| data	count=1
function	retrieve the most ||| most	count=1
function	for a continuous ||| continuous	count=1
function	a numpy dtype ||| ensure dtype	count=1
function	100 ||| int	count=1
function	return an 2d ||| values 2d	count=1
function	[function_1] operator methods ||| [function_2] [function_1]	count=3
arg	[arg_1] [arg_2] used by a earningsestimatesloader ||| loaders validate column specs [arg_2] [arg_1]	count=4
arg	that the columns of ||| columns	count=1
function	[function] data from ||| earliest [function]	count=1
function_arg	[function_1] result ||| [arg_2] [function_1]	count=1
arg	that should be exited ||| context_manager	count=1
function_arg	[function_1] [arg_2] ||| [function_1] index [arg_2]	count=1
class	date ||| asset date bounds	count=2
arg	the result ||| result	count=1
arg	this dtype with ||| dtype	count=1
function	lists ||| ownership	count=2
class	place ||| trading algorithm	count=2
function	the future ||| get current future	count=1
function	current data in ||| current	count=1
function	merge adjustments ||| merge	count=1
function	the position ||| find position	count=1
function	percent of ||| percent	count=1
arg	a term ||| term	count=1
function	get the stop ||| get stop	count=2
function_arg	[function_1] exists ||| [function_1] [arg_2]	count=2
function	[function_1] rows to ||| [function_1] [function_2]	count=3
function	z-scores each ||| zscore	count=1
function	[function_1] context manager ||| [function_2] [function_1]	count=1
function	mapping to lists ||| ownership	count=1
function	to be ||| class callback	count=1
function	frame expected by ||| to session frame	count=1
function	tuple into a range ||| maybe from tuple	count=1
class	the high [class] returns ||| [class]	count=1
module	asset/date/column ||| loaders	count=1
function	of extra rows ||| extra rows	count=4
function_arg	[function_1] of dt ||| [function_1] dts [arg_2]	count=1
arg	a suffix ||| suffix	count=1
function	api ||| api	count=1
arg	use getattr ||| attrs	count=1
function	is the current data ||| current	count=1
function_arg	root exists ||| root environ	count=1
function	[function_1] timestamp to ||| [function_2] [function_1]	count=6
class	our [class] string ||| numerical [class]	count=1
function	next [function_2] ||| [function_1] [function_2]	count=4
class	term that computes ||| term	count=1
function	a given ||| percent	count=1
function	info dataframe ||| info	count=1
class	sqlite ||| sqlite	count=1
class	from ||| computable	count=1
function	should load the previous ||| previous	count=1
module	do we represent ||| lib	count=1
function	tuples ||| tuples	count=1
function	for adjusting prices to ||| price to	count=1
function	of ||| percent	count=1
module	the temporary directory ||| utils	count=1
function	for a particular sid ||| for sid	count=1
function	function ||| function	count=1
function	row labels for ||| dates for	count=1
class	merge ||| estimates loader	count=2
function	any splits ||| splits	count=1
arg	the order ||| order transaction cost_per_unit initial_commission	count=1
function	to two places ||| price to penny	count=1
function	mean from ||| demean	count=1
function	series for ||| series	count=1
function	held ||| size	count=1
function	[function_1] time ||| [function_1] [function_2]	count=3
function	orders towards a ||| batch order target percent	count=1
function	towards a given portfolio ||| batch	count=1
function_arg	[function_1] to path ||| [arg_2] [function_1]	count=3
function_arg	[function_1] be exited ||| [arg_2] [function_1]	count=2
class	to be ||| zipline test	count=1
function	last traded ||| last traded dt	count=1
module_class	[module_1] and/or ||| [module_1] [class_2]	count=9
function	retrieves the future ||| get current future	count=1
function	a given portfolio of ||| target	count=1
function	[function_1] date ||| data [function_1] possible [function_2]	count=1
function	collect split [function_2] ||| [function_2] [function_1]	count=4
function	the name ||| name	count=1
module	expected ||| pipeline factors	count=1
function	ensure that there ||| ensure	count=1
arg	number of [arg_2] ||| [arg_2] [arg_1]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] data [arg_2]	count=23
function	expected return dtype ||| binop return dtype	count=2
function	the should [function_2] ||| [function_1] [function_2]	count=3
function	prices to two ||| to penny	count=1
module	date behavior of ||| assets	count=1
function	portfolio ||| batch	count=1
arg	range defined [arg_2] ||| [arg_2] [arg_1]	count=2
arg	callable_ to make sure ||| callable_	count=1
function	to two places ||| price to	count=1
function	had a commission ||| commission	count=1
function	string representations of dates ||| str	count=1
class	[class_1] are ||| [class_2] [class_1]	count=3
function	earliest [function_2] ||| [function_2] [function_1]	count=2
arg	a callback ||| callback	count=1
function_arg	dtype for [arg_2] ||| [function_1] [arg_2]	count=1
function	register a new tradingcontrol ||| register trading	count=1
function	a function to ||| function	count=1
function	instance of an tradingcalendar ||| calendar	count=1
class	and stock ||| position tracker	count=1
arg	surround content ||| content	count=1
function	make futures ||| make commodity future	count=1
function	a ||| percent	count=1
function_arg	[function_1] quarter boundary ||| [arg_2] [function_1]	count=12
arg	order ||| data order	count=1
arg	range defined by ||| max_percentile	count=1
arg	data from a url ||| url	count=1
function_arg	[function_1] values such ||| [arg_2] [function_1]	count=2
function	the sessions from ||| sessions	count=1
function_arg	root directory for ||| zipline root environ	count=1
arg	to word ||| word seq	count=1
function	fill ||| fill price	count=1
function	that all axes ||| verify indices all	count=1
class	this column ||| column	count=1
function	of an tradingcalendar ||| get calendar	count=1
function_arg	[function_1] mask of ||| [arg_2] [function_1]	count=1
function	compute ||| compute root mask	count=1
function	[function_1] orders ||| [function_1] [function_2]	count=1
function	write data into the ||| write data	count=1
function	the value ||| get value	count=2
class	executed during teardownclass ||| test	count=1
function	expression type ||| type	count=1
arg	dt ||| assets dt	count=1
function	set ||| set max	count=1
function	for adjusting prices to ||| price to penny	count=1
function	a given portfolio ||| target percent	count=1
class	to ||| trading algorithm	count=1
function	the previous session ||| previous session	count=2
class	raw computed [class] ||| [class]	count=3
function	exist for the ||| simple	count=1
function	[function_1] axes ||| utils [function_2] [function_1]	count=3
function	frame expected by a ||| session frame	count=1
function	applied for this ||| for	count=1
function_arg	[function_1] [arg_2] the columns in testingdataset ||| [function_1] loader [arg_2]	count=1
class	teardownclass ||| zipline test case	count=2
function	root ||| zipline root	count=1
function	inputs [function_2] ||| [function_1] [function_2]	count=3
arg	kwargs passed to ||| kwargs	count=1
module	data into the ||| data	count=1
module_class	[module_1] [class_2] ||| [module_1] performance [class_2]	count=1
arg	calendar ||| name calendar	count=1
arg	like-shaped array of ||| dates assets	count=1
function	2d array containing ||| bar values 2d	count=1
function	simulation ||| simulation end	count=1
function	corresponding session labels ||| index to session labels	count=1
function	columns required ||| required estimates fields	count=1
arg	backtest for the ||| handle_data initialize before_trading_start analyze	count=1
function	orders towards a ||| percent	count=1
function	a window ||| window	count=2
class	one based on frequency ||| algorithm	count=1
module	we build ||| lib	count=1
function_arg	[function_1] mask ||| [arg_2] [function_1]	count=1
function	fail ||| validate	count=1
function	[function_1] all ||| [function_1] [function_2] sids	count=6
class	amount of commission ||| commission	count=1
function	the last traded ||| get last traded dt	count=1
class	place orders towards ||| trading algorithm	count=1
function	2d ||| values 2d	count=2
arg	[arg_1] of events ||| loaders validate column specs [arg_2] [arg_1]	count=4
class	on this array ||| array	count=1
class	collect ||| adjusted estimates loader	count=2
function	kwargs ||| kwargs	count=1
arg	on a dt ||| dt	count=1
arg	relative to the ||| paths	count=2
class	asset metadata to ||| asset dbwriter	count=1
function	traded dt ||| traded dt	count=1
module	construct a new filter ||| pipeline factors	count=1
arg	[arg_1] by min_percentile ||| [arg_2] [arg_1]	count=2
function	[function_1] normalize ||| [function_2] [function_1]	count=10
module	we represent this ||| lib	count=1
arg	charge on order ||| order	count=1
arg	use ||| frequency	count=1
module	construct a new ||| pipeline factors	count=2
arg	new key [arg_2] ||| [arg_2] [arg_1]	count=1
class	return ||| computable term	count=2
arg	dictionary ||| d	count=1
arg	that didn't ||| start_date end_date extra_rows	count=1
function	from ||| downsampled	count=1
function	that all [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] limit price ||| [function_2] [function_1]	count=1
module	of ||| performance	count=1
function_arg	pipelineloader [function_1] [arg_2] columns in testingdataset ||| [function_1] [arg_2]	count=1
function	and close [function_2] ||| [function_2] [function_1]	count=1
function	resource columns required to ||| required	count=1
function	merge ||| merge	count=2
function	as the timestamp column ||| as	count=1
arg	from the kwargs passed ||| kwargs	count=1
function	frame expected by a ||| to session frame	count=1
arg	that converts the input ||| func argname arg	count=2
arg	pass to an ||| asset	count=1
arg	bundle ||| bundle	count=1
function	during ||| add	count=1
function	convert self back into ||| as string	count=1
class	file to the final ||| file	count=1
function	of the pipeline ||| pipeline	count=1
arg	dt returns ||| dt	count=4
class	portfolio ||| trading algorithm	count=2
arg	checks the data_query_time ||| data_query_time	count=1
class	of the [class_2] ||| [class_2] [class_1]	count=1
function	that were alive at ||| only active	count=1
function	[function_1] dtype ||| [function_1] [function_2]	count=4
module	the given percentiles ||| pipeline filters	count=1
function	be applied for this ||| for	count=1
class	panel that ||| panel	count=1
function	split-adjusted-asof-date ||| asof	count=2
function	dividends that ||| dividends	count=1
function	dtype of the ||| dtype	count=1
function	dict mapping to lists ||| ownership map	count=1
arg	adjustments applied assuming ||| field is_perspective_after	count=1
class	set ||| index rolling panel	count=1
function	with minute ||| minute frame to session	count=1
function	towards a given portfolio ||| order target	count=1
arg	ratio and ||| asset ratio	count=1
function	prices to two places ||| round price to penny	count=1
arg	the writer if provided ||| dates asset_info price_start price_step_by_date	count=1
module	load ||| loaders blaze	count=1
class	construct a factor that ||| factor	count=2
class	[class_1] [class_2] ||| [class_1] [class_2]	count=26
function	future ||| get current future	count=1
function	root ||| root	count=2
arg	fail ||| portfolio algo_datetime	count=2
function	during ||| add class callback	count=2
module_class	of argument objects ||| utils argument	count=1
class	for the given sid ||| trading	count=1
arg	if a path ||| path	count=1
class	minute ||| market impact	count=1
arg	[arg_1] [arg_2] ||| [arg_1] inputs window_length [arg_2]	count=1
function	orders ||| order	count=1
class	restrictions ||| restrictions	count=2
arg	a callback to be ||| cls callback	count=1
arg	columns [arg_2] ||| loaders validate column specs [arg_2] [arg_1]	count=3
class	expression strings and a ||| expression	count=1
class	on each registered tradingcontrol ||| trading control	count=1
function	[function_1] orders ||| [function_2] [function_1]	count=1
module	by delegating to ||| pipeline	count=1
class	columns [class] ||| [class]	count=3
arg	of cls ||| cls msg	count=1
arg	and treasury yield curves ||| trading_day trading_days bm_symbol	count=1
function	fill price ||| fill price	count=1
arg	the viewpoint ||| data_frequency	count=1
arg	from the viewpoint ||| data_frequency	count=1
function	daily ||| daily	count=2
function	regression ||| regression	count=1
function	[function_1] both dividend ||| [function_1] [function_2]	count=1
function	download data from ||| download without	count=1
function	place orders ||| target percent	count=1
arg	uniformly-distributed dates in 2014 ||| shape	count=1
function_arg	[function_1] order's ||| [arg_2] [function_1]	count=2
arg	[arg_1] [arg_2] can be used by ||| loaders validate column specs [arg_2] [arg_1]	count=7
module	data from a bank ||| data	count=1
function_arg	[function_1] url returning ||| [arg_2] [function_1]	count=1
arg	[arg] __new__ based ||| [arg]	count=3
function	[function_1] sid at ||| [function_1] [function_2]	count=9
function	future ||| future	count=1
arg	a calendar for ||| calendar	count=1
function	given portfolio ||| target	count=1
function	worse ||| price worse	count=1
function	towards a ||| batch order target percent	count=1
function	adjustments ||| date adjustments	count=2
class	for the ||| trading	count=3
function	ensure that ||| ensure	count=4
function_arg	[function_1] time ||| [function_1] [arg_2]	count=4
function	to return ||| downsampled	count=1
function	expression type to ||| type	count=1
function	place orders towards a ||| batch order target percent	count=1
function_arg	[function_1] time and ||| [arg_2] [function_1]	count=4
class	order exceeds ||| order	count=1
module_class	is the [class_2] ||| [module_1] [class_2]	count=6
arg	set of symbols ||| symbols	count=1
function	orders towards a ||| order target percent	count=1
module_class	[module_1] factor ||| [module_1] [class_2]	count=2
class	track and ||| trading algorithm	count=1
function	enter a [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] the sessions ||| [function_2] [function_1]	count=5
module	a dataset that has ||| pipeline loaders	count=1
function	an array with session ||| to session	count=1
function	a dataframe with minute ||| minute frame to session	count=1
arg	that "improves" the price ||| price prefer_round_down diff	count=1
arg	is a float64multiply window ||| assets dts field is_perspective_after	count=1
function	the raw values we ||| raw expected values	count=1
class	data from ||| data frame loader	count=1
function	into a ||| into	count=1
function	number of extra rows ||| extra rows	count=1
module	data ||| data	count=11
arg	between start_date and end_date ||| start_date end_date symbols	count=1
function	next close ||| next close	count=1
function	of the previous ||| previous	count=1
function_arg	download [arg_2] ||| [function_1] [arg_2]	count=1
class	given estimates data for ||| estimates loader	count=1
function	[function_1] dataframe to ||| [function_1] [function_2]	count=1
function	[function_1] yahoo finance ||| [function_2] [function_1]	count=2
arg	viewpoint ||| data_frequency	count=1
function	the timestamp field ||| timestamp	count=1
arg	at least n ||| n	count=1
function	that were alive at ||| only active assets	count=1
function	download data ||| download without progress	count=1
function	commission [function_2] ||| [function_2] [function_1]	count=4
function	overwrite ||| overwrite novel	count=1
function	the next ||| next	count=3
function	[function_1] was attached ||| [function_1] [function_2]	count=3
function	2d array containing cls ||| expected bar values 2d	count=1
function_arg	[function_1] row ||| [function_1] [arg_2]	count=3
function	orders towards a ||| order target	count=1
module	loaders ||| loaders	count=1
function	compute and cache ||| compute	count=1
function	simulation ||| simulation	count=1
function	corresponding session labels ||| to session labels	count=1
class	columns to adjustments ||| earnings estimates loader	count=1
function	held for ||| position size	count=1
function	executed during teardownclass ||| add class callback	count=1
class	return all the calendar ||| trading calendar	count=1
arg	a given ||| default_none	count=1
function	and adjustments for a ||| adjustments for	count=1
function	lists ||| ownership map	count=1
module	asset/date/column ||| pipeline loaders	count=1
module	calculate and store the ||| finance	count=1
function	into a ||| from	count=1
function	the simulation ||| simulation end	count=1
function	intersect ||| intersecting	count=1
function	record values each day ||| record	count=1
function	a dataframe with minute ||| minute frame	count=1
module	used to ||| testing	count=1
arg	row of the ||| mask groupby	count=1
function	series for use ||| series	count=1
module	place orders ||| core	count=1
class	exist at all during ||| simple	count=1
function	until which [function_2] ||| [function_1] idx for [function_2]	count=3
function	[function_1] in that ||| [function_2] [function_1]	count=4
class	factor ||| factor	count=7
function	mapping to lists ||| ownership map	count=1
function	and a window ||| window	count=1
function	[function_1] [function_2] ||| [function_2] [function_1]	count=170
arg	dt is ||| dt	count=1
function	retrieve the value ||| get value	count=2
function	worse ||| worse	count=1
function	date for [function_2] ||| data [function_2] [function_1]	count=2
function	download data from a ||| download	count=1
function_arg	v0 v1 [function_1] [arg_2] ||| matching [function_1] [arg_2]	count=4
arg	float64multiply ||| dts field	count=1
function	given portfolio of ||| target	count=1
function	register a ||| add class	count=1
function_arg	[function_1] [arg_2] and ||| [function_1] [arg_2]	count=3
class	pipeline ||| pipeline engine	count=1
arg	callable_ to make ||| callable_	count=1
function	towards a ||| percent	count=1
function	all the ||| all	count=1
function	interval [function] keyed ||| minute exclusion [function]	count=1
function	the session ||| session	count=1
function_arg	whether or not [function_1] [arg_2] ||| assets [function_1] [arg_2] asset	count=2
class	[class_1] [class_2] that ||| [class_2] [class_1]	count=3
arg	api object ||| deltas checkpoints	count=1
function	api methods ||| api methods	count=2
module	in a dataset that ||| pipeline loaders	count=2
arg	the callable_ to ||| callable_	count=1
function	time of ||| time	count=2
function	expected return dtype for ||| binop return dtype	count=1
function	for this [function_2] ||| [function_1] [function_2]	count=4
function	[function_1] benchmark ||| [function_2] [function_1]	count=1
module	a set of ||| assets	count=1
module	from self ||| pipeline	count=1
function	portfolio ||| target	count=1
function	values ||| upper triangle	count=1
function	[function_1] adjustments that ||| [function_1] asof [function_2]	count=2
class	[class] returns the ||| [class]	count=2
arg	during teardownclass ||| cls	count=1
function_arg	the percentile [arg_2] ||| [arg_2] [function_1]	count=3
arg	failure ||| datetime metadata	count=1
function	required to ||| required estimates fields	count=1
module	blaze ||| pipeline loaders blaze	count=3
arg	float64multiply window ||| assets dts field is_perspective_after	count=1
arg	the python magic ||| commute	count=1
class	computation ||| downsampled mixin	count=1
class	be executed ||| test case	count=1
arg	before the lower date ||| lower	count=1
function	assert that ||| assert	count=2
arg	on the number of ||| on_error	count=1
function	to compute ||| compute	count=1
arg	mark that an option ||| option	count=1
class	get ||| execution style	count=2
function	occur after ||| post	count=1
arg	pop entries [arg_1] [arg_2] based on the values ||| [arg_2] [arg_1]	count=2
arg	applied assuming that ||| field is_perspective_after	count=1
function	return ||| return	count=1
function	place orders towards a ||| percent	count=1
function	inputs for the given ||| inputs for	count=1
class	[class_1] for ||| [class_2] [class_1]	count=3
function_arg	[function_1] of delimiters ||| [function_1] [arg_2]	count=1
function_arg	[function_1] term ||| [function_1] to graph [arg_2]	count=1
module	[module] that all ||| [module]	count=3
arg	a url returning ||| url	count=1
function_arg	run [arg_2] ||| utils [function_1] [arg_2]	count=3
class	calendar ||| calendar	count=4
function	frame expected by ||| frame to session frame	count=1
function	handle ||| handle	count=1
arg	given testcase this ||| testcase	count=1
class	adjustments ||| estimates loader	count=2
module	a given portfolio of ||| core	count=1
function_arg	db [arg_2] ||| [function_1] [arg_2]	count=2
function	a given portfolio of ||| order target	count=1
function_arg	path relative to ||| path paths	count=2
arg	of the desired asset's ||| assets	count=1
function	for a [function_2] ||| [function_1] [function_2]	count=1
function	required ||| required	count=1
arg	data a [arg_2] ||| [arg_1] [arg_2]	count=1
class	[class_1] and an ||| [class_2] [class_1]	count=8
class	for an ||| asset	count=1
function	adjustment at ||| adjustment	count=1
function	paid yet pay the ||| per unit	count=1
function_arg	array with [arg_2] ||| boolean [function_1] [arg_2]	count=2
function	during teardown ||| instance	count=1
function	traded ||| traded dt	count=1
function	teardownclass ||| class callback	count=2
function	lookup ||| lookup	count=1
function_arg	[function_1] derived price ||| [arg_2] [function_1]	count=5
class	a given ||| algorithm	count=1
module	data from the ||| data bundles	count=1
function	traded dt from the ||| traded	count=1
function	a given portfolio ||| batch order target percent	count=1
function	be executed during teardownclass ||| callback	count=1
arg	the order's ||| fill_price	count=1
function	return an 2d ||| 2d	count=1
function_arg	data root [arg_2] ||| [arg_2] [function_1]	count=1
function	split adjustments that occur ||| split adjustments	count=1
function_arg	[function_1] row of ||| [function_1] [arg_2]	count=3
function_arg	array with [arg_2] ||| [arg_2] [function_1]	count=2
function	[function_1] session ||| [function_1] [function_2]	count=4
arg	*exactly once* on each ||| amount portfolio algo_datetime	count=1
class	expression strings and ||| numerical expression	count=1
function	values ||| expected values	count=2
arg	pandas categorical ||| cls categorical	count=1
class	[class_1] pricing ||| [class_1] [class_2]	count=2
module	return from self ||| pipeline	count=1
function	load by delegating ||| load adjusted	count=1
function	returns ||| data	count=1
function_arg	returns a [arg_2] ||| [function_1] [arg_2]	count=1
class	string with numexpr ||| numerical	count=1
class	a panel ||| panel	count=1
class	[class_1] [class_2] ||| [class_2] [class_1]	count=95
arg	preprocessor that converts the ||| func argname arg	count=2
arg	be executed ||| cls	count=1
function_arg	[function_1] filling ||| [arg_2] [function_1]	count=5
function	a continuous ||| continuous	count=1
function	minute ||| minute frame	count=1
function	to ||| downsampled	count=1
arg	[arg_1] value ||| [arg_1] [arg_2]	count=3
function	minutes [function_2] ||| [function_1] [function_2]	count=9
function	of the next ||| next	count=1
module	is complete ||| finance performance	count=1
function	for the given ||| for	count=3
function	limit [function_2] ||| [function_1] [function_2]	count=3
function	to ||| price to	count=1
arg	of ||| asset	count=1
function	[function_1] accountcontrol ||| [function_1] [function_2]	count=1
arg	in attrs ||| attrs default	count=1
class	to be ||| case	count=1
function	minute ||| minute	count=6
function_arg	[function_1] count times ||| [function_1] last axis array [arg_2]	count=2
function	write both ||| write	count=1
function	[function] change for ||| [function]	count=3
arg	path ||| path	count=7
arg	length window_length ||| window_length	count=1
function	[function_1] info dataframe ||| [function_2] [function_1]	count=3
function	parse ||| parse	count=1
arg	given a dt ||| dt	count=1
function_arg	time of path ||| time path	count=4
function	basis even if they ||| basis	count=1
class	with ||| with seeded random	count=1
function	[function_1] return ||| [function_2] [function_1]	count=2
class	commission to charge on ||| commission model	count=1
function_arg	[function_1] [arg_2] ||| utils [function_1] [arg_2]	count=3
function	raw values we expect ||| raw expected values	count=1
function	towards a ||| order target percent	count=1
arg	place [arg_2] ||| [arg_2] [arg_1]	count=3
function	array with ||| array	count=1
module	that would ||| pipeline loaders	count=1
function	with the ||| with	count=1
function	[function_1] adjustments with ||| [function_1] [function_2]	count=2
function	[function_1] date ||| [function_2] [function_1]	count=1
function	determines the date until ||| determine end idx	count=1
function_arg	time [arg_2] ||| [arg_2] [function_1]	count=6
function	be ||| add class	count=1
function	attributes ||| set	count=1
function	towards ||| order target percent	count=1
class	adjustment ||| sqlite adjustment	count=1
function	of benchmark [function_2] ||| [function_1] [function_2]	count=3
function_arg	plus [arg_2] ||| [function_1] tup [arg_2]	count=1
module_class	[module_1] argument objects ||| [module_1] [class_2]	count=8
arg	place ||| amount limit_price stop_price	count=1
function	dividend payouts ||| dividend	count=1
arg	applied assuming [arg_2] ||| [arg_2] [arg_1]	count=10
function	[function] at ||| [function]	count=2
class	put ||| computable term	count=1
module	that ||| utils	count=1
arg	range defined by min_percentile ||| min_percentile max_percentile	count=1
class	to a sqlite ||| sqlite	count=1
class	be executed during ||| test	count=1
arg	internal method ||| adjustments_dict table_name	count=1
class	restrictions of ||| union restrictions	count=2
function	containing [function] values of ||| [function] boolean	count=1
module	for [module] ingestion ||| [module]	count=1
class	to adjust a position ||| trading algorithm	count=1
arg	callback ||| callback	count=1
function	a given ||| batch order target	count=1
function	should [function_2] ||| [function_2] [function_1]	count=3
arg	dt return ||| dt	count=1
function	dataframe to normalize ||| normalize timestamp to	count=1
function	overwrite dates in open_or_closes ||| overwrite	count=1
function	into a dictionary containing ||| into	count=1
function	at time ||| at time	count=2
function	percentile ||| percentile	count=1
arg	needed to ||| all_dates start_date end_date min_extra_rows	count=1
function	in a given ||| in	count=1
function	the dtype of ||| dtype	count=1
function	with minute ||| minute frame	count=1
function_arg	a path [arg_2] ||| [function_1] [arg_2]	count=7
function	name of the ||| name for	count=1
arg	[arg_1] window for ||| [arg_2] [arg_1]	count=4
function	to return an ||| to	count=1
class	portfolio of ||| algorithm	count=1
arg	[arg_1] the zipline ||| [arg_1] [arg_2]	count=2
function	with a binary ||| binary	count=1
arg	of an ||| expected	count=1
function	the frame expected by ||| frame	count=1
arg	index [arg] split-adjusted-asof-date falls ||| [arg]	count=1
function	context manager ||| context	count=1
arg	time [arg_2] ||| [arg_1] [arg_2]	count=1
function	percent of the ||| percent	count=1
function	previous known value ||| previous	count=1
module	the given ||| utils calendars	count=2
function	be executed ||| class callback	count=1
function	batch of orders ||| batch	count=1
class	classifier} ||| aliased mixin	count=2
class	ensure that our [class_1] [class_2] ||| pipeline filters [class_1] [class_2]	count=1
arg	limit on the number ||| on_error	count=1
function	[function_1] to ||| [function_2] [function_1]	count=9
arg	array of ||| assets	count=1
function	asset was [function] ||| was [function]	count=3
function	set a limit on ||| set	count=3
function_arg	tradingcalendar [arg_2] ||| [function_1] [arg_2]	count=1
arg	be called *exactly once* ||| asset amount portfolio algo_datetime	count=1
function	[function_1] session label ||| [function_2] [function_1]	count=1
class	make a term that ||| computable term	count=1
arg	that converts the ||| func argname arg	count=2
arg	[arg] loaded from ||| [arg] start	count=3
function	sessions in that ||| sessions in	count=1
function	the format ||| format	count=1
arg	data_query_time and data_query_tz ||| data_query_time data_query_tz	count=3
module_class	[module_1] next ||| [module_1] [class_2]	count=2
function	[function_1] all overwrites ||| [function_1] [function_2]	count=3
arg	the asset ||| asset	count=1
class	term that ||| term	count=1
function	columns required ||| required	count=1
arg	that "improves" the ||| prefer_round_down diff	count=1
module	calling ||| utils	count=1
module	the data provided ||| data	count=1
function	[function_1] lifetimes ||| [function_2] [function_1]	count=5
function	the dtype ||| dtype	count=1
function	trade ||| trade	count=2
function	adjustments that occur ||| date adjustments	count=1
arg	pop entries [arg_1] [arg_2] __new__ based on the ||| pipeline term pop params [arg_2] [arg_1]	count=2
function	containing adjustments [function_2] ||| [function_1] [function_2] sids	count=1
function	after the [function_2] ||| [function_2] [function_1]	count=1
module	is ||| pipeline factors	count=1
arg	index [arg] split-adjusted-asof-date ||| [arg]	count=1
function	were alive at the ||| only active	count=1
function	which we can load ||| possible	count=1
module	of blaze ||| loaders blaze	count=1
function	price ||| price	count=3
class	values falling between ||| percentile filter	count=1
arg	columns of events ||| events columns	count=1
class	make a term ||| term	count=2
class	given sids ||| portal	count=2
function	load ||| load	count=7
function	columns required to serve ||| required estimates	count=1
function	an tradingcalendar ||| get calendar	count=1
function_arg	create a 2d numpy [function_1] [arg_2] ||| boolean [function_1] [arg_2]	count=2
arg	callback to ||| callback	count=1
class	this [class] is ||| [class]	count=1
function	until ||| determine end	count=1
function	array with session ||| to session	count=1
module	be resolved to ||| core	count=1
function	for ||| bar	count=1
arg	the price ||| price	count=1
arg	of the result of ||| result assets	count=1
arg	a tradingcontrolviolation either ||| amount	count=1
function	minutes for all the ||| minutes for	count=1
function	the previous ||| previous	count=5
function	for all ||| for	count=1
class	magnitude of our position ||| max position size	count=1
function	[function_1] with corresponding ||| [function_2] [function_1]	count=1
function	asymmetric rounding ||| asymmetric round price	count=1
function	tradingcalendar ||| get calendar	count=1
function	set a limit on ||| set max position	count=1
module	self downsample() ||| pipeline	count=1
function	executed during teardownclass ||| add	count=1
function	make ||| make commodity	count=1
function	for all [function_2] ||| [function_1] [function_2]	count=3
function	[function] desired ||| [function]	count=1
function	get the stop price ||| get stop price	count=1
function	the pipeline [function_2] ||| [function_2] [function_1]	count=1
function	stop/limit [function] are ||| check stoplimit [function]	count=1
function	compute and ||| compute	count=1
function	[function_1] methods ||| [function_2] [function_1]	count=1
function	from yahoo into a ||| from yahoo	count=2
module	[module] a _unionrestrictions ||| [module]	count=3
function	traded dt ||| traded	count=1
arg	called *exactly once* ||| asset amount portfolio algo_datetime	count=1
class	a given portfolio ||| trading algorithm	count=1
arg	of self each ||| groupby	count=2
function	before the split-adjusted-asof-date ||| asof	count=1
arg	"improves" the [arg_2] ||| [arg_2] [arg_1]	count=2
function	required to ||| required estimates	count=1
function	that verifies inputs ||| expect	count=3
rep	[module_class_1] [function_arg_2] ||| [module_class_1] [function_arg_2]	count=8
function	pipeline that ||| pipeline	count=1
function	all the sessions in ||| sessions in	count=1
class	term that ||| computable term	count=1
arg	*exactly once* ||| amount portfolio algo_datetime	count=1
arg	the sorted ||| ascending	count=1
class	ensure [class_1] [class_2] ||| [class_1] [class_2]	count=1
function	[function_1] this sid ||| [function_2] [function_1]	count=10
class	start date ||| asset date bounds	count=1
class	minutes ||| bcolz minute bar reader	count=1
arg	a like-shaped array of ||| assets	count=1
class	all the ||| trading	count=1
class	given ||| portal	count=3
function_arg	[function_1] derived ||| [arg_2] [function_1]	count=5
function_arg	v0 v1 [function_1] [arg_2] ||| [function_1] [arg_2]	count=4
function	fall within the percentile ||| percentile between	count=1
arg	order hasn't had ||| order transaction cost_per_unit initial_commission	count=1
function	mass ||| mass	count=1
module	on ||| lib	count=1
arg	(e ||| python_types numpy_kind	count=1
arg	range defined by ||| max_percentile mask	count=1
function	get the [function_2] ||| [function_1] [function_2]	count=6
function	the sessions [function_2] ||| [function_2] [function_1]	count=2
function	particular sid ||| sid	count=1
class	register ||| zipline test	count=1
class	the ||| trading	count=10
function	[function_1] axis ||| [function_1] [function_2]	count=8
function	[function_1] adjustment at ||| [function_1] idx for [function_2]	count=1
module	be ||| testing	count=1
arg	directory for ||| environ	count=1
function	the current data ||| current	count=1
arg	row of the result ||| mask groupby	count=1
module	directory for [module] ingestion ||| [module]	count=1
function	were alive at the ||| only active assets	count=1
arg	of the given ||| dt	count=1
function	tuple into a range ||| from tuple	count=1
arg	like-shaped array of ||| assets	count=1
function	be applied for ||| for	count=2
class	be executed during teardownclass ||| zipline test	count=1
function	the simulation ||| simulation	count=1
function	if that ||| if	count=1
class	return the result of ||| result	count=1
module	[module_1] [module_2] ||| [module_1] [module_2]	count=20
function_arg	[function_1] [arg_2] for ||| [function_1] [arg_2]	count=8
arg	"improves" [arg_2] ||| [arg_2] [arg_1]	count=2
class	on the ||| trading	count=1
module	that would ||| pipeline loaders blaze	count=1
function	orders towards a given ||| percent	count=1
module	a blaze expression ||| pipeline loaders blaze	count=1
module	is complete run the ||| finance	count=1
module	percentiles ||| filters	count=1
arg	path ||| path content	count=1
arg	of the [arg_2] ||| [arg_1] [arg_2]	count=1
function	[function_1] window of ||| [function_2] [function_1]	count=1
function	f ||| filter kwargs	count=1
function	a utc [function_2] ||| [function_2] [function_1]	count=3
arg	given binary operator ||| op left	count=1
function	minute ||| minute to	count=1
function	place ||| order target	count=1
function	return from self ||| downsampled	count=1
function_arg	path [arg_2] ||| [arg_2] [function_1]	count=7
function	along the last ||| last	count=1
class	merge ||| split adjusted estimates loader	count=1
arg	seed ||| seed dates	count=1
function	to two ||| round price to penny	count=1
function_arg	[function_1] range defined ||| [arg_2] [function_1]	count=4
class	our [class] string has ||| numerical [class]	count=1
function	[function] an ||| expected [function]	count=1
module_class	[module_1] from ||| [module_1] data [class_2]	count=1
function	for all [function_2] ||| [function_2] [function_1]	count=3
function	an interval [function] keyed by ||| minute exclusion [function]	count=1
class	a ||| test case	count=2
function	a batch ||| batch	count=1
function	[function_1] date for ||| data [function_1] possible [function_2]	count=1
module	state of the ||| finance	count=1
function_arg	returns [arg_2] ||| [arg_2] [function_1]	count=1
function	should trigger implementation ||| should trigger	count=2
function	return ||| datetime values	count=1
function	info dataframe into ||| info	count=1
class	to ||| computable	count=1
class	executed during teardownclass ||| zipline test	count=1
arg	data ||| data	count=3
arg	converts the input ||| func argname arg	count=2
function	dictionary containing adjustments ||| adjustments	count=1
class	start date ||| asset date	count=1
function	the adjustments ||| adjustments from	count=2
function	[function_1] to lists ||| [function_1] [function_2]	count=1
function	of the next session ||| next session	count=1
module_class	be checked ||| core trading algorithm	count=1
function	the adjustments ||| adjustments from deltas	count=2
function	stop ||| stop	count=1
function	the previous [function_2] ||| [function_2] [function_1]	count=3
class	a bcolz equity ||| usequity	count=1
function	into [function_2] ||| [function_1] [function_2]	count=3
function	a given ||| order target percent	count=1
function	from a bcolz ||| from	count=1
function	a given portfolio ||| target	count=1
module_class	[module_1] working ||| [module_1] [class_2] dir getpath	count=1
class	static ||| static	count=1
function	place orders ||| percent	count=1
function_arg	window of [arg_2] ||| [arg_2] [function_1]	count=4
module	register a ||| testing	count=1
class	register a ||| case	count=1
arg	ratio and return the ||| ratio	count=1
function_arg	required to [arg_2] ||| [arg_2] [function_1]	count=1
function	split adjustments ||| split adjustments	count=4
class	portfolio ||| trading	count=1
function	name of the ||| name	count=1
arg	of weights ||| weights	count=1
class	asset's start date ||| asset date bounds	count=1
function	tradingcalendar whose ||| get calendar	count=1
module	the start and end ||| data	count=1
function	be executed during ||| class callback	count=1
function	given portfolio ||| order target	count=1
function	write a ||| write	count=1
function	returns the last traded ||| last traded	count=1
function_arg	plus [arg_2] ||| [arg_2] [function_1]	count=1
arg	fail if the ||| asset amount portfolio algo_datetime	count=2
function	that intersect ||| intersecting	count=1
module	will be resolved ||| core	count=1
class	computed [class] ||| [class]	count=3
function	a ||| class callback	count=2
function	decorator that coerces ||| coerce	count=1
class	create a loader ||| loader	count=1
function	the value at ||| value	count=1
function_arg	run a [arg_2] ||| [function_1] [arg_2]	count=4
arg	of self each ||| mask groupby	count=2
function	from yahoo into a ||| load from yahoo	count=1
function	to two ||| to penny	count=1
arg	[arg] sid ||| [arg]	count=3
function	for a particular ||| for	count=1
function	and adjustments ||| get adjustments	count=1
function	[function_1] progress ||| [function_1] [function_2]	count=1
function_arg	[function_1] the result ||| [function_1] [arg_2]	count=1
function	register a ||| add	count=1
function	asset lifetimes ||| asset lifetimes	count=2
arg	[arg_1] and data_query_tz ||| [arg_1] [arg_2]	count=3
function	and raises a standard ||| check data	count=1
class	price adjustment ||| sqlite adjustment writer	count=1
function	data [function_2] ||| [function_1] [function_2]	count=5
class	the given ||| trading	count=1
arg	word ||| word	count=1
function_arg	[function_1] backtest ||| [arg_2] [function_1]	count=1
function	portfolio of ||| order target	count=1
module	of pandas dataframes ||| assets	count=1
function	[function] pipelineloader that ||| [function] seeded random	count=1
function	and raises ||| check data query	count=1
arg	a backtest ||| ctx algofile algotext define	count=1
module	is the gross ||| finance	count=1
function	date for [function_2] ||| [function_2] [function_1]	count=4
class	downsample() ||| computable	count=1
function	into a numpy dtype ||| ensure dtype	count=1
function_arg	a path relative ||| path paths environ	count=1
function	place orders towards a ||| batch order target	count=1
function	the name of the ||| name for	count=1
class	self downsample() ||| computable	count=1
function	when the simulation ||| simulation	count=1
function	limit ||| limit	count=2
arg	the lower ||| expr lower	count=1
function_arg	calendar [arg_2] ||| [arg_2] [function_1]	count=1
function	into ||| into	count=1
function	write a [function_2] ||| [function_2] [function_1]	count=2
class	return from self downsample() ||| term	count=1
function_arg	[function_1] given shape ||| [function_1] [arg_2]	count=2
class	the form time calendar ||| calendar	count=1
class	latest minute ||| continuous future session	count=1
arg	number ||| on_error	count=1
function_arg	matches the [arg_2] ||| [arg_2] [function_1]	count=1
class	latest ||| continuous future session	count=1
function_arg	[function_1] values ||| [function_1] [arg_2]	count=1
function	minute frequency ||| minute	count=1
function	all the sessions from ||| sessions	count=1
function_arg	[function_1] boundary ||| [arg_2] [function_1]	count=10
function_arg	asset [arg_2] ||| [function_1] [arg_2]	count=1
function	portfolio ||| batch order target	count=1
function	adjustments that occur in ||| adjustments from deltas	count=1
function	[function_1] close of ||| [function_1] [function_2]	count=5
class	the result ||| result	count=1
function	last traded dt ||| get last traded dt	count=1
function	to be executed during ||| add class	count=1
class	[class] given ||| earnings estimates [class]	count=1
class	be ||| zipline test case	count=2
function_arg	data root exists ||| data root environ	count=1
function	load benchmark returns ||| load market	count=1
module_class	[module_1] [class_2] ||| [module_1] adjusted [class_2]	count=1
module	data from ||| data	count=1
arg	entries [arg] ||| cls [arg]	count=2
class	after completing ||| long only	count=1
function	variables ||| rebind variables	count=1
function	register a ||| class	count=1
function	well-formed ||| validate	count=1
function_arg	between [arg_2] ||| [function_1] dts [arg_2]	count=1
function	categorical ||| categorical	count=1
function	deprecated ||| deprecated	count=2
function	sid collect ||| collect	count=1
function	[function_1] a progress ||| [function_1] [function_2]	count=1
module	by the ||| utils	count=1
arg	registers a calendar for ||| name calendar	count=1
function	provided query ||| query bounds	count=1
arg	a new key value ||| key value	count=1
function	[function_1] properly forward ||| [function_2] [function_1]	count=5
function	[function_1] mass ||| [function_1] [function_2]	count=2
function	towards a given ||| target	count=1
function	patch ||| patch	count=1
function	adjustments that occur before ||| adjustments	count=1
function	[function_1] dtype for ||| [function_2] [function_1]	count=4
function_arg	are between [arg_2] ||| [function_1] dts [arg_2]	count=1
module	to be called ||| core	count=1
