<tt style='background-color:#E8E8E8;'> core. <a href=' /__main__.py#L20'>main</a>(extension,strict_extensions,default_extension)</tt>	Top level zipline entry point.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__main__.py#L54'>extract_option_object</a>(option)</tt>	Convert a click option call into a click option object.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__main__.py#L74'>ipython_only</a>(option)</tt>	Mark that an option should only be exposed in ipython.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__main__.py#L102'>run</a>(ctx,algofile,algotext,define)</tt>	Run a backtest for the given algorithm.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__main__.py#L251'>zipline_magic</a>(line,cell)</tt>	The zipline ipython cell magic.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__main__.py#L284'>ingest</a>(bundle,assets_version,show_progress)</tt>	Ingest the data for the given bundle.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__main__.py#L316'>clean</a>(bundle,before,after,keep_last)</tt>	Clean up data downloaded with the ingest command.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__main__.py#L358'>bundles</a>()</tt>	List all of the available data bundles.
<tt style='background-color:#E8E8E8;'> core. <a href=' /protocol.py#L85'>_deprecated_getitem_method</a>(name,attrs)</tt>	Create a deprecated __getitem__ method that tells users to use getattr instead.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L216'>__init__</a>()</tt>	Initialize sids and other state variables.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L426'>init_engine</a>(get_loader)</tt>	Construct and store a pipelineengine from loader.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L441'>initialize</a>()</tt>	Call self _initialize with self made available to zipline api.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L477'>__repr__</a>()</tt>	N b this does not yet represent a string that can be used.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L503'>_create_clock</a>()</tt>	If the clock property is not set then create one based on frequency.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L597'>get_generator</a>()</tt>	Override this method to add new logic to the construction of the generator.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L605'>run</a>(data,overwrite_sim_params)</tt>	Run the algorithm.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L845'>calculate_capital_changes</a>(dt,emission_rate,is_interday,portfolio_value_adjustment)</tt>	If there is a capital change for a given dt this means the the change occurs before handle_data on the given dt.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L911'>get_environment</a>(field)</tt>	Query the execution environment.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L968'>fetch_csv</a>(url,pre_func,post_func,date_column)</tt>	Fetch a csv from a remote url and register the data so that it is queryable from the data object.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1050'>add_event</a>(rule,callback)</tt>	Adds an event to the algorithm's eventmanager.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1064'>schedule_function</a>(func,date_rule,time_rule,half_days)</tt>	Schedules a function to be called according to some timed rules.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1129'>record</a>()</tt>	Track and record values each day.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1155'>set_benchmark</a>(benchmark)</tt>	Set the benchmark asset.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1174'>symbol</a>(symbol_str)</tt>	Lookup an equity by its ticker symbol.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1210'>continuous_future</a>(root_symbol_str,offset,roll,adjustment)</tt>	Create a specifier for a continuous contract.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1246'>symbols</a>()</tt>	Lookup multuple equities as a list.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1273'>sid</a>(sid)</tt>	Lookup an asset by its unique asset identifier.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1294'>future_symbol</a>(symbol)</tt>	Lookup a futures contract with a given symbol.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1316'>_calculate_order_value_amount</a>(asset,value)</tt>	Calculates how many shares/contracts to order based on the type of asset being ordered.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1386'>order</a>(asset,amount,limit_price,stop_price)</tt>	Place an order.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1458'>round_order</a>(amount)</tt>	Convert number of shares to an integer.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1470'>validate_order_params</a>(asset,amount,limit_price,stop_price)</tt>	Helper method for validating parameters to the order api function.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1505'>__convert_order_params_for_blotter</a>(limit_price,stop_price,style)</tt>	Helper method for converting deprecated limit_price and stop_price arguments into executionstyle instances.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1526'>order_value</a>(asset,value,limit_price,stop_price)</tt>	Place an order by desired value rather than desired number of shares.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1617'>on_dt_changed</a>(dt)</tt>	Callback triggered by the simulation loop whenever the current dt changes.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1633'>get_datetime</a>(tz)</tt>	Returns the current simulation datetime.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1656'>set_slippage</a>(us_equities,us_futures)</tt>	Set the slippage models for the simulation.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1692'>set_commission</a>(us_equities,us_futures)</tt>	Sets the commission models for the simulation.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1730'>set_cancel_policy</a>(cancel_policy)</tt>	Sets the order cancellation policy for the simulation.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1752'>set_symbol_lookup_date</a>(dt)</tt>	Set the date for which symbols will be resolved to their assets (symbols may map to different firms or underlying assets at.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1779'>order_percent</a>(asset,percent,limit_price,stop_price)</tt>	Place an order in the specified asset corresponding to the given percent of the current portfolio value.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1833'>order_target</a>(asset,target,limit_price,stop_price)</tt>	Place an order to adjust a position to a target number of shares if.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1906'>order_target_value</a>(asset,target,limit_price,stop_price)</tt>	Place an order to adjust a position to a target value if.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L1974'>order_target_percent</a>(asset,target,limit_price,stop_price)</tt>	Place an order to adjust a position to a target percent of the current portfolio value.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2041'>batch_order_target_percent</a>(weights)</tt>	Place orders towards a given portfolio of weights.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2072'>get_open_orders</a>(asset)</tt>	Retrieve all of the current open orders.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2103'>get_order</a>(order_id)</tt>	Lookup an order based on the order id returned from one of the order functions.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2121'>cancel_order</a>(order_param)</tt>	Cancel an open order.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2136'>history</a>(bar_count,frequency,field,ffill)</tt>	Deprecated use data history instead.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2198'>register_account_control</a>(control)</tt>	Register a new accountcontrol to be checked on each bar.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2213'>set_max_leverage</a>(max_leverage)</tt>	Set a limit on the maximum leverage of the algorithm.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2230'>register_trading_control</a>(control)</tt>	Register a new tradingcontrol to be checked prior to order calls.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2238'>set_max_position_size</a>(asset,max_shares,max_notional,on_error)</tt>	Set a limit on the number of shares and/or dollar value held for the given sid.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2271'>set_max_order_size</a>(asset,max_shares,max_notional,on_error)</tt>	Set a limit on the number of shares and/or dollar value of any single order placed for sid.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2300'>set_max_order_count</a>(max_count,on_error)</tt>	Set a limit on the number of orders that can be placed in a single day.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2313'>set_do_not_order_list</a>(restricted_list,on_error)</tt>	Set a restriction on which assets can be ordered.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2345'>set_asset_restrictions</a>(restrictions,on_error)</tt>	Set a restriction on which assets can be ordered.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2366'>set_long_only</a>(on_error)</tt>	Set a rule specifying that this algorithm cannot take short positions.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2376'>attach_pipeline</a>(pipeline,name,chunks)</tt>	Register a pipeline to be computed at the start of each day.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2421'>pipeline_output</a>(name)</tt>	Get the results of the pipeline that was attached with the name name.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2459'>_pipeline_output</a>(pipeline,chunks)</tt>	Internal implementation of pipeline_output.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2511'>_run_pipeline</a>(pipeline,start_session,chunksize)</tt>	Compute pipeline, providing values for at least start_date.
<tt style='background-color:#E8E8E8;'> core.TradingAlgorithm <a href=' /algorithm.py#L2553'>all_api_methods</a>(cls)</tt>	Return a list of all the tradingalgorithm api methods.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L68'>to_utc</a>(time_str)</tt>	Convert a string in us/eastern time to utc.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L73'>str_to_seconds</a>(s)</tt>	Convert a pandas-intelligible string to integer seconds since utc.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L218'>all_pairs_matching_predicate</a>(values,pred)</tt>	Return an iterator of all pairs v0 v1 from values such that pred v0 v1 == true.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L246'>product_upper_triangle</a>(values,include_diagonal)</tt>	Return an iterator over pairs v0 v1 drawn from values.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L259'>all_subindices</a>(index)</tt>	Return all valid sub-indices of a pandas index.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L269'>chrange</a>(start,stop)</tt>	Construct an iterable of length-1 strings beginning with start and ending with stop.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L294'>make_trade_data_for_asset_info</a>(dates,asset_info,price_start,price_step_by_date)</tt>	Convert the asset info dataframe into a dataframe of trade data for each sid and write to the writer if provided.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L349'>check_allclose</a>(actual,desired,rtol,atol)</tt>	Wrapper around np testing assert_allclose that also verifies that inputs.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L375'>check_arrays</a>(x,y,err_msg,verbose)</tt>	Wrapper around np testing assert_array_equal that also verifies that inputs.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L811'>empty_assets_db</a>()</tt>	Context manager for creating an empty assets db.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L848'>empty_asset_finder</a>()</tt>	Context manager for creating an empty asset finder.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L898'>subtest</a>(iterator)</tt>	Construct a subtest in a unittest.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1011'>assert_timestamp_equal</a>(left,right,compare_nat_equal,msg)</tt>	Assert that two pandas timestamp objects are the same.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1029'>powerset</a>(values)</tt>	Return the power set (i e the set of all subsets) of entries in values.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1036'>to_series</a>(knowledge_dates,earning_dates)</tt>	Helper for converting a dict of strings to a series of datetimes.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1048'>gen_calendars</a>(start,stop,critical_dates)</tt>	Generate calendars to use as inputs.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1062'>temp_pipeline_engine</a>(calendar,sids,random_seed,symbols)</tt>	A contextmanager that yields a simplepipelineengine holding a reference to an assetfinder generated via tmp_asset_finder.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1095'>parameter_space</a>(__fail_fast)</tt>	Wrapper around subtest that allows passing keywords mapping names to iterables of values.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1194'>make_alternating_boolean_array</a>(shape,first_value)</tt>	Create a 2d numpy array with the given shape containing alternating values of false true false true.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1224'>make_cascading_boolean_array</a>(shape,first_value)</tt>	Create a numpy array with the given shape containing cascading boolean values with first_value being the top-left value.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1260'>permute_rows</a>(seed,array)</tt>	Shuffle each row in array based on permutations generated by seed.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1276'>make_test_handler</a>(testcase)</tt>	Returns a testhandler which will be used by the given testcase this.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1299'>write_compressed</a>(path,content)</tt>	Write a compressed gzipped file to path.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1307'>read_compressed</a>(path)</tt>	Write a compressed gzipped file from path.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1325'>patch_os_environment</a>(remove)</tt>	Context manager for patching the operating system environment.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1454'>patch_read_csv</a>(url_map,module,strict)</tt>	Patch pandas read_csv to map lookups from url to another.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/core.py#L1488'>ensure_doctest</a>(f,name)</tt>	Ensure that an object gets doctested this is useful for instances.
<tt style='background-color:#E8E8E8;'> testing.ZiplineTestCase <a href=' /testing/fixtures.py#L100'>init_class_fixtures</a>(cls)</tt>	Override and implement this classmethod to register resources that should be created and/or torn down on a per-class basis.
<tt style='background-color:#E8E8E8;'> testing.ZiplineTestCase <a href=' /testing/fixtures.py#L130'>enter_class_context</a>(cls,context_manager)</tt>	Enter a context manager to be exited during the teardownclass.
<tt style='background-color:#E8E8E8;'> testing.ZiplineTestCase <a href=' /testing/fixtures.py#L143'>add_class_callback</a>(cls,callback)</tt>	Register a callback to be executed during teardownclass.
<tt style='background-color:#E8E8E8;'> testing.ZiplineTestCase <a href=' /testing/fixtures.py#L192'>enter_instance_context</a>(context_manager)</tt>	Enter a context manager that should be exited during teardown.
<tt style='background-color:#E8E8E8;'> testing.ZiplineTestCase <a href=' /testing/fixtures.py#L199'>add_instance_callback</a>(callback)</tt>	Register a callback to be executed during teardown.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/fixtures.py#L212'>alias</a>(attr_name)</tt>	Make a fixture attribute an alias of another fixture's attribute by default.
<tt style='background-color:#E8E8E8;'> testing.WithAssetFinder <a href=' /testing/fixtures.py#L375'>make_asset_finder</a>(cls)</tt>	Returns a new assetfinder returns.
<tt style='background-color:#E8E8E8;'> testing.WithSeededRandomPipelineEngine <a href=' /testing/fixtures.py#L1351'>raw_expected_values</a>(column,start_date,end_date)</tt>	Get an array containing the raw values we expect to be produced for the given dates between start_date and end_date inclusive.
<tt style='background-color:#E8E8E8;'> testing.WithSeededRandomPipelineEngine <a href=' /testing/fixtures.py#L1364'>run_pipeline</a>(pipeline,start_date,end_date)</tt>	Run a pipeline with self seeded_random_engine.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/predicates.py#L89'>keywords</a>(func)</tt>	Get the argument names of a function >>> def f(x y=2):.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/predicates.py#L109'>filter_kwargs</a>(f,kwargs)</tt>	Return a dict of valid kwargs for f from a subset of kwargs examples.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/predicates.py#L133'>_s</a>(word,seq,suffix)</tt>	Adds a suffix to word if some sequence has anything other than exactly one element.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/predicates.py#L152'>_fmt_path</a>(path)</tt>	Format the path for final display.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/predicates.py#L170'>_fmt_msg</a>(msg)</tt>	Format the message for final display.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/predicates.py#L195'>assert_is_subclass</a>(subcls,cls,msg)</tt>	Assert that subcls is a subclass of cls.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/predicates.py#L216'>assert_regex</a>(result,expected,msg)</tt>	Assert that expected matches the result.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/predicates.py#L233'>assert_raises_regex</a>(exc,pattern,msg)</tt>	Assert that some exception is raised in a context and that the message matches some pattern.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/predicates.py#L257'>assert_equal</a>(result,expected,path,msg)</tt>	Assert that two objects are equal using the == operator.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/predicates.py#L307'>_check_sets</a>(result,expected,msg,path)</tt>	Compare two sets this is used to check dictionary keys and sets.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/predicates.py#L447'>_register_assert_equal_wrapper</a>(type_,assert_eq)</tt>	Register a new check for an ndframe object.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/predicates.py#L525'>assert_timestamp_and_datetime_equal</a>(result,expected,path,msg)</tt>	Branch for comparing python datetime which includes pandas timestamp and np.
<tt style='background-color:#E8E8E8;'> gens. <a href=' /gens/composites.py#L24'>date_sorted_sources</a>()</tt>	Takes an iterable of sources generating namestrings and piping their output into date_sort.
<tt style='background-color:#E8E8E8;'> gens.AlgorithmSimulator <a href=' /gens/tradesimulation.py#L97'>transform</a>()</tt>	Main generator work loop.
<tt style='background-color:#E8E8E8;'> gens.AlgorithmSimulator <a href=' /gens/tradesimulation.py#L248'>_cleanup_expired_assets</a>(dt,position_assets)</tt>	Clear out any assets that have expired before starting a new sim day.
<tt style='background-color:#E8E8E8;'> gens.AlgorithmSimulator <a href=' /gens/tradesimulation.py#L284'>_get_daily_message</a>(dt,algo,perf_tracker)</tt>	Get a perf message for the given datetime.
<tt style='background-color:#E8E8E8;'> gens.AlgorithmSimulator <a href=' /gens/tradesimulation.py#L294'>_get_minute_message</a>(dt,algo,perf_tracker)</tt>	Get a perf message for the given datetime.
<tt style='background-color:#E8E8E8;'> gens. <a href=' /gens/utils.py#L27'>hash_args</a>()</tt>	Define a unique string for any set of representable args.
<tt style='background-color:#E8E8E8;'> gens. <a href=' /gens/utils.py#L39'>assert_datasource_protocol</a>(event)</tt>	Assert that an event meets the protocol for datasource outputs.
<tt style='background-color:#E8E8E8;'> gens. <a href=' /gens/utils.py#L50'>assert_trade_protocol</a>(event)</tt>	Assert that an event meets the protocol for datasource trade outputs.
<tt style='background-color:#E8E8E8;'> gens. <a href=' /gens/utils.py#L60'>assert_datasource_unframe_protocol</a>(event)</tt>	Assert that an event is valid output of zp datasource_unframe.
<tt style='background-color:#E8E8E8;'> data.ContinuousFutureSessionBarReader <a href=' /data/continuous_future_reader.py#L93'>trading_calendar</a>()</tt>	Returns the zipline utils calendar trading_calendar used to read.
<tt style='background-color:#E8E8E8;'> data.ContinuousFutureSessionBarReader <a href=' /data/continuous_future_reader.py#L112'>get_value</a>(continuous_future,dt,field)</tt>	Retrieve the value at the given coordinates.
<tt style='background-color:#E8E8E8;'> data.ContinuousFutureSessionBarReader <a href=' /data/continuous_future_reader.py#L143'>get_last_traded_dt</a>(asset,dt)</tt>	Get the latest minute on or before dt in which asset traded.
<tt style='background-color:#E8E8E8;'> data.ContinuousFutureMinuteBarReader <a href=' /data/continuous_future_reader.py#L279'>trading_calendar</a>()</tt>	Returns the zipline utils calendar trading_calendar used to read.
<tt style='background-color:#E8E8E8;'> data.ContinuousFutureMinuteBarReader <a href=' /data/continuous_future_reader.py#L298'>get_value</a>(continuous_future,dt,field)</tt>	Retrieve the value at the given coordinates.
<tt style='background-color:#E8E8E8;'> data.ContinuousFutureMinuteBarReader <a href=' /data/continuous_future_reader.py#L329'>get_last_traded_dt</a>(asset,dt)</tt>	Get the latest minute on or before dt in which asset traded.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L329'>handle_extra_source</a>(source_df,sim_params)</tt>	Extra sources always have a sid column.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L413'>get_last_traded_dt</a>(asset,dt,data_frequency)</tt>	Given an asset and dt returns the last traded dt from the viewpoint of the given dt.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L423'>_is_extra_source</a>(asset,field,map)</tt>	Internal method that determines if this asset/field combination represents a fetcher value or a regular ohlcvp lookup.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L445'>get_spot_value</a>(assets,field,dt,data_frequency)</tt>	Public api method that returns a scalar value representing the value of the desired asset's field at either the given dt.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L532'>get_adjustments</a>(assets,field,dt,perspective_dt)</tt>	Returns a list of adjustments between the dt and perspective_dt for the given field and list of assets.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L600'>get_adjusted_value</a>(asset,field,dt,perspective_dt)</tt>	Returns a scalar value representing the value of the desired asset's field at the given dt with adjustments applied.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L738'>_get_history_daily_window</a>(assets,end_dt,bar_count,field_to_use)</tt>	Internal method that returns a dataframe containing history bars of daily frequency for the given sids.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L832'>_get_history_minute_window</a>(assets,end_dt,bar_count,field_to_use)</tt>	Internal method that returns a dataframe containing history bars of minute frequency for the given sids.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L861'>get_history_window</a>(assets,end_dt,bar_count,frequency)</tt>	Public api method that returns a dataframe containing the requested history window.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L960'>_get_minute_window_data</a>(assets,field,minutes_for_window)</tt>	Internal method that gets a window of adjusted minute data for an asset and specified date range.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L989'>_get_daily_window_data</a>(assets,field,days_in_window,extra_slot)</tt>	Internal method that gets a window of adjusted daily data for a sid and specified date range.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L1048'>_get_adjustment_list</a>(asset,adjustments_dict,table_name)</tt>	Internal method that returns a list of adjustments for the given sid.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L1124'>get_splits</a>(assets,dt)</tt>	Returns any splits for the given sids and the given dt.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L1158'>get_stock_dividends</a>(sid,trading_days)</tt>	Returns all the stock dividends for a specific sid that occur in the given trading range.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L1210'>get_fetcher_assets</a>(dt)</tt>	Returns a list of assets for the current date as defined by the fetcher data.
<tt style='background-color:#E8E8E8;'> data.DataPortal <a href=' /data/data_portal.py#L1340'>get_current_future_chain</a>(continuous_future,dt)</tt>	Retrieves the future chain for the contract at the given dt according the continuous_future specification.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/loader.py#L49'>last_modified_time</a>(path)</tt>	Get the last modified time of path as a timestamp.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/loader.py#L56'>get_data_filepath</a>(name)</tt>	Returns a handle to data file.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/loader.py#L82'>has_data_for_dates</a>(series_or_df,first_date,last_date)</tt>	Does series_or_df have data on or before first_date and on or after.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/loader.py#L94'>load_market_data</a>(trading_day,trading_days,bm_symbol)</tt>	Load benchmark returns and treasury yield curves for the given calendar and benchmark symbol.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/loader.py#L177'>ensure_benchmark_data</a>(symbol,first_date,last_date,now)</tt>	Ensure we have benchmark data for symbol from first_date to last_date parameters.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/loader.py#L230'>ensure_treasury_data</a>(symbol,first_date,last_date,now)</tt>	Ensure we have treasury data from treasury module associated with symbol.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/loader.py#L327'>_load_raw_yahoo_data</a>(indexes,stocks,start,end)</tt>	Load closing prices from yahoo finance.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/loader.py#L381'>load_from_yahoo</a>(indexes,stocks,start,end)</tt>	Loads price data from yahoo into a dataframe for each of the indicated assets.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/loader.py#L414'>load_bars_from_yahoo</a>(indexes,stocks,start,end)</tt>	Loads data from yahoo into a panel with the following column names for each indicated security.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/benchmarks.py#L20'>format_yahoo_index_url</a>(symbol,start_date,end_date)</tt>	Format a url for querying yahoo finance for index data.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/benchmarks.py#L45'>get_benchmark_returns</a>(symbol,start_date,end_date)</tt>	Get a series of benchmark returns from yahoo.
<tt style='background-color:#E8E8E8;'> data.HistoryCompatibleUSEquityAdjustmentReader <a href=' /data/history_loader.py#L62'>_get_adjustments_in_range</a>(asset,dts,field)</tt>	Get the float64multiply objects to pass to an adjustedarraywindow.
<tt style='background-color:#E8E8E8;'> data.HistoryLoader <a href=' /data/history_loader.py#L346'>_ensure_sliding_windows</a>(assets,dts,field,is_perspective_after)</tt>	Ensure that there is a float64multiply window for each asset that can provide data for the given parameters.
<tt style='background-color:#E8E8E8;'> data.HistoryLoader <a href=' /data/history_loader.py#L452'>history</a>(assets,dts,field,is_perspective_after)</tt>	A window of pricing data with adjustments applied assuming that the end of the window is the day before the current simulation time.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/minute_bars.py#L85'>_sid_subdir_path</a>(sid)</tt>	Format subdir path to limit the number directories in any given subdirectory to 100.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/minute_bars.py#L116'>convert_cols</a>(cols,scale_factor,sid,invalid_data_behavior)</tt>	Adapt ohlcv columns into uint32 columns.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarMetadata <a href=' /data/minute_bars.py#L280'>write</a>(rootdir)</tt>	Write the metadata to a json file in the rootdir.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarWriter <a href=' /data/minute_bars.py#L481'>open</a>(cls,rootdir,end_session)</tt>	Open an existing rootdir for writing.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarWriter <a href=' /data/minute_bars.py#L560'>_init_ctable</a>(path)</tt>	Create empty ctable for given path.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarWriter <a href=' /data/minute_bars.py#L599'>_ensure_ctable</a>(sid)</tt>	Ensure that a ctable exists for sid, then return it.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarWriter <a href=' /data/minute_bars.py#L618'>pad</a>(sid,date)</tt>	Fill sid container with empty data through the specified date.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarWriter <a href=' /data/minute_bars.py#L661'>set_sid_attrs</a>(sid)</tt>	Write all the supplied kwargs as attributes of the sid's file.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarWriter <a href=' /data/minute_bars.py#L668'>write</a>(data,show_progress,invalid_data_behavior)</tt>	Write a stream of minute data.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarWriter <a href=' /data/minute_bars.py#L699'>write_sid</a>(sid,df,invalid_data_behavior)</tt>	Write the ohlcv data for the given sid.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarWriter <a href=' /data/minute_bars.py#L762'>_write_cols</a>(sid,dts,cols,invalid_data_behavior)</tt>	Internal method for write_cols and write.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarWriter <a href=' /data/minute_bars.py#L846'>data_len_for_day</a>(day)</tt>	Return the number of data points up to and including the provided day.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarWriter <a href=' /data/minute_bars.py#L856'>truncate</a>(date)</tt>	Truncate data beyond this date in all ctables.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarReader <a href=' /data/minute_bars.py#L976'>_minutes_to_exclude</a>()</tt>	Calculate the minutes which should be excluded when a window occurs on days which had an early close i.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarReader <a href=' /data/minute_bars.py#L1000'>_minute_exclusion_tree</a>()</tt>	Build an interval tree keyed by the start and end of each range of positions should be dropped from windows.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarReader <a href=' /data/minute_bars.py#L1066'>table_len</a>(sid)</tt>	Returns the length of the underlying table for this sid.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarReader <a href=' /data/minute_bars.py#L1079'>get_value</a>(sid,dt,field)</tt>	Retrieve the pricing info for the given sid dt and field.
<tt style='background-color:#E8E8E8;'> data.BcolzMinuteBarReader <a href=' /data/minute_bars.py#L1184'>_find_position_of_minute</a>(minute_dt)</tt>	Internal method that returns the position of the given minute in the list of every trading minute since market open of the first trading.
<tt style='background-color:#E8E8E8;'> data.MinuteBarUpdateReader <a href=' /data/minute_bars.py#L1280'>read</a>(dts,sids)</tt>	Read and return pricing update data.
<tt style='background-color:#E8E8E8;'> data.H5MinuteBarUpdateWriter <a href=' /data/minute_bars.py#L1327'>write</a>(frames)</tt>	Write the frames to the target hdf5 file using the format used by pd.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/treasuries.py#L25'>parse_treasury_csv_column</a>(column)</tt>	Parse a treasury csv column into a more human-readable format.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/treasuries_can.py#L122'>earliest_possible_date</a>()</tt>	The earliest date for which we can load data from this module.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/treasuries.py#L93'>get_daily_10yr_treasury_data</a>()</tt>	Download daily 10 year treasury rates from the federal reserve and return a pandas.
<tt style='background-color:#E8E8E8;'> data.BarReader <a href=' /data/bar_reader.py#L71'>trading_calendar</a>()</tt>	Returns the zipline utils calendar trading_calendar used to read.
<tt style='background-color:#E8E8E8;'> data.BarReader <a href=' /data/bar_reader.py#L90'>get_value</a>(sid,dt,field)</tt>	Retrieve the value at the given coordinates.
<tt style='background-color:#E8E8E8;'> data.BarReader <a href=' /data/bar_reader.py#L118'>get_last_traded_dt</a>(asset,dt)</tt>	Get the latest minute on or before dt in which asset traded.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/treasuries_can.py#L38'>_format_url</a>(instrument_type,instrument_ids,start_date,end_date)</tt>	Format a url for loading data from bank of canada.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/treasuries_can.py#L67'>load_frame</a>(url,skiprows)</tt>	Load a dataframe of data from a bank of canada site.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/treasuries_can.py#L83'>check_known_inconsistencies</a>(bill_data,bond_data)</tt>	There are a couple quirks in the data provided by bank of canada.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/us_equity_pricing.py#L118'>winsorise_uint32</a>(df,invalid_data_behavior,column)</tt>	Drops any record where a value would not fit into a uint32.
<tt style='background-color:#E8E8E8;'> data.BcolzDailyBarWriter <a href=' /data/us_equity_pricing.py#L259'>write_csvs</a>(asset_map,show_progress,invalid_data_behavior)</tt>	Read csvs as dataframes from our asset map.
<tt style='background-color:#E8E8E8;'> data.BcolzDailyBarWriter <a href=' /data/us_equity_pricing.py#L289'>_write_internal</a>(iterator,assets)</tt>	Internal implementation of write.
<tt style='background-color:#E8E8E8;'> data.BcolzDailyBarReader <a href=' /data/us_equity_pricing.py#L580'>_compute_slices</a>(start_idx,end_idx,assets)</tt>	Compute the raw row indices to load for each asset on a query for the given dates after applying a shift.
<tt style='background-color:#E8E8E8;'> data.BcolzDailyBarReader <a href=' /data/us_equity_pricing.py#L642'>_spot_col</a>(colname)</tt>	Get the colname from daily_bar_table and read all of it into memory caching the result.
<tt style='background-color:#E8E8E8;'> data.SQLiteAdjustmentWriter <a href=' /data/us_equity_pricing.py#L967'>write_dividend_payouts</a>(frame)</tt>	Write dividend payout data to sqlite table dividend_payouts.
<tt style='background-color:#E8E8E8;'> data.SQLiteAdjustmentWriter <a href=' /data/us_equity_pricing.py#L984'>calc_dividend_ratios</a>(dividends)</tt>	Calculate the ratios to apply to equities when looking back at pricing history so that the price is smoothed over the ex_date when the market.
<tt style='background-color:#E8E8E8;'> data.SQLiteAdjustmentWriter <a href=' /data/us_equity_pricing.py#L1106'>write_dividend_data</a>(dividends,stock_dividends)</tt>	Write both dividend payouts and the derived price adjustment ratios.
<tt style='background-color:#E8E8E8;'> data.SQLiteAdjustmentWriter <a href=' /data/us_equity_pricing.py#L1125'>write</a>(splits,mergers,dividends,stock_dividends)</tt>	Writes data to a sqlite file to be read by sqliteadjustmentreader.
<tt style='background-color:#E8E8E8;'> data.SQLiteAdjustmentReader <a href=' /data/us_equity_pricing.py#L1366'>unpack_db_to_component_dfs</a>(convert_dates)</tt>	Returns the set of known tables in the adjustments file in dataframe form.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/resample.py#L41'>minute_frame_to_session_frame</a>(minute_frame,calendar)</tt>	Resample a dataframe with minute data into the frame expected by a bcolzdailybarwriter.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/resample.py#L67'>minute_to_session</a>(column,close_locs,data,out)</tt>	Resample an array with minute data into an array with session data.
<tt style='background-color:#E8E8E8;'> data.DailyHistoryAggregator <a href=' /data/resample.py#L165'>opens</a>(assets,dt)</tt>	The open field's aggregation returns the first value that occurs for the day if there has been no data on or before the dt the open.
<tt style='background-color:#E8E8E8;'> data.DailyHistoryAggregator <a href=' /data/resample.py#L237'>highs</a>(assets,dt)</tt>	The high field's aggregation returns the largest high seen between the market open and the current dt.
<tt style='background-color:#E8E8E8;'> data.DailyHistoryAggregator <a href=' /data/resample.py#L306'>lows</a>(assets,dt)</tt>	The low field's aggregation returns the smallest low seen between the market open and the current dt.
<tt style='background-color:#E8E8E8;'> data.DailyHistoryAggregator <a href=' /data/resample.py#L370'>closes</a>(assets,dt)</tt>	The close field's aggregation returns the latest close at the given dt.
<tt style='background-color:#E8E8E8;'> data.DailyHistoryAggregator <a href=' /data/resample.py#L446'>volumes</a>(assets,dt)</tt>	The volume field's aggregation returns the sum of all volumes between the market open and the dt.
<tt style='background-color:#E8E8E8;'> data.bundles. <a href=' /data/bundles/core.py#L93'>to_bundle_ingest_dirname</a>(ts)</tt>	Convert a pandas timestamp into the name of the directory for the ingestion.
<tt style='background-color:#E8E8E8;'> data.bundles. <a href=' /data/bundles/core.py#L110'>from_bundle_ingest_dirname</a>(cs)</tt>	Read a bundle ingestion directory name into a pandas timestamp.
<tt style='background-color:#E8E8E8;'> data.bundles. <a href=' /data/bundles/core.py#L199'>_make_bundle_core</a>()</tt>	Create a family of data bundle functions that read from the same bundle mapping.
<tt style='background-color:#E8E8E8;'> data.bundles. <a href=' /data/bundles/quandl.py#L26'>_fetch_raw_metadata</a>(api_key,cache,retries,environ)</tt>	Generator that yields each page of data from the metadata endpoint as a dataframe.
<tt style='background-color:#E8E8E8;'> data.bundles. <a href=' /data/bundles/quandl.py#L72'>fetch_symbol_metadata_frame</a>(api_key,cache,retries,environ)</tt>	Download quandl symbol metadata.
<tt style='background-color:#E8E8E8;'> data.bundles. <a href=' /data/bundles/quandl.py#L133'>format_metadata_url</a>(api_key,page_number)</tt>	Build the query rl for the quandl wiki metadata.
<tt style='background-color:#E8E8E8;'> data.bundles. <a href=' /data/bundles/quandl.py#L149'>format_wiki_url</a>(api_key,symbol,start_date,end_date)</tt>	Build a query url for a quandl wiki dataset.
<tt style='background-color:#E8E8E8;'> data.bundles. <a href=' /data/bundles/quandl.py#L170'>fetch_single_equity</a>(api_key,symbol,start_date,end_date)</tt>	Download data for a single equity.
<tt style='background-color:#E8E8E8;'> data.bundles. <a href=' /data/bundles/quandl.py#L277'>quandl_bundle</a>(environ,asset_db_writer,minute_bar_writer,daily_bar_writer)</tt>	Build a zipline data bundle from the quandl wiki dataset.
<tt style='background-color:#E8E8E8;'> data.bundles. <a href=' /data/bundles/quandl.py#L324'>download_with_progress</a>(url,chunk_size)</tt>	Download streaming data from a url printing progress information to the terminal.
<tt style='background-color:#E8E8E8;'> data.bundles. <a href=' /data/bundles/quandl.py#L357'>download_without_progress</a>(url)</tt>	Download data from a url returning a bytesio containing the loaded data.
<tt style='background-color:#E8E8E8;'> data.bundles. <a href=' /data/bundles/yahoo.py#L17'>yahoo_equities</a>(symbols,start,end)</tt>	Create a data bundle ingest function from a set of symbols loaded from yahoo.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/synthetic.py#L11'>make_rotating_equity_info</a>(num_assets,first_start,frequency,periods_between_starts)</tt>	Create a dataframe representing lifetimes of assets that are constantly rotating in and out of existence.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/synthetic.py#L60'>make_simple_equity_info</a>(sids,start_date,end_date,symbols)</tt>	Create a dataframe representing assets that exist for the full duration between start_date and end_date.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/synthetic.py#L104'>make_jagged_equity_info</a>(num_assets,start_date,first_end,frequency)</tt>	Create a dataframe representing assets that all begin at the same start date but have cascading end dates.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/synthetic.py#L155'>make_future_info</a>(first_sid,root_symbols,years,notice_date_func)</tt>	Create a dataframe representing futures for root_symbols during year.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/synthetic.py#L230'>make_commodity_future_info</a>(first_sid,root_symbols,years,month_codes)</tt>	Make futures testing data that simulates the notice/expiration date behavior of physical commodities like oil.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/asset_db_migrations.py#L14'>downgrade</a>(engine,desired_version)</tt>	Downgrades the assets db at the given engine to the desired version.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/asset_db_migrations.py#L62'>_pragma_foreign_keys</a>(connection,on)</tt>	Sets the pragma foreign_keys state of the sqlite database disabling.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/asset_db_migrations.py#L83'>downgrades</a>(src)</tt>	Decorator for marking that a method is a downgrade to a version to the previous version.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/asset_db_migrations.py#L111'>_downgrade_v1</a>(op)</tt>	Downgrade assets db by removing the 'tick_size' column and renaming the 'multiplier' column.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/asset_db_migrations.py#L142'>_downgrade_v2</a>(op)</tt>	Downgrade assets db by removing the 'auto_close_date' column.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/asset_db_migrations.py#L165'>_downgrade_v3</a>(op)</tt>	Downgrade assets db by adding a not null constraint on equities.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/asset_db_migrations.py#L213'>_downgrade_v4</a>(op)</tt>	Downgrades assets db by copying the exchange_full column to exchange, then dropping the exchange_full column.
<tt style='background-color:#E8E8E8;'> assets.RollFinder <a href=' /assets/roll_finder.py#L54'>get_rolls</a>(root_symbol,start,end,offset)</tt>	Get the rolls i e the session at which to hop from contract to.
<tt style='background-color:#E8E8E8;'> assets.VolumeRollFinder <a href=' /assets/roll_finder.py#L150'>_active_contract</a>(oc,front,back,dt)</tt>	Return the active contract based on the previous trading day's volume.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/assets.py#L102'>merge_ownership_periods</a>(mappings)</tt>	Given a dict of mappings where the values are lists of ownershipperiod objects returns a dict with the same structure with.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/assets.py#L139'>build_ownership_map</a>(table,key_from_row,value_from_row)</tt>	Builds a dict mapping to lists of ownershipperiods from a db table.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/assets.py#L162'>_filter_kwargs</a>(names,dict_)</tt>	Filter out kwargs from a dictionary.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/assets.py#L186'>_convert_asset_timestamp_fields</a>(dict_)</tt>	Takes in a dict of asset init args and converts dates to pd timestamps.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L297'>_reset_caches</a>()</tt>	Reset our asset caches.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L310'>reload_symbol_maps</a>()</tt>	Clear the in memory symbol lookup maps.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L372'>lookup_asset_types</a>(sids)</tt>	Retrieve asset types for a list of sids.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L412'>group_by_type</a>(sids)</tt>	Group a list of sids by asset type.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L428'>retrieve_asset</a>(sid,default_none)</tt>	Retrieve the asset for a given sid.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L440'>retrieve_all</a>(sids,default_none)</tt>	Retrieve all assets in sids.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L507'>retrieve_equities</a>(sids)</tt>	Retrieve equity objects for a list of sids.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L533'>retrieve_futures_contracts</a>(sids)</tt>	Retrieve future objects for an iterable of sids.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L566'>_select_most_recent_symbols_chunk</a>(sid_group)</tt>	Retrieve the most recent symbol for a set of sids.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L643'>_retrieve_assets</a>(sids,asset_tbl,asset_type)</tt>	Internal function for loading assets from a table.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L798'>lookup_symbol</a>(symbol,as_of_date,fuzzy)</tt>	Lookup an equity by symbol.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L840'>lookup_symbols</a>(symbols,as_of_date,fuzzy)</tt>	Lookup a list of equities by symbol.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L874'>lookup_future_symbol</a>(symbol)</tt>	Lookup a future contract by symbol.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L937'>get_supplementary_field</a>(sid,field_name,as_of_date)</tt>	Get the value of a supplementary field for an asset.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L1098'>_symbol_lookups</a>()</tt>	An iterable of symbol lookup functions to use with lookup_generic attempts equities lookup then futures.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L1116'>_lookup_generic_scalar</a>(asset_convertible,as_of_date,matches,missing)</tt>	Convert asset_convertible to an asset.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L1154'>lookup_generic</a>(asset_convertible_or_iterable,as_of_date)</tt>	Convert a assetconvertible or iterable of assetconvertibles into a list of asset objects.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L1209'>map_identifier_index_to_sids</a>(index,as_of_date)</tt>	This method is for use in sanitizing a user's dataframe or panel inputs.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L1255'>_compute_asset_lifetimes</a>()</tt>	Compute and cache a recarry of asset lifetimes.
<tt style='background-color:#E8E8E8;'> assets.AssetFinder <a href=' /assets/assets.py#L1289'>lifetimes</a>(dates,include_start_date)</tt>	Compute a dataframe representing asset lifetimes for the specified date range.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/assets.py#L1373'>was_active</a>(reference_date_value,asset)</tt>	Whether or not asset was active at the time corresponding to reference_date_value.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/assets.py#L1399'>only_active_assets</a>(reference_date_value,assets)</tt>	Filter an iterable of asset objects down to just assets that were alive at the time corresponding to reference_date_value.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/asset_writer.py#L122'>split_delimited_symbol</a>(symbol)</tt>	Takes in a symbol that may be delimited and splits it in to a company symbol and share class symbol.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/asset_writer.py#L163'>_generate_output_dataframe</a>(data_subset,defaults)</tt>	Generates an output dataframe from the given subset of user-provided data the given column names and the given default values.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/asset_writer.py#L218'>_split_symbol_mappings</a>(df)</tt>	Split out the symbol sid mappings from the raw data.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/asset_writer.py#L275'>_dt_to_epoch_ns</a>(dt_series)</tt>	Convert a timeseries into an int64index of nanoseconds since the epoch.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/asset_writer.py#L296'>check_version_info</a>(conn,version_table,expected_version)</tt>	Checks for a version value in the version table.
<tt style='background-color:#E8E8E8;'> assets. <a href=' /assets/asset_writer.py#L330'>write_version_info</a>(conn,version_table,version_value)</tt>	Inserts the version value in to the version table.
<tt style='background-color:#E8E8E8;'> assets.AssetDBWriter <a href=' /assets/asset_writer.py#L365'>write</a>(equities,futures,exchanges,root_symbols)</tt>	Write asset metadata to a sqlite database.
<tt style='background-color:#E8E8E8;'> assets.AssetDBWriter <a href=' /assets/asset_writer.py#L575'>_all_tables_present</a>(txn)</tt>	Checks if any tables are present in the current assets database.
<tt style='background-color:#E8E8E8;'> assets.AssetDBWriter <a href=' /assets/asset_writer.py#L595'>init_db</a>(txn)</tt>	Connect to database and create tables.
<tt style='background-color:#E8E8E8;'> assets.AssetDBWriter <a href=' /assets/asset_writer.py#L689'>_load_data</a>(equities,futures,exchanges,root_symbols)</tt>	Returns a standard set of pandas dataframes.
<tt style='background-color:#E8E8E8;'> pipeline.CustomTermMixin <a href=' /pipeline/mixins.py#L143'>compute</a>(today,assets,out)</tt>	Override this method with a function that writes a value into out.
<tt style='background-color:#E8E8E8;'> pipeline.CustomTermMixin <a href=' /pipeline/mixins.py#L149'>_allocate_output</a>(windows,shape)</tt>	Allocate an output array whose rows should be passed to self compute.
<tt style='background-color:#E8E8E8;'> pipeline.CustomTermMixin <a href=' /pipeline/mixins.py#L189'>_compute</a>(windows,dates,assets,mask)</tt>	Call the user's compute function on each window with a pre-built output array.
<tt style='background-color:#E8E8E8;'> pipeline.AliasedMixin <a href=' /pipeline/mixins.py#L285'>make_aliased_type</a>(cls,other_base)</tt>	Factory for making aliased{filter factor classifier}.
<tt style='background-color:#E8E8E8;'> pipeline.DownsampledMixin <a href=' /pipeline/mixins.py#L359'>compute_extra_rows</a>(all_dates,start_date,end_date,min_extra_rows)</tt>	Ensure that min_extra_rows pushes us back to a computation date.
<tt style='background-color:#E8E8E8;'> pipeline.DownsampledMixin <a href=' /pipeline/mixins.py#L428'>_compute</a>(inputs,dates,assets,mask)</tt>	Compute by delegating to self _wrapped_term _compute on sample dates.
<tt style='background-color:#E8E8E8;'> pipeline.DownsampledMixin <a href=' /pipeline/mixins.py#L507'>make_downsampled_type</a>(cls,other_base)</tt>	Factory for making downsampled{filter factor classifier}.
<tt style='background-color:#E8E8E8;'> pipeline.PipelineEngine <a href=' /pipeline/engine.py#L33'>run_pipeline</a>(pipeline,start_date,end_date)</tt>	Compute values for pipeline between start_date and end_date.
<tt style='background-color:#E8E8E8;'> pipeline. <a href=' /pipeline/engine.py#L84'>default_populate_initial_workspace</a>(initial_workspace,root_mask_term,execution_plan,dates)</tt>	The default implementation for populate_initial_workspace this.
<tt style='background-color:#E8E8E8;'> pipeline.SimplePipelineEngine <a href=' /pipeline/engine.py#L168'>run_pipeline</a>(pipeline,start_date,end_date)</tt>	Compute a pipeline.
<tt style='background-color:#E8E8E8;'> pipeline.SimplePipelineEngine <a href=' /pipeline/engine.py#L259'>_compute_root_mask</a>(start_date,end_date,extra_rows)</tt>	Compute a lifetimes matrix from our assetfinder then drop columns that didn't exist at all during the query dates.
<tt style='background-color:#E8E8E8;'> pipeline.SimplePipelineEngine <a href=' /pipeline/engine.py#L317'>_inputs_for_term</a>(term,workspace,graph)</tt>	Compute inputs for the given term.
<tt style='background-color:#E8E8E8;'> pipeline.SimplePipelineEngine <a href=' /pipeline/engine.py#L357'>compute_chunk</a>(graph,dates,assets,initial_workspace)</tt>	Compute the pipeline terms in the graph for the requested start and end dates.
<tt style='background-color:#E8E8E8;'> pipeline.SimplePipelineEngine <a href=' /pipeline/engine.py#L444'>_to_narrow</a>(terms,data,mask,dates)</tt>	Convert raw computed pipeline results into a dataframe for public apis.
<tt style='background-color:#E8E8E8;'> pipeline.SimplePipelineEngine <a href=' /pipeline/engine.py#L510'>_validate_compute_chunk_params</a>(dates,assets,initial_workspace)</tt>	Verify that the values passed to compute_chunk are well-formed.
<tt style='background-color:#E8E8E8;'> pipeline. <a href=' /pipeline/downsample_helpers.py#L28'>select_sampling_indices</a>(dates,frequency)</tt>	Choose entries from dates to use for downsampling at frequency.
<tt style='background-color:#E8E8E8;'> pipeline. <a href=' /pipeline/expression.py#L90'>_ensure_element</a>(tup,elem)</tt>	Create a tuple containing all elements of tup plus elem.
<tt style='background-color:#E8E8E8;'> pipeline. <a href=' /pipeline/expression.py#L125'>method_name_for_op</a>(op,commute)</tt>	Get the name of the python magic method corresponding to op.
<tt style='background-color:#E8E8E8;'> pipeline.NumericalExpression <a href=' /pipeline/expression.py#L204'>_validate</a>()</tt>	Ensure that our expression string has variables of the form x_0 x_1.
<tt style='background-color:#E8E8E8;'> pipeline.NumericalExpression <a href=' /pipeline/expression.py#L229'>_compute</a>(arrays,dates,assets,mask)</tt>	Compute our stored expression string with numexpr.
<tt style='background-color:#E8E8E8;'> pipeline.NumericalExpression <a href=' /pipeline/expression.py#L246'>_rebind_variables</a>(new_inputs)</tt>	Return self _expr with all variables rebound to the indices implied by.
<tt style='background-color:#E8E8E8;'> pipeline.NumericalExpression <a href=' /pipeline/expression.py#L272'>_merge_expressions</a>(other)</tt>	Merge the inputs of two numericalexpressions into a single input tuple rewriting their respective string expressions to make input names.
<tt style='background-color:#E8E8E8;'> pipeline.NumericalExpression <a href=' /pipeline/expression.py#L285'>build_binary_op</a>(op,other)</tt>	Compute new expression strings and a new inputs tuple for combining self and other with a binary operator.
<tt style='background-color:#E8E8E8;'> pipeline.Term <a href=' /pipeline/term.py#L71'>__new__</a>(cls,domain,dtype,missing_value)</tt>	Memoized constructor for terms.
<tt style='background-color:#E8E8E8;'> pipeline.Term <a href=' /pipeline/term.py#L135'>_pop_params</a>(cls,kwargs)</tt>	Pop entries from the kwargs passed to cls __new__ based on the values.
<tt style='background-color:#E8E8E8;'> pipeline.Term <a href=' /pipeline/term.py#L190'>__init__</a>()</tt>	Noop constructor to play nicely with our caching __new__ subclasses.
<tt style='background-color:#E8E8E8;'> pipeline.Term <a href=' /pipeline/term.py#L212'>_static_identity</a>(cls,domain,dtype,missing_value)</tt>	Return the identity of the term that would be constructed from the given arguments.
<tt style='background-color:#E8E8E8;'> pipeline.Term <a href=' /pipeline/term.py#L279'>_validate</a>()</tt>	Assert that this term is well-formed this should be called exactly.
<tt style='background-color:#E8E8E8;'> pipeline.Term <a href=' /pipeline/term.py#L288'>compute_extra_rows</a>(all_dates,start_date,end_date,min_extra_rows)</tt>	Calculate the number of extra rows needed to compute self.
<tt style='background-color:#E8E8E8;'> pipeline.Term <a href=' /pipeline/term.py#L321'>inputs</a>()</tt>	A tuple of other terms needed as direct inputs for this term.
<tt style='background-color:#E8E8E8;'> pipeline.Term <a href=' /pipeline/term.py#L328'>windowed</a>()</tt>	Boolean indicating whether this term is a trailing-window computation.
<tt style='background-color:#E8E8E8;'> pipeline.Term <a href=' /pipeline/term.py#L335'>mask</a>()</tt>	A filter representing asset/date pairs to include while computing this term.
<tt style='background-color:#E8E8E8;'> pipeline.Term <a href=' /pipeline/term.py#L343'>dependencies</a>()</tt>	A dictionary mapping terms that must be computed before self to the number of extra rows needed for those terms.
<tt style='background-color:#E8E8E8;'> pipeline.ComputableTerm <a href=' /pipeline/term.py#L542'>_compute</a>(inputs,dates,assets,mask)</tt>	Subclasses should implement this to perform actual computation.
<tt style='background-color:#E8E8E8;'> pipeline.ComputableTerm <a href=' /pipeline/term.py#L552'>windowed</a>()</tt>	Whether or not this term represents a trailing window computation.
<tt style='background-color:#E8E8E8;'> pipeline.ComputableTerm <a href=' /pipeline/term.py#L568'>dependencies</a>()</tt>	The number of extra rows needed for each of our inputs to compute this term.
<tt style='background-color:#E8E8E8;'> pipeline.ComputableTerm <a href=' /pipeline/term.py#L581'>postprocess</a>(data)</tt>	Called with an result of self, unravelled i e 1-dimensional.
<tt style='background-color:#E8E8E8;'> pipeline.ComputableTerm <a href=' /pipeline/term.py#L594'>to_workspace_value</a>(result,assets)</tt>	Called with a column of the result of a pipeline this needs to put.
<tt style='background-color:#E8E8E8;'> pipeline.ComputableTerm <a href=' /pipeline/term.py#L619'>_downsampled_type</a>()</tt>	The expression type to return from self downsample().
<tt style='background-color:#E8E8E8;'> pipeline.ComputableTerm <a href=' /pipeline/term.py#L628'>downsample</a>(frequency)</tt>	Make a term that computes from self at lower-than-daily frequency.
<tt style='background-color:#E8E8E8;'> pipeline.ComputableTerm <a href=' /pipeline/term.py#L640'>_aliased_type</a>()</tt>	The expression type to return from self alias().
<tt style='background-color:#E8E8E8;'> pipeline.ComputableTerm <a href=' /pipeline/term.py#L649'>alias</a>(name)</tt>	Make a term from self that names the expression.
<tt style='background-color:#E8E8E8;'> pipeline. <a href=' /pipeline/term.py#L742'>validate_dtype</a>(termname,dtype,missing_value)</tt>	Validate a dtype and missing_value passed to term __new__.
<tt style='background-color:#E8E8E8;'> pipeline. <a href=' /pipeline/term.py#L808'>_assert_valid_categorical_missing_value</a>(value)</tt>	Check that value is a valid categorical missing_value.
<tt style='background-color:#E8E8E8;'> pipeline. <a href=' /pipeline/api_utils.py#L7'>restrict_to_dtype</a>(dtype,message_template)</tt>	A factory for decorators that restrict term methods to only be callable on terms with a specific dtype.
<tt style='background-color:#E8E8E8;'> pipeline. <a href=' /pipeline/visualize.py#L24'>delimit</a>(delimiters,content)</tt>	Surround content with the first and last characters of delimiters.
<tt style='background-color:#E8E8E8;'> pipeline. <a href=' /pipeline/visualize.py#L73'>roots</a>(g)</tt>	Get nodes from graph g with indegree 0.
<tt style='background-color:#E8E8E8;'> pipeline. <a href=' /pipeline/visualize.py#L84'>_render</a>(g,out,format_,include_asset_exists)</tt>	Draw g as a graph to out, in format format.
<tt style='background-color:#E8E8E8;'> pipeline. <a href=' /pipeline/visualize.py#L152'>display_graph</a>(g,format,include_asset_exists)</tt>	Display a termgraph interactively from within ipython.
<tt style='background-color:#E8E8E8;'> pipeline. <a href=' /pipeline/visualize.py#L218'>format_attrs</a>(attrs)</tt>	Format key value pairs from attrs into graphviz attrs format.
<tt style='background-color:#E8E8E8;'> pipeline.TermGraph <a href=' /pipeline/graph.py#L61'>_add_to_graph</a>(term,parents)</tt>	Add a term and all its children to graph.
<tt style='background-color:#E8E8E8;'> pipeline.TermGraph <a href=' /pipeline/graph.py#L89'>outputs</a>()</tt>	Dict mapping names to designated output terms.
<tt style='background-color:#E8E8E8;'> pipeline.TermGraph <a href=' /pipeline/graph.py#L96'>execution_order</a>(refcounts)</tt>	Return a topologically-sorted iterator over the terms in self which need to be computed.
<tt style='background-color:#E8E8E8;'> pipeline.TermGraph <a href=' /pipeline/graph.py#L131'>initial_refcounts</a>(initial_terms)</tt>	Calculate initial refcounts for execution of this graph.
<tt style='background-color:#E8E8E8;'> pipeline.TermGraph <a href=' /pipeline/graph.py#L153'>_decref_depencies_recursive</a>(term,refcounts,garbage)</tt>	Decrement terms recursively.
<tt style='background-color:#E8E8E8;'> pipeline.TermGraph <a href=' /pipeline/graph.py#L172'>decref_dependencies</a>(term,refcounts)</tt>	Decrement in-edges for term after computation.
<tt style='background-color:#E8E8E8;'> pipeline.ExecutionPlan <a href=' /pipeline/graph.py#L250'>set_extra_rows</a>(term,all_dates,start_date,end_date)</tt>	Compute extra_rows for transitive dependencies of root_terms.
<tt style='background-color:#E8E8E8;'> pipeline.ExecutionPlan <a href=' /pipeline/graph.py#L286'>offset</a>()</tt>	For all pairs term input such that input is an input to term, compute a mapping :.
<tt style='background-color:#E8E8E8;'> pipeline.ExecutionPlan <a href=' /pipeline/graph.py#L361'>extra_rows</a>()</tt>	A dict mapping term -> # of extra rows to load/compute of term.
<tt style='background-color:#E8E8E8;'> pipeline.ExecutionPlan <a href=' /pipeline/graph.py#L400'>_ensure_extra_rows</a>(term,N)</tt>	Ensure that we're going to compute at least n extra rows of term.
<tt style='background-color:#E8E8E8;'> pipeline.ExecutionPlan <a href=' /pipeline/graph.py#L407'>mask_and_dates_for_term</a>(term,root_mask_term,workspace,all_dates)</tt>	Load mask and mask row labels for term.
<tt style='background-color:#E8E8E8;'> pipeline. <a href=' /pipeline/__init__.py#L14'>engine_from_files</a>(daily_bar_path,adjustments_path,asset_db_path,calendar)</tt>	Construct a simplepipelineengine from local filesystem resources.
<tt style='background-color:#E8E8E8;'> pipeline.Pipeline <a href=' /pipeline/pipeline.py#L60'>columns</a>()</tt>	The columns registered with this pipeline.
<tt style='background-color:#E8E8E8;'> pipeline.Pipeline <a href=' /pipeline/pipeline.py#L67'>screen</a>()</tt>	The screen applied to the rows of this pipeline.
<tt style='background-color:#E8E8E8;'> pipeline.Pipeline <a href=' /pipeline/pipeline.py#L74'>add</a>(term,name,overwrite)</tt>	Add a column.
<tt style='background-color:#E8E8E8;'> pipeline.Pipeline <a href=' /pipeline/pipeline.py#L109'>remove</a>(name)</tt>	Remove a column.
<tt style='background-color:#E8E8E8;'> pipeline.Pipeline <a href=' /pipeline/pipeline.py#L131'>set_screen</a>(screen,overwrite)</tt>	Set a screen on this pipeline.
<tt style='background-color:#E8E8E8;'> pipeline.Pipeline <a href=' /pipeline/pipeline.py#L155'>to_execution_plan</a>(screen_name,default_screen,all_dates,start_date)</tt>	Compile into an executionplan.
<tt style='background-color:#E8E8E8;'> pipeline.Pipeline <a href=' /pipeline/pipeline.py#L185'>to_simple_graph</a>(screen_name,default_screen)</tt>	Compile into a simple termgraph with no extra row metadata.
<tt style='background-color:#E8E8E8;'> pipeline.Pipeline <a href=' /pipeline/pipeline.py#L200'>_prepare_graph_terms</a>(screen_name,default_screen)</tt>	Helper for to_graph and to_execution_plan.
<tt style='background-color:#E8E8E8;'> pipeline.Pipeline <a href=' /pipeline/pipeline.py#L209'>show_graph</a>(format)</tt>	Render this pipeline as a dag.
<tt style='background-color:#E8E8E8;'> pipeline.filters. <a href=' /pipeline/filters/filter.py#L41'>concat_tuples</a>()</tt>	Concatenate a sequence of tuples into one tuple.
<tt style='background-color:#E8E8E8;'> pipeline.filters. <a href=' /pipeline/filters/filter.py#L48'>binary_operator</a>(op)</tt>	Factory function for making binary operator methods on a filter subclass.
<tt style='background-color:#E8E8E8;'> pipeline.filters. <a href=' /pipeline/filters/filter.py#L101'>unary_operator</a>(op)</tt>	Factory function for making unary operator methods for filters.
<tt style='background-color:#E8E8E8;'> pipeline.filters.NumExprFilter <a href=' /pipeline/filters/filter.py#L221'>create</a>(cls,expr,binds)</tt>	Helper for creating new numexprfactors.
<tt style='background-color:#E8E8E8;'> pipeline.filters.NumExprFilter <a href=' /pipeline/filters/filter.py#L232'>_compute</a>(arrays,dates,assets,mask)</tt>	Compute our result with numexpr then re-apply mask.
<tt style='background-color:#E8E8E8;'> pipeline.filters.PercentileFilter <a href=' /pipeline/filters/filter.py#L329'>_validate</a>()</tt>	Ensure that our percentile bounds are well-formed.
<tt style='background-color:#E8E8E8;'> pipeline.filters.PercentileFilter <a href=' /pipeline/filters/filter.py#L341'>_compute</a>(arrays,dates,assets,mask)</tt>	For each row in the input compute a mask of all values falling between the given percentiles.
<tt style='background-color:#E8E8E8;'> pipeline.data.Column <a href=' /pipeline/data/dataset.py#L33'>bind</a>(name)</tt>	Bind a column object to its name.
<tt style='background-color:#E8E8E8;'> pipeline.data._BoundColumnDescr <a href=' /pipeline/data/dataset.py#L75'>__get__</a>(instance,owner)</tt>	Produce a concrete boundcolumn object when accessed.
<tt style='background-color:#E8E8E8;'> pipeline.data.BoundColumn <a href=' /pipeline/data/dataset.py#L141'>dataset</a>()</tt>	The dataset to which this column is bound.
<tt style='background-color:#E8E8E8;'> pipeline.data.BoundColumn <a href=' /pipeline/data/dataset.py#L148'>name</a>()</tt>	The name of this column.
<tt style='background-color:#E8E8E8;'> pipeline.data.BoundColumn <a href=' /pipeline/data/dataset.py#L155'>qualname</a>()</tt>	The fully-qualified name of this column.
<tt style='background-color:#E8E8E8;'> pipeline.classifiers.Classifier <a href=' /pipeline/classifiers/classifier.py#L61'>isnull</a>()</tt>	A filter producing true for values where this term has missing data.
<tt style='background-color:#E8E8E8;'> pipeline.classifiers.Classifier <a href=' /pipeline/classifiers/classifier.py#L67'>notnull</a>()</tt>	A filter producing true for values where this term has complete data.
<tt style='background-color:#E8E8E8;'> pipeline.classifiers.Classifier <a href=' /pipeline/classifiers/classifier.py#L76'>eq</a>(other)</tt>	Construct a filter returning true for asset/date pairs where the output of self matches other.
<tt style='background-color:#E8E8E8;'> pipeline.classifiers.Classifier <a href=' /pipeline/classifiers/classifier.py#L111'>__ne__</a>(other)</tt>	Construct a filter returning true for asset/date pairs where the output of self matches other.
<tt style='background-color:#E8E8E8;'> pipeline.classifiers.Classifier <a href=' /pipeline/classifiers/classifier.py#L131'>startswith</a>(prefix)</tt>	Construct a filter matching values starting with prefix.
<tt style='background-color:#E8E8E8;'> pipeline.classifiers.Classifier <a href=' /pipeline/classifiers/classifier.py#L154'>endswith</a>(suffix)</tt>	Construct a filter matching values ending with suffix.
<tt style='background-color:#E8E8E8;'> pipeline.classifiers.Classifier <a href=' /pipeline/classifiers/classifier.py#L177'>has_substring</a>(substring)</tt>	Construct a filter matching values containing substring.
<tt style='background-color:#E8E8E8;'> pipeline.classifiers.Classifier <a href=' /pipeline/classifiers/classifier.py#L200'>matches</a>(pattern)</tt>	Construct a filter that checks regex matches against pattern.
<tt style='background-color:#E8E8E8;'> pipeline.classifiers.Classifier <a href=' /pipeline/classifiers/classifier.py#L227'>element_of</a>(choices)</tt>	Construct a filter indicating whether values are in choices.
<tt style='background-color:#E8E8E8;'> pipeline.classifiers.Classifier <a href=' /pipeline/classifiers/classifier.py#L308'>to_workspace_value</a>(result,assets)</tt>	Called with the result of a pipeline this needs to return an object.
<tt style='background-color:#E8E8E8;'> pipeline.classifiers.CustomClassifier <a href=' /pipeline/classifiers/classifier.py#L399'>_allocate_output</a>(windows,shape)</tt>	Override the default array allocation to produce a labelarray when we have a string-like dtype.
<tt style='background-color:#E8E8E8;'> pipeline.factors. <a href=' /pipeline/factors/technical.py#L167'>exponential_weights</a>(length,decay_rate)</tt>	Build a weight vector for an exponentially-weighted statistic.
<tt style='background-color:#E8E8E8;'> pipeline.factors._ExponentialWeightedFactor <a href=' /pipeline/factors/technical.py#L220'>from_span</a>(cls,inputs,window_length,span)</tt>	Convenience constructor for passing decay_rate in terms of span.
<tt style='background-color:#E8E8E8;'> pipeline.factors._ExponentialWeightedFactor <a href=' /pipeline/factors/technical.py#L266'>from_halflife</a>(cls,inputs,window_length,halflife)</tt>	Convenience constructor for passing decay_rate in terms of half life.
<tt style='background-color:#E8E8E8;'> pipeline.factors._ExponentialWeightedFactor <a href=' /pipeline/factors/technical.py#L312'>from_center_of_mass</a>(cls,inputs,window_length,center_of_mass)</tt>	Convenience constructor for passing decay_rate in terms of center of mass.
<tt style='background-color:#E8E8E8;'> pipeline.factors. <a href=' /pipeline/factors/factor.py#L63'>coerce_numbers_to_my_dtype</a>(f)</tt>	A decorator for methods whose signature is f self other that coerces other to self.
<tt style='background-color:#E8E8E8;'> pipeline.factors. <a href=' /pipeline/factors/factor.py#L94'>binop_return_dtype</a>(op,left,right)</tt>	Compute the expected return dtype for the given binary operator.
<tt style='background-color:#E8E8E8;'> pipeline.factors. <a href=' /pipeline/factors/factor.py#L134'>binary_operator</a>(op)</tt>	Factory function for making binary operator methods on a factor subclass.
<tt style='background-color:#E8E8E8;'> pipeline.factors. <a href=' /pipeline/factors/factor.py#L197'>reflected_binary_operator</a>(op)</tt>	Factory function for making binary operator methods on a factor.
<tt style='background-color:#E8E8E8;'> pipeline.factors. <a href=' /pipeline/factors/factor.py#L236'>unary_operator</a>(op)</tt>	Factory function for making unary operator methods for factors.
<tt style='background-color:#E8E8E8;'> pipeline.factors. <a href=' /pipeline/factors/factor.py#L278'>function_application</a>(func)</tt>	Factory function for producing function application methods for factor subclasses.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L389'>demean</a>(mask,groupby)</tt>	Construct a factor that computes self and subtracts the mean from row of the result.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L518'>zscore</a>(mask,groupby)</tt>	Construct a factor that z-scores each day's results.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L585'>rank</a>(method,ascending,mask,groupby)</tt>	Construct a new factor representing the sorted rank of each column within each row.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L645'>pearsonr</a>(target,correlation_length,mask)</tt>	Construct a new factor that computes rolling pearson correlation coefficients between target and the columns of self.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L710'>spearmanr</a>(target,correlation_length,mask)</tt>	Construct a new factor that computes rolling spearman rank correlation coefficients between target and the columns of self.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L775'>linear_regression</a>(target,regression_length,mask)</tt>	Construct a new factor that performs an ordinary least-squares regression predicting the columns of self from target.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L837'>winsorize</a>(min_percentile,max_percentile,mask,groupby)</tt>	Construct a factor returns a winsorized row winsorizing changes values.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L935'>quantiles</a>(bins,mask)</tt>	Construct a classifier computing quantiles of the output of self.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L962'>quartiles</a>(mask)</tt>	Construct a classifier computing quartiles over the output of self.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L986'>quintiles</a>(mask)</tt>	Construct a classifier computing quintile labels on self.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L1010'>deciles</a>(mask)</tt>	Construct a classifier computing decile labels on self.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L1034'>top</a>(N,mask,groupby)</tt>	Construct a filter matching the top n asset values of self each day.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L1058'>bottom</a>(N,mask,groupby)</tt>	Construct a filter matching the bottom n asset values of self each day.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L1082'>percentile_between</a>(min_percentile,max_percentile,mask)</tt>	Construct a new filter representing entries from the output of this factor that fall within the percentile range defined by min_percentile.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L1120'>isnull</a>()</tt>	A filter producing true for values where this factor has missing data.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L1138'>notnull</a>()</tt>	A filter producing true for values where this factor has complete data.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L1147'>isnan</a>()</tt>	A filter producing true for all values where this factor is nan.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L1158'>notnan</a>()</tt>	A filter producing true for values where this factor is not nan.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Factor <a href=' /pipeline/factors/factor.py#L1169'>isfinite</a>()</tt>	A filter producing true for values where this factor is anything but nan inf or -inf.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Rank <a href=' /pipeline/factors/factor.py#L1374'>_validate</a>()</tt>	Verify that the stored rank method is valid.
<tt style='background-color:#E8E8E8;'> pipeline.factors.Rank <a href=' /pipeline/factors/factor.py#L1385'>_compute</a>(arrays,dates,assets,mask)</tt>	For each row in the input compute a like-shaped array of per-row ranks.
<tt style='background-color:#E8E8E8;'> pipeline.factors. <a href=' /pipeline/factors/factor.py#L1634'>winsorize</a>(row,min_percentile,max_percentile)</tt>	This implementation is based on scipy stats mstats winsorize.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/testing.py#L8'>make_eye_loader</a>(dates,sids)</tt>	Make a pipelineloader that emits np eye arrays for the columns in.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/testing.py#L16'>make_seeded_random_loader</a>(seed,dates,sids)</tt>	Make a pipelineloader that emits random arrays seeded with seed for the columns in testingdataset.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/earnings_estimates.py#L63'>required_estimates_fields</a>(columns)</tt>	Compute the set of resource columns required to serve columns.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/events.py#L38'>validate_column_specs</a>(events,columns)</tt>	Verify that the columns of events can be used by a earningsestimatesloader to serve the boundcolumns described by.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.EarningsEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L191'>get_requested_quarter_data</a>(zero_qtr_data,zeroth_quarter_idx,stacked_last_per_qtr,num_announcements)</tt>	Selects the requested data for each date.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.EarningsEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L256'>get_split_adjusted_asof_idx</a>(dates)</tt>	Compute the index in dates where the split-adjusted-asof-date falls.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.EarningsEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L283'>collect_overwrites_for_sid</a>(group,dates,requested_qtr_data,last_per_qtr)</tt>	Given a sid collect all overwrites that should be applied for this sid at each quarter boundary.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.EarningsEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L407'>merge_into_adjustments_for_all_sids</a>(all_adjustments_for_sid,col_to_all_adjustments)</tt>	Merge adjustments for a particular sid into a dictionary containing adjustments for all sids.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.EarningsEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L432'>get_adjustments</a>(zero_qtr_data,requested_qtr_data,last_per_qtr,dates)</tt>	Creates an adjustedarray from the given estimates data for the given dates.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.EarningsEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L493'>create_overwrites_for_quarter</a>(col_to_overwrites,next_qtr_start_idx,last_per_qtr,quarters_with_estimates_for_sid)</tt>	Add entries to the dictionary of columns to adjustments for the given sid and the given quarter.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.EarningsEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L667'>get_last_data_per_qtr</a>(assets_with_data,columns,dates)</tt>	Determine the last piece of information we know for each column on each date in the index for each sid and quarter.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.NextEarningsEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L751'>get_zeroth_quarter_idx</a>(stacked_last_per_qtr)</tt>	Filters for releases that are on or after each simulation date and determines the next quarter by picking out the upcoming release for.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.PreviousEarningsEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L805'>get_zeroth_quarter_idx</a>(stacked_last_per_qtr)</tt>	Filters for releases that are on or after each simulation date and determines the previous quarter by picking out the most recent.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.SplitAdjustedEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L902'>get_adjustments_for_sid</a>(group,dates,requested_qtr_data,last_per_qtr)</tt>	Collects both overwrites and adjustments for a particular sid.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.SplitAdjustedEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L962'>get_adjustments</a>(zero_qtr_data,requested_qtr_data,last_per_qtr,dates)</tt>	Calculates both split adjustments and overwrites for all sids.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.SplitAdjustedEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L993'>determine_end_idx_for_adjustment</a>(adjustment_ts,dates,upper_bound,requested_quarter)</tt>	Determines the date until which the adjustment at the given date index should be applied for the given quarter.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.SplitAdjustedEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L1048'>collect_pre_split_asof_date_adjustments</a>(split_adjusted_asof_date_idx,sid_idx,pre_adjustments,requested_split_adjusted_columns)</tt>	Collect split adjustments that occur before the split-adjusted-asof-date.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.SplitAdjustedEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L1112'>collect_post_asof_split_adjustments</a>(post_adjustments,requested_qtr_data,sid,sid_idx)</tt>	Collect split adjustments that occur after the split-adjusted-asof-date.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.SplitAdjustedEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L1212'>retrieve_split_adjustment_data_for_sid</a>(dates,sid,split_adjusted_asof_idx)</tt>	Dates : pd datetimeindex.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.SplitAdjustedEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L1289'>merge_split_adjustments_with_overwrites</a>(pre,post,overwrites,requested_split_adjusted_columns)</tt>	Merge split adjustments with the dict containing overwrites.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.PreviousSplitAdjustedEarningsEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L1337'>collect_split_adjustments</a>(adjustments_for_sid,requested_qtr_data,dates,sid)</tt>	Collect split adjustments for previous quarters and apply them to the given dictionary of splits for the given sid.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.NextSplitAdjustedEarningsEstimatesLoader <a href=' /pipeline/loaders/earnings_estimates.py#L1402'>collect_split_adjustments</a>(adjustments_for_sid,requested_qtr_data,dates,sid)</tt>	Collect split adjustments for future quarters re-apply adjustments.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.PrecomputedLoader <a href=' /pipeline/loaders/synthetic.py#L79'>load_adjusted_array</a>(columns,dates,assets,mask)</tt>	Load by delegating to sub-loaders.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.SeededRandomLoader <a href=' /pipeline/loaders/synthetic.py#L142'>values</a>(dtype,dates,sids)</tt>	Make a random array of shape (len dates len sids with dtype.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.SeededRandomLoader <a href=' /pipeline/loaders/synthetic.py#L155'>state</a>()</tt>	Make a new randomstate from our seed.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.SeededRandomLoader <a href=' /pipeline/loaders/synthetic.py#L165'>_float_values</a>(shape)</tt>	Return uniformly-distributed floats between -0 0 and 100 0.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.SeededRandomLoader <a href=' /pipeline/loaders/synthetic.py#L171'>_int_values</a>(shape)</tt>	Return uniformly-distributed integers between 0 and 100.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.SeededRandomLoader <a href=' /pipeline/loaders/synthetic.py#L178'>_datetime_values</a>(shape)</tt>	Return uniformly-distributed dates in 2014.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.SeededRandomLoader <a href=' /pipeline/loaders/synthetic.py#L190'>_bool_values</a>(shape)</tt>	Return uniformly-distributed true/false values.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/synthetic.py#L222'>make_bar_data</a>(asset_info,calendar)</tt>	For a given asset/date/column combination we generate a corresponding raw value using the following formula for ohlcv columns.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/synthetic.py#L306'>expected_bar_value</a>(asset_id,date,colname)</tt>	Check that the raw value for an asset/date/column triple is as expected.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/synthetic.py#L319'>expected_bar_values_2d</a>(dates,asset_info,colname)</tt>	Return an 2d array containing cls expected_value(asset_id date.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/events.py#L20'>required_event_fields</a>(next_value_columns,previous_value_columns)</tt>	Compute the set of resource columns required to serve next_value_columns and previous_value_columns.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/events.py#L38'>validate_column_specs</a>(events,next_value_columns,previous_value_columns)</tt>	Verify that the columns of events can be used by an eventsloader to serve the boundcolumns described by next_value_columns and.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.EventsLoader <a href=' /pipeline/loaders/events.py#L118'>split_next_and_previous_event_columns</a>(requested_columns)</tt>	Split requested columns into columns that should load the next known value and columns that should load the previous known value.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.USEquityPricingLoader <a href=' /pipeline/loaders/equity_pricing_loader.py#L48'>from_files</a>(cls,pricing_path,adjustments_path)</tt>	Create a loader from a bcolz equity pricing dir and a sqlite adjustments path.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.DataFrameLoader <a href=' /pipeline/loaders/frame.py#L82'>format_adjustments</a>(dates,assets)</tt>	Build a dict of adjustment objects in the format expected by adjustedarray.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.DataFrameLoader <a href=' /pipeline/loaders/frame.py#L148'>load_adjusted_array</a>(columns,dates,assets,mask)</tt>	Load data from our stored baseline.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/utils.py#L10'>is_sorted_ascending</a>(a)</tt>	Check if a numpy array is sorted.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/utils.py#L27'>next_event_indexer</a>(all_dates,all_sids,event_dates,event_timestamps)</tt>	Construct an index array that when applied to an array of values produces a 2d array containing the values associated with the next event for each.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/utils.py#L81'>previous_event_indexer</a>(all_dates,all_sids,event_dates,event_timestamps)</tt>	Construct an index array that when applied to an array of values produces a 2d array containing the values associated with the previous event for.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/utils.py#L134'>normalize_data_query_time</a>(dt,time,tz)</tt>	Apply the correct time and timezone to a date.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/utils.py#L162'>normalize_data_query_bounds</a>(lower,upper,time,tz)</tt>	Adjust the first and last dates in the requested datetime index based on the provided query time and tz.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/utils.py#L199'>normalize_timestamp_to_query_time</a>(df,time,tz,inplace)</tt>	Update the timestamp field of a dataframe to normalize dates around some data query time/timezone.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/utils.py#L261'>check_data_query_args</a>(data_query_time,data_query_tz)</tt>	Checks the data_query_time and data_query_tz arguments for loaders and raises a standard exception if one is none and the other is not.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/utils.py#L285'>last_in_date_group</a>(df,dates,assets,reindex)</tt>	Determine the last piece of information known on each date in the date index for each group.
<tt style='background-color:#E8E8E8;'> pipeline.loaders. <a href=' /pipeline/loaders/utils.py#L359'>ffill_across_cols</a>(df,columns,name_map)</tt>	Forward fill values in a dataframe with special logic to handle cases that pd.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L300'>datashape_type_to_numpy</a>(type_)</tt>	Given a datashape type return the associated numpy type maps.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L325'>new_dataset</a>(expr,deltas,missing_values)</tt>	Creates or returns a dataset from a pair of blaze expressions.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L382'>_check_resources</a>(name,expr,resources)</tt>	Validate that the expression and resources passed match up.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L410'>_check_datetime_field</a>(name,measure)</tt>	Check that a field is a datetime inside some measure.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L460'>_get_metadata</a>(field,expr,metadata_expr,no_metadata_rule)</tt>	Find the correct metadata expression for the expression.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L498'>_ad_as_ts</a>(expr)</tt>	Duplicate the asof_date column as the timestamp column.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L518'>_ensure_timestamp_field</a>(dataset_expr,deltas,checkpoints)</tt>	Verify that the baseline and deltas expressions have a timestamp field.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L553'>from_blaze</a>(expr,deltas,checkpoints,loader)</tt>	Create a pipeline api object from a blaze expression.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L749'>overwrite_novel_deltas</a>(baseline,deltas,dates)</tt>	Overwrite any deltas into the baseline set that would have changed our most recently known value.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L783'>overwrite_from_dates</a>(asof,dense_dates,sparse_dates,asset_idx)</tt>	Construct an overwrite with the correct start and end date based on the asof date of the delta.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L844'>adjustments_from_deltas_no_sids</a>(dense_dates,sparse_dates,column_idx,column_name)</tt>	Collect all the adjustments that occur in a dataset that does not have a sid column.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L886'>adjustments_from_deltas_with_sids</a>(dense_dates,sparse_dates,column_idx,column_name)</tt>	Collect all the adjustments that occur in a dataset that has a sid column.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L1170'>bind_expression_to_resources</a>(expr,resources)</tt>	Bind a blaze expression to resources.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L1198'>get_materialized_checkpoints</a>(checkpoints,colnames,lower_dt,odo_kwargs)</tt>	Computes a lower bound and a dataframe checkpoints.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/core.py#L1240'>ffill_query_in_range</a>(expr,lower,upper,checkpoints)</tt>	Query a blaze expression in a given time range properly forward filling from values that fall before the lower date.
<tt style='background-color:#E8E8E8;'> pipeline.loaders.blaze. <a href=' /pipeline/loaders/blaze/utils.py#L9'>load_raw_data</a>(assets,dates,data_query_time,data_query_tz)</tt>	Given an expression representing data to load perform normalization and forward-filling and return the data materialized.
<tt style='background-color:#E8E8E8;'> sources. <a href=' /sources/test_source.py#L53'>date_gen</a>(start,end,trading_calendar,delta)</tt>	Utility to generate a stream of dates.
<tt style='background-color:#E8E8E8;'> sources.PandasCSV <a href=' /sources/requests_csv.py#L196'>parse_date_str_series</a>(format_str,tz,date_str_series,data_frequency)</tt>	Efficient parsing for a 1d pandas/numpy object containing string representations of dates.
<tt style='background-color:#E8E8E8;'> sources.PandasCSV <a href=' /sources/requests_csv.py#L258'>_lookup_unconflicted_symbol</a>(symbol)</tt>	Attempt to find a unique asset whose symbol is the given string.
<tt style='background-color:#E8E8E8;'> sources.BenchmarkSource <a href=' /sources/benchmark_source.py#L105'>_initialize_precalculated_series</a>(asset,trading_calendar,trading_days,data_portal)</tt>	Internal method that pre-calculates the benchmark return series for use in the simulation.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/pandas_utils.py#L19'>explode</a>(df)</tt>	Take a dataframe and return a triple of (df.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/pandas_utils.py#L28'>_time_to_micros</a>(time)</tt>	Convert a time into microseconds since midnight.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/pandas_utils.py#L52'>mask_between_time</a>(dts,start,end,include_start)</tt>	Return a mask of all of the datetimes in dts that are between start and end.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/pandas_utils.py#L94'>find_in_sorted_index</a>(dts,dt)</tt>	Find the index of dt in dts.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/pandas_utils.py#L125'>nearest_unequal_elements</a>(dts,dt)</tt>	Find values in dts closest but not equal to dt.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/pandas_utils.py#L175'>timedelta_to_integral_seconds</a>(delta)</tt>	Convert a pd timedelta to a number of seconds as an int.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/pandas_utils.py#L182'>timedelta_to_integral_minutes</a>(delta)</tt>	Convert a pd timedelta to a number of minutes as an int.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/pandas_utils.py#L207'>clear_dataframe_indexer_caches</a>(df)</tt>	Clear cached attributes from a pandas dataframe.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/memoize.py#L259'>weak_lru_cache</a>(maxsize)</tt>	Weak least-recently-used cache decorator.
<tt style='background-color:#E8E8E8;'> utils._WeakArgsOrderedDict <a href=' /utils/memoize.py#L251'>move_to_end</a>(key)</tt>	Move an existing element to the end.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/math_utils.py#L20'>tolerant_equals</a>(a,b,atol,rtol)</tt>	Check if a and b are equal with some tolerance.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/math_utils.py#L71'>round_if_near_integer</a>(a,epsilon)</tt>	Round a to the nearest integer if that integer is within an epsilon of a.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/sharedoc.py#L29'>pad_lines_after_first</a>(prefix,s)</tt>	Apply a prefix to each line in s after the first.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/sharedoc.py#L34'>format_docstring</a>(owner_name,docstring,formatters)</tt>	Template formatters into docstring.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/sharedoc.py#L84'>templated_docstring</a>()</tt>	Decorator allowing the use of templated docstrings.
<tt style='background-color:#E8E8E8;'> utils.Argument <a href=' /utils/argcheck.py#L97'>parse_argspec</a>(callable_)</tt>	Takes a callable and returns a tuple with the list of argument objects the name of *args and the name of **kwargs.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/argcheck.py#L131'>_expect_extra</a>(expected,present,exc_unexpected,exc_missing)</tt>	Checks for the presence of an extra to the argument list raises expections.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/argcheck.py#L143'>verify_callable_argspec</a>(callable_,expected_args,expect_starargs,expect_kwargs)</tt>	Checks the callable_ to make sure that it satisfies the given expectations.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/serialization_utils.py#L43'>dumps_with_persistent_ids</a>(obj,protocol)</tt>	Performs a pickle dumps on the given object substituting all references to a tradingenvironment or assetfinder with tokenized representations.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/serialization_utils.py#L57'>loads_with_persistent_ids</a>(str,env)</tt>	Performs a pickle loads on the given string substituting the given tradingenvironment in to any tokenized representations of a.
<tt style='background-color:#E8E8E8;'> utils.RollingPanel <a href=' /utils/data.py#L82'>oldest_frame</a>(raw)</tt>	Get the oldest frame in the panel.
<tt style='background-color:#E8E8E8;'> utils.RollingPanel <a href=' /utils/data.py#L107'>extend_back</a>(missing_dts)</tt>	Resizes the buffer to hold a new window with a new cap_multiple.
<tt style='background-color:#E8E8E8;'> utils.RollingPanel <a href=' /utils/data.py#L165'>get_current</a>(item,raw,start,end)</tt>	Get a panel that is the current data in view it is not safe to persist.
<tt style='background-color:#E8E8E8;'> utils.RollingPanel <a href=' /utils/data.py#L216'>set_current</a>(panel)</tt>	Set the values stored in our current in-view data to be values of the passed panel.
<tt style='background-color:#E8E8E8;'> utils.RollingPanel <a href=' /utils/data.py#L229'>_roll_data</a>()</tt>	Roll window worth of data up to position zero.
<tt style='background-color:#E8E8E8;'> utils.MutableIndexRollingPanel <a href=' /utils/data.py#L273'>oldest_frame</a>(raw)</tt>	Get the oldest frame in the panel.
<tt style='background-color:#E8E8E8;'> utils.MutableIndexRollingPanel <a href=' /utils/data.py#L294'>get_current</a>()</tt>	Get a panel that is the current data in view it is not safe to persist.
<tt style='background-color:#E8E8E8;'> utils.MutableIndexRollingPanel <a href=' /utils/data.py#L305'>set_current</a>(panel)</tt>	Set the values stored in our current in-view data to be values of the passed panel.
<tt style='background-color:#E8E8E8;'> utils.MutableIndexRollingPanel <a href=' /utils/data.py#L318'>_roll_data</a>()</tt>	Roll window worth of data up to position zero.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L14'>hidden</a>(path)</tt>	Check if a path is hidden.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L25'>ensure_directory</a>(path)</tt>	Ensure that a directory named "path" exists.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L37'>ensure_directory_containing</a>(path)</tt>	Ensure that the directory containing path exists.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L48'>ensure_file</a>(path)</tt>	Ensure that a file exists this will create any parent directories needed.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L62'>last_modified_time</a>(path)</tt>	Get the last modified time of path as a timestamp.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L69'>modified_since</a>(path,dt)</tt>	Check whether path was modified since dt.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L91'>zipline_root</a>(environ)</tt>	Get the root directory for all zipline-managed files.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L118'>zipline_path</a>(paths,environ)</tt>	Get a path relative to the zipline root.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L137'>default_extension</a>(environ)</tt>	Get the path to the default zipline extension file.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L154'>data_root</a>(environ)</tt>	The root directory for zipline data files.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L171'>ensure_data_root</a>(environ)</tt>	Ensure that the data root exists.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L178'>data_path</a>(paths,environ)</tt>	Get a path relative to the zipline data directory.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L197'>cache_root</a>(environ)</tt>	The root directory for zipline cache files.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L214'>ensure_cache_root</a>(environ)</tt>	Ensure that the data root exists.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/paths.py#L221'>cache_path</a>(paths,environ)</tt>	Get a path relative to the zipline cache directory.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/factory.py#L190'>create_daily_trade_source</a>(sids,sim_params,env,trading_calendar)</tt>	Creates trade_count trades for each sid in sids list.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/preprocess.py#L35'>preprocess</a>()</tt>	Decorator that applies pre-processors to the arguments of a function before calling the function.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/preprocess.py#L115'>call</a>(f)</tt>	Wrap a function in a processor that calls f on the argument before passing it along.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/preprocess.py#L142'>_build_preprocessed_function</a>(func,processors,args_defaults,varargs)</tt>	Build a preprocessed function with the same signature as func.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L42'>verify_indices_all_unique</a>(obj)</tt>	Check that all axes of a pandas object are unique.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L81'>optionally</a>(preprocessor)</tt>	Modify a preprocessor to explicitly allow none.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L135'>ensure_dtype</a>(func,argname,arg)</tt>	Argument preprocessor that converts the input into a numpy dtype.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L163'>ensure_timezone</a>(func,argname,arg)</tt>	Argument preprocessor that converts the input into a tzinfo object.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L190'>ensure_timestamp</a>(func,argname,arg)</tt>	Argument preprocessor that converts the input into a pandas timestamp object.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L219'>expect_dtypes</a>(__funcname)</tt>	Preprocessing decorator that verifies inputs have expected numpy dtypes.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L287'>expect_kinds</a>()</tt>	Preprocessing decorator that verifies inputs have expected dtype kinds.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L350'>expect_types</a>(__funcname)</tt>	Preprocessing decorator that verifies inputs have expected types.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L408'>make_check</a>(exc_type,template,pred,actual)</tt>	Factory for making preprocessing functions that check a predicate on the input value.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L452'>optional</a>(type_)</tt>	Helper for use with expect_types when an input can be type_ or none.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L476'>expect_element</a>(__funcname)</tt>	Preprocessing decorator that verifies inputs are elements of some expected collection.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L530'>expect_bounded</a>(__funcname)</tt>	Preprocessing decorator verifying that inputs fall inclusively between bounds.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L609'>expect_strictly_bounded</a>(__funcname)</tt>	Preprocessing decorator verifying that inputs fall exclusively between bounds.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L709'>expect_dimensions</a>(__funcname)</tt>	Preprocessing decorator that verifies inputs are numpy arrays with a specific dimensionality.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L759'>coerce</a>(from_,to)</tt>	A preprocessing decorator that coerces inputs of a given type by passing them to a callable.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/input_validation.py#L796'>coerce_types</a>()</tt>	Preprocessing decorator that applies type coercions.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/simfactory.py#L8'>create_test_zipline</a>()</tt>	:param config a configuration object that is a dict with - sid - an integer which will be used as the asset id.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/events.py#L63'>naive_to_utc</a>(ts)</tt>	Converts a utc tz-naive timestamp to a tz-aware timestamp.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/events.py#L72'>ensure_utc</a>(time,tz)</tt>	Normalize a time if the time is tz-naive assume it is utc.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/events.py#L108'>_build_offset</a>(offset,kwargs,default)</tt>	Builds the offset argument for event rules.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/events.py#L125'>_build_date</a>(date,kwargs)</tt>	Builds the date argument for event rules.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/events.py#L141'>_build_time</a>(time,kwargs)</tt>	Builds the time argument for event rules.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/events.py#L157'>lossless_float_to_int</a>(funcname,func,argname,arg)</tt>	A preprocessor that coerces integral floats to ints.
<tt style='background-color:#E8E8E8;'> utils.EventManager <a href=' /utils/events.py#L201'>add_event</a>(event,prepend)</tt>	Adds an event to the manager.
<tt style='background-color:#E8E8E8;'> utils.Event <a href=' /utils/events.py#L230'>handle_data</a>(context,data,dt)</tt>	Calls the callable only when the rule is triggered.
<tt style='background-color:#E8E8E8;'> utils.EventRule <a href=' /utils/events.py#L239'>should_trigger</a>(dt)</tt>	Checks if the rule should trigger with its current state.
<tt style='background-color:#E8E8E8;'> utils.StatelessRule <a href=' /utils/events.py#L255'>and_</a>(rule)</tt>	Logical and of two rules triggers only when both rules trigger.
<tt style='background-color:#E8E8E8;'> utils.ComposedRule <a href=' /utils/events.py#L286'>should_trigger</a>(dt)</tt>	Composes the two rules with a lazy composer.
<tt style='background-color:#E8E8E8;'> utils.ComposedRule <a href=' /utils/events.py#L296'>lazy_and</a>(first_should_trigger,second_should_trigger,dt)</tt>	Lazily ands the two rules this will not call the should_trigger of the.
<tt style='background-color:#E8E8E8;'> utils.Always <a href=' /utils/events.py#L309'>always_trigger</a>(dt)</tt>	A should_trigger implementation that will always trigger.
<tt style='background-color:#E8E8E8;'> utils.Never <a href=' /utils/events.py#L322'>never_trigger</a>(dt)</tt>	A should_trigger implementation that will never trigger.
<tt style='background-color:#E8E8E8;'> utils.AfterOpen <a href=' /utils/events.py#L352'>calculate_dates</a>(dt)</tt>	Given a date find that day's open and period end open + offset.
<tt style='background-color:#E8E8E8;'> utils.BeforeClose <a href=' /utils/events.py#L408'>calculate_dates</a>(dt)</tt>	Given a dt find that day's close and period start close - offset.
<tt style='background-color:#E8E8E8;'> utils.StatefulRule <a href=' /utils/events.py#L549'>new_should_trigger</a>(callable_)</tt>	Replace the should trigger implementation for the current rule.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/events.py#L613'>make_eventrule</a>(date_rule,time_rule,cal,half_days)</tt>	Constructs an event rule from the factory api.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L55'>NaT_for_dtype</a>(dtype)</tt>	Retrieve nat with the same units as dtype.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L118'>make_kind_check</a>(python_types,numpy_kind)</tt>	Make a function that checks whether a scalar or array is of a given kind (e.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L136'>coerce_to_dtype</a>(dtype,value)</tt>	Make a value with the specified numpy dtype.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L155'>default_missing_value_for_dtype</a>(dtype)</tt>	Get the default fill value for dtype.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L167'>repeat_first_axis</a>(array,count)</tt>	Restride array to repeat count times along the first axis.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L210'>repeat_last_axis</a>(array,count)</tt>	Restride array to repeat count times along the last axis.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L253'>rolling_window</a>(array,length)</tt>	Restride an array of shape (x_0.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L328'>isnat</a>(obj)</tt>	Check if a value is np nat.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L337'>is_missing</a>(data,missing_value)</tt>	Generic is_missing function that handles nan and nat.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L348'>busday_count_mask_NaT</a>(begindates,enddates,out)</tt>	Simple of numpy busday_count that returns float arrays rather than int.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L399'>ignore_nanwarnings</a>()</tt>	Helper for building a warningcontext that ignores warnings from numpy's nanfunctions.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L412'>vectorized_is_element</a>(array,choices)</tt>	Check if each element of array is in choices.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L430'>as_column</a>(a)</tt>	Convert an array of shape n into an array of shape n 1.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/numpy_utils.py#L463'>changed_locations</a>(a,include_first)</tt>	Compute indices of values in a that differ from the previous value.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/run_algo.py#L49'>_run</a>(handle_data,initialize,before_trading_start,analyze)</tt>	Run a backtest for the given algorithm.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/run_algo.py#L194'>load_extensions</a>(default,extensions,strict,environ)</tt>	Load all of the given extensions this should be called by run_algo.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/run_algo.py#L243'>run_algorithm</a>(start,end,initialize,capital_base)</tt>	Run a trading algorithm.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/final.py#L10'>bases_mro</a>(bases)</tt>	Yield classes in the order that methods should be looked up from the base classes of an object.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/final.py#L20'>is_final</a>(name,mro)</tt>	Checks if name is a final object in the given mro.
<tt style='background-color:#E8E8E8;'> utils.FinalMeta <a href=' /utils/final.py#L55'>__setattr__</a>(name,value)</tt>	This stops the final attributes from being reassigned on the class object.
<tt style='background-color:#E8E8E8;'> utils.final <a href=' /utils/final.py#L95'>__set__</a>(instance,value)</tt>	Final objects cannot be reassigned this is the most import concept.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/control_flow.py#L22'>invert</a>(d)</tt>	Invert a dictionary into a dictionary of sets.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/control_flow.py#L38'>invert_unique</a>(d,check)</tt>	Invert a dictionary with unique values into a dictionary with k v pairs flipped.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/metautils.py#L6'>compose_types</a>(a)</tt>	Compose multiple classes together.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/metautils.py#L87'>with_metaclasses</a>(metaclasses)</tt>	Make a class inheriting from bases whose metaclass inherits from all of metaclasses.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/cli.py#L7'>maybe_show_progress</a>(it,show_progress)</tt>	Optionally show a progress bar for the given iterator.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/range.py#L151'>from_tuple</a>(tup)</tt>	Convert a tuple into a range with error handling.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/range.py#L179'>maybe_from_tuple</a>(tup_or_range)</tt>	Convert a tuple into a range but pass ranges through silently.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/range.py#L215'>_check_steps</a>(a,b)</tt>	Check that the steps of a and b are both 1.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/range.py#L236'>overlap</a>(a,b)</tt>	Check if two ranges overlap.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/range.py#L259'>merge</a>(a,b)</tt>	Merge two ranges with step == 1.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/range.py#L273'>_combine</a>(n,rs)</tt>	Helper for _group_ranges.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/range.py#L293'>group_ranges</a>(ranges)</tt>	Group any overlapping ranges into a single range.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/range.py#L336'>intersecting_ranges</a>(ranges)</tt>	Return any ranges that intersect.
<tt style='background-color:#E8E8E8;'> utils.SecurityList <a href=' /utils/security_list.py#L22'>__init__</a>(data,current_date_func,asset_finder)</tt>	Data a nested dictionary.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/security_list.py#L123'>load_from_directory</a>(list_name)</tt>	To resolve the symbol in the leveraged_etf list the date on which the symbol was in effect is needed.
<tt style='background-color:#E8E8E8;'> utils.ZiplineAPI <a href=' /utils/api_support.py#L31'>__enter__</a>()</tt>	Set the given algo instance storing any previously-existing instance.
<tt style='background-color:#E8E8E8;'> utils.ZiplineAPI <a href=' /utils/api_support.py#L38'>__exit__</a>(_type,_value,_tb)</tt>	Restore the algo instance stored in __enter__.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/api_support.py#L65'>require_not_initialized</a>(exception)</tt>	Decorator for api methods that should only be called during or before tradingalgorithm.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/api_support.py#L87'>require_initialized</a>(exception)</tt>	Decorator for api methods that should only be called after tradingalgorithm.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/api_support.py#L109'>disallowed_in_before_trading_start</a>(exception)</tt>	Decorator for api methods that cannot be called from within tradingalgorithm.
<tt style='background-color:#E8E8E8;'> utils.ApplyAsyncResult <a href=' /utils/pool.py#L22'>successful</a>()</tt>	Did the function execute without raising an exception?.
<tt style='background-color:#E8E8E8;'> utils.ApplyAsyncResult <a href=' /utils/pool.py#L27'>get</a>()</tt>	Return the result of calling the function or reraise any exceptions that were raised.
<tt style='background-color:#E8E8E8;'> utils.ApplyAsyncResult <a href=' /utils/pool.py#L35'>ready</a>()</tt>	Has the function finished executing.
<tt style='background-color:#E8E8E8;'> utils.ApplyAsyncResult <a href=' /utils/pool.py#L45'>wait</a>()</tt>	Wait until the function is finished executing.
<tt style='background-color:#E8E8E8;'> utils.SequentialPool <a href=' /utils/pool.py#L83'>apply_async</a>(f,args,kwargs,callback)</tt>	Apply a function but emulate the api of an asynchronous call.
<tt style='background-color:#E8E8E8;'> utils.SequentialPool <a href=' /utils/pool.py#L118'>apply</a>(f,args,kwargs)</tt>	Apply a function.
<tt style='background-color:#E8E8E8;'> utils.CachedObject <a href=' /utils/cache.py#L54'>unwrap</a>(dt)</tt>	Get the cached value.
<tt style='background-color:#E8E8E8;'> utils.CachedObject <a href=' /utils/cache.py#L72'>_unsafe_get_value</a>()</tt>	You almost certainly shouldn't use this.
<tt style='background-color:#E8E8E8;'> utils.ExpiringCache <a href=' /utils/cache.py#L110'>get</a>(key,dt)</tt>	Get the value of a cached object.
<tt style='background-color:#E8E8E8;'> utils.ExpiringCache <a href=' /utils/cache.py#L137'>set</a>(key,value,expiration_dt)</tt>	Adds a new key value pair to the cache.
<tt style='background-color:#E8E8E8;'> utils.working_file <a href=' /utils/cache.py#L290'>path</a>()</tt>	Alias for name to be consistent with :class ~zipline.
<tt style='background-color:#E8E8E8;'> utils.working_file <a href=' /utils/cache.py#L297'>_commit</a>()</tt>	Sync the temporary file to the final path.
<tt style='background-color:#E8E8E8;'> utils.working_dir <a href=' /utils/cache.py#L333'>ensure_dir</a>()</tt>	Ensures a subdirectory of the working directory.
<tt style='background-color:#E8E8E8;'> utils.working_dir <a href=' /utils/cache.py#L345'>getpath</a>()</tt>	Get a path relative to the working directory.
<tt style='background-color:#E8E8E8;'> utils.working_dir <a href=' /utils/cache.py#L355'>_commit</a>()</tt>	Sync the temporary directory to the final path.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/functional.py#L9'>apply</a>(f)</tt>	Apply a function to arguments.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/functional.py#L87'>same</a>()</tt>	Check if all values in a sequence are equal.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/functional.py#L144'>_gen_unzip</a>(it,elem_len)</tt>	Helper for unzip which checks the lengths of each element in it.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/functional.py#L189'>unzip</a>(seq,elem_len)</tt>	Unzip a length n sequence of length m sequences into m seperate length n sequences.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/functional.py#L255'>getattrs</a>(value,attrs,default)</tt>	Perform a chained application of getattr on value with the values in attrs.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/functional.py#L305'>set_attribute</a>(name,value)</tt>	Decorator factory for setting attributes on a function.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/functional.py#L336'>foldr</a>(f,seq,default)</tt>	Fold a function over a sequence with right associativity.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/deprecate.py#L20'>deprecated</a>(msg,stacklevel)</tt>	Used to mark a function as deprecated.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/enum.py#L48'>enum</a>(option)</tt>	Construct a new enum object.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendarDispatcher <a href=' /utils/calendars/calendar_utils.py#L59'>get_calendar</a>(name)</tt>	Retrieves an instance of an tradingcalendar whose name is given.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendarDispatcher <a href=' /utils/calendars/calendar_utils.py#L91'>has_calendar</a>(name)</tt>	Do we have or have the ability to make a calendar with name?.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendarDispatcher <a href=' /utils/calendars/calendar_utils.py#L101'>register_calendar</a>(name,calendar,force)</tt>	Registers a calendar for retrieval by the get_calendar method.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendarDispatcher <a href=' /utils/calendars/calendar_utils.py#L129'>register_calendar_type</a>(name,calendar_type,force)</tt>	Registers a calendar by type.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendarDispatcher <a href=' /utils/calendars/calendar_utils.py#L160'>register_calendar_alias</a>(alias,real_name,force)</tt>	Register an alias for a calendar.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendarDispatcher <a href=' /utils/calendars/calendar_utils.py#L198'>resolve_alias</a>(name)</tt>	Resolve a calendar alias for retrieval.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendarDispatcher <a href=' /utils/calendars/calendar_utils.py#L230'>deregister_calendar</a>(name)</tt>	If a calendar is registered with the given name it is de-registered.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendarDispatcher <a href=' /utils/calendars/calendar_utils.py#L243'>clear_calendars</a>()</tt>	Deregisters all current registered calendars.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L196'>special_opens</a>()</tt>	A list of special open times and corresponding holidaycalendars.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L217'>special_closes</a>()</tt>	A list of special close times and corresponding holidaycalendars.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L252'>is_session</a>(dt)</tt>	Given a dt returns whether it's a valid session label.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L268'>is_open_on_minute</a>(dt)</tt>	Given a dt return whether this exchange is open at the given dt.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L285'>next_open</a>(dt)</tt>	Given a dt returns the next open.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L305'>next_close</a>(dt)</tt>	Given a dt returns the next close.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L322'>previous_open</a>(dt)</tt>	Given a dt returns the previous open.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L339'>previous_close</a>(dt)</tt>	Given a dt returns the previous close.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L356'>next_minute</a>(dt)</tt>	Given a dt return the next exchange minute if the given dt is not.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L374'>previous_minute</a>(dt)</tt>	Given a dt return the previous exchange minute.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L394'>next_session_label</a>(session_label)</tt>	Given a session label returns the label of the next session.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L423'>previous_session_label</a>(session_label)</tt>	Given a session label returns the label of the previous session.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L449'>minutes_for_session</a>(session_label)</tt>	Given a session label return the minutes for that session.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L488'>sessions_in_range</a>(start_session_label,end_session_label)</tt>	Given start and end session labels return all the sessions in that range inclusive.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L513'>sessions_window</a>(session_label,count)</tt>	Given a session label and a window size returns a list of sessions of size count + 1 that either starts with the given session.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L540'>session_distance</a>(start_session_label,end_session_label)</tt>	Given a start and end session label returns the distance between them.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L569'>minutes_in_range</a>(start_minute,end_minute)</tt>	Given start and end minutes return all the calendar minutes in that range inclusive.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L601'>minutes_for_sessions_in_range</a>(start_session_label,end_session_label)</tt>	Returns all the minutes for all the sessions from the given start session label to the given end session label inclusive.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L626'>open_and_close_for_session</a>(session_label)</tt>	Returns a tuple of timestamps of the open and close of the session represented by the given label.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L693'>all_minutes</a>()</tt>	Returns a datetimeindex representing all the minutes in this calendar.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L731'>minute_to_session_label</a>(dt,direction)</tt>	Given a minute get the label of its containing session.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L785'>minute_index_to_session_labels</a>(index)</tt>	Given a sorted datetimeindex of market minutes return a datetimeindex of the corresponding session labels.
<tt style='background-color:#E8E8E8;'> utils.calendars.TradingCalendar <a href=' /utils/calendars/trading_calendar.py#L809'>_special_dates</a>(calendars,ad_hoc_dates,start_date,end_date)</tt>	Union an iterable of pairs of the form time calendar and an iterable of pairs of the form (time [dates]).
<tt style='background-color:#E8E8E8;'> utils.calendars. <a href=' /utils/calendars/trading_calendar.py#L845'>days_at_time</a>(days,t,tz,day_offset)</tt>	Create an index of days at time t, interpreted in timezone tz.
<tt style='background-color:#E8E8E8;'> utils.calendars. <a href=' /utils/calendars/trading_calendar.py#L902'>_overwrite_special_dates</a>(midnight_utcs,opens_or_closes,special_opens_or_closes)</tt>	Overwrite dates in open_or_closes with corresponding dates in special_opens_or_closes using midnight_utcs for alignment.
<tt style='background-color:#E8E8E8;'> lib. <a href=' /lib/quantiles.py#L8'>quantiles</a>(data,nbins_or_partition_bounds)</tt>	Compute rowwise array quantiles on an input.
<tt style='background-color:#E8E8E8;'> lib. <a href=' /lib/labelarray.py#L35'>compare_arrays</a>(left,right)</tt>	Eq check with a short-circuit for identical objects.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L186'>from_codes_and_metadata</a>(cls,codes,categories,reverse_categories)</tt>	Rehydrate a labelarray from the codes and metadata.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L212'>from_categorical</a>(cls,categorical,missing_value)</tt>	Create a labelarray from a pandas categorical.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L257'>__array_finalize__</a>(obj)</tt>	Called by numpy after array construction.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L296'>as_int_array</a>()</tt>	Convert self into a regular ndarray of ints.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L307'>as_string_array</a>()</tt>	Convert self back into an array of strings.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L315'>as_categorical</a>(name)</tt>	Coerce self into a pandas categorical.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L334'>as_categorical_frame</a>(index,columns,name)</tt>	Coerce self into a pandas dataframe of categoricals.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L382'>__setslice__</a>(i,j,sequence)</tt>	This method was deprecated in python 2 0 it predates slice objects.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L404'>is_missing</a>()</tt>	Like isnan but checks for locations where we store missing values.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L412'>not_missing</a>()</tt>	Like ~isnan but checks for locations where we store missing values.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L420'>_equality_check</a>(op)</tt>	Shared code for __eq__ and __ne__, parameterized on the actual comparison operator to use.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L526'>empty_like</a>(shape)</tt>	Make an empty labelarray with the same categories as self, filled with self.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L542'>map_predicate</a>(f)</tt>	Map a function from str -> bool element-wise over self.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L616'>matches</a>(pattern)</tt>	Elementwise regex match.
<tt style='background-color:#E8E8E8;'> lib.LabelArray <a href=' /lib/labelarray.py#L635'>element_of</a>(container)</tt>	Check if each element of self is an of container.
<tt style='background-color:#E8E8E8;'> lib. <a href=' /lib/normalize.py#L4'>naive_grouped_rowwise_apply</a>(data,group_labels,func,func_args)</tt>	Simple implementation of grouped row-wise function application.
<tt style='background-color:#E8E8E8;'> lib. <a href=' /lib/adjusted_array.py#L62'>can_represent_dtype</a>(dtype)</tt>	Can we build an adjustedarray for a baseline of dtype?.
<tt style='background-color:#E8E8E8;'> lib. <a href=' /lib/adjusted_array.py#L69'>is_categorical</a>(dtype)</tt>	Do we represent this dtype with labelarrays rather than ndarrays?.
<tt style='background-color:#E8E8E8;'> lib. <a href=' /lib/adjusted_array.py#L83'>_normalize_array</a>(data,missing_value)</tt>	Coerce buffer data for an adjustedarray into a standard scalar representation returning the coerced array and a dict of argument to pass.
<tt style='background-color:#E8E8E8;'> lib.AdjustedArray <a href=' /lib/adjusted_array.py#L180'>data</a>()</tt>	The data stored in this array.
<tt style='background-color:#E8E8E8;'> lib.AdjustedArray <a href=' /lib/adjusted_array.py#L187'>dtype</a>()</tt>	The dtype of the data stored in this array.
<tt style='background-color:#E8E8E8;'> lib.AdjustedArray <a href=' /lib/adjusted_array.py#L194'>_iterator_type</a>()</tt>	The iterator produced when traverse is called on this array.
<tt style='background-color:#E8E8E8;'> lib.AdjustedArray <a href=' /lib/adjusted_array.py#L203'>traverse</a>(window_length,offset,perspective_offset)</tt>	Produce an iterator rolling windows rows over our data.
<tt style='background-color:#E8E8E8;'> lib.AdjustedArray <a href=' /lib/adjusted_array.py#L232'>inspect</a>()</tt>	Return a string representation of the data stored in this array.
<tt style='background-color:#E8E8E8;'> lib. <a href=' /lib/adjusted_array.py#L267'>ensure_ndarray</a>(ndarray_or_adjusted_array)</tt>	Return the input as a numpy ndarray.
<tt style='background-color:#E8E8E8;'> lib. <a href=' /lib/adjusted_array.py#L293'>_check_window_params</a>(data,window_length)</tt>	Check that a window of length window_length is well-defined on data.
<tt style='background-color:#E8E8E8;'> examples. <a href=' /examples/dual_moving_average.py#L100'>_test_args</a>()</tt>	Extra arguments to use when zipline's automated tests run this example.
<tt style='background-color:#E8E8E8;'> examples. <a href=' /examples/olmar.py#L110'>simplex_projection</a>(v,b)</tt>	Projection vectors to the simplex domain implemented according to the paper efficient projections onto the.
<tt style='background-color:#E8E8E8;'> examples. <a href=' /examples/__init__.py#L65'>run_example</a>(example_name,environ)</tt>	Run an example module from zipline examples.
<tt style='background-color:#E8E8E8;'> finance.Restrictions <a href=' /finance/asset_restrictions.py#L32'>is_restricted</a>(assets,dt)</tt>	Is the asset restricted restrictionstates frozen on the given dt?.
<tt style='background-color:#E8E8E8;'> finance.Restrictions <a href=' /finance/asset_restrictions.py#L52'>__or__</a>(other_restriction)</tt>	Base implementation for combining two restrictions.
<tt style='background-color:#E8E8E8;'> finance._UnionRestrictions <a href=' /finance/asset_restrictions.py#L93'>__or__</a>(other_restriction)</tt>	Overrides the base implementation for combining two restrictions of which the left side is a _unionrestrictions.
<tt style='background-color:#E8E8E8;'> finance.StaticRestrictions <a href=' /finance/asset_restrictions.py#L143'>is_restricted</a>(assets,dt)</tt>	An asset is restricted for all dts if it is in the static list.
<tt style='background-color:#E8E8E8;'> finance.HistoricalRestrictions <a href=' /finance/asset_restrictions.py#L177'>is_restricted</a>(assets,dt)</tt>	Returns whether or not an asset or iterable of assets is restricted on a dt.
<tt style='background-color:#E8E8E8;'> finance.TradingControl <a href=' /finance/controls.py#L36'>__init__</a>(on_error)</tt>	Track any arguments that should be printed in the error message generated by self.
<tt style='background-color:#E8E8E8;'> finance.TradingControl <a href=' /finance/controls.py#L44'>validate</a>(asset,amount,portfolio,algo_datetime)</tt>	Before any order is executed by tradingalgorithm this method should be called *exactly once* on each registered tradingcontrol object.
<tt style='background-color:#E8E8E8;'> finance.TradingControl <a href=' /finance/controls.py#L73'>handle_violation</a>(asset,amount,datetime,metadata)</tt>	Handle a tradingcontrolviolation either by raising or logging and error with information about the failure.
<tt style='background-color:#E8E8E8;'> finance.MaxOrderCount <a href=' /finance/controls.py#L113'>validate</a>(asset,amount,portfolio,algo_datetime)</tt>	Fail if we've already placed self max_count orders today.
<tt style='background-color:#E8E8E8;'> finance.RestrictedListOrder <a href=' /finance/controls.py#L148'>validate</a>(asset,amount,portfolio,algo_datetime)</tt>	Fail if the asset is in the restricted_list.
<tt style='background-color:#E8E8E8;'> finance.MaxOrderSize <a href=' /finance/controls.py#L193'>validate</a>(asset,amount,portfolio,algo_datetime)</tt>	Fail if the magnitude of the given order exceeds either self max_shares.
<tt style='background-color:#E8E8E8;'> finance.MaxPositionSize <a href=' /finance/controls.py#L251'>validate</a>(asset,amount,portfolio,algo_datetime)</tt>	Fail if the given order would cause the magnitude of our position to be greater in shares than self.
<tt style='background-color:#E8E8E8;'> finance.LongOnly <a href=' /finance/controls.py#L292'>validate</a>(asset,amount,portfolio,algo_datetime)</tt>	Fail if we would hold negative shares of asset after completing this order.
<tt style='background-color:#E8E8E8;'> finance.AssetDateBounds <a href=' /finance/controls.py#L315'>validate</a>(asset,amount,portfolio,algo_datetime)</tt>	Fail if the algo has passed this asset's end_date or before the asset's start date.
<tt style='background-color:#E8E8E8;'> finance.AccountControl <a href=' /finance/controls.py#L357'>__init__</a>()</tt>	Track any arguments that should be printed in the error message generated by self.
<tt style='background-color:#E8E8E8;'> finance.AccountControl <a href=' /finance/controls.py#L364'>validate</a>(_portfolio,_account,_algo_datetime,_algo_current_data)</tt>	On each call to handle data by tradingalgorithm this method should be called *exactly once* on each registered accountcontrol object.
<tt style='background-color:#E8E8E8;'> finance.AccountControl <a href=' /finance/controls.py#L383'>fail</a>()</tt>	Raise an accountcontrolviolation with information about the failure.
<tt style='background-color:#E8E8E8;'> finance.MaxLeverage <a href=' /finance/controls.py#L400'>__init__</a>(max_leverage)</tt>	Max_leverage is the gross leverage in decimal form for example.
<tt style='background-color:#E8E8E8;'> finance.MaxLeverage <a href=' /finance/controls.py#L418'>validate</a>(_portfolio,_account,_algo_datetime,_algo_current_data)</tt>	Fail if the leverage is greater than the allowed leverage.
<tt style='background-color:#E8E8E8;'> finance.TradingEnvironment <a href=' /finance/trading.py#L120'>write_data</a>()</tt>	Write data into the asset_db.
<tt style='background-color:#E8E8E8;'> finance. <a href=' /finance/trading.py#L267'>noop_load</a>()</tt>	A method that can be substituted in as the load method in a tradingenvironment to prevent it from loading benchmarks.
<tt style='background-color:#E8E8E8;'> finance.ExecutionStyle <a href=' /finance/execution.py#L36'>get_limit_price</a>(is_buy)</tt>	Get the limit price for this order.
<tt style='background-color:#E8E8E8;'> finance.ExecutionStyle <a href=' /finance/execution.py#L44'>get_stop_price</a>(is_buy)</tt>	Get the stop price for this order.
<tt style='background-color:#E8E8E8;'> finance.ExecutionStyle <a href=' /finance/execution.py#L52'>exchange</a>()</tt>	The exchange to which this order should be routed.
<tt style='background-color:#E8E8E8;'> finance.LimitOrder <a href=' /finance/execution.py#L80'>__init__</a>(limit_price,exchange)</tt>	Store the given price.
<tt style='background-color:#E8E8E8;'> finance.StopOrder <a href=' /finance/execution.py#L102'>__init__</a>(stop_price,exchange)</tt>	Store the given price.
<tt style='background-color:#E8E8E8;'> finance.StopLimitOrder <a href=' /finance/execution.py#L124'>__init__</a>(limit_price,stop_price,exchange)</tt>	Store the given prices.
<tt style='background-color:#E8E8E8;'> finance. <a href=' /finance/execution.py#L144'>asymmetric_round_price_to_penny</a>(price,prefer_round_down,diff)</tt>	Asymmetric rounding function for adjusting prices to two places in a way that "improves" the price.
<tt style='background-color:#E8E8E8;'> finance. <a href=' /finance/execution.py#L174'>check_stoplimit_prices</a>(price,label)</tt>	Check to make sure the stop/limit prices are reasonable and raise a badorderparameters exception if not.
<tt style='background-color:#E8E8E8;'> finance.CancelPolicy <a href=' /finance/cancel_policy.py#L27'>should_cancel</a>(event)</tt>	Should all open orders be cancelled? parameters.
<tt style='background-color:#E8E8E8;'> finance. <a href=' /finance/slippage.py#L47'>fill_price_worse_than_limit_price</a>(fill_price,order)</tt>	Checks whether the fill price is worse than the order's limit price.
<tt style='background-color:#E8E8E8;'> finance.SlippageModel <a href=' /finance/slippage.py#L94'>process_order</a>(data,order)</tt>	Process how orders get filled.
<tt style='background-color:#E8E8E8;'> finance.MarketImpactBase <a href=' /finance/slippage.py#L303'>get_txn_volume</a>(data,order)</tt>	Return the number of shares we would like to order in this minute.
<tt style='background-color:#E8E8E8;'> finance.MarketImpactBase <a href=' /finance/slippage.py#L319'>simulated_impact</a>(order,current_price,current_volume,txn_volume)</tt>	Calculate simulated price impact.
<tt style='background-color:#E8E8E8;'> finance.MarketImpactBase <a href=' /finance/slippage.py#L390'>_get_window_data</a>(data,asset,window_length)</tt>	Internal utility method to return the trailing mean volume over the past 'window_length' days and volatility of close prices for a.
<tt style='background-color:#E8E8E8;'> finance.CommissionModel <a href=' /finance/commission.py#L45'>calculate</a>(order,transaction)</tt>	Calculate the amount of commission to charge on order as a result of transaction.
<tt style='background-color:#E8E8E8;'> finance. <a href=' /finance/commission.py#L87'>calculate_per_unit_commission</a>(order,transaction,cost_per_unit,initial_commission)</tt>	If there is a minimum commission if the order hasn't had a commission paid yet pay the minimum.
<tt style='background-color:#E8E8E8;'> finance.PerEquityTrade <a href=' /finance/commission.py#L266'>__init__</a>(cost)</tt>	Cost parameter is the cost of a trade regardless of share count.
<tt style='background-color:#E8E8E8;'> finance.PerEquityTrade <a href=' /finance/commission.py#L280'>calculate</a>(order,transaction)</tt>	If the order hasn't had a commission paid yet pay the fixed commission.
<tt style='background-color:#E8E8E8;'> finance.PerDollar <a href=' /finance/commission.py#L337'>__init__</a>(cost)</tt>	Cost parameter is the cost of a trade per-dollar 0 0015.
<tt style='background-color:#E8E8E8;'> finance.PerDollar <a href=' /finance/commission.py#L349'>calculate</a>(order,transaction)</tt>	Pay commission based on dollar value of shares.
<tt style='background-color:#E8E8E8;'> finance.Order <a href=' /finance/order.py#L49'>__init__</a>(dt,asset,amount,stop)</tt>	@dt - datetime datetime that the order was placed.
<tt style='background-color:#E8E8E8;'> finance.Order <a href=' /finance/order.py#L107'>check_triggers</a>(price,dt)</tt>	Update internal state based on price triggers and the trade event's price.
<tt style='background-color:#E8E8E8;'> finance.Order <a href=' /finance/order.py#L123'>check_order_triggers</a>(current_price)</tt>	Given an order and a trade event return a tuple of (stop_reached limit_reached).
<tt style='background-color:#E8E8E8;'> finance.Order <a href=' /finance/order.py#L228'>triggered</a>()</tt>	For a market order true.
<tt style='background-color:#E8E8E8;'> finance.Order <a href=' /finance/order.py#L247'>__repr__</a>()</tt>	String representation for this object.
<tt style='background-color:#E8E8E8;'> finance.Order <a href=' /finance/order.py#L253'>__unicode__</a>()</tt>	Unicode representation for this object.
<tt style='background-color:#E8E8E8;'> finance.Blotter <a href=' /finance/blotter.py#L95'>order</a>(asset,amount,style,order_id)</tt>	Place an order.
<tt style='background-color:#E8E8E8;'> finance.Blotter <a href=' /finance/blotter.py#L157'>batch_order</a>(order_arg_lists)</tt>	Place a batch of orders.
<tt style='background-color:#E8E8E8;'> finance.Blotter <a href=' /finance/blotter.py#L199'>cancel_all_orders_for_asset</a>(asset,warn,relay_status)</tt>	Cancel all open orders for a given asset.
<tt style='background-color:#E8E8E8;'> finance.Blotter <a href=' /finance/blotter.py#L264'>reject</a>(order_id,reason)</tt>	Mark the given order as 'rejected', which is functionally similar to cancelled.
<tt style='background-color:#E8E8E8;'> finance.Blotter <a href=' /finance/blotter.py#L288'>hold</a>(order_id,reason)</tt>	Mark the order with order_id as 'held' held is functionally similar.
<tt style='background-color:#E8E8E8;'> finance.Blotter <a href=' /finance/blotter.py#L307'>process_splits</a>(splits)</tt>	Processes a list of splits by modifying any open orders as needed.
<tt style='background-color:#E8E8E8;'> finance.Blotter <a href=' /finance/blotter.py#L328'>get_transactions</a>(bar_data)</tt>	Creates a list of transactions based on the current open orders slippage model and commission model.
<tt style='background-color:#E8E8E8;'> finance.Blotter <a href=' /finance/blotter.py#L390'>prune_orders</a>(closed_orders)</tt>	Removes all given orders from the blotter's open_orders list.
<tt style='background-color:#E8E8E8;'> finance.risk. <a href=' /finance/risk/risk.py#L124'>choose_treasury</a>(select_treasury,treasury_curves,start_session,end_session)</tt>	Find the latest known interest rate for a given duration within a date range.
<tt style='background-color:#E8E8E8;'> finance.risk.RiskMetricsPeriod <a href=' /finance/risk/period.py#L146'>to_dict</a>()</tt>	Creates a dictionary representing the state of the risk report.
<tt style='background-color:#E8E8E8;'> finance.risk.RiskMetricsCumulative <a href=' /finance/risk/cumulative.py#L284'>to_dict</a>()</tt>	Creates a dictionary representing the state of the risk report.
<tt style='background-color:#E8E8E8;'> finance.risk.RiskReport <a href=' /finance/risk/report.py#L70'>__init__</a>(algorithm_returns,sim_params,trading_calendar,treasury_curves)</tt>	Algorithm_returns needs to be a list of daily_return objects.
<tt style='background-color:#E8E8E8;'> finance.risk.RiskReport <a href=' /finance/risk/report.py#L108'>to_dict</a>()</tt>	Riskmetrics are calculated for rolling windows in four lengths : - 1_month.
<tt style='background-color:#E8E8E8;'> finance.performance.PerformanceTracker <a href=' /finance/performance/tracker.py#L211'>to_dict</a>(emission_type)</tt>	Creates a dictionary representing the state of this tracker.
<tt style='background-color:#E8E8E8;'> finance.performance.PerformanceTracker <a href=' /finance/performance/tracker.py#L288'>check_upcoming_dividends</a>(next_session,adjustment_reader)</tt>	Check if we currently own any stocks with dividends whose ex_date is the next trading day.
<tt style='background-color:#E8E8E8;'> finance.performance.PerformanceTracker <a href=' /finance/performance/tracker.py#L331'>handle_minute_close</a>(dt,data_portal)</tt>	Handles the close of the given minute in minute emission.
<tt style='background-color:#E8E8E8;'> finance.performance.PerformanceTracker <a href=' /finance/performance/tracker.py#L361'>handle_market_close</a>(dt,data_portal)</tt>	Handles the close of the given day in both minute and daily emission.
<tt style='background-color:#E8E8E8;'> finance.performance.PerformanceTracker <a href=' /finance/performance/tracker.py#L441'>handle_simulation_end</a>()</tt>	When the simulation is complete run the full period risk report and send it out on the results socket.
<tt style='background-color:#E8E8E8;'> finance.performance.Position <a href=' /finance/performance/position.py#L58'>earn_dividend</a>(dividend)</tt>	Register the number of shares we held at this dividend's ex date so that we can pay out the correct amount on the dividend's pay date.
<tt style='background-color:#E8E8E8;'> finance.performance.Position <a href=' /finance/performance/position.py#L67'>earn_stock_dividend</a>(stock_dividend)</tt>	Register the number of shares we held at this dividend's ex date so that we can pay out the correct amount on the dividend's pay date.
<tt style='background-color:#E8E8E8;'> finance.performance.Position <a href=' /finance/performance/position.py#L79'>handle_split</a>(asset,ratio)</tt>	Update the position by the split ratio and return the resulting fractional share that will be converted into cash.
<tt style='background-color:#E8E8E8;'> finance.performance.Position <a href=' /finance/performance/position.py#L153'>adjust_commission_cost_basis</a>(asset,cost)</tt>	A note about cost-basis in zipline all positions are considered to share a cost basis even if they were executed in different.
<tt style='background-color:#E8E8E8;'> finance.performance.Position <a href=' /finance/performance/position.py#L193'>to_dict</a>()</tt>	Creates a dictionary representing the state of this position.
<tt style='background-color:#E8E8E8;'> finance.performance.PerformancePeriod <a href=' /finance/performance/period.py#L382'>_calculate_execution_cash_flow</a>(txn)</tt>	Calculates the cash flow from executing the given transaction.
<tt style='background-color:#E8E8E8;'> finance.performance.PerformancePeriod <a href=' /finance/performance/period.py#L432'>to_dict</a>(dt)</tt>	Creates a dictionary representing the state of this performance period.
<tt style='background-color:#E8E8E8;'> finance.performance.PerformancePeriod <a href=' /finance/performance/period.py#L476'>as_portfolio</a>()</tt>	The purpose of this method is to provide a portfolio object to algorithms running inside the same trading.
<tt style='background-color:#E8E8E8;'> finance.performance.PositionTracker <a href=' /finance/performance/position_tracker.py#L173'>handle_splits</a>(splits)</tt>	Processes a list of splits by modifying any positions as needed.
<tt style='background-color:#E8E8E8;'> finance.performance.PositionTracker <a href=' /finance/performance/position_tracker.py#L199'>earn_dividends</a>(dividends,stock_dividends)</tt>	Given a list of dividends whose ex_dates are all the next trading day calculate and store the cash and/or stock payments to be paid on each.
<tt style='background-color:#E8E8E8;'> finance.performance.PositionTracker <a href=' /finance/performance/position_tracker.py#L232'>pay_dividends</a>(next_trading_day)</tt>	Returns a cash payment based on the dividends that should be paid out according to the accumulated bookkeeping of earned unpaid and stock.
