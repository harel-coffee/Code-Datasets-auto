<tt style='background-color:#E8E8E8;'> core.LazyModule <a href=' /lazyimport.py#L62'>__init__</a>(name,locals,globals)</tt>	Create a lazymodule instance wrapping module name.
<tt style='background-color:#E8E8E8;'> core.LazyModule <a href=' /lazyimport.py#L84'>__lazymodule_import</a>()</tt>	Import the module now.
<tt style='background-color:#E8E8E8;'> core.LazyModule <a href=' /lazyimport.py#L112'>__getattr__</a>(name)</tt>	Import the module on demand and get the attribute.
<tt style='background-color:#E8E8E8;'> core.LazyModule <a href=' /lazyimport.py#L124'>__setattr__</a>(name,value)</tt>	Import the module on demand and set the attribute.
<tt style='background-color:#E8E8E8;'> core.TreePrettyPrinter <a href=' /treeprettyprinter.py#L108'>nodecoords</a>(tree,sentence,highlight)</tt>	Produce coordinates of nodes on a grid.
<tt style='background-color:#E8E8E8;'> core.TreePrettyPrinter <a href=' /treeprettyprinter.py#L307'>text</a>(nodedist,unicodelines,html,ansi)</tt>	:return ascii art for a discontinuous tree.
<tt style='background-color:#E8E8E8;'> core.TreePrettyPrinter <a href=' /treeprettyprinter.py#L450'>svg</a>(nodecolor,leafcolor,funccolor)</tt>	:return svg representation of a tree.
<tt style='background-color:#E8E8E8;'> core. <a href=' /treeprettyprinter.py#L531'>test</a>()</tt>	Do some tree drawing tests.
<tt style='background-color:#E8E8E8;'> core.Downloader <a href=' /downloader.py#L737'>status</a>(info_or_id,download_dir)</tt>	Return a constant describing the status of the given package or collection.
<tt style='background-color:#E8E8E8;'> core.Downloader <a href=' /downloader.py#L804'>update</a>(quiet,prefix)</tt>	Re-download any packages whose status is stale.
<tt style='background-color:#E8E8E8;'> core.Downloader <a href=' /downloader.py#L817'>_update_index</a>(url)</tt>	A helper function that ensures that self _index is.
<tt style='background-color:#E8E8E8;'> core.Downloader <a href=' /downloader.py#L869'>index</a>()</tt>	Return the xml index describing the packages available from the data server.
<tt style='background-color:#E8E8E8;'> core.Downloader <a href=' /downloader.py#L878'>info</a>(id)</tt>	Return the package or collection record for the given item.
<tt style='background-color:#E8E8E8;'> core.Downloader <a href=' /downloader.py#L886'>xmlinfo</a>(id)</tt>	Return the xml info record for the given item.
<tt style='background-color:#E8E8E8;'> core.Downloader <a href=' /downloader.py#L901'>_get_url</a>()</tt>	The url for the data server's index file.
<tt style='background-color:#E8E8E8;'> core.Downloader <a href=' /downloader.py#L904'>_set_url</a>(url)</tt>	Set a new url for the data server if we're unable to contact.
<tt style='background-color:#E8E8E8;'> core.Downloader <a href=' /downloader.py#L917'>default_download_dir</a>()</tt>	Return the directory to which packages will be downloaded by default.
<tt style='background-color:#E8E8E8;'> core.Downloader <a href=' /downloader.py#L957'>_get_download_dir</a>()</tt>	The default directory to which packages will be downloaded.
<tt style='background-color:#E8E8E8;'> core.DownloaderGUI <a href=' /downloader.py#L1673'>_package_to_columns</a>(pkg)</tt>	Given a package return a list of values describing that package one for each column in self.
<tt style='background-color:#E8E8E8;'> core. <a href=' /downloader.py#L1965'>md5_hexdigest</a>(file)</tt>	Calculate and return the md5 checksum for a given file.
<tt style='background-color:#E8E8E8;'> core. <a href=' /downloader.py#L1987'>unzip</a>(filename,root,verbose)</tt>	Extract the contents of the zip file filename into the directory root.
<tt style='background-color:#E8E8E8;'> core. <a href=' /downloader.py#L2054'>build_index</a>(root,base_url)</tt>	Create a new data xml index file by combining the xml description.
<tt style='background-color:#E8E8E8;'> core. <a href=' /downloader.py#L2123'>_indent_xml</a>(xml,prefix)</tt>	Helper for build_index(): given an xml elementtree, modify it and its descendents text and tail attributes to generate.
<tt style='background-color:#E8E8E8;'> core. <a href=' /downloader.py#L2138'>_check_package</a>(pkg_xml,zipfilename,zf)</tt>	Helper for build_index(): perform some checks to make sure that the given package is consistent.
<tt style='background-color:#E8E8E8;'> core. <a href=' /downloader.py#L2156'>_svn_revision</a>(filename)</tt>	Helper for build_index(): calculate the subversion revision number for a given file (by using subprocess to run svn).
<tt style='background-color:#E8E8E8;'> core. <a href=' /downloader.py#L2170'>_find_collections</a>(root)</tt>	Helper for build_index(): yield a list of elementtree element.
<tt style='background-color:#E8E8E8;'> core. <a href=' /downloader.py#L2182'>_find_packages</a>(root)</tt>	Helper for build_index(): yield a list of tuples (pkg_xml zf subdir), where.
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L40'>config_java</a>(bin,options,verbose)</tt>	Configure nltk's java interface by letting nltk know where it can find the java binary and what extra options if any should be.
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L65'>java</a>(cmd,classpath,stdin,stdout)</tt>	Execute the given java command by opening a subprocess that calls java.
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L171'>read_str</a>(s,start_position)</tt>	If a python string literal begins at the specified position in the given string then return a tuple (val end_position).
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L225'>read_int</a>(s,start_position)</tt>	If an integer begins at the specified position in the given string then return a tuple (val end_position) containing the.
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L258'>read_number</a>(s,start_position)</tt>	If an integer or float begins at the specified position in the given string then return a tuple (val end_position).
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L298'>overridden</a>(method)</tt>	:return true if method overrides some method with the same name in a base class.
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L327'>_mro</a>(cls)</tt>	Return the method resolution order for cls -- i e a list.
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L347'>_add_epytext_field</a>(obj,field,message)</tt>	Add an epytext @field to a given object's docstring.
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L364'>deprecated</a>(message)</tt>	A decorator used to mark functions as deprecated this will cause.
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L455'>find_file_iter</a>(filename,env_vars,searchpath,file_names)</tt>	Search for a file to be used by nltk.
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L584'>find_binary_iter</a>(name,path_to_bin,env_vars,searchpath)</tt>	Search for a file to be used by nltk.
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L606'>find_jar_iter</a>(name_pattern,path_to_jar,env_vars,searchpath)</tt>	Search for a jar that is used by nltk.
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L729'>_decode_stdoutdata</a>(stdoutdata)</tt>	Convert data read from stdout/stderr to unicode.
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L743'>import_from_stdlib</a>(module)</tt>	When python is run from within the nltk/ directory tree the current directory is included at the beginning of the search path.
<tt style='background-color:#E8E8E8;'> core.ElementWrapper <a href=' /internals.py#L778'>__new__</a>(cls,etree)</tt>	Create and return a wrapper around a given element object.
<tt style='background-color:#E8E8E8;'> core.ElementWrapper <a href=' /internals.py#L789'>__init__</a>(etree)</tt>	Initialize a new element wrapper for etree.
<tt style='background-color:#E8E8E8;'> core.ElementWrapper <a href=' /internals.py#L804'>unwrap</a>()</tt>	Return the element object wrapped by this wrapper.
<tt style='background-color:#E8E8E8;'> core.ElementWrapper <a href=' /internals.py#L822'>__str__</a>()</tt>	:return the result of applying elementtree tostring() to.
<tt style='background-color:#E8E8E8;'> core. <a href=' /internals.py#L889'>slice_bounds</a>(sequence,slice_obj,allow_step)</tt>	Given a slice return the corresponding start stop bounds taking into account none indices and negative indices.
<tt style='background-color:#E8E8E8;'> core. <a href=' /treetransforms.py#L209'>collapse_unary</a>(tree,collapsePOS,collapseRoot,joinChar)</tt>	Collapse subtrees with a single child ie unary productions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tree.py#L1530'>demo</a>()</tt>	A demonstration showing how trees and trees can be used.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L70'>in_idle</a>()</tt>	Return true if this function is run within idle tkinter.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L88'>pr</a>(data,start,end)</tt>	Pretty print a sequence of data items.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L101'>print_string</a>(s,width)</tt>	Pretty print a string breaking lines on whitespace.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L112'>tokenwrap</a>(tokens,separator,width)</tt>	Pretty print a list of text tokens breaking lines on whitespace.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L154'>re_show</a>(regexp,string,left,right)</tt>	Return a string with markers surrounding the matched substrings.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L191'>breadth_first</a>(tree,children,maxdepth)</tt>	Traverse the nodes of a tree in breadth-first order.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L217'>guess_encoding</a>(data)</tt>	Given a byte string attempt to decode it.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L300'>transitive_closure</a>(graph,reflexive)</tt>	Calculate the transitive closure of a directed graph optionally the reflexive transitive closure.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L334'>invert_graph</a>(graph)</tt>	Inverts a directed graph.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L365'>flatten</a>()</tt>	Flatten a list.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L391'>pad_sequence</a>(sequence,n,pad_left,pad_right)</tt>	Returns a padded sequence of items before ngram extraction.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L426'>ngrams</a>(sequence,n,pad_left,pad_right)</tt>	Return the ngrams generated from a sequence of items as an iterator.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L475'>bigrams</a>(sequence)</tt>	Return the bigrams generated from a sequence of items as an iterator.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L494'>trigrams</a>(sequence)</tt>	Return the trigrams generated from a sequence of items as an iterator.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L513'>everygrams</a>(sequence,min_len,max_len)</tt>	Returns all possible ngrams generated from a sequence of items as an iterator.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L538'>skipgrams</a>(sequence,n,k)</tt>	Returns all possible skipgrams generated from a sequence of items as an iterator.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L580'>binary_search_file</a>(file,key,cache,cacheDepth)</tt>	Return the line from the file with first word key.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L651'>set_proxy</a>(proxy,user,password)</tt>	Set the http proxy for python to download through.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L694'>elementtree_indent</a>(elem,level)</tt>	Recursive function to indent an elementtree _elementinterface.
<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L724'>choose</a>(n,k)</tt>	This function is a fast way to calculate binomial coefficients commonly known as nck i.
<tt style='background-color:#E8E8E8;'> core. <a href=' /data.py#L110'>split_resource_url</a>(resource_url)</tt>	Splits a resource url into "<protocol>:<path>".
<tt style='background-color:#E8E8E8;'> core. <a href=' /data.py#L137'>normalize_resource_url</a>(resource_url)</tt>	Normalizes a resource url >>> windows = sys.
<tt style='background-color:#E8E8E8;'> core. <a href=' /data.py#L193'>normalize_resource_name</a>(resource_name,allow_relative,relative_path)</tt>	:type resource_name str or unicode.
<tt style='background-color:#E8E8E8;'> core.PathPointer <a href=' /data.py#L254'>open</a>(encoding)</tt>	Return a seekable read-only stream that can be used to read the contents of the file identified by this path pointer.
<tt style='background-color:#E8E8E8;'> core.PathPointer <a href=' /data.py#L264'>file_size</a>()</tt>	Return the size of the file pointed to by this path pointer in bytes.
<tt style='background-color:#E8E8E8;'> core.PathPointer <a href=' /data.py#L274'>join</a>(fileid)</tt>	Return a new path pointer formed by starting at the path identified by this pointer and then following the relative.
<tt style='background-color:#E8E8E8;'> core.FileSystemPathPointer <a href=' /data.py#L290'>__init__</a>(_path)</tt>	Create a new path pointer for the given absolute path.
<tt style='background-color:#E8E8E8;'> core.FileSystemPathPointer <a href=' /data.py#L306'>path</a>()</tt>	The absolute path identified by this path pointer.
<tt style='background-color:#E8E8E8;'> core.BufferedGzipFile <a href=' /data.py#L348'>__init__</a>(filename,mode,compresslevel,fileobj)</tt>	Return a buffered gzip file object.
<tt style='background-color:#E8E8E8;'> core.BufferedGzipFile <a href=' /data.py#L420'>write</a>(data,size)</tt>	:param data bytes to write to file or buffer.
<tt style='background-color:#E8E8E8;'> core.ZipFilePathPointer <a href=' /data.py#L460'>__init__</a>(zipfile,entry)</tt>	Create a new path pointer pointing at the specified entry in the given zipfile.
<tt style='background-color:#E8E8E8;'> core.ZipFilePathPointer <a href=' /data.py#L494'>zipfile</a>()</tt>	The zipfile zipfile object used to access the zip file.
<tt style='background-color:#E8E8E8;'> core.ZipFilePathPointer <a href=' /data.py#L502'>entry</a>()</tt>	The name of the file within zipfile that this path pointer points to.
<tt style='background-color:#E8E8E8;'> core. <a href=' /data.py#L550'>find</a>(resource_name,paths)</tt>	Find the given resource by searching through the directories and zip files in paths where a none or empty string specifies an absolute path.
<tt style='background-color:#E8E8E8;'> core. <a href=' /data.py#L651'>retrieve</a>(resource_url,filename,verbose)</tt>	Copy the given resource to a local file if no filename is.
<tt style='background-color:#E8E8E8;'> core. <a href=' /data.py#L726'>load</a>(resource_url,format,cache,verbose)</tt>	Load a given resource from the nltk data package the following.
<tt style='background-color:#E8E8E8;'> core. <a href=' /data.py#L878'>show_cfg</a>(resource_url,escape)</tt>	Write out a grammar file ignoring escaped and empty lines.
<tt style='background-color:#E8E8E8;'> core. <a href=' /data.py#L900'>clear_cache</a>()</tt>	Remove all objects from the resource cache.
<tt style='background-color:#E8E8E8;'> core. <a href=' /data.py#L908'>_open</a>(resource_url)</tt>	Helper function that returns an open file object for a resource given its resource url.
<tt style='background-color:#E8E8E8;'> core.OpenOnDemandZipFile <a href=' /data.py#L1003'>write</a>()</tt>	:raise notimplementederror openondemandzipfile is read-only.
<tt style='background-color:#E8E8E8;'> core.OpenOnDemandZipFile <a href=' /data.py#L1007'>writestr</a>()</tt>	:raise notimplementederror openondemandzipfile is read-only.
<tt style='background-color:#E8E8E8;'> core.SeekableUnicodeStreamReader <a href=' /data.py#L1353'>_read</a>(size)</tt>	Read up to size bytes from the underlying stream decode them using this reader's encoding and return the resulting.
<tt style='background-color:#E8E8E8;'> core.SeekableUnicodeStreamReader <a href=' /data.py#L1114'>readline</a>(size)</tt>	Read a line of text decode it using this reader's encoding and return the resulting unicode string.
<tt style='background-color:#E8E8E8;'> core.SeekableUnicodeStreamReader <a href=' /data.py#L1175'>readlines</a>(sizehint,keepends)</tt>	Read this file's contents decode them using this reader's encoding and return it as a list of unicode lines.
<tt style='background-color:#E8E8E8;'> core.SeekableUnicodeStreamReader <a href=' /data.py#L1186'>next</a>()</tt>	Return the next decoded line from the underlying stream.
<tt style='background-color:#E8E8E8;'> core.SeekableUnicodeStreamReader <a href=' /data.py#L1209'>closed</a>()</tt>	True if the underlying stream is closed.
<tt style='background-color:#E8E8E8;'> core.SeekableUnicodeStreamReader <a href=' /data.py#L1214'>name</a>()</tt>	The name of the underlying stream.
<tt style='background-color:#E8E8E8;'> core.SeekableUnicodeStreamReader <a href=' /data.py#L1219'>mode</a>()</tt>	The mode of the underlying stream.
<tt style='background-color:#E8E8E8;'> core.SeekableUnicodeStreamReader <a href=' /data.py#L1224'>close</a>()</tt>	Close the underlying stream.
<tt style='background-color:#E8E8E8;'> core.SeekableUnicodeStreamReader <a href=' /data.py#L1234'>seek</a>(offset,whence)</tt>	Move the stream to a new file position if the reader is.
<tt style='background-color:#E8E8E8;'> core.SeekableUnicodeStreamReader <a href=' /data.py#L1256'>char_seek_forward</a>(offset)</tt>	Move the read pointer forward by offset characters.
<tt style='background-color:#E8E8E8;'> core.SeekableUnicodeStreamReader <a href=' /data.py#L1267'>_char_seek_forward</a>(offset,est_bytes)</tt>	Move the file position forward by offset characters ignoring all buffers.
<tt style='background-color:#E8E8E8;'> core.SeekableUnicodeStreamReader <a href=' /data.py#L1307'>tell</a>()</tt>	Return the current file position on the underlying byte stream.
<tt style='background-color:#E8E8E8;'> core.SeekableUnicodeStreamReader <a href=' /data.py#L1391'>_incr_decode</a>(bytes)</tt>	Decode the given byte string into a unicode string using this reader's encoding.
<tt style='background-color:#E8E8E8;'> core.Nonterminal <a href=' /grammar.py#L109'>__init__</a>(symbol)</tt>	Construct a new non-terminal from the given symbol.
<tt style='background-color:#E8E8E8;'> core.Nonterminal <a href=' /grammar.py#L121'>symbol</a>()</tt>	Return the node value corresponding to this nonterminal.
<tt style='background-color:#E8E8E8;'> core.Nonterminal <a href=' /grammar.py#L129'>__eq__</a>(other)</tt>	Return true if this non-terminal is equal to other in.
<tt style='background-color:#E8E8E8;'> core.Nonterminal <a href=' /grammar.py#L150'>__repr__</a>()</tt>	Return a string representation for this nonterminal.
<tt style='background-color:#E8E8E8;'> core.Nonterminal <a href=' /grammar.py#L161'>__str__</a>()</tt>	Return a string representation for this nonterminal.
<tt style='background-color:#E8E8E8;'> core.Nonterminal <a href=' /grammar.py#L172'>__div__</a>(rhs)</tt>	Return a new nonterminal whose symbol is a/b, where a is the symbol for this nonterminal and b is the symbol for rhs.
<tt style='background-color:#E8E8E8;'> core.Nonterminal <a href=' /grammar.py#L185'>__truediv__</a>(rhs)</tt>	Return a new nonterminal whose symbol is a/b, where a is the symbol for this nonterminal and b is the symbol for rhs.
<tt style='background-color:#E8E8E8;'> core. <a href=' /grammar.py#L199'>nonterminals</a>(symbols)</tt>	Given a string containing a list of symbol names return a list of nonterminals constructed from those symbols.
<tt style='background-color:#E8E8E8;'> core. <a href=' /grammar.py#L225'>is_nonterminal</a>(item)</tt>	:return true if the item is a nonterminal.
<tt style='background-color:#E8E8E8;'> core. <a href=' /grammar.py#L237'>is_terminal</a>(item)</tt>	Return true if the item is a terminal which currently is if it is hashable and not a nonterminal.
<tt style='background-color:#E8E8E8;'> core.Production <a href=' /grammar.py#L273'>__init__</a>(lhs,rhs)</tt>	Construct a new production.
<tt style='background-color:#E8E8E8;'> core.Production <a href=' /grammar.py#L289'>lhs</a>()</tt>	Return the left-hand side of this production.
<tt style='background-color:#E8E8E8;'> core.Production <a href=' /grammar.py#L297'>rhs</a>()</tt>	Return the right-hand side of this production.
<tt style='background-color:#E8E8E8;'> core.Production <a href=' /grammar.py#L305'>__len__</a>()</tt>	Return the length of the right-hand side.
<tt style='background-color:#E8E8E8;'> core.Production <a href=' /grammar.py#L313'>is_nonlexical</a>()</tt>	Return true if the right-hand side only contains nonterminals.
<tt style='background-color:#E8E8E8;'> core.Production <a href=' /grammar.py#L321'>is_lexical</a>()</tt>	Return true if the right-hand contain at least one terminal token.
<tt style='background-color:#E8E8E8;'> core.Production <a href=' /grammar.py#L329'>__str__</a>()</tt>	Return a verbose string representation of the production.
<tt style='background-color:#E8E8E8;'> core.Production <a href=' /grammar.py#L339'>__repr__</a>()</tt>	Return a concise string representation of the production.
<tt style='background-color:#E8E8E8;'> core.Production <a href=' /grammar.py#L347'>__eq__</a>(other)</tt>	Return true if this production is equal to other.
<tt style='background-color:#E8E8E8;'> core.Production <a href=' /grammar.py#L365'>__hash__</a>()</tt>	Return a hash value for the production.
<tt style='background-color:#E8E8E8;'> core.DependencyProduction <a href=' /grammar.py#L380'>__str__</a>()</tt>	Return a verbose string representation of the dependencyproduction.
<tt style='background-color:#E8E8E8;'> core.ProbabilisticProduction <a href=' /grammar.py#L404'>__init__</a>(lhs,rhs)</tt>	Construct a new probabilisticproduction.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L447'>__init__</a>(start,productions,calculate_leftcorners)</tt>	Create a new context-free grammar from the given start state and set of productions.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L528'>fromstring</a>(cls,input,encoding)</tt>	Return the cfg corresponding to the input string s.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L539'>start</a>()</tt>	Return the start symbol of the grammar.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L549'>productions</a>(lhs,rhs,empty)</tt>	Return the grammar productions filtered by the left-hand side or the first item in the right-hand side.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L590'>leftcorners</a>(cat)</tt>	Return the set of all nonterminals that the given nonterminal can start with including itself.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L605'>is_leftcorner</a>(cat,left)</tt>	True if left is a leftcorner of cat where left can be a terminal or a nonterminal.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L624'>leftcorner_parents</a>(cat)</tt>	Return the set of all nonterminals for which the given category is a left corner.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L636'>check_coverage</a>(tokens)</tt>	Check whether the grammar rules cover the given list of tokens.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L650'>_calculate_grammar_forms</a>()</tt>	Pre-calculate of which form s the grammar is.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L663'>is_lexical</a>()</tt>	Return true if all productions are lexicalised.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L669'>is_nonlexical</a>()</tt>	Return true if all lexical rules are "preterminals", that is unary rules which can be separated in a preprocessing step.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L682'>min_len</a>()</tt>	Return the right-hand side length of the shortest grammar production.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L688'>max_len</a>()</tt>	Return the right-hand side length of the longest grammar production.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L694'>is_nonempty</a>()</tt>	Return true if there are no empty productions.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L700'>is_binarised</a>()</tt>	Return true if all productions are at most binary.
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L707'>is_flexible_chomsky_normal_form</a>()</tt>	Return true if all productions are of the forms a -> b c a -> b or a -> "s".
<tt style='background-color:#E8E8E8;'> core.CFG <a href=' /grammar.py#L714'>is_chomsky_normal_form</a>()</tt>	Return true if the grammar is of chomsky normal form i e all productions.
<tt style='background-color:#E8E8E8;'> core.FeatureGrammar <a href=' /grammar.py#L743'>__init__</a>(start,productions)</tt>	Create a new feature-based grammar from the given start state and set of productions.
<tt style='background-color:#E8E8E8;'> core.FeatureGrammar <a href=' /grammar.py#L788'>fromstring</a>(cls,input,features,logic_parser)</tt>	Return a feature structure based featuregrammar.
<tt style='background-color:#E8E8E8;'> core.FeatureGrammar <a href=' /grammar.py#L817'>productions</a>(lhs,rhs,empty)</tt>	Return the grammar productions filtered by the left-hand side or the first item in the right-hand side.
<tt style='background-color:#E8E8E8;'> core.FeatureGrammar <a href=' /grammar.py#L855'>leftcorners</a>(cat)</tt>	Return the set of all words that the given category can start with.
<tt style='background-color:#E8E8E8;'> core.FeatureGrammar <a href=' /grammar.py#L862'>leftcorner_parents</a>(cat)</tt>	Return the set of all categories for which the given category is a left corner.
<tt style='background-color:#E8E8E8;'> core.FeatureGrammar <a href=' /grammar.py#L869'>_get_type_if_possible</a>(item)</tt>	Helper function which returns the type feature of the item,.
<tt style='background-color:#E8E8E8;'> core.DependencyGrammar <a href=' /grammar.py#L916'>__init__</a>(productions)</tt>	Create a new dependency grammar from the set of productions.
<tt style='background-color:#E8E8E8;'> core.DependencyGrammar <a href=' /grammar.py#L955'>__contains__</a>(head,mod)</tt>	Return true if this dependencygrammar contains a dependencyproduction mapping 'head' to 'mod'.
<tt style='background-color:#E8E8E8;'> core.DependencyGrammar <a href=' /grammar.py#L984'>__str__</a>()</tt>	Return a verbose string representation of the dependencygrammar.
<tt style='background-color:#E8E8E8;'> core.DependencyGrammar <a href=' /grammar.py#L995'>__repr__</a>()</tt>	Return a concise string representation of the dependencygrammar.
<tt style='background-color:#E8E8E8;'> core.ProbabilisticDependencyGrammar <a href=' /grammar.py#L1013'>contains</a>(head,mod)</tt>	Return true if this dependencygrammar contains a dependencyproduction mapping 'head' to 'mod'.
<tt style='background-color:#E8E8E8;'> core.ProbabilisticDependencyGrammar <a href=' /grammar.py#L1030'>__str__</a>()</tt>	Return a verbose string representation of the probabilisticdependencygrammar.
<tt style='background-color:#E8E8E8;'> core.ProbabilisticDependencyGrammar <a href=' /grammar.py#L1047'>__repr__</a>()</tt>	Return a concise string representation of the probabilisticdependencygrammar.
<tt style='background-color:#E8E8E8;'> core.PCFG <a href=' /grammar.py#L1075'>__init__</a>(start,productions,calculate_leftcorners)</tt>	Create a new context-free grammar from the given start state and set of probabilisticproductions.
<tt style='background-color:#E8E8E8;'> core.PCFG <a href=' /grammar.py#L1104'>fromstring</a>(cls,input,encoding)</tt>	Return a probabilistic pcfg corresponding to the input string s.
<tt style='background-color:#E8E8E8;'> core. <a href=' /grammar.py#L1124'>induce_pcfg</a>(start,productions)</tt>	Induce a pcfg grammar from a list of productions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /grammar.py#L1159'>_read_cfg_production</a>(input)</tt>	Return a list of context-free productions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /grammar.py#L1165'>_read_pcfg_production</a>(input)</tt>	Return a list of pcfg probabilisticproductions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /grammar.py#L1171'>_read_fcfg_production</a>(input,fstruct_reader)</tt>	Return a list of feature-based productions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /grammar.py#L1185'>_read_production</a>(line,nonterm_parser,probabilistic)</tt>	Parse a grammar rule given as a string and return a list of productions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /grammar.py#L1244'>read_grammar</a>(input,nonterm_parser,probabilistic,encoding)</tt>	Return a pair consisting of a starting category and a list of productions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /grammar.py#L1343'>cfg_demo</a>()</tt>	A demonstration showing how cfgs can be created and used.
<tt style='background-color:#E8E8E8;'> core. <a href=' /grammar.py#L1417'>pcfg_demo</a>()</tt>	A demonstration showing how a pcfg can be created and used.
<tt style='background-color:#E8E8E8;'> core. <a href=' /grammar.py#L1480'>dg_demo</a>()</tt>	A demonstration showing the creation and inspection of a dependencygrammar.
<tt style='background-color:#E8E8E8;'> core. <a href=' /grammar.py#L1492'>sdg_demo</a>()</tt>	A demonstration of how to read a string representation of a conll format dependency tree.
<tt style='background-color:#E8E8E8;'> core.AbstractCollocationFinder <a href=' /collocations.py#L59'>_build_new_documents</a>(cls,documents,window_size,pad_left)</tt>	Pad the document with the place holder according to the window_size.
<tt style='background-color:#E8E8E8;'> core.AbstractCollocationFinder <a href=' /collocations.py#L70'>from_documents</a>(cls,documents)</tt>	Constructs a collocation finder given a collection of documents each of which is a list or iterable of tokens.
<tt style='background-color:#E8E8E8;'> core.AbstractCollocationFinder <a href=' /collocations.py#L82'>_apply_filter</a>(fn)</tt>	Generic filter removes ngrams from the frequency distribution if the function returns true when passed an ngram tuple.
<tt style='background-color:#E8E8E8;'> core.AbstractCollocationFinder <a href=' /collocations.py#L92'>apply_freq_filter</a>(min_freq)</tt>	Removes candidate ngrams which have frequency less than min_freq.
<tt style='background-color:#E8E8E8;'> core.AbstractCollocationFinder <a href=' /collocations.py#L96'>apply_ngram_filter</a>(fn)</tt>	Removes candidate ngrams w1 w2 where fn w1 w2.
<tt style='background-color:#E8E8E8;'> core.AbstractCollocationFinder <a href=' /collocations.py#L102'>apply_word_filter</a>(fn)</tt>	Removes candidate ngrams w1 w2 where any of (fn w1 fn w2.
<tt style='background-color:#E8E8E8;'> core.AbstractCollocationFinder <a href=' /collocations.py#L117'>score_ngrams</a>(score_fn)</tt>	Returns a sequence of ngram score pairs ordered from highest to lowest score as determined by the scoring function provided.
<tt style='background-color:#E8E8E8;'> core.AbstractCollocationFinder <a href=' /collocations.py#L123'>nbest</a>(score_fn,n)</tt>	Returns the top n ngrams when scored by the given function.
<tt style='background-color:#E8E8E8;'> core.AbstractCollocationFinder <a href=' /collocations.py#L127'>above_score</a>(score_fn,min_score)</tt>	Returns a sequence of ngrams ordered by decreasing score whose scores each exceed the given minimum score.
<tt style='background-color:#E8E8E8;'> core.BigramCollocationFinder <a href=' /collocations.py#L145'>__init__</a>(word_fd,bigram_fd,window_size)</tt>	Construct a bigramcollocationfinder given freqdists for appearances of words and possibly non-contiguous bigrams.
<tt style='background-color:#E8E8E8;'> core.BigramCollocationFinder <a href=' /collocations.py#L152'>from_words</a>(cls,words,window_size)</tt>	Construct a bigramcollocationfinder for all bigrams in the given sequence.
<tt style='background-color:#E8E8E8;'> core.BigramCollocationFinder <a href=' /collocations.py#L174'>score_ngram</a>(score_fn,w1,w2)</tt>	Returns the score for a given bigram using the given scoring function.
<tt style='background-color:#E8E8E8;'> core.TrigramCollocationFinder <a href=' /collocations.py#L195'>__init__</a>(word_fd,bigram_fd,wildcard_fd,trigram_fd)</tt>	Construct a trigramcollocationfinder given freqdists for appearances of words bigrams two words with any word between them.
<tt style='background-color:#E8E8E8;'> core.TrigramCollocationFinder <a href=' /collocations.py#L204'>from_words</a>(cls,words,window_size)</tt>	Construct a trigramcollocationfinder for all trigrams in the given sequence.
<tt style='background-color:#E8E8E8;'> core.TrigramCollocationFinder <a href=' /collocations.py#L231'>bigram_finder</a>()</tt>	Constructs a bigram collocation finder with the bigram and unigram data from this finder.
<tt style='background-color:#E8E8E8;'> core.TrigramCollocationFinder <a href=' /collocations.py#L238'>score_ngram</a>(score_fn,w1,w2,w3)</tt>	Returns the score for a given trigram using the given scoring function.
<tt style='background-color:#E8E8E8;'> core.QuadgramCollocationFinder <a href=' /collocations.py#L264'>__init__</a>(word_fd,quadgram_fd,ii,iii)</tt>	Construct a quadgramcollocationfinder given freqdists for appearances of words bigrams trigrams two words with one word and two words between them three words.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tree.py#L1530'>demo</a>(scorer,compare_scorer)</tt>	Finds bigram collocations in the files of the webtext corpus.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L92'>__init__</a>(samples)</tt>	Construct a new frequency distribution if samples is.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L113'>N</a>()</tt>	Return the total number of sample outcomes that have been recorded by this freqdist.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L127'>__setitem__</a>(key,val)</tt>	Override counter __setitem__() to invalidate the cached n.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L134'>__delitem__</a>(key)</tt>	Override counter __delitem__() to invalidate the cached n.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L141'>update</a>()</tt>	Override counter update() to invalidate the cached n.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L148'>setdefault</a>(key,val)</tt>	Override counter setdefault() to invalidate the cached n.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L155'>B</a>()</tt>	Return the total number of sample values (or "bins") that have counts greater than zero.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L166'>hapaxes</a>()</tt>	Return a list of all samples that occur once hapax legomena.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L178'>r_Nr</a>(bins)</tt>	Return the dictionary mapping r to nr the number of samples with frequency r where nr > 0.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L199'>_cumulative_frequencies</a>(samples)</tt>	Return the cumulative frequencies of the specified samples.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L216'>freq</a>(sample)</tt>	Return the frequency of a given sample the frequency of a.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L236'>max</a>()</tt>	Return the sample with the greatest number of outcomes in this frequency distribution.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L252'>plot</a>()</tt>	Plot samples from the frequency distribution displaying the most frequent sample first.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L296'>tabulate</a>()</tt>	Tabulate the given samples from the frequency distribution cumulative displaying the most frequent sample first.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L329'>copy</a>()</tt>	Create a copy of this frequency distribution.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L339'>__add__</a>(other)</tt>	Add counts from two counters.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L349'>__sub__</a>(other)</tt>	Subtract count but keep only results with positive counts.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L359'>__or__</a>(other)</tt>	Union is the maximum of value in either of the input counters.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L369'>__and__</a>(other)</tt>	Intersection is the minimum of corresponding counts.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L389'>__repr__</a>()</tt>	Return a string representation of this freqdist.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L397'>pprint</a>(maxlen,stream)</tt>	Print a string representation of this freqdist to 'stream'.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L407'>pformat</a>(maxlen)</tt>	Return a string representation of this freqdist.
<tt style='background-color:#E8E8E8;'> core.FreqDist <a href=' /probability.py#L420'>__str__</a>()</tt>	Return a string representation of this freqdist.
<tt style='background-color:#E8E8E8;'> core.ProbDistI <a href=' /probability.py#L454'>prob</a>(sample)</tt>	Return the probability for a given sample probabilities.
<tt style='background-color:#E8E8E8;'> core.ProbDistI <a href=' /probability.py#L466'>logprob</a>(sample)</tt>	Return the base 2 logarithm of the probability for a given sample.
<tt style='background-color:#E8E8E8;'> core.ProbDistI <a href=' /probability.py#L479'>max</a>()</tt>	Return the sample with the greatest probability if two or.
<tt style='background-color:#E8E8E8;'> core.ProbDistI <a href=' /probability.py#L489'>samples</a>()</tt>	Return a list of all samples that have nonzero probabilities.
<tt style='background-color:#E8E8E8;'> core.ProbDistI <a href=' /probability.py#L499'>discount</a>()</tt>	Return the ratio by which counts are discounted on average c*/c.
<tt style='background-color:#E8E8E8;'> core.ProbDistI <a href=' /probability.py#L509'>generate</a>()</tt>	Return a randomly selected sample from this probability distribution.
<tt style='background-color:#E8E8E8;'> core.UniformProbDist <a href=' /probability.py#L537'>__init__</a>(samples)</tt>	Construct a new uniform probability distribution that assigns equal probability to each sample in samples.
<tt style='background-color:#E8E8E8;'> core.RandomProbDist <a href=' /probability.py#L581'>unirand</a>(cls,samples)</tt>	The key function that creates a randomized initial distribution that still sums to 1.
<tt style='background-color:#E8E8E8;'> core.DictionaryProbDist <a href=' /probability.py#L620'>__init__</a>(prob_dict,log,normalize)</tt>	Construct a new probability distribution from the given dictionary which maps values to probabilities (or to log.
<tt style='background-color:#E8E8E8;'> core.MLEProbDist <a href=' /probability.py#L693'>__init__</a>(freqdist,bins)</tt>	Use the maximum likelihood estimate to create a probability distribution for the experiment used to generate freqdist.
<tt style='background-color:#E8E8E8;'> core.MLEProbDist <a href=' /probability.py#L704'>freqdist</a>()</tt>	Return the frequency distribution that this probability distribution is based on.
<tt style='background-color:#E8E8E8;'> core.MLEProbDist <a href=' /probability.py#L722'>__repr__</a>()</tt>	:rtype str :return a string representation of this probdist.
<tt style='background-color:#E8E8E8;'> core.LidstoneProbDist <a href=' /probability.py#L744'>__init__</a>(freqdist,gamma,bins)</tt>	Use the lidstone estimate to create a probability distribution for the experiment used to generate freqdist.
<tt style='background-color:#E8E8E8;'> core.LidstoneProbDist <a href=' /probability.py#L791'>freqdist</a>()</tt>	Return the frequency distribution that this probability distribution is based on.
<tt style='background-color:#E8E8E8;'> core.LidstoneProbDist <a href=' /probability.py#L817'>__repr__</a>()</tt>	Return a string representation of this probdist.
<tt style='background-color:#E8E8E8;'> core.LaplaceProbDist <a href=' /probability.py#L837'>__init__</a>(freqdist,bins)</tt>	Use the laplace estimate to create a probability distribution for the experiment used to generate freqdist.
<tt style='background-color:#E8E8E8;'> core.LaplaceProbDist <a href=' /probability.py#L854'>__repr__</a>()</tt>	:rtype str :return a string representation of this probdist.
<tt style='background-color:#E8E8E8;'> core.ELEProbDist <a href=' /probability.py#L873'>__init__</a>(freqdist,bins)</tt>	Use the expected likelihood estimate to create a probability distribution for the experiment used to generate freqdist.
<tt style='background-color:#E8E8E8;'> core.ELEProbDist <a href=' /probability.py#L890'>__repr__</a>()</tt>	Return a string representation of this probdist.
<tt style='background-color:#E8E8E8;'> core.HeldoutProbDist <a href=' /probability.py#L942'>__init__</a>(base_fdist,heldout_fdist,bins)</tt>	Use the heldout estimate to create a probability distribution for the experiment used to generate base_fdist and.
<tt style='background-color:#E8E8E8;'> core.HeldoutProbDist <a href=' /probability.py#L976'>_calculate_Tr</a>()</tt>	Return the list *tr*, where *tr[r]* is the total count in heldout_fdist for all samples that occur *r*.
<tt style='background-color:#E8E8E8;'> core.HeldoutProbDist <a href=' /probability.py#L990'>_calculate_estimate</a>(Tr,Nr,N)</tt>	Return the list *estimate*, where *estimate[r]* is the probability estimate for any sample that occurs *r* times in the base frequency.
<tt style='background-color:#E8E8E8;'> core.HeldoutProbDist <a href=' /probability.py#L1016'>base_fdist</a>()</tt>	Return the base frequency distribution that this probability distribution is based on.
<tt style='background-color:#E8E8E8;'> core.HeldoutProbDist <a href=' /probability.py#L1025'>heldout_fdist</a>()</tt>	Return the heldout frequency distribution that this probability distribution is based on.
<tt style='background-color:#E8E8E8;'> core.HeldoutProbDist <a href=' /probability.py#L1051'>__repr__</a>()</tt>	:rtype str :return a string representation of this probdist.
<tt style='background-color:#E8E8E8;'> core.CrossValidationProbDist <a href=' /probability.py#L1070'>__init__</a>(freqdists,bins)</tt>	Use the cross-validation estimate to create a probability distribution for the experiment used to generate.
<tt style='background-color:#E8E8E8;'> core.CrossValidationProbDist <a href=' /probability.py#L1097'>freqdists</a>()</tt>	Return the list of frequency distributions that this probdist is based on.
<tt style='background-color:#E8E8E8;'> core.CrossValidationProbDist <a href=' /probability.py#L1120'>__repr__</a>()</tt>	Return a string representation of this probdist.
<tt style='background-color:#E8E8E8;'> core.WittenBellProbDist <a href=' /probability.py#L1145'>__init__</a>(freqdist,bins)</tt>	Creates a distribution of witten-bell probability estimates this.
<tt style='background-color:#E8E8E8;'> core.WittenBellProbDist <a href=' /probability.py#L1204'>__repr__</a>()</tt>	Return a string representation of this probdist.
<tt style='background-color:#E8E8E8;'> core.SimpleGoodTuringProbDist <a href=' /probability.py#L1292'>__init__</a>(freqdist,bins)</tt>	:param freqdist the frequency counts upon which to base the estimation.
<tt style='background-color:#E8E8E8;'> core.SimpleGoodTuringProbDist <a href=' /probability.py#L1318'>_r_Nr</a>()</tt>	Split the frequency distribution in two list r nr where nr r > 0.
<tt style='background-color:#E8E8E8;'> core.SimpleGoodTuringProbDist <a href=' /probability.py#L1328'>find_best_fit</a>(r,nr)</tt>	Use simple linear regression to tune parameters self _slope and.
<tt style='background-color:#E8E8E8;'> core.SimpleGoodTuringProbDist <a href=' /probability.py#L1367'>_switch</a>(r,nr)</tt>	Calculate the r frontier where we must switch from nr to sr when estimating e[nr].
<tt style='background-color:#E8E8E8;'> core.SimpleGoodTuringProbDist <a href=' /probability.py#L1393'>_renormalize</a>(r,nr)</tt>	It is necessary to renormalize all the probability estimates to ensure a proper probability distribution results.
<tt style='background-color:#E8E8E8;'> core.SimpleGoodTuringProbDist <a href=' /probability.py#L1407'>smoothedNr</a>(r)</tt>	Return the number of samples with count r.
<tt style='background-color:#E8E8E8;'> core.SimpleGoodTuringProbDist <a href=' /probability.py#L1423'>prob</a>(sample)</tt>	Return the sample's probability.
<tt style='background-color:#E8E8E8;'> core.SimpleGoodTuringProbDist <a href=' /probability.py#L1465'>discount</a>()</tt>	This function returns the total mass of probability transfers from the seen samples to the unseen samples.
<tt style='background-color:#E8E8E8;'> core.SimpleGoodTuringProbDist <a href=' /probability.py#L1481'>__repr__</a>()</tt>	Return a string representation of this probdist.
<tt style='background-color:#E8E8E8;'> core.MutableProbDist <a href=' /probability.py#L1498'>__init__</a>(prob_dist,samples,store_logs)</tt>	Creates the mutable probdist based on the given prob_dist and using the list of samples given.
<tt style='background-color:#E8E8E8;'> core.MutableProbDist <a href=' /probability.py#L1540'>update</a>(sample,prob,log)</tt>	Update the probability for the given sample this may cause the object.
<tt style='background-color:#E8E8E8;'> core.KneserNeyProbDist <a href=' /probability.py#L1607'>__init__</a>(freqdist,bins,discount)</tt>	:param freqdist the trigram frequency distribution upon which to base.
<tt style='background-color:#E8E8E8;'> core.KneserNeyProbDist <a href=' /probability.py#L1678'>discount</a>()</tt>	Return the value by which counts are discounted by default set to 0 75.
<tt style='background-color:#E8E8E8;'> core.KneserNeyProbDist <a href=' /probability.py#L1686'>set_discount</a>(discount)</tt>	Set the value by which counts are discounted to the value of discount.
<tt style='background-color:#E8E8E8;'> core.KneserNeyProbDist <a href=' /probability.py#L1702'>__repr__</a>()</tt>	Return a string representation of this probdist.
<tt style='background-color:#E8E8E8;'> core.ConditionalFreqDist <a href=' /probability.py#L1778'>__init__</a>(cond_samples)</tt>	Construct a new empty conditional frequency distribution in.
<tt style='background-color:#E8E8E8;'> core.ConditionalFreqDist <a href=' /probability.py#L1798'>conditions</a>()</tt>	Return a list of the conditions that have been accessed for this conditionalfreqdist.
<tt style='background-color:#E8E8E8;'> core.ConditionalFreqDist <a href=' /probability.py#L1810'>N</a>()</tt>	Return the total number of sample outcomes that have been recorded by this conditionalfreqdist.
<tt style='background-color:#E8E8E8;'> core.ConditionalFreqDist <a href=' /probability.py#L1819'>plot</a>()</tt>	Plot the given samples from the conditional frequency distribution.
<tt style='background-color:#E8E8E8;'> core.ConditionalFreqDist <a href=' /probability.py#L1868'>tabulate</a>()</tt>	Tabulate the given samples from the conditional frequency distribution.
<tt style='background-color:#E8E8E8;'> core.ConditionalFreqDist <a href=' /probability.py#L1907'>__add__</a>(other)</tt>	Add counts from two conditionalfreqdists.
<tt style='background-color:#E8E8E8;'> core.ConditionalFreqDist <a href=' /probability.py#L1925'>__sub__</a>(other)</tt>	Subtract count but keep only results with positive counts.
<tt style='background-color:#E8E8E8;'> core.ConditionalFreqDist <a href=' /probability.py#L1943'>__or__</a>(other)</tt>	Union is the maximum of value in either of the input counters.
<tt style='background-color:#E8E8E8;'> core.ConditionalFreqDist <a href=' /probability.py#L1961'>__and__</a>(other)</tt>	Intersection is the minimum of corresponding counts.
<tt style='background-color:#E8E8E8;'> core.ConditionalFreqDist <a href=' /probability.py#L1993'>__repr__</a>()</tt>	Return a string representation of this conditionalfreqdist.
<tt style='background-color:#E8E8E8;'> core.ConditionalProbDistI <a href=' /probability.py#L2019'>conditions</a>()</tt>	Return a list of the conditions that are represented by this conditionalprobdist.
<tt style='background-color:#E8E8E8;'> core.ConditionalProbDistI <a href=' /probability.py#L2029'>__repr__</a>()</tt>	Return a string representation of this conditionalprobdist.
<tt style='background-color:#E8E8E8;'> core.ConditionalProbDist <a href=' /probability.py#L2071'>__init__</a>(cfdist,probdist_factory)</tt>	Construct a new conditional probability distribution based on the given conditional frequency distribution and probdist.
<tt style='background-color:#E8E8E8;'> core.DictionaryConditionalProbDist <a href=' /probability.py#L2116'>__init__</a>(probdist_dict)</tt>	:param probdist_dict a dictionary containing the probdists indexed.
<tt style='background-color:#E8E8E8;'> core. <a href=' /probability.py#L2135'>add_logs</a>(logx,logy)</tt>	Given two numbers logx = *log x * and logy = *log y *, return *log x+y *.
<tt style='background-color:#E8E8E8;'> core.ProbabilisticMixIn <a href=' /probability.py#L2181'>__init__</a>()</tt>	Initialize this object's probability this initializer should.
<tt style='background-color:#E8E8E8;'> core.ProbabilisticMixIn <a href=' /probability.py#L2204'>set_prob</a>(prob)</tt>	Set the probability associated with this object to prob.
<tt style='background-color:#E8E8E8;'> core.ProbabilisticMixIn <a href=' /probability.py#L2214'>set_logprob</a>(logprob)</tt>	Set the log probability associated with this object to logprob.
<tt style='background-color:#E8E8E8;'> core.ProbabilisticMixIn <a href=' /probability.py#L2226'>prob</a>()</tt>	Return the probability associated with this object.
<tt style='background-color:#E8E8E8;'> core.ProbabilisticMixIn <a href=' /probability.py#L2237'>logprob</a>()</tt>	Return log p , where p is the probability associated with this object.
<tt style='background-color:#E8E8E8;'> core. <a href=' /probability.py#L2269'>_create_rand_fdist</a>(numsamples,numoutcomes)</tt>	Create a new frequency distribution with random samples the.
<tt style='background-color:#E8E8E8;'> core. <a href=' /probability.py#L2283'>_create_sum_pdist</a>(numsamples)</tt>	Return the true probability distribution for the experiment _create_rand_fdist numsamples x.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tree.py#L1530'>demo</a>(numsamples,numoutcomes)</tt>	A demonstration of frequency distributions and probability distributions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /decorators.py#L32'>getinfo</a>(func)</tt>	Returns an info dictionary containing.
<tt style='background-color:#E8E8E8;'> core. <a href=' /decorators.py#L96'>new_wrapper</a>(wrapper,model)</tt>	An improvement over functools update_wrapper the wrapper is a generic.
<tt style='background-color:#E8E8E8;'> core. <a href=' /decorators.py#L118'>decorator_factory</a>(cls)</tt>	Take a class with a caller method and return a callable decorator.
<tt style='background-color:#E8E8E8;'> core. <a href=' /decorators.py#L135'>decorator</a>(caller)</tt>	General purpose decorator factory takes a caller function as input and returns a decorator with the same attributes.
<tt style='background-color:#E8E8E8;'> core. <a href=' /decorators.py#L178'>getattr_</a>(obj,name,default_thunk)</tt>	Similar to setdefault in dictionaries.
<tt style='background-color:#E8E8E8;'> core.AbstractLazySequence <a href=' /collections.py#L144'>__len__</a>()</tt>	Return the number of tokens in the corpus file underlying this corpus view.
<tt style='background-color:#E8E8E8;'> core.AbstractLazySequence <a href=' /collections.py#L151'>iterate_from</a>(start)</tt>	Return an iterator that generates the tokens in the corpus file underlying this corpus view starting at the token number.
<tt style='background-color:#E8E8E8;'> core.AbstractLazySequence <a href=' /collections.py#L160'>__getitem__</a>(i)</tt>	Return the *i* th token in the corpus file underlying this corpus view.
<tt style='background-color:#E8E8E8;'> core.AbstractLazySequence <a href=' /collections.py#L178'>__iter__</a>()</tt>	Return an iterator that generates the tokens in the corpus file underlying this corpus view.
<tt style='background-color:#E8E8E8;'> core.AbstractLazySequence <a href=' /collections.py#L183'>count</a>(value)</tt>	Return the number of times this list contains value.
<tt style='background-color:#E8E8E8;'> core.AbstractLazySequence <a href=' /collections.py#L187'>index</a>(value,start,stop)</tt>	Return the index of the first occurrence of value in this list that is greater than or equal to start and less than.
<tt style='background-color:#E8E8E8;'> core.AbstractLazySequence <a href=' /collections.py#L197'>__contains__</a>(value)</tt>	Return true if this list contains value.
<tt style='background-color:#E8E8E8;'> core.AbstractLazySequence <a href=' /collections.py#L201'>__add__</a>(other)</tt>	Return a list concatenating self with other.
<tt style='background-color:#E8E8E8;'> core.AbstractLazySequence <a href=' /collections.py#L205'>__radd__</a>(other)</tt>	Return a list concatenating other with self.
<tt style='background-color:#E8E8E8;'> core.AbstractLazySequence <a href=' /collections.py#L209'>__mul__</a>(count)</tt>	Return a list concatenating self with itself count times.
<tt style='background-color:#E8E8E8;'> core.AbstractLazySequence <a href=' /collections.py#L213'>__rmul__</a>(count)</tt>	Return a list concatenating self with itself count times.
<tt style='background-color:#E8E8E8;'> core.AbstractLazySequence <a href=' /collections.py#L218'>__repr__</a>()</tt>	Return a string representation for this corpus view that is similar to a list's representation but if it would be more.
<tt style='background-color:#E8E8E8;'> core.AbstractLazySequence <a href=' /collections.py#L245'>__hash__</a>()</tt>	:raise valueerror corpus view objects are unhashable.
<tt style='background-color:#E8E8E8;'> core.LazySubsequence <a href=' /collections.py#L267'>__new__</a>(cls,source,start,stop)</tt>	Construct a new slice from a given underlying sequence the.
<tt style='background-color:#E8E8E8;'> core.LazyMap <a href=' /collections.py#L374'>__init__</a>(function)</tt>	:param function the function that should be applied to elements of lists.
<tt style='background-color:#E8E8E8;'> core.LazyZip <a href=' /collections.py#L496'>__init__</a>()</tt>	:param lists the underlying lists.
<tt style='background-color:#E8E8E8;'> core.LazyEnumerate <a href=' /collections.py#L543'>__init__</a>(lst)</tt>	:param lst the underlying list.
<tt style='background-color:#E8E8E8;'> core.LazyIteratorList <a href=' /collections.py#L569'>iterate_from</a>(start)</tt>	Create a new iterator over this list starting at the given offset.
<tt style='background-color:#E8E8E8;'> core.LazyIteratorList <a href=' /collections.py#L584'>__add__</a>(other)</tt>	Return a list concatenating self with other.
<tt style='background-color:#E8E8E8;'> core.LazyIteratorList <a href=' /collections.py#L588'>__radd__</a>(other)</tt>	Return a list concatenating other with self.
<tt style='background-color:#E8E8E8;'> core.Trie <a href=' /collections.py#L599'>__init__</a>(strings)</tt>	Builds a trie object which is built around a defaultdict if strings is provided it will add the strings, which.
<tt style='background-color:#E8E8E8;'> core.Trie <a href=' /collections.py#L616'>insert</a>(string)</tt>	Inserts string into the trie.
<tt style='background-color:#E8E8E8;'> core.Trie <a href=' /collections.py#L639'>as_dict</a>(d)</tt>	Convert defaultdict to common dict representation.
<tt style='background-color:#E8E8E8;'> core.StandardFormat <a href=' /toolbox.py#L33'>open</a>(sfm_file)</tt>	Open a standard format marker file for sequential reading.
<tt style='background-color:#E8E8E8;'> core.StandardFormat <a href=' /toolbox.py#L47'>open_string</a>(s)</tt>	Open a standard format marker string for sequential reading.
<tt style='background-color:#E8E8E8;'> core.StandardFormat <a href=' /toolbox.py#L56'>raw_fields</a>()</tt>	Return an iterator that returns the next field in a marker value tuple.
<tt style='background-color:#E8E8E8;'> core.StandardFormat <a href=' /toolbox.py#L90'>fields</a>(strip,unwrap,encoding,errors)</tt>	Return an iterator that returns the next field in a marker value tuple where marker and value are unicode strings if an encoding.
<tt style='background-color:#E8E8E8;'> core.StandardFormat <a href=' /toolbox.py#L130'>close</a>()</tt>	Close a previously opened standard format marker file or string.
<tt style='background-color:#E8E8E8;'> core.ToolboxData <a href=' /toolbox.py#L145'>_record_parse</a>(key)</tt>	Returns an element tree structure corresponding to a toolbox data file with all markers at the same level.
<tt style='background-color:#E8E8E8;'> core.ToolboxData <a href=' /toolbox.py#L234'>_chunk_parse</a>(grammar,root_label,trace)</tt>	Returns an element tree structure corresponding to a toolbox data file parsed according to the chunk grammar.
<tt style='background-color:#E8E8E8;'> core. <a href=' /toolbox.py#L269'>to_sfm_string</a>(tree,encoding,errors,unicode_fields)</tt>	Return a string with a standard format representation of the toolbox data in tree tree can be a toolbox database or a single record.
<tt style='background-color:#E8E8E8;'> core.ToolboxSettings <a href=' /toolbox.py#L322'>parse</a>(encoding,errors)</tt>	Return the contents of toolbox settings file with a nested structure.
<tt style='background-color:#E8E8E8;'> core. <a href=' /toolbox.py#L380'>remove_blanks</a>(elem)</tt>	Remove all elements and subelements with no text and no child elements.
<tt style='background-color:#E8E8E8;'> core. <a href=' /toolbox.py#L394'>add_default_fields</a>(elem,default_fields)</tt>	Add blank elements and subelements specified in default_fields.
<tt style='background-color:#E8E8E8;'> core. <a href=' /toolbox.py#L409'>sort_fields</a>(elem,field_orders)</tt>	Sort the elements and subelements in order specified in field_orders.
<tt style='background-color:#E8E8E8;'> core. <a href=' /toolbox.py#L425'>_sort_fields</a>(elem,orders_dicts)</tt>	Sort the children of elem.
<tt style='background-color:#E8E8E8;'> core. <a href=' /toolbox.py#L438'>add_blank_lines</a>(tree,blanks_before,blanks_between)</tt>	Add blank lines before all elements and subelements specified in blank_before.
<tt style='background-color:#E8E8E8;'> core. <a href=' /wsd.py#L13'>lesk</a>(context_sentence,ambiguous_word,pos,synsets)</tt>	Return a synset for an ambiguous word in a context.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L132'>ancestors</a>(node)</tt>	Returns the list of all nodes dominating the given tree node.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L149'>unique_ancestors</a>(node)</tt>	Returns the list of all nodes dominating the given node where there is only a single path of descent.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L165'>_descendants</a>(node)</tt>	Returns the list of all nodes which are descended from the given tree node in some way.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L176'>_leftmost_descendants</a>(node)</tt>	Returns the set of all nodes descended in some way through left branches from this node.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L187'>_rightmost_descendants</a>(node)</tt>	Returns the set of all nodes descended in some way through right branches from this node.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L198'>_istree</a>(obj)</tt>	Predicate to check whether obj is a nltk tree tree.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L202'>_unique_descendants</a>(node)</tt>	Returns the list of all nodes descended from the given node where there is only a single path of descent.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L214'>_before</a>(node)</tt>	Returns the set of all nodes that are before the given node.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L226'>_immediately_before</a>(node)</tt>	Returns the set of all nodes that are immediately before the given node.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L251'>_after</a>(node)</tt>	Returns the set of all nodes that are after the given node.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L263'>_immediately_after</a>(node)</tt>	Returns the set of all nodes that are immediately after the given node.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L291'>_tgrep_node_literal_value</a>(node)</tt>	Gets the string value of a given parse tree node for comparison using the tgrep node literal predicates.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L298'>_tgrep_macro_use_action</a>(_s,_l,tokens)</tt>	Builds a lambda function which looks up the macro name used.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L311'>_tgrep_node_action</a>(_s,_l,tokens)</tt>	Builds a lambda function representing a predicate on a tree node depending on the name of its node.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L352'>_tgrep_parens_action</a>(_s,_l,tokens)</tt>	Builds a lambda function representing a predicate on a tree node from a parenthetical notation.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L363'>_tgrep_nltk_tree_pos_action</a>(_s,_l,tokens)</tt>	Builds a lambda function representing a predicate on a tree node which returns true if the node is located at a specific tree.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L375'>_tgrep_relation_action</a>(_s,_l,tokens)</tt>	Builds a lambda function representing a predicate on a tree node depending on its relation to other nodes in the tree.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L561'>_tgrep_conjunction_action</a>(_s,_l,tokens,join_char)</tt>	Builds a lambda function representing a predicate on a tree node from the conjunction of several other such lambda functions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L593'>_tgrep_segmented_pattern_action</a>(_s,_l,tokens)</tt>	Builds a lambda function representing a segmented pattern.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L633'>_tgrep_node_label_use_action</a>(_s,_l,tokens)</tt>	Returns the node label used to begin a tgrep_expr_labeled see.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L651'>_tgrep_node_label_pred_use_action</a>(_s,_l,tokens)</tt>	Builds a lambda function representing a predicate on a tree node which describes the use of a previously bound node label.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L678'>_tgrep_bind_node_label_action</a>(_s,_l,tokens)</tt>	Builds a lambda function representing a predicate on a tree node which can optionally bind a matching node into the tgrep2 string's.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L712'>_tgrep_rel_disjunction_action</a>(_s,_l,tokens)</tt>	Builds a lambda function representing a predicate on a tree node from the disjunction of several other such lambda functions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L726'>_macro_defn_action</a>(_s,_l,tokens)</tt>	Builds a dictionary structure which defines the given macro.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L734'>_tgrep_exprs_action</a>(_s,_l,tokens)</tt>	This is the top-lebel node in a tgrep2 search string the predicate function it returns binds together all the state of a.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L763'>_build_tgrep_parser</a>(set_parse_actions)</tt>	Builds a pyparsing-based parser object for tokenizing and interpreting tgrep search strings.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L853'>tgrep_tokenize</a>(tgrep_string)</tt>	Tokenizes a tgrep search string into separate tokens.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L862'>tgrep_compile</a>(tgrep_string)</tt>	Parses and tokenizes if necessary a tgrep search string into a lambda function.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L872'>treepositions_no_leaves</a>(tree)</tt>	Returns all the tree positions in the given tree which are not leaf nodes.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L886'>tgrep_positions</a>(pattern,trees,search_leaves)</tt>	Return the tree positions in the trees which match the given pattern.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tgrep.py#L913'>tgrep_nodes</a>(pattern,trees,search_leaves)</tt>	Return the tree nodes in the trees which match the given pattern.
<tt style='background-color:#E8E8E8;'> core.ContextIndex <a href=' /text.py#L41'>_default_context</a>(tokens,i)</tt>	One left token and one right token normalized to lowercase.
<tt style='background-color:#E8E8E8;'> core.ContextIndex <a href=' /text.py#L62'>tokens</a>()</tt>	:rtype list str :return the document that this context index was.
<tt style='background-color:#E8E8E8;'> core.ContextIndex <a href=' /text.py#L70'>word_similarity_dict</a>(word)</tt>	Return a dictionary mapping from words to 'similarity scores ' indicating how often these two words occur in the same.
<tt style='background-color:#E8E8E8;'> core.ContextIndex <a href=' /text.py#L93'>common_contexts</a>(words,fail_on_unknown)</tt>	Find contexts where the specified words can all appear and return a frequency distribution mapping each context to the.
<tt style='background-color:#E8E8E8;'> core.ConcordanceIndex <a href=' /text.py#L126'>__init__</a>(tokens,key)</tt>	Construct a new concordance index.
<tt style='background-color:#E8E8E8;'> core.ConcordanceIndex <a href=' /text.py#L154'>tokens</a>()</tt>	:rtype list str :return the document that this concordance index was.
<tt style='background-color:#E8E8E8;'> core.ConcordanceIndex <a href=' /text.py#L162'>offsets</a>(word)</tt>	:rtype list int :return a list of the offset positions at which the given.
<tt style='background-color:#E8E8E8;'> core.ConcordanceIndex <a href=' /text.py#L176'>print_concordance</a>(word,width,lines)</tt>	Print a concordance for word with the specified context window.
<tt style='background-color:#E8E8E8;'> core.TokenSearcher <a href=' /text.py#L220'>findall</a>(regexp)</tt>	Find instances of the regular expression in the text.
<tt style='background-color:#E8E8E8;'> core.Text <a href=' /text.py#L289'>__init__</a>(tokens,name)</tt>	Create a text object.
<tt style='background-color:#E8E8E8;'> core.Text <a href=' /text.py#L325'>concordance</a>(word,width,lines)</tt>	Print a concordance for word with the specified context window.
<tt style='background-color:#E8E8E8;'> core.Text <a href=' /text.py#L338'>collocations</a>(num,window_size)</tt>	Print collocations derived from the text ignoring stopwords.
<tt style='background-color:#E8E8E8;'> core.Text <a href=' /text.py#L363'>count</a>(word)</tt>	Count the number of times this word appears in the text.
<tt style='background-color:#E8E8E8;'> core.Text <a href=' /text.py#L369'>index</a>(word)</tt>	Find the index of the first occurrence of the word in the text.
<tt style='background-color:#E8E8E8;'> core.Text <a href=' /text.py#L379'>similar</a>(word,num)</tt>	Distributional similarity find other words which appear in the same contexts as the specified word list most similar words first.
<tt style='background-color:#E8E8E8;'> core.Text <a href=' /text.py#L410'>common_contexts</a>(words,num)</tt>	Find contexts where the specified words appear list most frequent common contexts first.
<tt style='background-color:#E8E8E8;'> core.Text <a href=' /text.py#L437'>dispersion_plot</a>(words)</tt>	Produce a plot showing the distribution of the words through the text.
<tt style='background-color:#E8E8E8;'> core.Text <a href=' /text.py#L449'>generate</a>(words)</tt>	Issues a reminder to users following the book online.
<tt style='background-color:#E8E8E8;'> core.Text <a href=' /text.py#L456'>plot</a>()</tt>	See documentation for freqdist plot().
<tt style='background-color:#E8E8E8;'> core.Text <a href=' /text.py#L463'>vocab</a>()</tt>	:seealso nltk prob freqdist.
<tt style='background-color:#E8E8E8;'> core.Text <a href=' /text.py#L472'>findall</a>(regexp)</tt>	Find instances of the regular expression in the text.
<tt style='background-color:#E8E8E8;'> core.Text <a href=' /text.py#L508'>_context</a>(tokens,i)</tt>	One left & one right token both case-normalized skip over.
<tt style='background-color:#E8E8E8;'> core.TextCollection <a href=' /text.py#L564'>tf</a>(term,text)</tt>	The frequency of the term in text.
<tt style='background-color:#E8E8E8;'> core.TextCollection <a href=' /text.py#L568'>idf</a>(term)</tt>	The number of texts in the corpus divided by the number of texts that the term appears in.
<tt style='background-color:#E8E8E8;'> core. <a href=' /jsontags.py#L24'>register_tag</a>(cls)</tt>	Decorates a class to register it's json tag.
<tt style='background-color:#E8E8E8;'> core. <a href=' /compat.py#L253'>python_2_unicode_compatible</a>(klass)</tt>	This decorator defines __unicode__ method and fixes __repr__ and __str__ methods under python 2.
<tt style='background-color:#E8E8E8;'> core. <a href=' /compat.py#L290'>unicode_repr</a>(obj)</tt>	For classes that was fixed with @python_2_unicode_compatible unicode_repr returns obj.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L152'>__new__</a>(cls,features)</tt>	Construct and return a new feature structure if this.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L202'>_keys</a>()</tt>	Return an iterable of the feature identifiers used by this featstruct.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L207'>_values</a>()</tt>	Return an iterable of the feature values directly defined by this featstruct.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L212'>_items</a>()</tt>	Return an iterable of fid fval pairs where fid is a feature identifier and fval is the corresponding feature.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L222'>equal_values</a>(other,check_reentrance)</tt>	Return true if self and other assign the same value to to every feature.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L238'>__eq__</a>(other)</tt>	Return true if self and other are both feature structures assign the same values to all features and contain the same.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L261'>__hash__</a>()</tt>	If this feature structure is frozen return its hash value otherwise raise typeerror.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L274'>_equal</a>(other,check_reentrance,visited_self,visited_other)</tt>	Return true iff self and other have equal values.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L335'>_calculate_hashvalue</a>(visited)</tt>	Return a hash value for this feature structure.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L367'>freeze</a>()</tt>	Make this feature structure and any feature structures it contains immutable.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L377'>frozen</a>()</tt>	Return true if this feature structure is immutable feature.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L386'>_freeze</a>(visited)</tt>	Make this feature structure and any feature structure it contains immutable.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L405'>copy</a>(deep)</tt>	Return a new copy of self the new copy will not be frozen.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L426'>cyclic</a>()</tt>	Return true if this feature structure contains itself.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L432'>walk</a>()</tt>	Return an iterator that generates this feature structure and each feature structure it contains.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L450'>_walk</a>(visited)</tt>	Return an iterator that generates this feature structure and each feature structure it contains.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L462'>_find_reentrances</a>(reentrances)</tt>	Return a dictionary that maps from the id of each feature structure contained in self (including self) to a.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L486'>substitute_bindings</a>(bindings)</tt>	:see nltk featstruct substitute_bindings().
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L490'>retract_bindings</a>(bindings)</tt>	:see nltk featstruct retract_bindings().
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L494'>variables</a>()</tt>	:see nltk featstruct find_variables().
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L498'>rename_variables</a>(vars,used_vars,new_vars)</tt>	:see nltk featstruct rename_variables().
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L502'>remove_variables</a>()</tt>	Return the feature structure that is obtained by deleting any feature whose value is a variable.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L519'>subsumes</a>(other)</tt>	Return true if self subsumes other i e return true.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L531'>__repr__</a>()</tt>	Display a single-line representation of this feature structure suitable for embedding in other representations.
<tt style='background-color:#E8E8E8;'> core.FeatStruct <a href=' /featstruct.py#L538'>_repr</a>(reentrances,reentrance_ids)</tt>	Return a string representation of this feature structure.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L555'>_check_frozen</a>(method,indent)</tt>	Given a method function return a new method function that first checks if self.
<tt style='background-color:#E8E8E8;'> core.FeatDict <a href=' /featstruct.py#L590'>__init__</a>(features)</tt>	Create a new feature dictionary with the specified features.
<tt style='background-color:#E8E8E8;'> core.FeatDict <a href=' /featstruct.py#L618'>__getitem__</a>(name_or_path)</tt>	If the feature with the given name or path exists return its value otherwise raise keyerror.
<tt style='background-color:#E8E8E8;'> core.FeatDict <a href=' /featstruct.py#L636'>get</a>(name_or_path,default)</tt>	If the feature with the given name or path exists return its value otherwise return default.
<tt style='background-color:#E8E8E8;'> core.FeatDict <a href=' /featstruct.py#L642'>__contains__</a>(name_or_path)</tt>	Return true if a feature with the given name or path exists.
<tt style='background-color:#E8E8E8;'> core.FeatDict <a href=' /featstruct.py#L647'>has_key</a>(name_or_path)</tt>	Return true if a feature with the given name or path exists.
<tt style='background-color:#E8E8E8;'> core.FeatDict <a href=' /featstruct.py#L651'>__delitem__</a>(name_or_path)</tt>	If the feature with the given name or path exists delete its value otherwise raise keyerror.
<tt style='background-color:#E8E8E8;'> core.FeatDict <a href=' /featstruct.py#L668'>__setitem__</a>(name_or_path,value)</tt>	Set the value for the feature with the given name or path to value.
<tt style='background-color:#E8E8E8;'> core.FeatDict <a href=' /featstruct.py#L733'>__str__</a>()</tt>	Display a multi-line representation of this feature dictionary as an fvm feature value matrix.
<tt style='background-color:#E8E8E8;'> core.FeatDict <a href=' /featstruct.py#L784'>_str</a>(reentrances,reentrance_ids)</tt>	:return a list of lines composing a string representation of this feature dictionary.
<tt style='background-color:#E8E8E8;'> core.FeatList <a href=' /featstruct.py#L896'>__init__</a>(features)</tt>	Create a new feature list with the specified features.
<tt style='background-color:#E8E8E8;'> core.FeatList <a href=' /featstruct.py#L931'>__delitem__</a>(name_or_path)</tt>	If the feature with the given name or path exists delete its value otherwise raise keyerror.
<tt style='background-color:#E8E8E8;'> core.FeatList <a href=' /featstruct.py#L948'>__setitem__</a>(name_or_path,value)</tt>	Set the value for the feature with the given name or path to value.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1029'>substitute_bindings</a>(fstruct,bindings,fs_class)</tt>	Return the feature structure that is obtained by replacing each variable bound by bindings with its binding.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1061'>retract_bindings</a>(fstruct,bindings,fs_class)</tt>	Return the feature structure that is obtained by replacing each feature structure value that is bound by bindings with the.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1095'>find_variables</a>(fstruct,fs_class)</tt>	:return the set of variables used by this feature structure.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1119'>rename_variables</a>(fstruct,vars,used_vars,new_vars)</tt>	Return the feature structure that is obtained by replacing any of this feature structure's variables that are in vars.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1211'>remove_variables</a>(fstruct,fs_class)</tt>	:rtype featstruct :return the feature structure that is obtained by deleting.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1259'>unify</a>(fstruct1,fstruct2,bindings,trace)</tt>	Unify fstruct1 with fstruct2, and return the resulting feature structure.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1364'>_destructively_unify</a>(fstruct1,fstruct2,bindings,forward)</tt>	Attempt to unify fstruct1 and fstruct2 by modifying them in-place.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1447'>_unify_feature_values</a>(fname,fval1,fval2,bindings)</tt>	Attempt to unify fval1 and and fval2, and return the resulting unified value.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1559'>_apply_forwards_to_bindings</a>(forward,bindings)</tt>	Replace any feature structure that has a forward pointer with the target of its forward pointer to preserve reentrancy.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1569'>_apply_forwards</a>(fstruct,forward,fs_class,visited)</tt>	Replace any feature structure that has a forward pointer with the target of its forward pointer to preserve reentrancy.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1595'>_resolve_aliases</a>(bindings)</tt>	Replace any bound aliased vars with their binding and replace any unbound aliased vars with their representative var.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1641'>subsumes</a>(fstruct1,fstruct2)</tt>	Return true if fstruct1 subsumes fstruct2 i e return.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1651'>conflicts</a>(fstruct1,fstruct2,trace)</tt>	Return a list of the feature paths of all features which are assigned incompatible values by fstruct1 and fstruct2.
<tt style='background-color:#E8E8E8;'> core. <a href=' /featstruct.py#L1790'>_flatten</a>(lst,cls)</tt>	Helper function -- return a copy of list with all elements of type cls spliced in rather than appended in.
<tt style='background-color:#E8E8E8;'> core.Feature <a href=' /featstruct.py#L1826'>name</a>()</tt>	The name of this feature.
<tt style='background-color:#E8E8E8;'> core.Feature <a href=' /featstruct.py#L1831'>default</a>()</tt>	Default value for this feature.
<tt style='background-color:#E8E8E8;'> core.Feature <a href=' /featstruct.py#L1836'>display</a>()</tt>	Custom display location can be prefix or slash.
<tt style='background-color:#E8E8E8;'> core.Feature <a href=' /featstruct.py#L1867'>unify_base_values</a>(fval1,fval2,bindings)</tt>	If possible return a single value if not return.
<tt style='background-color:#E8E8E8;'> core.CustomFeatureValue <a href=' /featstruct.py#L1920'>unify</a>(other)</tt>	If this base value unifies with other, then return the unified value.
<tt style='background-color:#E8E8E8;'> core.FeatStructReader <a href=' /featstruct.py#L1966'>fromstring</a>(s,fstruct)</tt>	Convert a string representation of a feature structure as displayed by repr into a featstruct.
<tt style='background-color:#E8E8E8;'> core.FeatStructReader <a href=' /featstruct.py#L2005'>read_partial</a>(s,position,reentrances,fstruct)</tt>	Helper function that reads in a feature structure.
<tt style='background-color:#E8E8E8;'> core.FeatStructReader <a href=' /featstruct.py#L2191'>_finalize</a>(s,pos,reentrances,fstruct)</tt>	Called when we see the close brace -- checks for a slash feature and adds in default values.
<tt style='background-color:#E8E8E8;'> core.FeatStructReader <a href=' /featstruct.py#L2278'>read_app_value</a>(s,position,reentrances,match)</tt>	Mainly included for backwards compat.
<tt style='background-color:#E8E8E8;'> core.FeatStructReader <a href=' /featstruct.py#L2300'>_read_seq_value</a>(s,position,reentrances,match)</tt>	Helper function used by read_tuple_value and read_set_value.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tree.py#L1530'>demo</a>(trace)</tt>	Just for testing.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L198'>_get_node</a>()</tt>	Outdated method to access the node value use the label() method instead.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L201'>_set_node</a>(value)</tt>	Outdated method to set the node value use the set_label() method instead.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L206'>label</a>()</tt>	Return the node label of the tree.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L219'>set_label</a>(label)</tt>	Set the node label of the tree.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L233'>leaves</a>()</tt>	Return the leaves of the tree.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L254'>flatten</a>()</tt>	Return a flat version of the tree with all non-root non-terminals removed.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L268'>height</a>()</tt>	Return the height of the tree.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L295'>treepositions</a>(order)</tt>	>>> t = tree fromstring("(s (np d the n dog (vp v chased (np d the n cat )))").
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L319'>subtrees</a>(filter)</tt>	Generate all the subtrees of this tree optionally restricted to trees matching the filter function.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L343'>productions</a>()</tt>	Generate the productions that correspond to the non-terminal nodes of the tree.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L366'>pos</a>()</tt>	Return a sequence of pos-tagged words extracted from the tree.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L386'>leaf_treeposition</a>(index)</tt>	:return the tree position of the index-th leaf in this tree.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L409'>treeposition_spanning_leaves</a>(start,end)</tt>	:return the tree position of the lowest descendant of this tree that dominates self.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L431'>chomsky_normal_form</a>(factor,horzMarkov,vertMarkov,childChar)</tt>	This method can modify a tree in three ways 1.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L458'>un_chomsky_normal_form</a>(expandUnary,childChar,parentChar,unaryChar)</tt>	This method modifies the tree in three ways 1.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L480'>collapse_unary</a>(collapsePOS,collapseRoot,joinChar)</tt>	Collapse subtrees with a single child ie unary productions.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L506'>convert</a>(cls,tree)</tt>	Convert a tree between different subtypes of tree cls determines.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L543'>fromstring</a>(cls,s,brackets,read_node)</tt>	Read a bracketed tree string and return the resulting tree.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L653'>_parse_error</a>(cls,s,match,expecting)</tt>	Display a friendly error message when parsing a tree string fails.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L683'>draw</a>()</tt>	Open a new window containing a graphical diagram of this tree.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L690'>pretty_print</a>(sentence,highlight,stream)</tt>	Pretty-print this tree as ascii or unicode art.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L704'>_repr_png_</a>()</tt>	Draws and outputs in png for ipython.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L740'>pprint</a>()</tt>	Print a string representation of this tree to 'stream'.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L752'>pformat</a>(margin,indent,nodesep,parens)</tt>	:return a pretty-printed string representation of this tree.
<tt style='background-color:#E8E8E8;'> core.Tree <a href=' /tree.py#L789'>pformat_latex_qtree</a>()</tt>	Returns a representation of the tree compatible with the latex qtree package.
<tt style='background-color:#E8E8E8;'> core.ImmutableTree <a href=' /tree.py#L869'>set_label</a>(value)</tt>	Set the node label this will only succeed the first time the.
<tt style='background-color:#E8E8E8;'> core.AbstractParentedTree <a href=' /tree.py#L927'>_setparent</a>(child,index,dry_run)</tt>	Update the parent pointer of child to point to self this.
<tt style='background-color:#E8E8E8;'> core.AbstractParentedTree <a href=' /tree.py#L949'>_delparent</a>(child,index)</tt>	Update the parent pointer of child to not point to self this.
<tt style='background-color:#E8E8E8;'> core.ParentedTree <a href=' /tree.py#L1149'>parent</a>()</tt>	The parent of this tree or none if it has no parent.
<tt style='background-color:#E8E8E8;'> core.ParentedTree <a href=' /tree.py#L1153'>parent_index</a>()</tt>	The index of this tree in its parent i e.
<tt style='background-color:#E8E8E8;'> core.ParentedTree <a href=' /tree.py#L1166'>left_sibling</a>()</tt>	The left sibling of this tree or none if it has none.
<tt style='background-color:#E8E8E8;'> core.ParentedTree <a href=' /tree.py#L1173'>right_sibling</a>()</tt>	The right sibling of this tree or none if it has none.
<tt style='background-color:#E8E8E8;'> core.ParentedTree <a href=' /tree.py#L1180'>root</a>()</tt>	The root of this tree i e the unique ancestor of this tree.
<tt style='background-color:#E8E8E8;'> core.ParentedTree <a href=' /tree.py#L1191'>treeposition</a>()</tt>	The tree position of this tree relative to the root of the tree.
<tt style='background-color:#E8E8E8;'> core.MultiParentedTree <a href=' /tree.py#L1270'>parents</a>()</tt>	The set of parents of this tree if this tree has no parents.
<tt style='background-color:#E8E8E8;'> core.MultiParentedTree <a href=' /tree.py#L1281'>left_siblings</a>()</tt>	A list of all left siblings of this tree in any of its parent trees.
<tt style='background-color:#E8E8E8;'> core.MultiParentedTree <a href=' /tree.py#L1295'>right_siblings</a>()</tt>	A list of all right siblings of this tree in any of its parent trees.
<tt style='background-color:#E8E8E8;'> core.MultiParentedTree <a href=' /tree.py#L1315'>roots</a>()</tt>	The set of all roots of this tree this set is formed by.
<tt style='background-color:#E8E8E8;'> core.MultiParentedTree <a href=' /tree.py#L1333'>parent_indices</a>(parent)</tt>	Return a list of the indices where this tree occurs as a child of parent.
<tt style='background-color:#E8E8E8;'> core.MultiParentedTree <a href=' /tree.py#L1347'>treepositions</a>(root)</tt>	Return a list of all tree positions that can be used to reach this multi-parented tree starting from root.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tree.py#L1488'>bracket_parse</a>(s)</tt>	Use tree read(s remove_empty_top_bracketing=true) instead.
<tt style='background-color:#E8E8E8;'> core. <a href=' /tree.py#L1494'>sinica_parse</a>(s)</tt>	Parse a sinica treebank string and return a tree trees are represented as nested brackettings.
<tt style='background-color:#E8E8E8;'> corpus. <a href=' /corpus/util.py#L132'>_make_bound_method</a>(func)</tt>	Magic for creating bound methods (used for _unload).
<tt style='background-color:#E8E8E8;'> corpus.reader.XMLCorpusReader <a href=' /corpus/reader/xmldocs.py#L56'>words</a>(fileid)</tt>	Returns all of the words and punctuation symbols in the specified file that were in text nodes -- ie tags are ignored.
<tt style='background-color:#E8E8E8;'> corpus.reader.XMLCorpusView <a href=' /corpus/reader/xmldocs.py#L123'>__init__</a>(fileid,tagspec,elt_handler)</tt>	Create a new corpus view based on a specified xml file.
<tt style='background-color:#E8E8E8;'> corpus.reader.XMLCorpusView <a href=' /corpus/reader/xmldocs.py#L187'>handle_elt</a>(elt,context)</tt>	Convert an element into an appropriate value for inclusion in the view.
<tt style='background-color:#E8E8E8;'> corpus.reader.XMLCorpusView <a href=' /corpus/reader/xmldocs.py#L242'>_read_xml_fragment</a>(stream)</tt>	Read a string from the given stream that does not contain any un-closed tags.
<tt style='background-color:#E8E8E8;'> corpus.reader.XMLCorpusView <a href=' /corpus/reader/xmldocs.py#L290'>read_block</a>(stream,tagspec,elt_handler)</tt>	Read from stream until we find at least one element that matches tagspec, and return the result of applying.
<tt style='background-color:#E8E8E8;'> corpus.reader.OpinionLexiconCorpusReader <a href=' /corpus/reader/opinion_lexicon.py#L75'>words</a>(fileids)</tt>	Return all words in the opinion lexicon note that these words are not.
<tt style='background-color:#E8E8E8;'> corpus.reader.OpinionLexiconCorpusReader <a href=' /corpus/reader/opinion_lexicon.py#L90'>positive</a>()</tt>	Return all positive words in alphabetical order.
<tt style='background-color:#E8E8E8;'> corpus.reader.OpinionLexiconCorpusReader <a href=' /corpus/reader/opinion_lexicon.py#L99'>negative</a>()</tt>	Return all negative words in alphabetical order.
<tt style='background-color:#E8E8E8;'> corpus.reader.TaggedCorpusReader <a href=' /corpus/reader/tagged.py#L40'>__init__</a>(root,fileids,sep,word_tokenizer)</tt>	Construct a new tagged corpus reader for a set of documents located at the given root directory.
<tt style='background-color:#E8E8E8;'> corpus.reader.TaggedCorpusReader <a href=' /corpus/reader/tagged.py#L63'>raw</a>(fileids)</tt>	:return the given file s as a single string.
<tt style='background-color:#E8E8E8;'> corpus.reader.TaggedCorpusReader <a href=' /corpus/reader/tagged.py#L72'>words</a>(fileids)</tt>	:return the given file s as a list of words and punctuation symbols.
<tt style='background-color:#E8E8E8;'> corpus.reader.TaggedCorpusReader <a href=' /corpus/reader/tagged.py#L86'>sents</a>(fileids)</tt>	:return the given file s as a list of sentences or utterances each encoded as a list of word.
<tt style='background-color:#E8E8E8;'> corpus.reader.TaggedCorpusReader <a href=' /corpus/reader/tagged.py#L101'>paras</a>(fileids)</tt>	:return the given file s as a list of paragraphs each encoded as a list of sentences which are.
<tt style='background-color:#E8E8E8;'> corpus.reader.TaggedCorpusReader <a href=' /corpus/reader/tagged.py#L116'>tagged_words</a>(fileids,tagset)</tt>	:return the given file s as a list of tagged words and punctuation symbols encoded as tuples.
<tt style='background-color:#E8E8E8;'> corpus.reader.TaggedCorpusReader <a href=' /corpus/reader/tagged.py#L135'>tagged_sents</a>(fileids,tagset)</tt>	:return the given file s as a list of sentences each encoded as a list of word tag tuples.
<tt style='background-color:#E8E8E8;'> corpus.reader.TaggedCorpusReader <a href=' /corpus/reader/tagged.py#L154'>tagged_paras</a>(fileids,tagset)</tt>	:return the given file s as a list of paragraphs each encoded as a list of sentences which are.
<tt style='background-color:#E8E8E8;'> corpus.reader.CategorizedTaggedCorpusReader <a href=' /corpus/reader/tagged.py#L179'>__init__</a>()</tt>	Initialize the corpus reader categorization arguments.
<tt style='background-color:#E8E8E8;'> corpus.reader.TaggedCorpusView <a href=' /corpus/reader/tagged.py#L239'>read_block</a>(stream)</tt>	Reads one paragraph at a time.
<tt style='background-color:#E8E8E8;'> corpus.reader.TwitterCorpusReader <a href=' /corpus/reader/twitter.py#L61'>__init__</a>(root,fileids,word_tokenizer,encoding)</tt>	:param root the root directory for this corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.TwitterCorpusReader <a href=' /corpus/reader/twitter.py#L87'>docs</a>(fileids)</tt>	Returns the full tweet objects as specified by twitter documentation on tweets.
<tt style='background-color:#E8E8E8;'> corpus.reader.TwitterCorpusReader <a href=' /corpus/reader/twitter.py#L101'>strings</a>(fileids)</tt>	Returns only the text content of tweets in the file s :return the given file s as a list of tweets.
<tt style='background-color:#E8E8E8;'> corpus.reader.TwitterCorpusReader <a href=' /corpus/reader/twitter.py#L121'>tokenized</a>(fileids)</tt>	:return the given file s as a list of the text content of tweets as as a list of words screenanames hashtags urls and punctuation symbols.
<tt style='background-color:#E8E8E8;'> corpus.reader.TwitterCorpusReader <a href=' /corpus/reader/twitter.py#L133'>raw</a>(fileids)</tt>	Return the corpora in their raw form.
<tt style='background-color:#E8E8E8;'> corpus.reader.TwitterCorpusReader <a href=' /corpus/reader/twitter.py#L144'>_read_tweets</a>(stream)</tt>	Assumes that each line in stream is a json-serialised object.
<tt style='background-color:#E8E8E8;'> corpus.reader.StreamBackedCorpusView <a href=' /corpus/reader/util.py#L126'>__init__</a>(fileid,block_reader,startpos,encoding)</tt>	Create a new corpus view based on the file fileid, and read with block_reader.
<tt style='background-color:#E8E8E8;'> corpus.reader.StreamBackedCorpusView <a href=' /corpus/reader/util.py#L191'>read_block</a>(stream)</tt>	Read a block from the input stream.
<tt style='background-color:#E8E8E8;'> corpus.reader.StreamBackedCorpusView <a href=' /corpus/reader/util.py#L202'>_open</a>()</tt>	Open the file stream associated with this corpus view this.
<tt style='background-color:#E8E8E8;'> corpus.reader.StreamBackedCorpusView <a href=' /corpus/reader/util.py#L216'>close</a>()</tt>	Close the file stream associated with this corpus view this.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/util.py#L412'>concat</a>(docs)</tt>	Concatenate together the contents of multiple documents from a single corpus using an appropriate concatenation function.
<tt style='background-color:#E8E8E8;'> corpus.reader.PickleCorpusView <a href=' /corpus/reader/util.py#L486'>__init__</a>(fileid,delete_on_gc)</tt>	Create a new corpus view that reads the pickle corpus fileid.
<tt style='background-color:#E8E8E8;'> corpus.reader.PickleCorpusView <a href=' /corpus/reader/util.py#L504'>__del__</a>()</tt>	If delete_on_gc was set to true when this picklecorpusview was created then delete the corpus view's.
<tt style='background-color:#E8E8E8;'> corpus.reader.PickleCorpusView <a href=' /corpus/reader/util.py#L524'>cache_to_tempfile</a>(cls,sequence,delete_on_gc)</tt>	Write the given sequence to a temporary file as a pickle corpus and then return a picklecorpusview view for that.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/util.py#L600'>read_regexp_block</a>(stream,start_re,end_re)</tt>	Read a sequence of tokens from a stream where tokens begin with lines that match start_re.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/util.py#L632'>read_sexpr_block</a>(stream,block_size,comment_char)</tt>	Read a sequence of s-expressions from the stream and leave the stream's file position at the end the last complete s-expression.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/util.py#L697'>_sub_space</a>(m)</tt>	Helper function given a regexp match return a string of spaces that's the same length as the matched string.
<tt style='background-color:#E8E8E8;'> corpus.reader.BracketParseCorpusReader <a href=' /corpus/reader/bracket_parse.py#L33'>__init__</a>(root,fileids,comment_char,detect_blocks)</tt>	:param root the root directory for this corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.CategorizedBracketParseCorpusReader <a href=' /corpus/reader/bracket_parse.py#L118'>__init__</a>()</tt>	Initialize the corpus reader categorization arguments.
<tt style='background-color:#E8E8E8;'> corpus.reader.AlpinoCorpusReader <a href=' /corpus/reader/bracket_parse.py#L184'>_normalize</a>(t,ordered)</tt>	Normalize the xml sentence element in t.
<tt style='background-color:#E8E8E8;'> corpus.reader.AlpinoCorpusReader <a href=' /corpus/reader/bracket_parse.py#L223'>_word</a>(t)</tt>	Return a correctly ordered list if words.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L73'>lemmas</a>(classid)</tt>	Return a list of all verb lemmas that appear in any class or in the classid if specified.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L86'>wordnetids</a>(classid)</tt>	Return a list of all wordnet identifiers that appear in any class or in classid if specified.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L99'>classids</a>(lemma,wordnetid,fileid,classid)</tt>	Return a list of the verbnet class identifiers if a file.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L129'>vnclass</a>(fileid_or_classid)</tt>	Return an elementtree containing the xml for the specified verbnet class.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L161'>fileids</a>(vnclass_ids)</tt>	Return a list of fileids that make up this corpus if.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L180'>_index</a>()</tt>	Initialize the indexes _lemma_to_class, _wordnet_to_class, and _class_to_fileid by scanning.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L191'>_index_helper</a>(xmltree,fileid)</tt>	Helper for _index().
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L203'>_quick_index</a>()</tt>	Initialize the indexes _lemma_to_class, _wordnet_to_class, and _class_to_fileid by scanning.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L236'>longid</a>(shortid)</tt>	Given a short verbnet class identifier (eg '37 10'), map it.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L249'>shortid</a>(longid)</tt>	Given a long verbnet class identifier (eg 'confess-37 10'),.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L265'>pprint</a>(vnclass)</tt>	Return a string containing a pretty-printed representation of the given verbnet class.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L286'>pprint_subclasses</a>(vnclass,indent)</tt>	Return a string containing a pretty-printed representation of the given verbnet class's subclasses.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L304'>pprint_members</a>(vnclass,indent)</tt>	Return a string containing a pretty-printed representation of the given verbnet class's member verbs.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L322'>pprint_themroles</a>(vnclass,indent)</tt>	Return a string containing a pretty-printed representation of the given verbnet class's thematic roles.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L344'>pprint_frame</a>(vnframe,indent)</tt>	Return a string containing a pretty-printed representation of the given verbnet frame.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L358'>pprint_description</a>(vnframe,indent)</tt>	Return a string containing a pretty-printed representation of the given verbnet frame description.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L372'>pprint_syntax</a>(vnframe,indent)</tt>	Return a string containing a pretty-printed representation of the given verbnet frame syntax.
<tt style='background-color:#E8E8E8;'> corpus.reader.VerbnetCorpusReader <a href=' /corpus/reader/verbnet.py#L395'>pprint_semantics</a>(vnframe,indent)</tt>	Return a string containing a pretty-printed representation of the given verbnet frame semantics.
<tt style='background-color:#E8E8E8;'> corpus.reader.CategorizedSentencesCorpusReader <a href=' /corpus/reader/categorized_sents.py#L75'>__init__</a>(root,fileids,word_tokenizer,sent_tokenizer)</tt>	:param root the root directory for the corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.CategorizedSentencesCorpusReader <a href=' /corpus/reader/categorized_sents.py#L100'>raw</a>(fileids,categories)</tt>	:param fileids a list or regexp specifying the fileids that have to be returned as a raw string.
<tt style='background-color:#E8E8E8;'> corpus.reader.CategorizedSentencesCorpusReader <a href=' /corpus/reader/categorized_sents.py#L116'>readme</a>()</tt>	Return the contents of the corpus readme txt file.
<tt style='background-color:#E8E8E8;'> corpus.reader.CategorizedSentencesCorpusReader <a href=' /corpus/reader/categorized_sents.py#L122'>sents</a>(fileids,categories)</tt>	Return all sentences in the corpus or in the specified file s.
<tt style='background-color:#E8E8E8;'> corpus.reader.CategorizedSentencesCorpusReader <a href=' /corpus/reader/categorized_sents.py#L142'>words</a>(fileids,categories)</tt>	Return all words and punctuation symbols in the corpus or in the specified file s.
<tt style='background-color:#E8E8E8;'> corpus.reader.SensevalCorpusReader <a href=' /corpus/reader/senseval.py#L56'>raw</a>(fileids)</tt>	:return the text contents of the given fileids as a single string.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/senseval.py#L169'>_fixXML</a>(text)</tt>	Fix the various issues with senseval pseudo-xml.
<tt style='background-color:#E8E8E8;'> corpus.reader.CrubadanCorpusReader <a href=' /corpus/reader/crubadan.py#L44'>lang_freq</a>(lang)</tt>	Return n-gram freqdist for a specific language.
<tt style='background-color:#E8E8E8;'> corpus.reader.CrubadanCorpusReader <a href=' /corpus/reader/crubadan.py#L53'>langs</a>()</tt>	Return a list of supported languages as iso 639-3 codes.
<tt style='background-color:#E8E8E8;'> corpus.reader.CrubadanCorpusReader <a href=' /corpus/reader/crubadan.py#L57'>iso_to_crubadan</a>(lang)</tt>	Return internal crubadan code based on iso 639-3 code.
<tt style='background-color:#E8E8E8;'> corpus.reader.CrubadanCorpusReader <a href=' /corpus/reader/crubadan.py#L63'>crubadan_to_iso</a>(lang)</tt>	Return iso 639-3 code given internal crubadan code.
<tt style='background-color:#E8E8E8;'> corpus.reader.CrubadanCorpusReader <a href=' /corpus/reader/crubadan.py#L69'>_load_lang_mapping_data</a>()</tt>	Load language mappings between codes and description from table txt.
<tt style='background-color:#E8E8E8;'> corpus.reader.CrubadanCorpusReader <a href=' /corpus/reader/crubadan.py#L85'>_load_lang_ngrams</a>(lang)</tt>	Load single n-gram language file given the iso 639-3 language code.
<tt style='background-color:#E8E8E8;'> corpus.reader.StringCategoryCorpusReader <a href=' /corpus/reader/string_category.py#L31'>__init__</a>(root,fileids,delimiter,encoding)</tt>	:param root the root directory for this corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.StringCategoryCorpusReader <a href=' /corpus/reader/string_category.py#L47'>raw</a>(fileids)</tt>	:return the text contents of the given fileids as a single string.
<tt style='background-color:#E8E8E8;'> corpus.reader.SemcorCorpusReader <a href=' /corpus/reader/semcor.py#L30'>words</a>(fileids)</tt>	:return the given file s as a list of words and punctuation symbols.
<tt style='background-color:#E8E8E8;'> corpus.reader.SemcorCorpusReader <a href=' /corpus/reader/semcor.py#L37'>chunks</a>(fileids)</tt>	:return the given file s as a list of chunks each of which is a list of words and punctuation symbols.
<tt style='background-color:#E8E8E8;'> corpus.reader.SemcorCorpusReader <a href=' /corpus/reader/semcor.py#L46'>tagged_chunks</a>(fileids,tag)</tt>	:return the given file s as a list of tagged chunks represented in tree form.
<tt style='background-color:#E8E8E8;'> corpus.reader.SemcorCorpusReader <a href=' /corpus/reader/semcor.py#L61'>sents</a>(fileids)</tt>	:return the given file s as a list of sentences each encoded as a list of word strings.
<tt style='background-color:#E8E8E8;'> corpus.reader.SemcorCorpusReader <a href=' /corpus/reader/semcor.py#L69'>chunk_sents</a>(fileids)</tt>	:return the given file s as a list of sentences each encoded as a list of chunks.
<tt style='background-color:#E8E8E8;'> corpus.reader.SemcorCorpusReader <a href=' /corpus/reader/semcor.py#L77'>tagged_sents</a>(fileids,tag)</tt>	:return the given file s as a list of sentences each sentence.
<tt style='background-color:#E8E8E8;'> corpus.reader.SemcorCorpusReader <a href=' /corpus/reader/semcor.py#L102'>_words</a>(fileid,unit,bracket_sent,pos_tag)</tt>	Helper used to implement the view methods -- returns a list of tokens segmented words chunks or sentences.
<tt style='background-color:#E8E8E8;'> corpus.reader.SemcorWordView <a href=' /corpus/reader/semcor.py#L218'>__init__</a>(fileid,unit,bracket_sent,pos_tag)</tt>	:param fileid the name of the underlying file.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L33'>mimic_wrap</a>(lines,wrap_at)</tt>	Wrap the first of 'lines' with textwrap and the remaining lines at exactly the same positions as the first.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L55'>_pretty_longstring</a>(defstr,prefix,wrap_at)</tt>	Helper function for pretty-printing a long string.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L71'>_pretty_any</a>(obj)</tt>	Helper function for pretty-printing any attrdict object.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L93'>_pretty_semtype</a>(st)</tt>	Helper function for pretty-printing a semantic type.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L123'>_pretty_frame_relation_type</a>(freltyp)</tt>	Helper function for pretty-printing a frame relation type.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L136'>_pretty_frame_relation</a>(frel)</tt>	Helper function for pretty-printing a frame relation.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L149'>_pretty_fe_relation</a>(ferel)</tt>	Helper function for pretty-printing an fe relation.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L162'>_pretty_lu</a>(lu)</tt>	Helper function for pretty-printing a lexical unit.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L206'>_pretty_exemplars</a>(exemplars,lu)</tt>	Helper function for pretty-printing a list of exemplar sentences for a lexical unit.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L223'>_pretty_fulltext_sentences</a>(sents)</tt>	Helper function for pretty-printing a list of annotated sentences for a full-text document.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L242'>_pretty_fulltext_sentence</a>(sent)</tt>	Helper function for pretty-printing an annotated sentence from a full-text document.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L261'>_pretty_pos</a>(aset)</tt>	Helper function for pretty-printing a sentence with its pos tags.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L301'>_pretty_annotation</a>(sent,aset_level)</tt>	Helper function for pretty-printing an exemplar sentence for a lexical unit.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L387'>_annotation_ascii</a>(sent)</tt>	Given a sentence or fe annotation set construct the width-limited string showing an ascii visualization of the sentence's annotations calling either.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L402'>_annotation_ascii_frames</a>(sent)</tt>	Ascii string rendering of the sentence along with its targets and frame names.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L485'>_annotation_ascii_FE_layer</a>(overt,ni,feAbbrevs)</tt>	Helper for _annotation_ascii_fes().
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L510'>_annotation_ascii_FEs</a>(sent)</tt>	Ascii string rendering of the sentence along with a single target and its fes.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L564'>_pretty_fe</a>(fe)</tt>	Helper function for pretty-printing a frame element.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/framenet.py#L605'>_pretty_frame</a>(frame)</tt>	Helper function for pretty-printing a frame.
<tt style='background-color:#E8E8E8;'> corpus.reader.Future <a href=' /corpus/reader/framenet.py#L781'>__init__</a>(loader)</tt>	:param loader when called with no arguments returns the value to be stored.
<tt style='background-color:#E8E8E8;'> corpus.reader.PrettyList <a href=' /corpus/reader/framenet.py#L844'>__repr__</a>()</tt>	Return a string representation for this corpus view that is similar to a list's representation but if it would be more.
<tt style='background-color:#E8E8E8;'> corpus.reader.PrettyLazyMap <a href=' /corpus/reader/framenet.py#L867'>__repr__</a>()</tt>	Return a string representation for this corpus view that is similar to a list's representation but if it would be more.
<tt style='background-color:#E8E8E8;'> corpus.reader.PrettyLazyIteratorList <a href=' /corpus/reader/framenet.py#L890'>__repr__</a>()</tt>	Return a string representation for this corpus view that is similar to a list's representation but if it would be more.
<tt style='background-color:#E8E8E8;'> corpus.reader.PrettyLazyConcatenation <a href=' /corpus/reader/framenet.py#L913'>__repr__</a>()</tt>	Return a string representation for this corpus view that is similar to a list's representation but if it would be more.
<tt style='background-color:#E8E8E8;'> corpus.reader.PrettyLazyConcatenation <a href=' /corpus/reader/framenet.py#L929'>__add__</a>(other)</tt>	Return a list concatenating self with other.
<tt style='background-color:#E8E8E8;'> corpus.reader.PrettyLazyConcatenation <a href=' /corpus/reader/framenet.py#L933'>__radd__</a>(other)</tt>	Return a list concatenating other with self.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L960'>warnings</a>(v)</tt>	Enable or disable warnings of data integrity issues as they are encountered.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L994'>help</a>(attrname)</tt>	Display help information summarizing the main methods.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1136'>readme</a>()</tt>	Return the contents of the corpus readme txt or readme file.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1145'>buildindexes</a>()</tt>	Build the internal indexes to make look-ups faster.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1158'>doc</a>(fn_docid)</tt>	Returns the annotated document whose id number is fn_docid.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1226'>frame_by_id</a>(fn_fid,ignorekeys)</tt>	Get the details for the specified frame using the frame's id number.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1268'>frame_by_name</a>(fn_fname,ignorekeys,check_cache)</tt>	Get the details for the specified frame using the frame's name.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1333'>frame</a>(fn_fid_or_fname,ignorekeys)</tt>	Get the details for the specified frame using the frame's name or id number.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1409'>frames_by_lemma</a>(pat)</tt>	Returns a list of all frames that contain lus in which the name attribute of the lu matchs the given regular expression.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1431'>lu_basic</a>(fn_luid)</tt>	Returns basic information about the lu whose id is fn_luid.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1464'>lu</a>(fn_luid,ignorekeys,luName,frameID)</tt>	Access a lexical unit by its id luname frameid and framename are used.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1617'>_lu_file</a>(lu,ignorekeys)</tt>	Augment the lu information that was loaded from the frame file with additional information from the lu file.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1649'>_loadsemtypes</a>()</tt>	Create the semantic types index.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1682'>propagate_semtypes</a>()</tt>	Apply inference rules to distribute semtypes over relations between fes.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1732'>semtype</a>(key)</tt>	>>> from nltk corpus import framenet as fn.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1776'>frames</a>(name)</tt>	Obtain details for a specific frame.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1848'>frame_ids_and_names</a>(name)</tt>	Uses the frame index which is much faster than looking up each frame definition if only the names and ids are needed.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1857'>fes</a>(name,frame)</tt>	Lists frame element objects if 'name' is provided this is treated as.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L1904'>lus</a>(name,frame)</tt>	Obtain details for lexical units.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2037'>lu_ids_and_names</a>(name)</tt>	Uses the lu index which is much faster than looking up each lu definition if only the names and ids are needed.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2048'>docs_metadata</a>(name)</tt>	Return an index of the annotated documents in framenet.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2093'>docs</a>(name)</tt>	Return a list of the annotated full-text documents in framenet optionally filtered by a regex to be matched against the document name.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2100'>sents</a>(exemplars,full_text)</tt>	Annotated sentences matching the specified criteria.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2112'>annotations</a>(luNamePattern,exemplars,full_text)</tt>	Frame annotation sets matching the specified criteria.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2137'>exemplars</a>(luNamePattern,frame,fe,fe2)</tt>	Lexicographic exemplar sentences optionally filtered by lu name and/or 1-2 fes that are realized overtly.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2218'>_exemplar_of_fes</a>(ex,fes)</tt>	Given an exemplar sentence and a set of fe names return the subset of fe names that are realized overtly in the sentence on the fe fe2 or fe3 layer.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2232'>ft_sents</a>(docNamePattern)</tt>	Full-text annotation sentences optionally filtered by document name.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2239'>frame_relation_types</a>()</tt>	Obtain a list of frame relation types.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2264'>frame_relations</a>(frame,frame2,type)</tt>	:param frame optional frame object name or id only relations involving.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2347'>fe_relations</a>()</tt>	Obtain a list of frame element relations.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2380'>semtypes</a>()</tt>	Obtain a list of semantic types.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2398'>_load_xml_attributes</a>(d,elt)</tt>	Extracts a subset of the attributes from the given element and returns them in a dictionary.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2438'>_strip_tags</a>(data)</tt>	Gets rid of all tags and newline characters from the given input.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2481'>_handle_elt</a>(elt,tagspec)</tt>	Extracts and returns the attributes of the given element.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2485'>_handle_fulltextindex_elt</a>(elt,tagspec)</tt>	Extracts corpus/document info from the fulltextindex xml file.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2516'>_handle_frame_elt</a>(elt,ignorekeys)</tt>	Load the info for a frame from a frame xml file.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2575'>_handle_fecoreset_elt</a>(elt)</tt>	Load fe coreset info from xml.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2584'>_handle_framerelationtype_elt</a>(elt)</tt>	Load frame-relation element and its child fe-relation elements from frrelation xml.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2600'>_handle_framerelation_elt</a>(elt)</tt>	Load frame-relation element and its child fe-relation elements from frrelation xml.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2616'>_handle_fulltextannotation_elt</a>(elt)</tt>	Load full annotation info for a document from its xml file.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2635'>_handle_fulltext_sentence_elt</a>(elt)</tt>	Load information from the given 'sentence' element each.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2673'>_handle_fulltextannotationset_elt</a>(elt,is_pos)</tt>	Load information from the given 'annotationset' element each.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2685'>_handle_fulltextlayer_elt</a>(elt)</tt>	Load information from the given 'layer' element each.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2699'>_handle_framelexunit_elt</a>(elt)</tt>	Load the lexical unit info from an xml element in a frame's xml file.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2734'>_handle_lexunit_elt</a>(elt,ignorekeys)</tt>	Load full info for a lexical unit from its xml file.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2771'>_handle_lusubcorpus_elt</a>(elt)</tt>	Load a subcorpus of a lexical unit from the given xml.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2789'>_handle_lusentence_elt</a>(elt)</tt>	Load a sentence from a subcorpus of an lu from xml.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2814'>_handle_luannotationset_elt</a>(elt,is_pos)</tt>	Load an annotation set from a sentence in an subcorpus of an lu.
<tt style='background-color:#E8E8E8;'> corpus.reader.FramenetCorpusReader <a href=' /corpus/reader/framenet.py#L2889'>_handle_lulayer_elt</a>(elt)</tt>	Load a layer from an annotation set.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/rte.py#L45'>norm</a>(value_string)</tt>	Normalize the string value in an rte pair's value or entailment attribute as an integer 1 0.
<tt style='background-color:#E8E8E8;'> corpus.reader.RTEPair <a href=' /corpus/reader/rte.py#L70'>__init__</a>(pair,challenge,id,text)</tt>	:param challenge version of the rte challenge (i e rte1 rte2 or rte3).
<tt style='background-color:#E8E8E8;'> corpus.reader.RTECorpusReader <a href=' /corpus/reader/rte.py#L117'>_read_etree</a>(doc)</tt>	Map the xml input into an rtepair.
<tt style='background-color:#E8E8E8;'> corpus.reader.RTECorpusReader <a href=' /corpus/reader/rte.py#L135'>pairs</a>(fileids)</tt>	Build a list of rtepairs from a rte corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.Lemma <a href=' /corpus/reader/wordnet.py#L307'>count</a>()</tt>	Return the frequency count for this lemma.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L430'>lemma_names</a>(lang)</tt>	Return all the lemma_names associated with the synset.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L443'>lemmas</a>(lang)</tt>	Return all the lemma objects associated with the synset.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L466'>root_hypernyms</a>()</tt>	Get the topmost hypernyms of this synset in wordnet.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L492'>max_depth</a>()</tt>	:return the length of the longest hypernym path from this synset to the root.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L506'>min_depth</a>()</tt>	:return the length of the shortest hypernym path from this synset to the root.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L520'>closure</a>(rel,depth)</tt>	Return the transitive closure of source under the rel relationship breadth-first.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L545'>hypernym_paths</a>()</tt>	Get the path s from this synset to the root where each path is a list of the synset nodes traversed on the way to the root.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L565'>common_hypernyms</a>(other)</tt>	Find all synsets that are hypernyms of this synset and the other synset.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L588'>lowest_common_hypernyms</a>(other,simulate_root,use_min_depth)</tt>	Get a list of lowest synset s that both synsets have as a hypernym.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L653'>hypernym_distances</a>(distance,simulate_root)</tt>	Get the path s from this synset to the root counting the distance of each node from the initial node on the way.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L702'>shortest_path_distance</a>(other,simulate_root)</tt>	Returns the distance of the shortest path linking the two synsets if one exists.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L734'>tree</a>(rel,depth,cut_mark)</tt>	>>> from nltk corpus import wordnet as wn.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L772'>path_similarity</a>(other,verbose,simulate_root)</tt>	Path distance similarity return a score denoting how similar two word senses are based on the.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L807'>lch_similarity</a>(other,verbose,simulate_root)</tt>	Leacock chodorow similarity return a score denoting how similar two word senses are based on the.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L859'>wup_similarity</a>(other,verbose,simulate_root)</tt>	Wu-palmer similarity return a score denoting how similar two word senses are based on the.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L939'>res_similarity</a>(other,ic,verbose)</tt>	Resnik similarity return a score denoting how similar two word senses are based on the.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L959'>jcn_similarity</a>(other,ic,verbose)</tt>	Jiang-conrath similarity return a score denoting how similar two word senses are based on the.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L993'>lin_similarity</a>(other,ic,verbose)</tt>	Lin similarity return a score denoting how similar two word senses are based on the.
<tt style='background-color:#E8E8E8;'> corpus.reader.Synset <a href=' /corpus/reader/wordnet.py#L1013'>_iter_hypernym_lists</a>()</tt>	:return an iterator over synset objects that are either proper hypernyms or instance of hypernyms of the synset.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1074'>__init__</a>(root,omw_reader)</tt>	Construct a new wordnet corpus reader with the given root directory.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1121'>of2ss</a>(of)</tt>	Take an id and return the synsets.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1125'>ss2of</a>(ss)</tt>	Return the id of the synset.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1129'>_load_lang_data</a>(lang)</tt>	Load the wordnet data of the requested language from the file to.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1143'>langs</a>()</tt>	Return a list of languages supported by multilingual wordnet.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1214'>_compute_max_depth</a>(pos,simulate_root)</tt>	Compute the max depth for the given part of speech this is.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1242'>lemma</a>(name,lang)</tt>	Return lemma object that matches the name.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1315'>_data_file</a>(pos)</tt>	Return an open file pointer for the data file for the given part of speech.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1340'>_synset_from_pos_and_offset</a>()</tt>	Hack to help people like the readers of http //stackoverflow.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1476'>synsets</a>(lemma,pos,lang,check_exceptions)</tt>	Load all synsets with a given lemma and part of speech tag.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1504'>lemmas</a>(lemma,pos,lang)</tt>	Return all lemma objects with a name matching the specified lemma name and part of speech tag.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1528'>all_lemma_names</a>(pos,lang)</tt>	Return all lemma names for all synsets for the given part of speech tag and language or languages.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1553'>all_synsets</a>(pos)</tt>	Iterate over all synsets with a given part of speech tag.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1611'>words</a>(lang)</tt>	Return lemmas of the given language as list of words.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1615'>license</a>(lang)</tt>	Return the contents of license for omw.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1632'>readme</a>(lang)</tt>	Return the contents of readme for omw.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1647'>citation</a>(lang)</tt>	Return the contents of citation bib file for omw.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1665'>lemma_count</a>(lemma)</tt>	Return the frequency count for this lemma.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1714'>morphy</a>(form,pos,check_exceptions)</tt>	Find a possible base form for the given form with the given part of speech by checking wordnet's list of exceptional.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1814'>ic</a>(corpus,weight_senses_equally,smoothing)</tt>	Creates an information content lookup dictionary from a corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetCorpusReader <a href=' /corpus/reader/wordnet.py#L1868'>custom_lemmas</a>(tab_file,lang)</tt>	Reads a custom tab file containing mappings of lemmas in the given language to princeton wordnet 3.
<tt style='background-color:#E8E8E8;'> corpus.reader.WordNetICCorpusReader <a href=' /corpus/reader/wordnet.py#L1913'>ic</a>(icfile)</tt>	Load an information content file from the wordnet_ic corpus and return a dictionary.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/wordnet.py#L1984'>_lcs_ic</a>(synset1,synset2,ic,verbose)</tt>	Get the information content of the least common subsumer that has the highest information content value.
<tt style='background-color:#E8E8E8;'> corpus.reader.LinThesaurusCorpusReader <a href=' /corpus/reader/lin.py#L23'>__defaultdict_factory</a>()</tt>	Factory for creating defaultdict of defaultdict dict s.
<tt style='background-color:#E8E8E8;'> corpus.reader.LinThesaurusCorpusReader <a href=' /corpus/reader/lin.py#L28'>__init__</a>(root,badscore)</tt>	Initialize the thesaurus.
<tt style='background-color:#E8E8E8;'> corpus.reader.LinThesaurusCorpusReader <a href=' /corpus/reader/lin.py#L60'>similarity</a>(ngram1,ngram2,fileid)</tt>	Returns the similarity score for two ngrams.
<tt style='background-color:#E8E8E8;'> corpus.reader.LinThesaurusCorpusReader <a href=' /corpus/reader/lin.py#L86'>scored_synonyms</a>(ngram,fileid)</tt>	Returns a list of scored synonyms tuples of synonyms and scores for the current ngram.
<tt style='background-color:#E8E8E8;'> corpus.reader.LinThesaurusCorpusReader <a href=' /corpus/reader/lin.py#L103'>synonyms</a>(ngram,fileid)</tt>	Returns a list of synonyms for the current ngram.
<tt style='background-color:#E8E8E8;'> corpus.reader.LinThesaurusCorpusReader <a href=' /corpus/reader/lin.py#L119'>__contains__</a>(ngram)</tt>	Determines whether or not the given ngram is in the thesaurus.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/nkjp.py#L19'>_parse_args</a>(fun)</tt>	Wraps function arguments if fileids not specified then function set nkjpcorpusreader paths.
<tt style='background-color:#E8E8E8;'> corpus.reader.NKJPCorpusReader <a href=' /corpus/reader/nkjp.py#L39'>__init__</a>(root,fileids)</tt>	Corpus reader designed to work with national corpus of polish.
<tt style='background-color:#E8E8E8;'> corpus.reader.NKJPCorpusReader <a href=' /corpus/reader/nkjp.py#L66'>fileids</a>()</tt>	Returns a list of file identifiers for the fileids that make up this corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.NKJPCorpusReader <a href=' /corpus/reader/nkjp.py#L73'>_view</a>(filename,tags)</tt>	Returns a view specialised for use with particular corpus file.
<tt style='background-color:#E8E8E8;'> corpus.reader.NKJPCorpusReader <a href=' /corpus/reader/nkjp.py#L90'>add_root</a>(fileid)</tt>	Add root if necessary to specified fileid.
<tt style='background-color:#E8E8E8;'> corpus.reader.NKJPCorpusReader <a href=' /corpus/reader/nkjp.py#L98'>header</a>(fileids)</tt>	Returns header s of specified fileids.
<tt style='background-color:#E8E8E8;'> corpus.reader.NKJPCorpusReader <a href=' /corpus/reader/nkjp.py#L107'>sents</a>(fileids)</tt>	Returns sentences in specified fileids.
<tt style='background-color:#E8E8E8;'> corpus.reader.NKJPCorpusReader <a href=' /corpus/reader/nkjp.py#L116'>words</a>(fileids)</tt>	Returns words in specified fileids.
<tt style='background-color:#E8E8E8;'> corpus.reader.NKJPCorpusReader <a href=' /corpus/reader/nkjp.py#L126'>tagged_words</a>(fileids)</tt>	Call with specified tags as a list e g tags=['subst', 'comp'].
<tt style='background-color:#E8E8E8;'> corpus.reader.NKJPCorpusReader <a href=' /corpus/reader/nkjp.py#L137'>raw</a>(fileids)</tt>	Returns words in specified fileids.
<tt style='background-color:#E8E8E8;'> corpus.reader.NKJPCorpus_Header_View <a href=' /corpus/reader/nkjp.py#L149'>__init__</a>(filename)</tt>	Header_mode a stream backed corpus view specialized for use with.
<tt style='background-color:#E8E8E8;'> corpus.reader.NKJPCorpus_Text_View <a href=' /corpus/reader/nkjp.py#L347'>read_block</a>(stream,tagspec,elt_handler)</tt>	Returns text as a list of sentences.
<tt style='background-color:#E8E8E8;'> corpus.reader.CorpusReader <a href=' /corpus/reader/api.py#L46'>__init__</a>(root,fileids,encoding,tagset)</tt>	:type root pathpointer or str.
<tt style='background-color:#E8E8E8;'> corpus.reader.CorpusReader <a href=' /corpus/reader/api.py#L124'>ensure_loaded</a>()</tt>	Load this corpus if it has not already been loaded this is.
<tt style='background-color:#E8E8E8;'> corpus.reader.CorpusReader <a href=' /corpus/reader/api.py#L133'>readme</a>()</tt>	Return the contents of the corpus readme file if it exists.
<tt style='background-color:#E8E8E8;'> corpus.reader.CorpusReader <a href=' /corpus/reader/api.py#L139'>license</a>()</tt>	Return the contents of the corpus license file if it exists.
<tt style='background-color:#E8E8E8;'> corpus.reader.CorpusReader <a href=' /corpus/reader/api.py#L145'>citation</a>()</tt>	Return the contents of the corpus citation bib file if it exists.
<tt style='background-color:#E8E8E8;'> corpus.reader.CorpusReader <a href=' /corpus/reader/api.py#L151'>fileids</a>()</tt>	Return a list of file identifiers for the fileids that make up this corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.CorpusReader <a href=' /corpus/reader/api.py#L158'>abspath</a>(fileid)</tt>	Return the absolute path for the given file.
<tt style='background-color:#E8E8E8;'> corpus.reader.CorpusReader <a href=' /corpus/reader/api.py#L169'>abspaths</a>(fileids,include_encoding,include_fileid)</tt>	Return a list of the absolute paths for all fileids in this corpus or for the given list of fileids if specified.
<tt style='background-color:#E8E8E8;'> corpus.reader.CorpusReader <a href=' /corpus/reader/api.py#L204'>open</a>(file)</tt>	Return an open stream that can be used to read the given file.
<tt style='background-color:#E8E8E8;'> corpus.reader.CorpusReader <a href=' /corpus/reader/api.py#L216'>encoding</a>(file)</tt>	Return the unicode encoding for the given corpus file if known.
<tt style='background-color:#E8E8E8;'> corpus.reader.CategorizedCorpusReader <a href=' /corpus/reader/api.py#L256'>__init__</a>(kwargs)</tt>	Initialize this mapping based on keyword arguments as follows.
<tt style='background-color:#E8E8E8;'> corpus.reader.CategorizedCorpusReader <a href=' /corpus/reader/api.py#L335'>categories</a>(fileids)</tt>	Return a list of the categories that are defined for this corpus or for the file s if it is given.
<tt style='background-color:#E8E8E8;'> corpus.reader.CategorizedCorpusReader <a href=' /corpus/reader/api.py#L348'>fileids</a>(categories)</tt>	Return a list of file identifiers for the files that make up this corpus or that make up the given category s if specified.
<tt style='background-color:#E8E8E8;'> corpus.reader.TimitCorpusReader <a href=' /corpus/reader/timit.py#L161'>__init__</a>(root,encoding)</tt>	Construct a new timit corpus reader in the given directory.
<tt style='background-color:#E8E8E8;'> corpus.reader.TimitCorpusReader <a href=' /corpus/reader/timit.py#L183'>fileids</a>(filetype)</tt>	Return a list of file identifiers for the files that make up this corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.TimitCorpusReader <a href=' /corpus/reader/timit.py#L202'>utteranceids</a>(dialect,sex,spkrid,sent_type)</tt>	:return a list of the utterance identifiers for all utterances in this corpus or for the given speaker dialect.
<tt style='background-color:#E8E8E8;'> corpus.reader.TimitCorpusReader <a href=' /corpus/reader/timit.py#L229'>transcription_dict</a>()</tt>	:return a dictionary giving the 'standard' transcription for each word.
<tt style='background-color:#E8E8E8;'> corpus.reader.TimitCorpusReader <a href=' /corpus/reader/timit.py#L251'>spkrutteranceids</a>(speaker)</tt>	:return a list of all utterances associated with a given speaker.
<tt style='background-color:#E8E8E8;'> corpus.reader.TimitCorpusReader <a href=' /corpus/reader/timit.py#L259'>spkrinfo</a>(speaker)</tt>	:return a dictionary mapping something.
<tt style='background-color:#E8E8E8;'> corpus.reader.TimitCorpusReader <a href=' /corpus/reader/timit.py#L281'>phone_times</a>(utterances)</tt>	Offset is represented as a number of 16khz samples!.
<tt style='background-color:#E8E8E8;'> corpus.reader.TimitCorpusReader <a href=' /corpus/reader/timit.py#L380'>play</a>(utterance,start,end)</tt>	Play the given audio sample.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/timit.py#L444'>read_timit_block</a>(stream)</tt>	Block reader for timit tagged sentences which are preceded by a sentence number that will be ignored.
<tt style='background-color:#E8E8E8;'> corpus.reader.ChasenCorpusView <a href=' /corpus/reader/chasen.py#L76'>read_block</a>(stream)</tt>	Reads one paragraph at a time.
<tt style='background-color:#E8E8E8;'> corpus.reader.ChunkedCorpusReader <a href=' /corpus/reader/chunked.py#L37'>__init__</a>(root,fileids,extension,str2chunktree)</tt>	:param root the root directory for this corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.ChunkedCorpusReader <a href=' /corpus/reader/chunked.py#L51'>raw</a>(fileids)</tt>	:return the given file s as a single string.
<tt style='background-color:#E8E8E8;'> corpus.reader.ChunkedCorpusReader <a href=' /corpus/reader/chunked.py#L60'>words</a>(fileids)</tt>	:return the given file s as a list of words and punctuation symbols.
<tt style='background-color:#E8E8E8;'> corpus.reader.ChunkedCorpusReader <a href=' /corpus/reader/chunked.py#L69'>sents</a>(fileids)</tt>	:return the given file s as a list of sentences or utterances each encoded as a list of word.
<tt style='background-color:#E8E8E8;'> corpus.reader.ChunkedCorpusReader <a href=' /corpus/reader/chunked.py#L79'>paras</a>(fileids)</tt>	:return the given file s as a list of paragraphs each encoded as a list of sentences which are.
<tt style='background-color:#E8E8E8;'> corpus.reader.ChunkedCorpusReader <a href=' /corpus/reader/chunked.py#L89'>tagged_words</a>(fileids,tagset)</tt>	:return the given file s as a list of tagged words and punctuation symbols encoded as tuples.
<tt style='background-color:#E8E8E8;'> corpus.reader.ChunkedCorpusReader <a href=' /corpus/reader/chunked.py#L99'>tagged_sents</a>(fileids,tagset)</tt>	:return the given file s as a list of sentences each encoded as a list of word tag tuples.
<tt style='background-color:#E8E8E8;'> corpus.reader.ChunkedCorpusReader <a href=' /corpus/reader/chunked.py#L109'>tagged_paras</a>(fileids,tagset)</tt>	:return the given file s as a list of paragraphs each encoded as a list of sentences which are.
<tt style='background-color:#E8E8E8;'> corpus.reader.ChunkedCorpusReader <a href=' /corpus/reader/chunked.py#L119'>chunked_words</a>(fileids,tagset)</tt>	:return the given file s as a list of tagged words and chunks.
<tt style='background-color:#E8E8E8;'> corpus.reader.ChunkedCorpusReader <a href=' /corpus/reader/chunked.py#L131'>chunked_sents</a>(fileids,tagset)</tt>	:return the given file s as a list of sentences each encoded as a shallow tree.
<tt style='background-color:#E8E8E8;'> corpus.reader.ChunkedCorpusReader <a href=' /corpus/reader/chunked.py#L143'>chunked_paras</a>(fileids,tagset)</tt>	:return the given file s as a list of paragraphs each encoded as a list of sentences which are.
<tt style='background-color:#E8E8E8;'> corpus.reader.NombankCorpusReader <a href=' /corpus/reader/nombank.py#L35'>__init__</a>(root,nomfile,framefiles,nounsfile)</tt>	:param root the root directory for this corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.NombankCorpusReader <a href=' /corpus/reader/nombank.py#L67'>raw</a>(fileids)</tt>	:return the text contents of the given fileids as a single string.
<tt style='background-color:#E8E8E8;'> corpus.reader.NombankCorpusReader <a href=' /corpus/reader/nombank.py#L75'>instances</a>(baseform)</tt>	:return a corpus view that acts as a list of nombankinstance objects one for each noun in the corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.NombankCorpusReader <a href=' /corpus/reader/nombank.py#L87'>lines</a>()</tt>	:return a corpus view that acts as a list of strings one for each line in the predicate-argument annotation file.
<tt style='background-color:#E8E8E8;'> corpus.reader.NombankCorpusReader <a href=' /corpus/reader/nombank.py#L96'>roleset</a>(roleset_id)</tt>	:return the xml description for the given roleset.
<tt style='background-color:#E8E8E8;'> corpus.reader.NombankCorpusReader <a href=' /corpus/reader/nombank.py#L118'>rolesets</a>(baseform)</tt>	:return list of xml descriptions for rolesets.
<tt style='background-color:#E8E8E8;'> corpus.reader.NombankCorpusReader <a href=' /corpus/reader/nombank.py#L139'>nouns</a>()</tt>	:return a corpus view that acts as a list of all noun lemmas in this corpus (from the nombank.
<tt style='background-color:#E8E8E8;'> corpus.reader.NombankInstance <a href=' /corpus/reader/nombank.py#L210'>roleset</a>()</tt>	The name of the roleset used by this instance's predicate.
<tt style='background-color:#E8E8E8;'> corpus.reader.NombankTreePointer <a href=' /corpus/reader/nombank.py#L390'>treepos</a>(tree)</tt>	Convert this pointer to a standard 'tree position' pointer given that it points to the given tree.
<tt style='background-color:#E8E8E8;'> corpus.reader.Pl196xCorpusReader <a href=' /corpus/reader/pl196x.py#L150'>textids</a>(fileids,categories)</tt>	In the pl196x corpus each category is stored in single file and thus both methods provide identical functionality.
<tt style='background-color:#E8E8E8;'> corpus.reader.BNCCorpusReader <a href=' /corpus/reader/bnc.py#L35'>words</a>(fileids,strip_space,stem)</tt>	:return the given file s as a list of words and punctuation symbols.
<tt style='background-color:#E8E8E8;'> corpus.reader.BNCCorpusReader <a href=' /corpus/reader/bnc.py#L47'>tagged_words</a>(fileids,c5,strip_space,stem)</tt>	:return the given file s as a list of tagged words and punctuation symbols encoded as tuples.
<tt style='background-color:#E8E8E8;'> corpus.reader.BNCCorpusReader <a href=' /corpus/reader/bnc.py#L63'>sents</a>(fileids,strip_space,stem)</tt>	:return the given file s as a list of sentences or utterances each encoded as a list of word.
<tt style='background-color:#E8E8E8;'> corpus.reader.BNCCorpusReader <a href=' /corpus/reader/bnc.py#L76'>tagged_sents</a>(fileids,c5,strip_space,stem)</tt>	:return the given file s as a list of sentences each encoded as a list of word tag tuples.
<tt style='background-color:#E8E8E8;'> corpus.reader.BNCCorpusReader <a href=' /corpus/reader/bnc.py#L91'>_views</a>(fileids,sent,tag,strip_space)</tt>	A helper function that instantiates bncwordviews or the list of words/sentences.
<tt style='background-color:#E8E8E8;'> corpus.reader.BNCCorpusReader <a href=' /corpus/reader/bnc.py#L96'>_words</a>(fileid,bracket_sent,tag,strip_space)</tt>	Helper used to implement the view methods -- returns a list of words or a list of sentences optionally tagged.
<tt style='background-color:#E8E8E8;'> corpus.reader.BNCWordView <a href=' /corpus/reader/bnc.py#L169'>__init__</a>(fileid,sent,tag,strip_space)</tt>	:param fileid the name of the underlying file.
<tt style='background-color:#E8E8E8;'> corpus.reader.PropbankCorpusReader <a href=' /corpus/reader/propbank.py#L34'>__init__</a>(root,propfile,framefiles,verbsfile)</tt>	:param root the root directory for this corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.PropbankCorpusReader <a href=' /corpus/reader/propbank.py#L66'>raw</a>(fileids)</tt>	:return the text contents of the given fileids as a single string.
<tt style='background-color:#E8E8E8;'> corpus.reader.PropbankCorpusReader <a href=' /corpus/reader/propbank.py#L74'>instances</a>(baseform)</tt>	:return a corpus view that acts as a list of propbankinstance objects one for each noun in the corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.PropbankCorpusReader <a href=' /corpus/reader/propbank.py#L86'>lines</a>()</tt>	:return a corpus view that acts as a list of strings one for each line in the predicate-argument annotation file.
<tt style='background-color:#E8E8E8;'> corpus.reader.PropbankCorpusReader <a href=' /corpus/reader/propbank.py#L95'>roleset</a>(roleset_id)</tt>	:return the xml description for the given roleset.
<tt style='background-color:#E8E8E8;'> corpus.reader.PropbankCorpusReader <a href=' /corpus/reader/propbank.py#L115'>rolesets</a>(baseform)</tt>	:return list of xml descriptions for rolesets.
<tt style='background-color:#E8E8E8;'> corpus.reader.PropbankCorpusReader <a href=' /corpus/reader/propbank.py#L136'>verbs</a>()</tt>	:return a corpus view that acts as a list of all verb lemmas in this corpus (from the verbs.
<tt style='background-color:#E8E8E8;'> corpus.reader.PropbankInstance <a href=' /corpus/reader/propbank.py#L211'>baseform</a>()</tt>	The baseform of the predicate.
<tt style='background-color:#E8E8E8;'> corpus.reader.PropbankInstance <a href=' /corpus/reader/propbank.py#L216'>sensenumber</a>()</tt>	The sense number of the predicate.
<tt style='background-color:#E8E8E8;'> corpus.reader.PropbankInstance <a href=' /corpus/reader/propbank.py#L221'>predid</a>()</tt>	Identifier of the predicate.
<tt style='background-color:#E8E8E8;'> corpus.reader.PropbankTreePointer <a href=' /corpus/reader/propbank.py#L400'>treepos</a>(tree)</tt>	Convert this pointer to a standard 'tree position' pointer given that it points to the given tree.
<tt style='background-color:#E8E8E8;'> corpus.reader.MTETagConverter <a href=' /corpus/reader/mte.py#L145'>msd_to_universal</a>(tag)</tt>	This function converts the annotation from the multex-east to the universal tagset as described in chapter 5 of the nltk-book.
<tt style='background-color:#E8E8E8;'> corpus.reader.MTECorpusReader <a href=' /corpus/reader/mte.py#L167'>__init__</a>(root,fileids,encoding)</tt>	Construct a new mtecorpusreader for a set of documents located at the given root directory.
<tt style='background-color:#E8E8E8;'> corpus.reader.MTECorpusReader <a href=' /corpus/reader/mte.py#L192'>readme</a>()</tt>	Prints some information about this corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.MTECorpusReader <a href=' /corpus/reader/mte.py#L200'>raw</a>(fileids)</tt>	:param fileids a list specifying the fileids that should be used.
<tt style='background-color:#E8E8E8;'> corpus.reader.MTECorpusReader <a href=' /corpus/reader/mte.py#L208'>words</a>(fileids)</tt>	:param fileids a list specifying the fileids that should be used.
<tt style='background-color:#E8E8E8;'> corpus.reader.MTECorpusReader <a href=' /corpus/reader/mte.py#L216'>sents</a>(fileids)</tt>	:param fileids a list specifying the fileids that should be used.
<tt style='background-color:#E8E8E8;'> corpus.reader.MTECorpusReader <a href=' /corpus/reader/mte.py#L225'>paras</a>(fileids)</tt>	:param fileids a list specifying the fileids that should be used.
<tt style='background-color:#E8E8E8;'> corpus.reader.MTECorpusReader <a href=' /corpus/reader/mte.py#L234'>lemma_words</a>(fileids)</tt>	:param fileids a list specifying the fileids that should be used.
<tt style='background-color:#E8E8E8;'> corpus.reader.MTECorpusReader <a href=' /corpus/reader/mte.py#L243'>tagged_words</a>(fileids,tagset,tags)</tt>	:param fileids a list specifying the fileids that should be used.
<tt style='background-color:#E8E8E8;'> corpus.reader.MTECorpusReader <a href=' /corpus/reader/mte.py#L259'>lemma_sents</a>(fileids)</tt>	:param fileids a list specifying the fileids that should be used.
<tt style='background-color:#E8E8E8;'> corpus.reader.MTECorpusReader <a href=' /corpus/reader/mte.py#L270'>tagged_sents</a>(fileids,tagset,tags)</tt>	:param fileids a list specifying the fileids that should be used.
<tt style='background-color:#E8E8E8;'> corpus.reader.MTECorpusReader <a href=' /corpus/reader/mte.py#L286'>lemma_paras</a>(fileids)</tt>	:param fileids a list specifying the fileids that should be used.
<tt style='background-color:#E8E8E8;'> corpus.reader.MTECorpusReader <a href=' /corpus/reader/mte.py#L296'>tagged_paras</a>(fileids,tagset,tags)</tt>	:param fileids a list specifying the fileids that should be used.
<tt style='background-color:#E8E8E8;'> corpus.reader.CHILDESCorpusReader <a href=' /corpus/reader/childes.py#L43'>words</a>(fileids,speaker,stem,relation)</tt>	:return the given file s as a list of words.
<tt style='background-color:#E8E8E8;'> corpus.reader.CHILDESCorpusReader <a href=' /corpus/reader/childes.py#L71'>tagged_words</a>(fileids,speaker,stem,relation)</tt>	:return the given file s as a list of tagged words and punctuation symbols encoded as tuples.
<tt style='background-color:#E8E8E8;'> corpus.reader.CHILDESCorpusReader <a href=' /corpus/reader/childes.py#L101'>sents</a>(fileids,speaker,stem,relation)</tt>	:return the given file s as a list of sentences or utterances each encoded as a list of word strings.
<tt style='background-color:#E8E8E8;'> corpus.reader.CHILDESCorpusReader <a href=' /corpus/reader/childes.py#L131'>tagged_sents</a>(fileids,speaker,stem,relation)</tt>	:return the given file s as a list of sentences each encoded as a list of word tag tuples.
<tt style='background-color:#E8E8E8;'> corpus.reader.CHILDESCorpusReader <a href=' /corpus/reader/childes.py#L161'>corpus</a>(fileids)</tt>	:return the given file s as a dict of (corpus_property_key value).
<tt style='background-color:#E8E8E8;'> corpus.reader.CHILDESCorpusReader <a href=' /corpus/reader/childes.py#L177'>participants</a>(fileids)</tt>	:return the given file s as a dict of.
<tt style='background-color:#E8E8E8;'> corpus.reader.CHILDESCorpusReader <a href=' /corpus/reader/childes.py#L201'>age</a>(fileids,speaker,month)</tt>	:return the given file s as string or int.
<tt style='background-color:#E8E8E8;'> corpus.reader.CHILDESCorpusReader <a href=' /corpus/reader/childes.py#L228'>convert_age</a>(age_year)</tt>	Caclculate age in months from a string in childes format.
<tt style='background-color:#E8E8E8;'> corpus.reader.CHILDESCorpusReader <a href=' /corpus/reader/childes.py#L240'>MLU</a>(fileids,speaker)</tt>	:return the given file s as a floating number.
<tt style='background-color:#E8E8E8;'> corpus.reader.CHILDESCorpusReader <a href=' /corpus/reader/childes.py#L419'>webview_file</a>(fileid,urlbase)</tt>	Map a corpus file to its web version on the childes website and open it in a web browser.
<tt style='background-color:#E8E8E8;'> corpus.reader. <a href=' /corpus/reader/childes.py#L471'>demo</a>(corpus_root)</tt>	The childes corpus should be manually downloaded and saved.
<tt style='background-color:#E8E8E8;'> corpus.reader.Review <a href=' /corpus/reader/reviews.py#L82'>__init__</a>(title,review_lines)</tt>	:param title the title of the review.
<tt style='background-color:#E8E8E8;'> corpus.reader.Review <a href=' /corpus/reader/reviews.py#L93'>add_line</a>(review_line)</tt>	Add a line reviewline to the review.
<tt style='background-color:#E8E8E8;'> corpus.reader.Review <a href=' /corpus/reader/reviews.py#L102'>features</a>()</tt>	Return a list of features in the review each feature is a tuple made of.
<tt style='background-color:#E8E8E8;'> corpus.reader.Review <a href=' /corpus/reader/reviews.py#L115'>sents</a>()</tt>	Return all tokenized sentences in the review.
<tt style='background-color:#E8E8E8;'> corpus.reader.ReviewsCorpusReader <a href=' /corpus/reader/reviews.py#L186'>__init__</a>(root,fileids,word_tokenizer,encoding)</tt>	:param root the root directory for the corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.ReviewsCorpusReader <a href=' /corpus/reader/reviews.py#L199'>features</a>(fileids)</tt>	Return a list of features each feature is a tuple made of the specific.
<tt style='background-color:#E8E8E8;'> corpus.reader.ReviewsCorpusReader <a href=' /corpus/reader/reviews.py#L216'>raw</a>(fileids)</tt>	:param fileids a list or regexp specifying the fileids of the files that have to be returned as a raw string.
<tt style='background-color:#E8E8E8;'> corpus.reader.ReviewsCorpusReader <a href=' /corpus/reader/reviews.py#L229'>readme</a>()</tt>	Return the contents of the corpus readme txt file.
<tt style='background-color:#E8E8E8;'> corpus.reader.ReviewsCorpusReader <a href=' /corpus/reader/reviews.py#L235'>reviews</a>(fileids)</tt>	Return all the reviews as a list of review objects if fileids is.
<tt style='background-color:#E8E8E8;'> corpus.reader.ReviewsCorpusReader <a href=' /corpus/reader/reviews.py#L249'>sents</a>(fileids)</tt>	Return all sentences in the corpus or in the specified files.
<tt style='background-color:#E8E8E8;'> corpus.reader.ReviewsCorpusReader <a href=' /corpus/reader/reviews.py#L263'>words</a>(fileids)</tt>	Return all words and punctuation symbols in the corpus or in the specified files.
<tt style='background-color:#E8E8E8;'> corpus.reader.Comparison <a href=' /corpus/reader/comparative_sents.py#L56'>__init__</a>(text,comp_type,entity_1,entity_2)</tt>	:param text a string optionally tokenized containing a comparation.
<tt style='background-color:#E8E8E8;'> corpus.reader.ComparativeSentencesCorpusReader <a href=' /corpus/reader/comparative_sents.py#L99'>__init__</a>(root,fileids,word_tokenizer,sent_tokenizer)</tt>	:param root the root directory for this corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.ComparativeSentencesCorpusReader <a href=' /corpus/reader/comparative_sents.py#L114'>comparisons</a>(fileids)</tt>	Return all comparisons in the corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.ComparativeSentencesCorpusReader <a href=' /corpus/reader/comparative_sents.py#L130'>keywords</a>(fileids)</tt>	Return a set of all keywords used in the corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.ComparativeSentencesCorpusReader <a href=' /corpus/reader/comparative_sents.py#L146'>keywords_readme</a>()</tt>	Return the list of words and constituents considered as clues of a comparison (from listofkeywords.
<tt style='background-color:#E8E8E8;'> corpus.reader.ComparativeSentencesCorpusReader <a href=' /corpus/reader/comparative_sents.py#L159'>raw</a>(fileids)</tt>	:param fileids a list or regexp specifying the fileids that have to be returned as a raw string.
<tt style='background-color:#E8E8E8;'> corpus.reader.ComparativeSentencesCorpusReader <a href=' /corpus/reader/comparative_sents.py#L172'>readme</a>()</tt>	Return the contents of the corpus readme file.
<tt style='background-color:#E8E8E8;'> corpus.reader.ComparativeSentencesCorpusReader <a href=' /corpus/reader/comparative_sents.py#L178'>sents</a>(fileids)</tt>	Return all sentences in the corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.ComparativeSentencesCorpusReader <a href=' /corpus/reader/comparative_sents.py#L191'>words</a>(fileids)</tt>	Return all words and punctuation symbols in the corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.PanLexLiteCorpusReader <a href=' /corpus/reader/panlex_lite.py#L54'>language_varieties</a>(lc)</tt>	Return a list of panlex language varieties.
<tt style='background-color:#E8E8E8;'> corpus.reader.PanLexLiteCorpusReader <a href=' /corpus/reader/panlex_lite.py#L71'>meanings</a>(expr_uid,expr_tt)</tt>	Return a list of meanings for an expression.
<tt style='background-color:#E8E8E8;'> corpus.reader.PanLexLiteCorpusReader <a href=' /corpus/reader/panlex_lite.py#L100'>translations</a>(from_uid,from_tt,to_uid)</tt>	Return a list of translations for an expression into a single language variety.
<tt style='background-color:#E8E8E8;'> corpus.reader.Meaning <a href=' /corpus/reader/panlex_lite.py#L130'>id</a>()</tt>	:return the meaning's id.
<tt style='background-color:#E8E8E8;'> corpus.reader.Meaning <a href=' /corpus/reader/panlex_lite.py#L137'>quality</a>()</tt>	:return the meaning's source's quality (0=worst 9=best).
<tt style='background-color:#E8E8E8;'> corpus.reader.Meaning <a href=' /corpus/reader/panlex_lite.py#L144'>source</a>()</tt>	:return the meaning's source id.
<tt style='background-color:#E8E8E8;'> corpus.reader.Meaning <a href=' /corpus/reader/panlex_lite.py#L151'>source_group</a>()</tt>	:return the meaning's source group id.
<tt style='background-color:#E8E8E8;'> corpus.reader.Meaning <a href=' /corpus/reader/panlex_lite.py#L158'>expressions</a>()</tt>	:return the meaning's expressions as a dictionary whose keys are language variety uniform identifiers and whose values are lists of expression.
<tt style='background-color:#E8E8E8;'> corpus.reader.ProsConsCorpusReader <a href=' /corpus/reader/pros_cons.py#L50'>__init__</a>(root,fileids,word_tokenizer,encoding)</tt>	:param root the root directory for the corpus.
<tt style='background-color:#E8E8E8;'> corpus.reader.ProsConsCorpusReader <a href=' /corpus/reader/pros_cons.py#L65'>sents</a>(fileids,categories)</tt>	Return all sentences in the corpus or in the specified files/categories.
<tt style='background-color:#E8E8E8;'> corpus.reader.ProsConsCorpusReader <a href=' /corpus/reader/pros_cons.py#L85'>words</a>(fileids,categories)</tt>	Return all words and punctuation symbols in the corpus or in the specified files/categories.
<tt style='background-color:#E8E8E8;'> corpus.reader.SentiWordNetCorpusReader <a href=' /corpus/reader/sentiwordnet.py#L45'>__init__</a>(root,fileids,encoding)</tt>	Construct a new sentiwordnet corpus reader using data from the specified file.
<tt style='background-color:#E8E8E8;'> corpus.reader.SentiSynset <a href=' /corpus/reader/sentiwordnet.py#L126'>__str__</a>()</tt>	Prints just the pos/neg scores for now.
<tt style='background-color:#E8E8E8;'> corpus.reader.SwadeshCorpusReader <a href=' /corpus/reader/wordlist.py#L32'>entries</a>(fileids)</tt>	:return a tuple of words for the specified fileids.
<tt style='background-color:#E8E8E8;'> corpus.reader.NonbreakingPrefixesCorpusReader <a href=' /corpus/reader/wordlist.py#L59'>words</a>(lang,fileids,ignore_lines_startswith)</tt>	This module returns a list of nonbreaking prefixes for the specified language s.
<tt style='background-color:#E8E8E8;'> corpus.reader.UnicharsCorpusReader <a href=' /corpus/reader/wordlist.py#L93'>chars</a>(category,fileids)</tt>	This module returns a list of characters from the perl unicode properties.
<tt style='background-color:#E8E8E8;'> corpus.reader.MWAPPDBCorpusReader <a href=' /corpus/reader/wordlist.py#L128'>entries</a>(fileids)</tt>	:return a tuple of synonym word pairs.
<tt style='background-color:#E8E8E8;'> corpus.reader.ConllCorpusReader <a href=' /corpus/reader/conll.py#L155'>iob_words</a>(fileids,tagset)</tt>	:return a list of word/tag/iob tuples.
<tt style='background-color:#E8E8E8;'> corpus.reader.ConllCorpusReader <a href=' /corpus/reader/conll.py#L167'>iob_sents</a>(fileids,tagset)</tt>	:return a list of lists of word/tag/iob tuples.
<tt style='background-color:#E8E8E8;'> corpus.reader.ConllCorpusReader <a href=' /corpus/reader/conll.py#L299'>_get_srl_spans</a>(grid)</tt>	List of list of start end tag) tuples.
<tt style='background-color:#E8E8E8;'> corpus.reader.AlignedCorpusReader <a href=' /corpus/reader/aligned.py#L22'>__init__</a>(root,fileids,sep,word_tokenizer)</tt>	Construct a new aligned corpus reader for a set of documents located at the given root directory.
<tt style='background-color:#E8E8E8;'> corpus.reader.AlignedCorpusReader <a href=' /corpus/reader/aligned.py#L43'>raw</a>(fileids)</tt>	:return the given file s as a single string.
<tt style='background-color:#E8E8E8;'> corpus.reader.AlignedCorpusReader <a href=' /corpus/reader/aligned.py#L52'>words</a>(fileids)</tt>	:return the given file s as a list of words and punctuation symbols.
<tt style='background-color:#E8E8E8;'> corpus.reader.AlignedCorpusReader <a href=' /corpus/reader/aligned.py#L64'>sents</a>(fileids)</tt>	:return the given file s as a list of sentences or utterances each encoded as a list of word.
<tt style='background-color:#E8E8E8;'> corpus.reader.AlignedCorpusReader <a href=' /corpus/reader/aligned.py#L77'>aligned_sents</a>(fileids)</tt>	:return the given file s as a list of alignedsent objects.
<tt style='background-color:#E8E8E8;'> corpus.reader.DependencyCorpusReader <a href=' /corpus/reader/dependency.py#L29'>raw</a>(fileids)</tt>	:return the given file s as a single string.
<tt style='background-color:#E8E8E8;'> corpus.reader.PlaintextCorpusReader <a href=' /corpus/reader/plaintext.py#L40'>__init__</a>(root,fileids,word_tokenizer,sent_tokenizer)</tt>	Construct a new plaintext corpus reader for a set of documents located at the given root directory.
<tt style='background-color:#E8E8E8;'> corpus.reader.PlaintextCorpusReader <a href=' /corpus/reader/plaintext.py#L67'>raw</a>(fileids)</tt>	:return the given file s as a single string.
<tt style='background-color:#E8E8E8;'> corpus.reader.PlaintextCorpusReader <a href=' /corpus/reader/plaintext.py#L81'>words</a>(fileids)</tt>	:return the given file s as a list of words and punctuation symbols.
<tt style='background-color:#E8E8E8;'> corpus.reader.PlaintextCorpusReader <a href=' /corpus/reader/plaintext.py#L91'>sents</a>(fileids)</tt>	:return the given file s as a list of sentences or utterances each encoded as a list of word.
<tt style='background-color:#E8E8E8;'> corpus.reader.PlaintextCorpusReader <a href=' /corpus/reader/plaintext.py#L105'>paras</a>(fileids)</tt>	:return the given file s as a list of paragraphs each encoded as a list of sentences which are.
<tt style='background-color:#E8E8E8;'> corpus.reader.CategorizedPlaintextCorpusReader <a href=' /corpus/reader/plaintext.py#L146'>__init__</a>()</tt>	Initialize the corpus reader categorization arguments.
<tt style='background-color:#E8E8E8;'> corpus.reader.EuroparlCorpusReader <a href=' /corpus/reader/plaintext.py#L220'>chapters</a>(fileids)</tt>	:return the given file s as a list of chapters each encoded as a list of sentences which are.
<tt style='background-color:#E8E8E8;'> corpus.reader.YCOECorpusReader <a href=' /corpus/reader/ycoe.py#L59'>documents</a>(fileids)</tt>	Return a list of document identifiers for all documents in this corpus or for the documents with the given file s if.
<tt style='background-color:#E8E8E8;'> corpus.reader.YCOECorpusReader <a href=' /corpus/reader/ycoe.py#L75'>fileids</a>(documents)</tt>	Return a list of file identifiers for the files that make up this corpus or that store the given document s if specified.
<tt style='background-color:#E8E8E8;'> corpus.reader.YCOECorpusReader <a href=' /corpus/reader/ycoe.py#L87'>_getfileids</a>(documents,subcorpus)</tt>	Helper that selects the appropriate fileids for a given set of documents from a given subcorpus pos or psd.
<tt style='background-color:#E8E8E8;'> corpus.reader.CMUDictCorpusReader <a href=' /corpus/reader/cmudict.py#L59'>entries</a>()</tt>	:return the cmudict lexicon as a list of entries containing word transcriptions tuples.
<tt style='background-color:#E8E8E8;'> corpus.reader.CMUDictCorpusReader <a href=' /corpus/reader/cmudict.py#L68'>raw</a>()</tt>	:return the cmudict lexicon as a raw string.
<tt style='background-color:#E8E8E8;'> corpus.reader.CMUDictCorpusReader <a href=' /corpus/reader/cmudict.py#L77'>words</a>()</tt>	:return a list of all words defined in the cmudict lexicon.
<tt style='background-color:#E8E8E8;'> corpus.reader.CMUDictCorpusReader <a href=' /corpus/reader/cmudict.py#L83'>dict</a>()</tt>	:return the cmudict lexicon as a dictionary whose keys are lowercase words and whose values are lists of pronunciations.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/vader.py#L87'>negated</a>(input_words,include_nt)</tt>	Determine if input contains negation words.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/vader.py#L107'>normalize</a>(score,alpha)</tt>	Normalize the score to be between -1 and 1 using an alpha that.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/vader.py#L116'>allcap_differential</a>(words)</tt>	Check whether just some words in the input are all caps.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/vader.py#L134'>scalar_inc_dec</a>(word,valence,is_cap_diff)</tt>	Check if the preceding words increase decrease or negate/nullify the.
<tt style='background-color:#E8E8E8;'> sentiment.SentiText <a href=' /sentiment/vader.py#L165'>_words_plus_punc</a>()</tt>	Returns mapping of form.
<tt style='background-color:#E8E8E8;'> sentiment.SentiText <a href=' /sentiment/vader.py#L185'>_words_and_emoticons</a>()</tt>	Removes leading and trailing puncutation leaves contractions and most emoticons.
<tt style='background-color:#E8E8E8;'> sentiment.SentimentIntensityAnalyzer <a href=' /sentiment/vader.py#L207'>make_lex_dict</a>()</tt>	Convert lexicon file to a dictionary.
<tt style='background-color:#E8E8E8;'> sentiment.SentimentIntensityAnalyzer <a href=' /sentiment/vader.py#L217'>polarity_scores</a>(text)</tt>	Return a float for sentiment strength based on the input text.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L67'>timer</a>(method)</tt>	A timer decorator to measure execution performance of methods.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L96'>extract_unigram_feats</a>(document,unigrams,handle_negation)</tt>	Populate a dictionary of unigram features reflecting the presence/absence in the document of each of the tokens in unigrams.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L120'>extract_bigram_feats</a>(document,bigrams)</tt>	Populate a dictionary of bigram features reflecting the presence/absence in the document of each of the tokens in bigrams.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L146'>mark_negation</a>(document,double_neg_flip,shallow)</tt>	Append _neg suffix to words that appear in the scope between a negation and a punctuation mark.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L186'>output_markdown</a>(filename)</tt>	Write the output of an analysis to a file.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L207'>save_file</a>(content,filename)</tt>	Store content in filename can be used to store a sentimentanalyzer.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L216'>split_train_test</a>(all_instances,n)</tt>	Randomly split n instances of the dataset into train and test sets.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L260'>json2csv_preprocess</a>(json_file,outfile,fields,encoding)</tt>	Convert json file to csv file preprocessing each row to obtain a suitable dataset for tweets semantic analysis.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L331'>parse_tweets_set</a>(filename,label,word_tokenizer,sent_tokenizer)</tt>	Parse csv file containing tweets and output data a list of text label tuples.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L396'>demo_tweets</a>(trainer,n_instances,output)</tt>	Train and test naive bayes classifier on 10000 tweets tokenized using tweettokenizer.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L473'>demo_movie_reviews</a>(trainer,n_instances,output)</tt>	Train classifier on all instances of the movie reviews dataset.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L526'>demo_subjectivity</a>(trainer,save_analyzer,n_instances,output)</tt>	Train and test a classifier on instances of the subjective dataset by pang and lee.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L586'>demo_sent_subjectivity</a>(text)</tt>	Classify a single sentence as subjective or objective using a stored sentimentanalyzer.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L607'>demo_liu_hu_lexicon</a>(sentence,plot)</tt>	Basic example of sentiment classification using liu and hu opinion lexicon.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L648'>demo_vader_instance</a>(text)</tt>	Output polarity scores for a text using vader approach.
<tt style='background-color:#E8E8E8;'> sentiment. <a href=' /sentiment/util.py#L658'>demo_vader_tweets</a>(n_instances,output)</tt>	Classify 10000 positive and negative tweets using vader approach.
<tt style='background-color:#E8E8E8;'> sentiment.SentimentAnalyzer <a href=' /sentiment/sentiment_analyzer.py#L36'>all_words</a>(documents,labeled)</tt>	Return all words/tokens from the documents with duplicates.
<tt style='background-color:#E8E8E8;'> sentiment.SentimentAnalyzer <a href=' /sentiment/sentiment_analyzer.py#L57'>apply_features</a>(documents,labeled)</tt>	Apply all feature extractor functions to the documents this is a wrapper.
<tt style='background-color:#E8E8E8;'> sentiment.SentimentAnalyzer <a href=' /sentiment/sentiment_analyzer.py#L73'>unigram_word_feats</a>(words,top_n,min_freq)</tt>	Return most common top_n word features.
<tt style='background-color:#E8E8E8;'> sentiment.SentimentAnalyzer <a href=' /sentiment/sentiment_analyzer.py#L88'>bigram_collocation_feats</a>(documents,top_n,min_freq,assoc_measure)</tt>	Return top_n bigram features (using assoc_measure).
<tt style='background-color:#E8E8E8;'> sentiment.SentimentAnalyzer <a href=' /sentiment/sentiment_analyzer.py#L108'>classify</a>(instance)</tt>	Classify a single instance applying the features that have already been stored in the sentimentanalyzer.
<tt style='background-color:#E8E8E8;'> sentiment.SentimentAnalyzer <a href=' /sentiment/sentiment_analyzer.py#L119'>add_feat_extractor</a>(function)</tt>	Add a new function to extract features from a document this function will.
<tt style='background-color:#E8E8E8;'> sentiment.SentimentAnalyzer <a href=' /sentiment/sentiment_analyzer.py#L133'>extract_features</a>(document)</tt>	Apply extractor functions and their parameters to the present document.
<tt style='background-color:#E8E8E8;'> sentiment.SentimentAnalyzer <a href=' /sentiment/sentiment_analyzer.py#L153'>train</a>(trainer,training_set,save_classifier)</tt>	Train classifier on the training set optionally saving the output in the file specified by save_classifier.
<tt style='background-color:#E8E8E8;'> sentiment.SentimentAnalyzer <a href=' /sentiment/sentiment_analyzer.py#L179'>evaluate</a>(test_set,classifier,accuracy,f_measure)</tt>	Evaluate and print classifier performance on the test set.
<tt style='background-color:#E8E8E8;'> chunk. <a href=' /chunk/util.py#L22'>accuracy</a>(chunker,gold)</tt>	Score the accuracy of the chunker against the gold standard.
<tt style='background-color:#E8E8E8;'> chunk.ChunkScore <a href=' /chunk/util.py#L143'>score</a>(correct,guessed)</tt>	Given a correctly chunked sentence score another chunked version of the same sentence.
<tt style='background-color:#E8E8E8;'> chunk.ChunkScore <a href=' /chunk/util.py#L172'>accuracy</a>()</tt>	Return the overall tag-based accuracy for all text that have been scored by this chunkscore, using the iob conll2000.
<tt style='background-color:#E8E8E8;'> chunk.ChunkScore <a href=' /chunk/util.py#L183'>precision</a>()</tt>	Return the overall precision for all texts that have been scored by this chunkscore.
<tt style='background-color:#E8E8E8;'> chunk.ChunkScore <a href=' /chunk/util.py#L195'>recall</a>()</tt>	Return the overall recall for all texts that have been scored by this chunkscore.
<tt style='background-color:#E8E8E8;'> chunk.ChunkScore <a href=' /chunk/util.py#L207'>f_measure</a>(alpha)</tt>	Return the overall f measure for all texts that have been scored by this chunkscore.
<tt style='background-color:#E8E8E8;'> chunk.ChunkScore <a href=' /chunk/util.py#L226'>missed</a>()</tt>	Return the chunks which were included in the correct chunk structures but not in the guessed chunk.
<tt style='background-color:#E8E8E8;'> chunk.ChunkScore <a href=' /chunk/util.py#L238'>incorrect</a>()</tt>	Return the chunks which were included in the guessed chunk structures but not in the correct chunk structures listed in input order.
<tt style='background-color:#E8E8E8;'> chunk.ChunkScore <a href=' /chunk/util.py#L249'>correct</a>()</tt>	Return the chunks which were included in the correct chunk structures listed in input order.
<tt style='background-color:#E8E8E8;'> chunk.ChunkScore <a href=' /chunk/util.py#L259'>guessed</a>()</tt>	Return the chunks which were included in the guessed chunk structures listed in input order.
<tt style='background-color:#E8E8E8;'> chunk.ChunkScore <a href=' /chunk/util.py#L273'>__repr__</a>()</tt>	Return a concise representation of this chunkscoring.
<tt style='background-color:#E8E8E8;'> chunk.ChunkScore <a href=' /chunk/util.py#L281'>__str__</a>()</tt>	Return a verbose representation of this chunkscoring.
<tt style='background-color:#E8E8E8;'> chunk. <a href=' /chunk/util.py#L311'>tagstr2tree</a>(s,chunk_label,root_label,sep)</tt>	Divide a string of bracketted tagged text into chunks and unchunked tokens and produce a tree.
<tt style='background-color:#E8E8E8;'> chunk. <a href=' /chunk/util.py#L361'>conllstr2tree</a>(s,chunk_types,root_label)</tt>	Return a chunk structure for a single sentence encoded in the given conll 2000 style string.
<tt style='background-color:#E8E8E8;'> chunk. <a href=' /chunk/util.py#L412'>tree2conlltags</a>(t)</tt>	Return a list of 3-tuples containing word tag iob-tag.
<tt style='background-color:#E8E8E8;'> chunk. <a href=' /chunk/util.py#L436'>conlltags2tree</a>(sentence,chunk_types,root_label,strict)</tt>	Convert the conll iob format to a tree.
<tt style='background-color:#E8E8E8;'> chunk. <a href=' /chunk/util.py#L467'>tree2conllstr</a>(t)</tt>	Return a multiline string where each line contains a word tag and iob tag.
<tt style='background-color:#E8E8E8;'> chunk. <a href=' /chunk/util.py#L521'>ieerstr2tree</a>(s,chunk_types,root_label)</tt>	Return a chunk structure containing the chunked tagged text that is encoded in the given ieer style string.
<tt style='background-color:#E8E8E8;'> chunk.ChunkParserI <a href=' /chunk/api.py#L25'>parse</a>(tokens)</tt>	Return the best chunk structure for the given tokens and return a tree.
<tt style='background-color:#E8E8E8;'> chunk.ChunkParserI <a href=' /chunk/api.py#L36'>evaluate</a>(gold)</tt>	Score the accuracy of the chunker against the gold standard.
<tt style='background-color:#E8E8E8;'> chunk.NEChunkParser <a href=' /chunk/named_entity.py#L118'>parse</a>(tokens)</tt>	Each token should be a pos-tagged word.
<tt style='background-color:#E8E8E8;'> chunk.NEChunkParser <a href=' /chunk/named_entity.py#L132'>_tagged_to_parse</a>(tagged_tokens)</tt>	Convert a list of tagged tokens to a chunk-parse tree.
<tt style='background-color:#E8E8E8;'> chunk.NEChunkParser <a href=' /chunk/named_entity.py#L151'>_parse_to_tagged</a>(sent)</tt>	Convert a chunk-parse tree to a list of tagged tokens.
<tt style='background-color:#E8E8E8;'> chunk. <a href=' /chunk/__init__.py#L167'>ne_chunk</a>(tagged_tokens,binary)</tt>	Use nltk's currently recommended named entity chunker to chunk the given list of tagged tokens.
<tt style='background-color:#E8E8E8;'> chunk. <a href=' /chunk/__init__.py#L179'>ne_chunk_sents</a>(tagged_sentences,binary)</tt>	Use nltk's currently recommended named entity chunker to chunk the given list of tagged sentences each consisting of a list of tagged tokens.
<tt style='background-color:#E8E8E8;'> chunk.ChunkString <a href=' /chunk/regexp.py#L74'>__init__</a>(chunk_struct,debug_level)</tt>	Construct a new chunkstring that encodes the chunking of the text tagged_tokens.
<tt style='background-color:#E8E8E8;'> chunk.ChunkString <a href=' /chunk/regexp.py#L110'>_verify</a>(s,verify_tags)</tt>	Check to make sure that s still corresponds to some chunked version of _pieces.
<tt style='background-color:#E8E8E8;'> chunk.ChunkString <a href=' /chunk/regexp.py#L149'>to_chunkstruct</a>(chunk_label)</tt>	Return the chunk structure encoded by this chunkstring.
<tt style='background-color:#E8E8E8;'> chunk.ChunkString <a href=' /chunk/regexp.py#L181'>xform</a>(regexp,repl)</tt>	Apply the given transformation to the string encoding of this chunkstring.
<tt style='background-color:#E8E8E8;'> chunk.ChunkString <a href=' /chunk/regexp.py#L220'>__repr__</a>()</tt>	Return a string representation of this chunkstring.
<tt style='background-color:#E8E8E8;'> chunk.ChunkString <a href=' /chunk/regexp.py#L231'>__str__</a>()</tt>	Return a formatted representation of this chunkstring.
<tt style='background-color:#E8E8E8;'> chunk.RegexpChunkRule <a href=' /chunk/regexp.py#L276'>__init__</a>(regexp,repl,descr)</tt>	Construct a new regexpchunkrule.
<tt style='background-color:#E8E8E8;'> chunk.RegexpChunkRule <a href=' /chunk/regexp.py#L300'>apply</a>(chunkstr)</tt>	Apply this rule to the given chunkstring see the.
<tt style='background-color:#E8E8E8;'> chunk.RegexpChunkRule <a href=' /chunk/regexp.py#L315'>descr</a>()</tt>	Return a short description of the purpose and/or effect of this rule.
<tt style='background-color:#E8E8E8;'> chunk.RegexpChunkRule <a href=' /chunk/regexp.py#L324'>__repr__</a>()</tt>	Return a string representation of this rule it has the form :.
<tt style='background-color:#E8E8E8;'> chunk.RegexpChunkRule <a href=' /chunk/regexp.py#L339'>fromstring</a>(s)</tt>	Create a regexpchunkrule from a string description.
<tt style='background-color:#E8E8E8;'> chunk.ChunkRule <a href=' /chunk/regexp.py#L395'>__init__</a>(tag_pattern,descr)</tt>	Construct a new chunkrule.
<tt style='background-color:#E8E8E8;'> chunk.ChunkRule <a href=' /chunk/regexp.py#L415'>__repr__</a>()</tt>	Return a string representation of this rule it has the form :.
<tt style='background-color:#E8E8E8;'> chunk.ChinkRule <a href=' /chunk/regexp.py#L438'>__init__</a>(tag_pattern,descr)</tt>	Construct a new chinkrule.
<tt style='background-color:#E8E8E8;'> chunk.ChinkRule <a href=' /chunk/regexp.py#L458'>__repr__</a>()</tt>	Return a string representation of this rule it has the form :.
<tt style='background-color:#E8E8E8;'> chunk.UnChunkRule <a href=' /chunk/regexp.py#L481'>__init__</a>(tag_pattern,descr)</tt>	Construct a new unchunkrule.
<tt style='background-color:#E8E8E8;'> chunk.UnChunkRule <a href=' /chunk/regexp.py#L499'>__repr__</a>()</tt>	Return a string representation of this rule it has the form :.
<tt style='background-color:#E8E8E8;'> chunk.MergeRule <a href=' /chunk/regexp.py#L524'>__init__</a>(left_tag_pattern,right_tag_pattern,descr)</tt>	Construct a new mergerule.
<tt style='background-color:#E8E8E8;'> chunk.MergeRule <a href=' /chunk/regexp.py#L559'>__repr__</a>()</tt>	Return a string representation of this rule it has the form :.
<tt style='background-color:#E8E8E8;'> chunk.SplitRule <a href=' /chunk/regexp.py#L585'>__init__</a>(left_tag_pattern,right_tag_pattern,descr)</tt>	Construct a new splitrule.
<tt style='background-color:#E8E8E8;'> chunk.SplitRule <a href=' /chunk/regexp.py#L619'>__repr__</a>()</tt>	Return a string representation of this rule it has the form :.
<tt style='background-color:#E8E8E8;'> chunk.ExpandLeftRule <a href=' /chunk/regexp.py#L645'>__init__</a>(left_tag_pattern,right_tag_pattern,descr)</tt>	Construct a new expandrightrule.
<tt style='background-color:#E8E8E8;'> chunk.ExpandLeftRule <a href=' /chunk/regexp.py#L680'>__repr__</a>()</tt>	Return a string representation of this rule it has the form :.
<tt style='background-color:#E8E8E8;'> chunk.ExpandRightRule <a href=' /chunk/regexp.py#L706'>__init__</a>(left_tag_pattern,right_tag_pattern,descr)</tt>	Construct a new expandrightrule.
<tt style='background-color:#E8E8E8;'> chunk.ExpandRightRule <a href=' /chunk/regexp.py#L741'>__repr__</a>()</tt>	Return a string representation of this rule it has the form :.
<tt style='background-color:#E8E8E8;'> chunk.ChunkRuleWithContext <a href=' /chunk/regexp.py#L773'>__init__</a>(left_context_tag_pattern,chunk_tag_pattern,right_context_tag_pattern,descr)</tt>	Construct a new chunkrulewithcontext.
<tt style='background-color:#E8E8E8;'> chunk.ChunkRuleWithContext <a href=' /chunk/regexp.py#L811'>__repr__</a>()</tt>	Return a string representation of this rule it has the form :.
<tt style='background-color:#E8E8E8;'> chunk. <a href=' /chunk/regexp.py#L837'>tag_pattern2re_pattern</a>(tag_pattern)</tt>	Convert a tag pattern to a regular expression pattern a "tag.
<tt style='background-color:#E8E8E8;'> chunk.RegexpChunkParser <a href=' /chunk/regexp.py#L926'>__init__</a>(rules,chunk_label,root_label,trace)</tt>	Construct a new regexpchunkparser.
<tt style='background-color:#E8E8E8;'> chunk.RegexpChunkParser <a href=' /chunk/regexp.py#L952'>_trace_apply</a>(chunkstr,verbose)</tt>	Apply each rule of this regexpchunkparser to chunkstr, in turn.
<tt style='background-color:#E8E8E8;'> chunk.RegexpChunkParser <a href=' /chunk/regexp.py#L975'>_notrace_apply</a>(chunkstr)</tt>	Apply each rule of this regexpchunkparser to chunkstr, in turn.
<tt style='background-color:#E8E8E8;'> chunk.RegexpChunkParser <a href=' /chunk/regexp.py#L989'>parse</a>(chunk_struct,trace)</tt>	:type chunk_struct tree.
<tt style='background-color:#E8E8E8;'> chunk.RegexpChunkParser <a href=' /chunk/regexp.py#L1031'>rules</a>()</tt>	:return the sequence of rules used by regexpchunkparser.
<tt style='background-color:#E8E8E8;'> chunk.RegexpChunkParser <a href=' /chunk/regexp.py#L1038'>__repr__</a>()</tt>	:return a concise string representation of this regexpchunkparser.
<tt style='background-color:#E8E8E8;'> chunk.RegexpChunkParser <a href=' /chunk/regexp.py#L1046'>__str__</a>()</tt>	:return a verbose string representation of this regexpchunkparser.
<tt style='background-color:#E8E8E8;'> chunk.RegexpParser <a href=' /chunk/regexp.py#L1109'>__init__</a>(grammar,root_label,loop,trace)</tt>	Create a new chunk parser from the given start state and set of chunk patterns.
<tt style='background-color:#E8E8E8;'> chunk.RegexpParser <a href=' /chunk/regexp.py#L1144'>_read_grammar</a>(grammar,root_label,trace)</tt>	Helper function for __init__: read the grammar if it is a string.
<tt style='background-color:#E8E8E8;'> chunk.RegexpParser <a href=' /chunk/regexp.py#L1173'>_add_stage</a>(rules,lhs,root_label,trace)</tt>	Helper function for __init__: add a new stage to the parser.
<tt style='background-color:#E8E8E8;'> chunk.RegexpParser <a href=' /chunk/regexp.py#L1184'>parse</a>(chunk_struct,trace)</tt>	Apply the chunk parser to this input.
<tt style='background-color:#E8E8E8;'> chunk.RegexpParser <a href=' /chunk/regexp.py#L1207'>__repr__</a>()</tt>	:return a concise string representation of this chunk regexpparser.
<tt style='background-color:#E8E8E8;'> chunk.RegexpParser <a href=' /chunk/regexp.py#L1214'>__str__</a>()</tt>	:return a verbose string representation of this regexpparser.
<tt style='background-color:#E8E8E8;'> chunk. <a href=' /chunk/regexp.py#L1230'>demo_eval</a>(chunkparser,text)</tt>	Demonstration code for evaluating a chunk parser using a chunkscore.
<tt style='background-color:#E8E8E8;'> chunk. <a href=' /chunk/regexp.py#L1292'>demo</a>()</tt>	A demonstration for the regexpchunkparser class a single text is.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/util.py#L9'>str2tuple</a>(s,sep)</tt>	Given the string representation of a tagged token return the corresponding tuple representation.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/util.py#L32'>tuple2str</a>(tagged_token,sep)</tt>	Given the tuple representation of a tagged token return the corresponding string representation.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/util.py#L58'>untag</a>(tagged_sentence)</tt>	Given a tagged sentence return an untagged version of that sentence.
<tt style='background-color:#E8E8E8;'> tag.AveragedPerceptron <a href=' /tag/perceptron.py#L48'>predict</a>(features)</tt>	Dot-product the features and current weights and return the best label.
<tt style='background-color:#E8E8E8;'> tag.AveragedPerceptron <a href=' /tag/perceptron.py#L60'>update</a>(truth,guess,features)</tt>	Update the feature weights.
<tt style='background-color:#E8E8E8;'> tag.AveragedPerceptron <a href=' /tag/perceptron.py#L76'>average_weights</a>()</tt>	Average weights from all iterations.
<tt style='background-color:#E8E8E8;'> tag.AveragedPerceptron <a href=' /tag/perceptron.py#L89'>save</a>(path)</tt>	Save the pickled model weights.
<tt style='background-color:#E8E8E8;'> tag.AveragedPerceptron <a href=' /tag/perceptron.py#L94'>load</a>(path)</tt>	Load the pickled model weights.
<tt style='background-color:#E8E8E8;'> tag.PerceptronTagger <a href=' /tag/perceptron.py#L132'>__init__</a>(load)</tt>	:param load load the pickled model upon instantiation.
<tt style='background-color:#E8E8E8;'> tag.PerceptronTagger <a href=' /tag/perceptron.py#L143'>tag</a>(tokens)</tt>	Tag tokenized sentences.
<tt style='background-color:#E8E8E8;'> tag.PerceptronTagger <a href=' /tag/perceptron.py#L164'>train</a>(sentences,save_loc,nr_iter)</tt>	Train a model from sentences and save it at save_loc nr_iter.
<tt style='background-color:#E8E8E8;'> tag.PerceptronTagger <a href=' /tag/perceptron.py#L217'>load</a>(loc)</tt>	:param loc load a pickled model at location.
<tt style='background-color:#E8E8E8;'> tag.PerceptronTagger <a href=' /tag/perceptron.py#L227'>normalize</a>(word)</tt>	Normalization used in pre-processing.
<tt style='background-color:#E8E8E8;'> tag.PerceptronTagger <a href=' /tag/perceptron.py#L245'>_get_features</a>(i,word,context,prev)</tt>	Map tokens into a feature representation implemented as a {hashable int} dict.
<tt style='background-color:#E8E8E8;'> tag.PerceptronTagger <a href=' /tag/perceptron.py#L272'>_make_tagdict</a>(sentences)</tt>	Make a tag dictionary for single-tag words.
<tt style='background-color:#E8E8E8;'> tag.SennaTagger <a href=' /tag/senna.py#L50'>tag_sents</a>(sentences)</tt>	Applies the tag method over a list of sentences this method will return.
<tt style='background-color:#E8E8E8;'> tag.SennaChunkTagger <a href=' /tag/senna.py#L67'>tag_sents</a>(sentences)</tt>	Applies the tag method over a list of sentences this method will return.
<tt style='background-color:#E8E8E8;'> tag.SennaChunkTagger <a href=' /tag/senna.py#L79'>bio_to_chunks</a>(tagged_sent,chunk_type)</tt>	Extracts the chunks in a bio chunk-tagged sentence.
<tt style='background-color:#E8E8E8;'> tag.SennaNERTagger <a href=' /tag/senna.py#L126'>tag_sents</a>(sentences)</tt>	Applies the tag method over a list of sentences this method will return.
<tt style='background-color:#E8E8E8;'> tag.TaggerI <a href=' /tag/api.py#L34'>tag</a>(tokens)</tt>	Determine the most appropriate tag sequence for the given token sequence and return a corresponding list of tagged.
<tt style='background-color:#E8E8E8;'> tag.TaggerI <a href=' /tag/api.py#L47'>tag_sents</a>(sentences)</tt>	Apply self tag() to each element of *sentences* i e :.
<tt style='background-color:#E8E8E8;'> tag.TaggerI <a href=' /tag/api.py#L55'>evaluate</a>(gold)</tt>	Score the accuracy of the tagger against the gold standard.
<tt style='background-color:#E8E8E8;'> tag.Word <a href=' /tag/brill.py#L32'>extract_property</a>(tokens,index)</tt>	@return the given token's text.
<tt style='background-color:#E8E8E8;'> tag.Pos <a href=' /tag/brill.py#L46'>extract_property</a>(tokens,index)</tt>	@return the given token's tag.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/brill.py#L52'>nltkdemo18</a>()</tt>	Return 18 templates from the original nltk demo in multi-feature syntax.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/brill.py#L78'>nltkdemo18plus</a>()</tt>	Return 18 templates from the original nltk demo and additionally a few.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/brill.py#L92'>fntbl37</a>()</tt>	Return 37 templates taken from the postagging task of the fntbl distribution http //www.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/brill.py#L140'>brill24</a>()</tt>	Return 24 templates of the seminal tbl paper brill 1995.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/brill.py#L172'>describe_template_sets</a>()</tt>	Print the available template sets in this demo with a short description".
<tt style='background-color:#E8E8E8;'> tag.BrillTagger <a href=' /tag/brill.py#L209'>__init__</a>(initial_tagger,rules,training_stats)</tt>	:param initial_tagger the initial tagger.
<tt style='background-color:#E8E8E8;'> tag.BrillTagger <a href=' /tag/brill.py#L235'>rules</a>()</tt>	Return the ordered list of transformation rules that this tagger has learnt.
<tt style='background-color:#E8E8E8;'> tag.BrillTagger <a href=' /tag/brill.py#L244'>train_stats</a>(statistic)</tt>	Return a named statistic collected during training or a dictionary of all.
<tt style='background-color:#E8E8E8;'> tag.BrillTagger <a href=' /tag/brill.py#L286'>print_template_statistics</a>(test_stats,printunused)</tt>	Print a list of all templates ranked according to efficiency.
<tt style='background-color:#E8E8E8;'> tag.BrillTagger <a href=' /tag/brill.py#L391'>batch_tag_incremental</a>(sequences,gold)</tt>	Tags by applying each rule to the entire corpus rather than all rules to a single sequence.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/__init__.py#L101'>pos_tag</a>(tokens,tagset,lang)</tt>	Use nltk's currently recommended part of speech tagger to tag the given list of tokens.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/__init__.py#L130'>pos_tag_sents</a>(sentences,tagset,lang)</tt>	Use nltk's currently recommended part of speech tagger to tag the given list of sentences each consisting of a list of tokens.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L178'>train</a>(cls,labeled_sequence,test_sequence,unlabeled_sequence)</tt>	Train a new hiddenmarkovmodeltagger using the given labeled and unlabeled training instances.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L212'>probability</a>(sequence)</tt>	Returns the probability of the given symbol sequence if the sequence.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L227'>log_probability</a>(sequence)</tt>	Returns the log-probability of the given symbol sequence if the.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L259'>tag</a>(unlabeled_sequence)</tt>	Tags the sequence with the highest probability state sequence this.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L276'>_output_logprob</a>(state,symbol)</tt>	:return the log probability of the symbol being observed in the given.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L284'>_create_cache</a>()</tt>	The cache is a tuple p o x s where - s maps symbols to integers.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L355'>best_path</a>(unlabeled_sequence)</tt>	Returns the state sequence of the optimal most probable path through the hmm.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L397'>best_path_simple</a>(unlabeled_sequence)</tt>	Returns the state sequence of the optimal most probable path through the hmm.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L457'>random_sample</a>(rng,length)</tt>	Randomly sample the hmm to generate a sentence of a given length this.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L504'>entropy</a>(unlabeled_sequence)</tt>	Returns the entropy over labellings of the given sequence this is.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L571'>point_entropy</a>(unlabeled_sequence)</tt>	Returns the pointwise entropy over the possible states at each position in the chain given the observation sequence.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L674'>_transitions_matrix</a>()</tt>	Return a matrix of transition log probabilities.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L684'>_outputs_vector</a>(symbol)</tt>	Return a vector with log probabilities of emitting a symbol when entering states.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L692'>_forward_probability</a>(unlabeled_sequence)</tt>	Return the forward probability matrix a t by n array of log-probabilities where t is the length of the sequence and n is the.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L728'>_backward_probability</a>(unlabeled_sequence)</tt>	Return the backward probability matrix a t by n array of log-probabilities where t is the length of the sequence and n is the.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTagger <a href=' /tag/hmm.py#L762'>test</a>(test_sequence,verbose)</tt>	Tests the hiddenmarkovmodeltagger instance.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTrainer <a href=' /tag/hmm.py#L835'>train</a>(labeled_sequences,unlabeled_sequences)</tt>	Trains the hmm using both or either of supervised and unsupervised techniques.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTrainer <a href=' /tag/hmm.py#L903'>train_unsupervised</a>(unlabeled_sequences,update_outputs)</tt>	Trains the hmm using the baum-welch algorithm to maximise the probability of the data sequence.
<tt style='background-color:#E8E8E8;'> tag.HiddenMarkovModelTrainer <a href=' /tag/hmm.py#L1034'>train_supervised</a>(labelled_sequences,estimator)</tt>	Supervised training maximising the joint probability of the symbol and state sequences.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/hmm.py#L1106'>_log_add</a>()</tt>	Adds the logged values returning the logarithm of the addition.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/hmm.py#L1138'>_market_hmm_example</a>()</tt>	Return an example hmm described at page 381 huang et al.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/mapping.py#L65'>tagset_mapping</a>(source,target)</tt>	Retrieve the mapping dictionary between tagsets.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/mapping.py#L80'>map_tag</a>(source,target,source_tag)</tt>	Maps the tag from the source tagset to the target tagset.
<tt style='background-color:#E8E8E8;'> tag.SequentialBackoffTagger <a href=' /tag/sequential.py#L52'>backoff</a>()</tt>	The backoff tagger for this tagger.
<tt style='background-color:#E8E8E8;'> tag.SequentialBackoffTagger <a href=' /tag/sequential.py#L64'>tag_one</a>(tokens,index,history)</tt>	Determine an appropriate tag for the specified token and return that tag.
<tt style='background-color:#E8E8E8;'> tag.SequentialBackoffTagger <a href=' /tag/sequential.py#L85'>choose_tag</a>(tokens,index,history)</tt>	Decide which tag should be used for the specified token and return that tag.
<tt style='background-color:#E8E8E8;'> tag.ContextTagger <a href=' /tag/sequential.py#L120'>__init__</a>(context_to_tag,backoff)</tt>	:param context_to_tag a dictionary mapping contexts to tags.
<tt style='background-color:#E8E8E8;'> tag.ContextTagger <a href=' /tag/sequential.py#L128'>context</a>(tokens,index,history)</tt>	:return the context that should be used to look up the tag for the specified token or none if the specified token.
<tt style='background-color:#E8E8E8;'> tag.ContextTagger <a href=' /tag/sequential.py#L141'>size</a>()</tt>	:return the number of entries in the table used by this tagger to map from contexts to tags.
<tt style='background-color:#E8E8E8;'> tag.ContextTagger <a href=' /tag/sequential.py#L151'>_train</a>(tagged_corpus,cutoff,verbose)</tt>	Initialize this contexttagger's _context_to_tag table based on the given training data.
<tt style='background-color:#E8E8E8;'> tag.ClassifierBasedTagger <a href=' /tag/sequential.py#L639'>_train</a>(tagged_corpus,classifier_builder,verbose)</tt>	Build a new classifier based on the given training data *tagged_corpus*.
<tt style='background-color:#E8E8E8;'> tag.ClassifierBasedTagger <a href=' /tag/sequential.py#L665'>feature_detector</a>(tokens,index,history)</tt>	Return the feature detector that this tagger uses to generate featuresets for its classifier.
<tt style='background-color:#E8E8E8;'> tag.ClassifierBasedTagger <a href=' /tag/sequential.py#L677'>classifier</a>()</tt>	Return the classifier that this tagger uses to choose a tag for each word in a sentence.
<tt style='background-color:#E8E8E8;'> tag.TnT <a href=' /tag/tnt.py#L85'>__init__</a>(unk,Trained,N,C)</tt>	Construct a tnt statistical tagger tagger must be trained.
<tt style='background-color:#E8E8E8;'> tag.TnT <a href=' /tag/tnt.py#L133'>train</a>(data)</tt>	Uses a set of tagged data to train the tagger.
<tt style='background-color:#E8E8E8;'> tag.TnT <a href=' /tag/tnt.py#L180'>_compute_lambda</a>()</tt>	Creates lambda values based upon training data.
<tt style='background-color:#E8E8E8;'> tag.TnT <a href=' /tag/tnt.py#L263'>_safe_div</a>(v1,v2)</tt>	Safe floating point division function does not allow division by 0.
<tt style='background-color:#E8E8E8;'> tag.TnT <a href=' /tag/tnt.py#L273'>tagdata</a>(data)</tt>	Tags each sentence in a list of sentences.
<tt style='background-color:#E8E8E8;'> tag.TnT <a href=' /tag/tnt.py#L292'>tag</a>(data)</tt>	Tags a single sentence.
<tt style='background-color:#E8E8E8;'> tag.TnT <a href=' /tag/tnt.py#L325'>_tagword</a>(sent,current_states)</tt>	:param sent : list of words remaining in the sentence.
<tt style='background-color:#E8E8E8;'> tag. <a href=' /tag/tnt.py#L424'>basic_sent_chop</a>(data,raw)</tt>	Basic method for tokenizing input into sentences.
<tt style='background-color:#E8E8E8;'> tag.CRFTagger <a href=' /tag/crf.py#L50'>__init__</a>(feature_func,verbose,training_opt)</tt>	Initialize the crfsuite tagger.
<tt style='background-color:#E8E8E8;'> tag.CRFTagger <a href=' /tag/crf.py#L98'>_get_features</a>(tokens,idx)</tt>	Extract basic features about this word including - current word.
<tt style='background-color:#E8E8E8;'> tag.CRFTagger <a href=' /tag/crf.py#L144'>tag_sents</a>(sents)</tt>	Tag a list of sentences nb before using this function user should specify the mode_file either by.
<tt style='background-color:#E8E8E8;'> tag.CRFTagger <a href=' /tag/crf.py#L171'>train</a>(train_data,model_file)</tt>	Train the crf tagger using crfsuite.
<tt style='background-color:#E8E8E8;'> tag.CRFTagger <a href=' /tag/crf.py#L192'>tag</a>(tokens)</tt>	Tag a sentence using python crfsuite tagger nb before using this function user should specify the mode_file either by.
<tt style='background-color:#E8E8E8;'> tag.HunposTagger <a href=' /tag/hunpos.py#L54'>__init__</a>(path_to_model,path_to_bin,encoding,verbose)</tt>	Starts the hunpos-tag executable and establishes a connection with it.
<tt style='background-color:#E8E8E8;'> tag.HunposTagger <a href=' /tag/hunpos.py#L92'>close</a>()</tt>	Closes the pipe to the hunpos executable.
<tt style='background-color:#E8E8E8;'> tag.HunposTagger <a href=' /tag/hunpos.py#L103'>tag</a>(tokens)</tt>	Tags a single sentence a list of words.
<tt style='background-color:#E8E8E8;'> tag.BrillTaggerTrainer <a href=' /tag/brill_trainer.py#L28'>__init__</a>(initial_tagger,templates,trace,deterministic)</tt>	Construct a brill tagger from a baseline tagger and a.
<tt style='background-color:#E8E8E8;'> tag.BrillTaggerTrainer <a href=' /tag/brill_trainer.py#L94'>train</a>(train_sents,max_rules,min_score,min_acc)</tt>	Trains the brill tagger on the corpus *train_sents*, producing at most *max_rules* transformations each of which.
<tt style='background-color:#E8E8E8;'> tag.BrillTaggerTrainer <a href=' /tag/brill_trainer.py#L323'>_init_mappings</a>(test_sents,train_sents)</tt>	Initialize the tag position mapping & the rule related mappings.
<tt style='background-color:#E8E8E8;'> tag.BrillTaggerTrainer <a href=' /tag/brill_trainer.py#L358'>_find_rules</a>(sent,wordnum,new_tag)</tt>	Use the templates to find rules that apply at index *wordnum* in the sentence *sent* and generate the tag *new_tag*.
<tt style='background-color:#E8E8E8;'> tag.BrillTaggerTrainer <a href=' /tag/brill_trainer.py#L367'>_update_rule_applies</a>(rule,sentnum,wordnum,train_sents)</tt>	Update the rule data tables to reflect the fact that *rule* applies at the position * sentnum wordnum *.
<tt style='background-color:#E8E8E8;'> tag.BrillTaggerTrainer <a href=' /tag/brill_trainer.py#L399'>_update_rule_not_applies</a>(rule,sentnum,wordnum)</tt>	Update the rule data tables to reflect the fact that *rule* does not apply at the position * sentnum wordnum *.
<tt style='background-color:#E8E8E8;'> tag.BrillTaggerTrainer <a href=' /tag/brill_trainer.py#L421'>_best_rule</a>(train_sents,test_sents,min_score,min_acc)</tt>	Find the next best rule this is done by repeatedly taking a.
<tt style='background-color:#E8E8E8;'> tag.BrillTaggerTrainer <a href=' /tag/brill_trainer.py#L478'>_apply_rule</a>(rule,test_sents)</tt>	Update *test_sents* by applying *rule* everywhere where its conditions are met.
<tt style='background-color:#E8E8E8;'> tag.BrillTaggerTrainer <a href=' /tag/brill_trainer.py#L494'>_update_tag_positions</a>(rule)</tt>	Update _tag_positions to reflect the changes to tags that are made by *rule*.
<tt style='background-color:#E8E8E8;'> tag.BrillTaggerTrainer <a href=' /tag/brill_trainer.py#L509'>_update_rules</a>(rule,train_sents,test_sents)</tt>	Check if we should add or remove any rules from consideration given the changes made by *rule*.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/wordfinder.py#L49'>wordfinder</a>(words,rows,cols,attempts)</tt>	Attempt to arrange words into a letter-grid with the specified number of rows and columns.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/sort.py#L22'>selection</a>(a)</tt>	Selection sort scan the list to find its smallest element then swap it with the first element.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/sort.py#L47'>bubble</a>(a)</tt>	Bubble sort compare adjacent elements of the list left-to-right and swap them if they are out of order.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/sort.py#L86'>merge</a>(a)</tt>	Merge sort split the list in half and sort each half then combine the sorted halves.
<tt style='background-color:#E8E8E8;'> misc.MinimalSet <a href=' /misc/minimalset.py#L20'>__init__</a>(parameters)</tt>	Create a new minimal set.
<tt style='background-color:#E8E8E8;'> misc.MinimalSet <a href=' /misc/minimalset.py#L36'>add</a>(context,target,display)</tt>	Add a new item to the minimal set having the specified context target and display form.
<tt style='background-color:#E8E8E8;'> misc.MinimalSet <a href=' /misc/minimalset.py#L58'>contexts</a>(minimum)</tt>	Determine which contexts occurred with enough distinct targets.
<tt style='background-color:#E8E8E8;'> cluster.KMeansClusterer <a href=' /cluster/kmeans.py#L35'>__init__</a>(num_means,distance,repeats,conv_test)</tt>	:param num_means the number of means to use may use fewer.
<tt style='background-color:#E8E8E8;'> cluster.KMeansClusterer <a href=' /cluster/kmeans.py#L151'>means</a>()</tt>	The means used for clustering.
<tt style='background-color:#E8E8E8;'> cluster.VectorSpaceClusterer <a href=' /cluster/util.py#L28'>__init__</a>(normalise,svd_dimensions)</tt>	:param normalise should vectors be normalised to length 1.
<tt style='background-color:#E8E8E8;'> cluster.VectorSpaceClusterer <a href=' /cluster/util.py#L64'>cluster_vectorspace</a>(vectors,trace)</tt>	Finds the clusters using the given set of vectors.
<tt style='background-color:#E8E8E8;'> cluster.VectorSpaceClusterer <a href=' /cluster/util.py#L78'>classify_vectorspace</a>(vector)</tt>	Returns the index of the appropriate cluster for the vector.
<tt style='background-color:#E8E8E8;'> cluster.VectorSpaceClusterer <a href=' /cluster/util.py#L91'>likelihood_vectorspace</a>(vector,cluster)</tt>	Returns the likelihood of the vector belonging to the cluster.
<tt style='background-color:#E8E8E8;'> cluster.VectorSpaceClusterer <a href=' /cluster/util.py#L98'>vector</a>(vector)</tt>	Returns the vector after normalisation and dimensionality reduction.
<tt style='background-color:#E8E8E8;'> cluster.VectorSpaceClusterer <a href=' /cluster/util.py#L108'>_normalise</a>(vector)</tt>	Normalises the vector to unit length.
<tt style='background-color:#E8E8E8;'> cluster. <a href=' /cluster/util.py#L114'>euclidean_distance</a>(u,v)</tt>	Returns the euclidean distance between vectors u and v this is equivalent.
<tt style='background-color:#E8E8E8;'> cluster. <a href=' /cluster/util.py#L122'>cosine_distance</a>(u,v)</tt>	Returns 1 minus the cosine of the angle between vectors v and u this is equal to.
<tt style='background-color:#E8E8E8;'> cluster.Dendrogram <a href=' /cluster/util.py#L181'>__init__</a>(items)</tt>	:param items the items at the leaves of the dendrogram.
<tt style='background-color:#E8E8E8;'> cluster.Dendrogram <a href=' /cluster/util.py#L190'>merge</a>()</tt>	Merges nodes at given indices in the dendrogram the nodes will be.
<tt style='background-color:#E8E8E8;'> cluster.Dendrogram <a href=' /cluster/util.py#L206'>groups</a>(n)</tt>	Finds the n-groups of items leaves reachable from a cut at depth n.
<tt style='background-color:#E8E8E8;'> cluster.Dendrogram <a href=' /cluster/util.py#L218'>show</a>(leaf_labels)</tt>	Print the dendrogram in ascii art to standard out.
<tt style='background-color:#E8E8E8;'> cluster.EMClusterer <a href=' /cluster/em.py#L32'>__init__</a>(initial_means,priors,covariance_matrices,conv_threshold)</tt>	Creates an em clusterer with the given starting parameters convergence threshold and vector mangling parameters.
<tt style='background-color:#E8E8E8;'> cluster. <a href=' /cluster/gaac.py#L138'>demo</a>()</tt>	Non-interactive demonstration of the clusterers with simple 2-d data.
<tt style='background-color:#E8E8E8;'> cluster.ClusterI <a href=' /cluster/api.py#L16'>cluster</a>(vectors,assign_clusters)</tt>	Assigns the vectors to clusters learning the clustering parameters from the data.
<tt style='background-color:#E8E8E8;'> cluster.ClusterI <a href=' /cluster/api.py#L23'>classify</a>(token)</tt>	Classifies the token into a cluster setting the token's cluster parameter to that cluster identifier.
<tt style='background-color:#E8E8E8;'> cluster.ClusterI <a href=' /cluster/api.py#L30'>likelihood</a>(vector,label)</tt>	Returns the likelihood a float of the token having the corresponding cluster.
<tt style='background-color:#E8E8E8;'> cluster.ClusterI <a href=' /cluster/api.py#L40'>classification_probdist</a>(vector)</tt>	Classifies the token into a cluster returning a probability distribution over the cluster identifiers.
<tt style='background-color:#E8E8E8;'> cluster.ClusterI <a href=' /cluster/api.py#L54'>num_clusters</a>()</tt>	Returns the number of clusters.
<tt style='background-color:#E8E8E8;'> cluster.ClusterI <a href=' /cluster/api.py#L60'>cluster_names</a>()</tt>	Returns the names of the clusters.
<tt style='background-color:#E8E8E8;'> cluster.ClusterI <a href=' /cluster/api.py#L66'>cluster_name</a>(index)</tt>	Returns the names of the cluster at index.
<tt style='background-color:#E8E8E8;'> cluster.GAAClusterer <a href=' /cluster/gaac.py#L125'>dendrogram</a>()</tt>	:return the dendrogram representing the current clustering.
<tt style='background-color:#E8E8E8;'> app.ShiftReduceApp <a href=' /app/srparser_app.py#L511'>mainloop</a>()</tt>	Enter the tkinter mainloop this function must be called if.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/rdparser_app.py#L865'>app</a>()</tt>	Create a recursive descent parser demo using a simple grammar and text.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L900'>__init__</a>(chart,root)</tt>	Construct a new chart display.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L993'>_sb_canvas</a>(root,expand,fill,side)</tt>	Helper for __init__: construct a canvas with a scrollbar.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1025'>_grow</a>()</tt>	Grow the window if necessary.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1056'>_configure</a>(e)</tt>	The configure callback this is called whenever the window is.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1067'>update</a>(chart)</tt>	Draw any edges that have not been drawn this is typically.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1093'>_edge_conflict</a>(edge,lvl)</tt>	Return true if the given edge overlaps with any edge on the given level.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1106'>_analyze_edge</a>(edge)</tt>	Given a new edge recalculate.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1140'>_add_edge</a>(edge,minlvl)</tt>	Add a single edge to the chartview.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1196'>_draw_edge</a>(edge,lvl)</tt>	Draw a single edge on the chartview.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1252'>_color_edge</a>(edge,linecolor,textcolor)</tt>	Color in an edge with the given colors.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1283'>mark_edge</a>(edge,mark)</tt>	Mark an edge.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1290'>unmark_edge</a>(edge)</tt>	Unmark an edge or all edges.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1307'>_analyze</a>()</tt>	Analyze the sentence string to figure out how big a unit needs to be how big the tree should be etc.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1347'>_resize</a>()</tt>	Update the scroll-regions for each canvas this ensures that.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1369'>_draw_loclines</a>()</tt>	Draw location lines these are vertical gridlines used to.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1407'>_draw_sentence</a>()</tt>	Draw the sentence string.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1495'>_draw_treetok</a>(treetok,index,depth)</tt>	:param index the index of the first leaf in the tree.
<tt style='background-color:#E8E8E8;'> app.ChartView <a href=' /app/chartparser_app.py#L1551'>draw</a>()</tt>	Draw everything from scratch.
<tt style='background-color:#E8E8E8;'> app.ChartParserApp <a href=' /app/chartparser_app.py#L1669'>mainloop</a>()</tt>	Enter the tkinter mainloop this function must be called if.
<tt style='background-color:#E8E8E8;'> app.ChartParserApp <a href=' /app/chartparser_app.py#L1999'>load_chart</a>()</tt>	Load a chart from a pickle file.
<tt style='background-color:#E8E8E8;'> app.ChartParserApp <a href=' /app/chartparser_app.py#L2018'>save_chart</a>()</tt>	Save a chart to a pickle file.
<tt style='background-color:#E8E8E8;'> app.ChartParserApp <a href=' /app/chartparser_app.py#L2031'>load_grammar</a>()</tt>	Load a grammar from a pickle file.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L178'>get_unique_counter_from_url</a>(sp)</tt>	Extract the unique counter from the url if it has one otherwise return.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L190'>wnb</a>(port,runBrowser,logfilename)</tt>	Run nltk wordnet browser server.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L299'>_pos_match</a>(pos_tuple)</tt>	This function returns the complete pos tuple for the partial pos tuple given to it.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L364'>get_relations_data</a>(word,synset)</tt>	Get synset relations data for a synset note that this doesn't.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L491'>pg</a>(word,body)</tt>	Return a html page of nltk browser format constructed from the.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L507'>_abbc</a>(txt)</tt>	Abbc = asterisks breaks bold center.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L517'>_get_synset</a>(synset_key)</tt>	The synset key is the unique name of the synset this can be retrived via synset.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L524'>_collect_one_synset</a>(word,synset,synset_relations)</tt>	Returns the html string for one synset or word.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L566'>_collect_all_synsets</a>(word,pos,synset_relations)</tt>	Return a html unordered list of synsets for the given word and part of speech.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L576'>_synset_relations</a>(word,synset,synset_relations)</tt>	Builds the html string for the relations of a synset.
<tt style='background-color:#E8E8E8;'> app.Reference <a href=' /app/wordnet_app.py#L634'>__init__</a>(word,synset_relations)</tt>	Build a reference to a new page.
<tt style='background-color:#E8E8E8;'> app.Reference <a href=' /app/wordnet_app.py#L648'>encode</a>()</tt>	Encode this reference into a string to be used in a url.
<tt style='background-color:#E8E8E8;'> app.Reference <a href=' /app/wordnet_app.py#L658'>decode</a>(string)</tt>	Decode a reference encoded with reference encode.
<tt style='background-color:#E8E8E8;'> app.Reference <a href=' /app/wordnet_app.py#L667'>toggle_synset_relation</a>(synset,relation)</tt>	Toggle the display of the relations for the given synset and relation type.
<tt style='background-color:#E8E8E8;'> app.Reference <a href=' /app/wordnet_app.py#L682'>toggle_synset</a>(synset)</tt>	Toggle displaying of the relation types for the given synset.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L698'>page_from_word</a>(word)</tt>	Return a html page for the given word.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L711'>page_from_href</a>(href)</tt>	Returns a tuple of the html page built and the new current word.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L724'>page_from_reference</a>(href)</tt>	Returns a tuple of the html page built and the new current word.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L773'>get_static_page_by_path</a>(path)</tt>	Return a static html page from the path given.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L795'>get_static_web_help_page</a>()</tt>	Return the static web help page.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L842'>get_static_welcome_message</a>()</tt>	Get the static welcome page.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L866'>get_static_index_page</a>(with_shutdown)</tt>	Get the static index page.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L897'>get_static_upper_page</a>(with_shutdown)</tt>	Return the upper frame page if with_shutdown is true then a 'shutdown' button is also provided.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/wordnet_app.py#L938'>usage</a>()</tt>	Display the command line help message.
<tt style='background-color:#E8E8E8;'> app.RecursiveDescentApp <a href=' /app/rdparser_app.py#L607'>mainloop</a>()</tt>	Enter the tkinter mainloop this function must be called if.
<tt style='background-color:#E8E8E8;'> app.RecursiveDescentApp <a href=' /app/rdparser_app.py#L729'>_makeroom</a>(treeseg)</tt>	Make sure that no sibling tree bbox's overlap.
<tt style='background-color:#E8E8E8;'> app.RegexpChunkApp <a href=' /app/chunkparser_app.py#L259'>__init__</a>(devset_name,devset,grammar,chunk_label)</tt>	:param devset_name the name of the development set used for display & for save files.
<tt style='background-color:#E8E8E8;'> app.RegexpChunkApp <a href=' /app/chunkparser_app.py#L620'>_adaptively_modify_eval_chunk</a>(t)</tt>	Modify _eval_chunk to try to keep the amount of time that the eval demon takes between _eval_demon_min and _eval_demon_max.
<tt style='background-color:#E8E8E8;'> app.RegexpChunkApp <a href=' /app/chunkparser_app.py#L1246'>mainloop</a>()</tt>	Enter the tkinter mainloop this function must be called if.
<tt style='background-color:#E8E8E8;'> parse.GenericStanfordParser <a href=' /parse/stanford.py#L100'>parse_sents</a>(sentences,verbose)</tt>	Use stanfordparser to parse multiple sentences takes multiple sentences as a.
<tt style='background-color:#E8E8E8;'> parse.GenericStanfordParser <a href=' /parse/stanford.py#L124'>raw_parse</a>(sentence,verbose)</tt>	Use stanfordparser to parse a sentence takes a sentence as a string.
<tt style='background-color:#E8E8E8;'> parse.GenericStanfordParser <a href=' /parse/stanford.py#L136'>raw_parse_sents</a>(sentences,verbose)</tt>	Use stanfordparser to parse multiple sentences takes multiple sentences as a.
<tt style='background-color:#E8E8E8;'> parse.GenericStanfordParser <a href=' /parse/stanford.py#L154'>tagged_parse</a>(sentence,verbose)</tt>	Use stanfordparser to parse a sentence takes a sentence as a list of.
<tt style='background-color:#E8E8E8;'> parse.GenericStanfordParser <a href=' /parse/stanford.py#L166'>tagged_parse_sents</a>(sentences,verbose)</tt>	Use stanfordparser to parse multiple sentences takes multiple sentences.
<tt style='background-color:#E8E8E8;'> parse.StanfordNeuralDependencyParser <a href=' /parse/stanford.py#L387'>tagged_parse_sents</a>(sentences,verbose)</tt>	Currently unimplemented because the neural dependency parser and the stanfordcorenlp pipeline class doesn't support passing in pre-.
<tt style='background-color:#E8E8E8;'> parse.EdgeI <a href=' /parse/chart.py#L101'>span</a>()</tt>	Return a tuple s e , where tokens[s e] is the portion of the sentence that is consistent with this.
<tt style='background-color:#E8E8E8;'> parse.EdgeI <a href=' /parse/chart.py#L111'>start</a>()</tt>	Return the start index of this edge's span.
<tt style='background-color:#E8E8E8;'> parse.EdgeI <a href=' /parse/chart.py#L119'>end</a>()</tt>	Return the end index of this edge's span.
<tt style='background-color:#E8E8E8;'> parse.EdgeI <a href=' /parse/chart.py#L127'>length</a>()</tt>	Return the length of this edge's span.
<tt style='background-color:#E8E8E8;'> parse.EdgeI <a href=' /parse/chart.py#L139'>lhs</a>()</tt>	Return this edge's left-hand side which specifies what kind of structure is hypothesized by this edge.
<tt style='background-color:#E8E8E8;'> parse.EdgeI <a href=' /parse/chart.py#L153'>rhs</a>()</tt>	Return this edge's right-hand side which specifies the content of the structure hypothesized by this edge.
<tt style='background-color:#E8E8E8;'> parse.EdgeI <a href=' /parse/chart.py#L163'>dot</a>()</tt>	Return this edge's dot position which indicates how much of the hypothesized structure is consistent with the.
<tt style='background-color:#E8E8E8;'> parse.EdgeI <a href=' /parse/chart.py#L174'>nextsym</a>()</tt>	Return the element of this edge's right-hand side that immediately follows its dot.
<tt style='background-color:#E8E8E8;'> parse.EdgeI <a href=' /parse/chart.py#L183'>is_complete</a>()</tt>	Return true if this edge's structure is fully consistent with the text.
<tt style='background-color:#E8E8E8;'> parse.EdgeI <a href=' /parse/chart.py#L192'>is_incomplete</a>()</tt>	Return true if this edge's structure is partially consistent with the text.
<tt style='background-color:#E8E8E8;'> parse.TreeEdge <a href=' /parse/chart.py#L252'>__init__</a>(span,lhs,rhs,dot)</tt>	Construct a new treeedge.
<tt style='background-color:#E8E8E8;'> parse.TreeEdge <a href=' /parse/chart.py#L281'>from_production</a>(production,index)</tt>	Return a new treeedge formed from the given production.
<tt style='background-color:#E8E8E8;'> parse.TreeEdge <a href=' /parse/chart.py#L294'>move_dot_forward</a>(new_end)</tt>	Return a new treeedge formed from this edge.
<tt style='background-color:#E8E8E8;'> parse.LeafEdge <a href=' /parse/chart.py#L350'>__init__</a>(leaf,index)</tt>	Construct a new leafedge.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L413'>__init__</a>(tokens)</tt>	Construct a new chart the chart is initialized with the.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L428'>initialize</a>()</tt>	Clear the chart.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L446'>num_leaves</a>()</tt>	Return the number of words in this chart's sentence.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L454'>leaf</a>(index)</tt>	Return the leaf value of the word at the given index.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L462'>leaves</a>()</tt>	Return a list of the leaf values of each word in the chart's sentence.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L475'>edges</a>()</tt>	Return a list of all edges in this chart new edges.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L486'>iteredges</a>()</tt>	Return an iterator over the edges in this chart it is.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L500'>num_edges</a>()</tt>	Return the number of edges contained in this chart.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L508'>select</a>()</tt>	Return an iterator over the edges in this chart any.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L545'>_add_index</a>(restr_keys)</tt>	A helper function for select, which creates a new index for a given set of attributes aka restriction keys.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L563'>_register_with_indexes</a>(edge)</tt>	A helper function for insert, which registers the new edge with all existing indexes.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L576'>insert_with_backpointer</a>(new_edge,previous_edge,child_edge)</tt>	Add a new edge to the chart using a pointer to the previous edge.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L584'>insert</a>(edge)</tt>	Add a new edge to the chart and return true if this operation modified the chart.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L624'>parses</a>(root,tree_class)</tt>	Return an iterator of the complete tree structures that span the entire chart and whose root node is root.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L633'>trees</a>(edge,tree_class,complete)</tt>	Return an iterator of the tree structures that are associated with edge.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L650'>_trees</a>(edge,complete,memo,tree_class)</tt>	A helper function for trees.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L706'>child_pointer_lists</a>(edge)</tt>	Return the set of child pointer lists for the given edge.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L720'>pretty_format_edge</a>(edge,width)</tt>	Return a pretty-printed string representation of a given edge in this chart.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L751'>pretty_format_leaves</a>(width)</tt>	Return a pretty-printed string representation of this chart's leaves.
<tt style='background-color:#E8E8E8;'> parse.Chart <a href=' /parse/chart.py#L769'>pretty_format</a>(width)</tt>	Return a pretty-printed string representation of this chart.
<tt style='background-color:#E8E8E8;'> parse.ChartRuleI <a href=' /parse/chart.py#L864'>apply</a>(chart,grammar)</tt>	Return a generator that will add edges licensed by this rule and the given edges to the chart one at a time.
<tt style='background-color:#E8E8E8;'> parse.ChartRuleI <a href=' /parse/chart.py#L879'>apply_everywhere</a>(chart,grammar)</tt>	Return a generator that will add all edges licensed by this rule given the edges that are currently in the.
<tt style='background-color:#E8E8E8;'> parse.ChartParser <a href=' /parse/chart.py#L1240'>__init__</a>(grammar,strategy,trace,trace_chart_width)</tt>	Create a new chart parser that uses grammar to parse texts.
<tt style='background-color:#E8E8E8;'> parse.ChartParser <a href=' /parse/chart.py#L1297'>chart_parse</a>(tokens,trace)</tt>	Return the final parse chart from which all possible parse trees can be extracted.
<tt style='background-color:#E8E8E8;'> parse.SteppingChartParser <a href=' /parse/chart.py#L1420'>initialize</a>(tokens)</tt>	Begin parsing the given tokens.
<tt style='background-color:#E8E8E8;'> parse.SteppingChartParser <a href=' /parse/chart.py#L1429'>step</a>()</tt>	Return a generator that adds edges to the chart one at a time.
<tt style='background-color:#E8E8E8;'> parse.SteppingChartParser <a href=' /parse/chart.py#L1459'>_parse</a>()</tt>	A generator that implements the actual parsing algorithm.
<tt style='background-color:#E8E8E8;'> parse.SteppingChartParser <a href=' /parse/chart.py#L1480'>strategy</a>()</tt>	Return the strategy used by this parser.
<tt style='background-color:#E8E8E8;'> parse.SteppingChartParser <a href=' /parse/chart.py#L1484'>grammar</a>()</tt>	Return the grammar used by this parser.
<tt style='background-color:#E8E8E8;'> parse.SteppingChartParser <a href=' /parse/chart.py#L1488'>chart</a>()</tt>	Return the chart that is used by this parser.
<tt style='background-color:#E8E8E8;'> parse.SteppingChartParser <a href=' /parse/chart.py#L1492'>current_chartrule</a>()</tt>	Return the chart rule used to generate the most recent edge.
<tt style='background-color:#E8E8E8;'> parse.SteppingChartParser <a href=' /parse/chart.py#L1496'>parses</a>(tree_class)</tt>	Return the parse trees currently contained in the chart.
<tt style='background-color:#E8E8E8;'> parse.SteppingChartParser <a href=' /parse/chart.py#L1504'>set_strategy</a>(strategy)</tt>	Change the strategy that the parser uses to decide which edges to add to the chart.
<tt style='background-color:#E8E8E8;'> parse.SteppingChartParser <a href=' /parse/chart.py#L1517'>set_grammar</a>(grammar)</tt>	Change the grammar used by the parser.
<tt style='background-color:#E8E8E8;'> parse.SteppingChartParser <a href=' /parse/chart.py#L1523'>set_chart</a>(chart)</tt>	Load a given chart into the chart parser.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/recursivedescent.py#L628'>demo</a>(choice,print_times,print_grammar,print_trees)</tt>	A demonstration of the chart parsers.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/util.py#L22'>load_parser</a>(grammar_url,trace,parser,chart_class)</tt>	Load a grammar from a file and build a parser based on that grammar.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/util.py#L79'>taggedsent_to_conll</a>(sentence)</tt>	A module to convert a single pos tagged sentence into conll format.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/util.py#L105'>taggedsents_to_conll</a>(sentences)</tt>	A module to convert the a pos tagged document stream (i.
<tt style='background-color:#E8E8E8;'> parse.TestGrammar <a href=' /parse/util.py#L160'>run</a>(show_trees)</tt>	Sentences in the test suite are divided into two classes - grammatical (accept) and.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/util.py#L193'>extract_test_sentences</a>(string,comment_chars,encoding)</tt>	Parses a string with one test sentence per line.
<tt style='background-color:#E8E8E8;'> parse.Configuration <a href=' /parse/transitionparser.py#L44'>__init__</a>(dep_graph)</tt>	:param dep_graph the representation of an input in the form of dependency graph.
<tt style='background-color:#E8E8E8;'> parse.Configuration <a href=' /parse/transitionparser.py#L60'>_check_informative</a>(feat,flag)</tt>	Check whether a feature is informative.
<tt style='background-color:#E8E8E8;'> parse.Configuration <a href=' /parse/transitionparser.py#L74'>extract_features</a>()</tt>	Extract the set of features for the current configuration implement standard features as describe in.
<tt style='background-color:#E8E8E8;'> parse.Transition <a href=' /parse/transitionparser.py#L188'>__init__</a>(alg_option)</tt>	:param alg_option the algorithm option of this parser currently support arc-standard and arc-eager algorithm.
<tt style='background-color:#E8E8E8;'> parse.Transition <a href=' /parse/transitionparser.py#L200'>left_arc</a>(conf,relation)</tt>	Note that the algorithm for left-arc is quite similar except for precondition for both arc-standard and arc-eager.
<tt style='background-color:#E8E8E8;'> parse.Transition <a href=' /parse/transitionparser.py#L227'>right_arc</a>(conf,relation)</tt>	Note that the algorithm for right-arc is different for arc-standard and arc-eager.
<tt style='background-color:#E8E8E8;'> parse.Transition <a href=' /parse/transitionparser.py#L246'>reduce</a>(conf)</tt>	Note that the algorithm for reduce is only available for arc-eager.
<tt style='background-color:#E8E8E8;'> parse.Transition <a href=' /parse/transitionparser.py#L268'>shift</a>(conf)</tt>	Note that the algorithm for shift is the same for arc-standard and arc-eager.
<tt style='background-color:#E8E8E8;'> parse.TransitionParser <a href=' /parse/transitionparser.py#L288'>__init__</a>(algorithm)</tt>	:param algorithm the algorithm option of this parser currently support arc-standard and arc-eager algorithm.
<tt style='background-color:#E8E8E8;'> parse.TransitionParser <a href=' /parse/transitionparser.py#L314'>_convert_to_binary_features</a>(features)</tt>	:param features list of feature string which is needed to convert to binary features.
<tt style='background-color:#E8E8E8;'> parse.TransitionParser <a href=' /parse/transitionparser.py#L354'>_write_to_file</a>(key,binary_features,input_file)</tt>	Write the binary features to input file and update the transition dictionary.
<tt style='background-color:#E8E8E8;'> parse.TransitionParser <a href=' /parse/transitionparser.py#L364'>_create_training_examples_arc_std</a>(depgraphs,input_file)</tt>	Create the training example in the libsvm format and write it to the input_file.
<tt style='background-color:#E8E8E8;'> parse.TransitionParser <a href=' /parse/transitionparser.py#L429'>_create_training_examples_arc_eager</a>(depgraphs,input_file)</tt>	Create the training example in the libsvm format and write it to the input_file.
<tt style='background-color:#E8E8E8;'> parse.TransitionParser <a href=' /parse/transitionparser.py#L493'>train</a>(depgraphs,modelfile,verbose)</tt>	:param depgraphs : list of dependencygraph as the training data.
<tt style='background-color:#E8E8E8;'> parse.TransitionParser <a href=' /parse/transitionparser.py#L534'>parse</a>(depgraphs,modelFile)</tt>	:param depgraphs the list of test sentence each sentence is represented as a dependency graph where the 'head' information is dummy.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/recursivedescent.py#L628'>demo</a>()</tt>	A demonstration of the recursive descent parser.
<tt style='background-color:#E8E8E8;'> parse.DependencyScorerI <a href=' /parse/nonprojectivedependencyparser.py#L41'>train</a>(graphs)</tt>	:type graphs list dependencygraph.
<tt style='background-color:#E8E8E8;'> parse.DependencyScorerI <a href=' /parse/nonprojectivedependencyparser.py#L51'>score</a>(graph)</tt>	:type graph dependencygraph.
<tt style='background-color:#E8E8E8;'> parse.NaiveBayesDependencyScorer <a href=' /parse/nonprojectivedependencyparser.py#L102'>train</a>(graphs)</tt>	Trains a naivebayesclassifier using the edges present in graphs list as positive examples the edges not present as.
<tt style='background-color:#E8E8E8;'> parse.NaiveBayesDependencyScorer <a href=' /parse/nonprojectivedependencyparser.py#L138'>score</a>(graph)</tt>	Converts the graph into a feature-based representation of each edge and then assigns a score to each based on the.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticNonprojectiveParser <a href=' /parse/nonprojectivedependencyparser.py#L251'>__init__</a>()</tt>	Creates a new non-projective parser.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticNonprojectiveParser <a href=' /parse/nonprojectivedependencyparser.py#L257'>train</a>(graphs,dependency_scorer)</tt>	Trains a dependencyscoreri from a set of dependencygraph objects and establishes this as the parser's scorer.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticNonprojectiveParser <a href=' /parse/nonprojectivedependencyparser.py#L273'>initialize_edge_scores</a>(graph)</tt>	Assigns a score to every edge in the dependencygraph graph.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticNonprojectiveParser <a href=' /parse/nonprojectivedependencyparser.py#L284'>collapse_nodes</a>(new_node,cycle_path,g_graph,b_graph)</tt>	Takes a list of nodes that have been identified to belong to a cycle and collapses them into on larger node.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticNonprojectiveParser <a href=' /parse/nonprojectivedependencyparser.py#L304'>update_edge_scores</a>(new_node,cycle_path)</tt>	Updates the edge scores to reflect a collapse operation into new_node.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticNonprojectiveParser <a href=' /parse/nonprojectivedependencyparser.py#L346'>compute_original_indexes</a>(new_indexes)</tt>	As nodes are collapsed into others they are replaced by the new node in the graph but it's still necessary.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticNonprojectiveParser <a href=' /parse/nonprojectivedependencyparser.py#L373'>compute_max_subtract_score</a>(column_index,cycle_indexes)</tt>	When updating scores the score of the highest-weighted incoming arc is subtracted upon collapse.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticNonprojectiveParser <a href=' /parse/nonprojectivedependencyparser.py#L393'>best_incoming_arc</a>(node_index)</tt>	Returns the source of the best incoming arc to the node with address node_index.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticNonprojectiveParser <a href=' /parse/nonprojectivedependencyparser.py#L437'>parse</a>(tokens,tags)</tt>	Parses a list of tokens in accordance to the mst parsing algorithm for non-projective dependency parses.
<tt style='background-color:#E8E8E8;'> parse.NonprojectiveDependencyParser <a href=' /parse/nonprojectivedependencyparser.py#L597'>__init__</a>(dependency_grammar)</tt>	Creates a new nonprojectivedependencyparser.
<tt style='background-color:#E8E8E8;'> parse.NonprojectiveDependencyParser <a href=' /parse/nonprojectivedependencyparser.py#L606'>parse</a>(tokens)</tt>	Parses the input tokens with respect to the parser's grammar parsing.
<tt style='background-color:#E8E8E8;'> parse.ViterbiParser <a href=' /parse/viterbi.py#L76'>__init__</a>(grammar,trace)</tt>	Create a new viterbiparser parser that uses grammar to parse texts.
<tt style='background-color:#E8E8E8;'> parse.ViterbiParser <a href=' /parse/viterbi.py#L95'>trace</a>(trace)</tt>	Set the level of tracing output that should be generated when parsing a text.
<tt style='background-color:#E8E8E8;'> parse.ViterbiParser <a href=' /parse/viterbi.py#L148'>_add_constituents_spanning</a>(span,constituents,tokens)</tt>	Find any constituents that might cover span, and add them to the most likely constituents table.
<tt style='background-color:#E8E8E8;'> parse.ViterbiParser <a href=' /parse/viterbi.py#L217'>_find_instantiations</a>(span,constituents)</tt>	:return a list of the production instantiations that cover a given span of the text.
<tt style='background-color:#E8E8E8;'> parse.ViterbiParser <a href=' /parse/viterbi.py#L249'>_match_rhs</a>(rhs,span,constituents)</tt>	:return a set of all the lists of children that cover span and that match rhs.
<tt style='background-color:#E8E8E8;'> parse.ViterbiParser <a href=' /parse/viterbi.py#L291'>_trace_production</a>(production,p,span,width)</tt>	Print trace output indicating that a given production has been applied at a given location.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/malt.py#L60'>find_maltparser</a>(parser_dirname)</tt>	A module to find maltparser jar file and its dependencies.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/malt.py#L79'>find_malt_model</a>(model_filename)</tt>	A module to find pre-trained maltparser model.
<tt style='background-color:#E8E8E8;'> parse.MaltParser <a href=' /parse/malt.py#L110'>__init__</a>(parser_dirname,model_filename,tagger,additional_java_args)</tt>	An interface for parsing with the malt parser.
<tt style='background-color:#E8E8E8;'> parse.MaltParser <a href=' /parse/malt.py#L145'>parse_tagged_sents</a>(sentences,verbose,top_relation_label)</tt>	Use maltparser to parse multiple pos tagged sentences takes multiple.
<tt style='background-color:#E8E8E8;'> parse.MaltParser <a href=' /parse/malt.py#L195'>parse_sents</a>(sentences,verbose,top_relation_label)</tt>	Use maltparser to parse multiple sentences.
<tt style='background-color:#E8E8E8;'> parse.MaltParser <a href=' /parse/malt.py#L209'>generate_malt_command</a>(inputfilename,outputfilename,mode)</tt>	This function generates the maltparser command use at the terminal.
<tt style='background-color:#E8E8E8;'> parse.MaltParser <a href=' /parse/malt.py#L244'>train</a>(depgraphs,verbose)</tt>	Train maltparser from a list of dependencygraph objects.
<tt style='background-color:#E8E8E8;'> parse.MaltParser <a href=' /parse/malt.py#L262'>train_from_file</a>(conll_file,verbose)</tt>	Train maltparser from a file.
<tt style='background-color:#E8E8E8;'> parse.ShiftReduceParser <a href=' /parse/shiftreduce.py#L60'>__init__</a>(grammar,trace)</tt>	Create a new shiftreduceparser, that uses grammar to parse texts.
<tt style='background-color:#E8E8E8;'> parse.ShiftReduceParser <a href=' /parse/shiftreduce.py#L105'>_shift</a>(stack,remaining_text)</tt>	Move a token from the beginning of remaining_text to the end of stack.
<tt style='background-color:#E8E8E8;'> parse.ShiftReduceParser <a href=' /parse/shiftreduce.py#L122'>_match_rhs</a>(rhs,rightmost_stack)</tt>	:rtype bool :return true if the right hand side of a cfg production.
<tt style='background-color:#E8E8E8;'> parse.ShiftReduceParser <a href=' /parse/shiftreduce.py#L150'>_reduce</a>(stack,remaining_text,production)</tt>	Find a cfg production whose right hand side matches the rightmost stack elements and combine those stack elements.
<tt style='background-color:#E8E8E8;'> parse.ShiftReduceParser <a href=' /parse/shiftreduce.py#L195'>trace</a>(trace)</tt>	Set the level of tracing output that should be generated when parsing a text.
<tt style='background-color:#E8E8E8;'> parse.ShiftReduceParser <a href=' /parse/shiftreduce.py#L211'>_trace_stack</a>(stack,remaining_text,marker)</tt>	Print trace output displaying the given stack and text.
<tt style='background-color:#E8E8E8;'> parse.ShiftReduceParser <a href=' /parse/shiftreduce.py#L229'>_trace_shift</a>(stack,remaining_text)</tt>	Print trace output displaying that a token has been shifted.
<tt style='background-color:#E8E8E8;'> parse.ShiftReduceParser <a href=' /parse/shiftreduce.py#L239'>_trace_reduce</a>(stack,production,remaining_text)</tt>	Print trace output displaying that production was used to reduce stack.
<tt style='background-color:#E8E8E8;'> parse.ShiftReduceParser <a href=' /parse/shiftreduce.py#L252'>_check_grammar</a>()</tt>	Check to make sure that all of the cfg productions are potentially useful.
<tt style='background-color:#E8E8E8;'> parse.SteppingShiftReduceParser <a href=' /parse/shiftreduce.py#L306'>stack</a>()</tt>	:return the parser's stack.
<tt style='background-color:#E8E8E8;'> parse.SteppingShiftReduceParser <a href=' /parse/shiftreduce.py#L313'>remaining_text</a>()</tt>	:return the portion of the text that is not yet covered by the stack.
<tt style='background-color:#E8E8E8;'> parse.SteppingShiftReduceParser <a href=' /parse/shiftreduce.py#L321'>initialize</a>(tokens)</tt>	Start parsing a given text this sets the parser's stack to.
<tt style='background-color:#E8E8E8;'> parse.SteppingShiftReduceParser <a href=' /parse/shiftreduce.py#L330'>step</a>()</tt>	Perform a single parsing operation if a reduction is.
<tt style='background-color:#E8E8E8;'> parse.SteppingShiftReduceParser <a href=' /parse/shiftreduce.py#L345'>shift</a>()</tt>	Move a token from the beginning of the remaining text to the end of the stack.
<tt style='background-color:#E8E8E8;'> parse.SteppingShiftReduceParser <a href=' /parse/shiftreduce.py#L359'>reduce</a>(production)</tt>	Use production to combine the rightmost stack elements into a single tree.
<tt style='background-color:#E8E8E8;'> parse.SteppingShiftReduceParser <a href=' /parse/shiftreduce.py#L378'>undo</a>()</tt>	Return the parser to its state before the most recent shift or reduce operation.
<tt style='background-color:#E8E8E8;'> parse.SteppingShiftReduceParser <a href=' /parse/shiftreduce.py#L393'>reducible_productions</a>()</tt>	:return a list of the productions for which reductions are available for the current parser state.
<tt style='background-color:#E8E8E8;'> parse.SteppingShiftReduceParser <a href=' /parse/shiftreduce.py#L406'>parses</a>()</tt>	:return an iterator of the parses that have been found by this parser so far.
<tt style='background-color:#E8E8E8;'> parse.SteppingShiftReduceParser <a href=' /parse/shiftreduce.py#L420'>set_grammar</a>(grammar)</tt>	Change the grammar used to parse texts.
<tt style='background-color:#E8E8E8;'> parse.FeatureTreeEdge <a href=' /parse/featurechart.py#L50'>__init__</a>(span,lhs,rhs,dot)</tt>	Construct a new edge if the edge is incomplete (i e if.
<tt style='background-color:#E8E8E8;'> parse.FeatureTreeEdge <a href=' /parse/featurechart.py#L76'>from_production</a>(production,index)</tt>	:return a new treeedge formed from the given production.
<tt style='background-color:#E8E8E8;'> parse.FeatureTreeEdge <a href=' /parse/featurechart.py#L88'>move_dot_forward</a>(new_end,bindings)</tt>	:return a new featuretreeedge formed from this edge.
<tt style='background-color:#E8E8E8;'> parse.FeatureTreeEdge <a href=' /parse/featurechart.py#L110'>bindings</a>()</tt>	Return a copy of this edge's bindings dictionary.
<tt style='background-color:#E8E8E8;'> parse.FeatureTreeEdge <a href=' /parse/featurechart.py#L116'>variables</a>()</tt>	:return the set of variables used by this edge.
<tt style='background-color:#E8E8E8;'> parse.FeatureChart <a href=' /parse/featurechart.py#L147'>select</a>()</tt>	Returns an iterator over the edges in this chart.
<tt style='background-color:#E8E8E8;'> parse.FeatureChart <a href=' /parse/featurechart.py#L168'>_add_index</a>(restr_keys)</tt>	A helper function for select, which creates a new index for a given set of attributes aka restriction keys.
<tt style='background-color:#E8E8E8;'> parse.FeatureChart <a href=' /parse/featurechart.py#L187'>_register_with_indexes</a>(edge)</tt>	A helper function for insert, which registers the new edge with all existing indexes.
<tt style='background-color:#E8E8E8;'> parse.FeatureChart <a href=' /parse/featurechart.py#L197'>_get_type_if_possible</a>(item)</tt>	Helper function which returns the type feature of the item,.
<tt style='background-color:#E8E8E8;'> parse.InstantiateVarsChart <a href=' /parse/featurechart.py#L478'>instantiate_edge</a>(edge)</tt>	If the edge is a featuretreeedge, and it is complete then instantiate all variables whose names start with '@',.
<tt style='background-color:#E8E8E8;'> parse.ParserI <a href=' /parse/api.py#L29'>grammar</a>()</tt>	:return the grammar used by this parser.
<tt style='background-color:#E8E8E8;'> parse.ParserI <a href=' /parse/api.py#L35'>parse</a>(sent)</tt>	:return an iterator that generates parse trees for the sentence.
<tt style='background-color:#E8E8E8;'> parse.ParserI <a href=' /parse/api.py#L53'>parse_sents</a>(sents)</tt>	Apply self parse() to each element of sents.
<tt style='background-color:#E8E8E8;'> parse.ParserI <a href=' /parse/api.py#L60'>parse_all</a>(sent)</tt>	:rtype list tree.
<tt style='background-color:#E8E8E8;'> parse.ParserI <a href=' /parse/api.py#L64'>parse_one</a>(sent)</tt>	:rtype tree or none.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/generate.py#L17'>generate</a>(grammar,start,depth,n)</tt>	Generates an iterator of all sentences from a cfg.
<tt style='background-color:#E8E8E8;'> parse.DependencyEvaluator <a href=' /parse/evaluate.py#L71'>__init__</a>(parsed_sents,gold_sents)</tt>	:param parsed_sents the list of parsed_sents as the output of parser.
<tt style='background-color:#E8E8E8;'> parse.DependencyEvaluator <a href=' /parse/evaluate.py#L79'>_remove_punct</a>(inStr)</tt>	Function to remove punctuation from unicode string.
<tt style='background-color:#E8E8E8;'> parse.DependencyEvaluator <a href=' /parse/evaluate.py#L88'>eval</a>()</tt>	Return the labeled attachment score las and unlabeled attachment score uas.
<tt style='background-color:#E8E8E8;'> parse.BottomUpProbabilisticChartParser <a href=' /parse/pchart.py#L161'>__init__</a>(grammar,beam_size,trace)</tt>	Create a new bottomupprobabilisticchartparser, that uses grammar to parse texts.
<tt style='background-color:#E8E8E8;'> parse.BottomUpProbabilisticChartParser <a href=' /parse/pchart.py#L185'>trace</a>(trace)</tt>	Set the level of tracing output that should be generated when parsing a text.
<tt style='background-color:#E8E8E8;'> parse.BottomUpProbabilisticChartParser <a href=' /parse/pchart.py#L273'>sort_queue</a>(queue,chart)</tt>	Sort the given queue of edge objects placing the edge that should be tried first at the beginning of the queue.
<tt style='background-color:#E8E8E8;'> parse.BottomUpProbabilisticChartParser <a href=' /parse/pchart.py#L291'>_prune</a>(queue,chart)</tt>	Discard items in the queue if the queue is longer than the beam.
<tt style='background-color:#E8E8E8;'> parse.InsideChartParser <a href=' /parse/pchart.py#L316'>sort_queue</a>(queue,chart)</tt>	Sort the given queue of edges in descending order of the inside probabilities of the edges' trees.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/recursivedescent.py#L628'>demo</a>(choice,draw_parses,print_parses)</tt>	A demonstration of the probabilistic parsers the user is.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L89'>remove_by_address</a>(address)</tt>	Removes the node with the given address references.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L96'>redirect_arcs</a>(originals,redirect)</tt>	Redirects arcs to any of the nodes in the originals list to the redirect node address.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L110'>add_arc</a>(head_address,mod_address)</tt>	Adds an arc from the node specified by head_address to the node specified by the mod address.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L121'>connect_graph</a>()</tt>	Fully connects all non-root nodes all nodes are set to be dependents.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L134'>get_by_address</a>(node_address)</tt>	Return the node with the given address.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L138'>contains_address</a>(node_address)</tt>	Returns true if the graph contains a node with the given node address false otherwise.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L145'>to_dot</a>()</tt>	Return a dot representation suitable for using with graphviz.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L186'>_repr_svg_</a>()</tt>	Show svg representation of the transducer ipython magic.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L223'>load</a>(filename,zero_based,cell_separator,top_relation_label)</tt>	:param filename a name of a file in malt-tab format.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L248'>left_children</a>(node_index)</tt>	Returns the number of left children under the node specified by the given address.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L257'>right_children</a>(node_index)</tt>	Returns the number of right children under the node specified by the given address.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L270'>_parse</a>(input_,cell_extractor,zero_based,cell_separator)</tt>	Parse a sentence.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L391'>_tree</a>(i)</tt>	Turn dependency graphs into nltk trees.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L406'>tree</a>()</tt>	Starting with the root node build a dependency tree using the nltk tree constructor.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L417'>triples</a>(node)</tt>	Extract dependency triples of the form.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L446'>contains_cycle</a>()</tt>	Check whether there are cycles.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L507'>to_conll</a>(style)</tt>	The dependency graph in conll format.
<tt style='background-color:#E8E8E8;'> parse.DependencyGraph <a href=' /parse/dependencygraph.py#L530'>nx_graph</a>()</tt>	Convert the data in a nodelist into a networkx labeled directed graph.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/dependencygraph.py#L561'>malt_demo</a>(nx)</tt>	A demonstration of the result of reading a dependency version of the first sentence of the penn treebank.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/dependencygraph.py#L604'>conll_demo</a>()</tt>	A demonstration of how to read a string representation of a conll format dependency tree.
<tt style='background-color:#E8E8E8;'> parse.DependencySpan <a href=' /parse/projectivedependencyparser.py#L47'>head_index</a>()</tt>	:return an value indexing the head of the entire dependencyspan.
<tt style='background-color:#E8E8E8;'> parse.DependencySpan <a href=' /parse/projectivedependencyparser.py#L54'>__repr__</a>()</tt>	:return a concise string representatino of the dependencyspan.
<tt style='background-color:#E8E8E8;'> parse.DependencySpan <a href=' /parse/projectivedependencyparser.py#L61'>__str__</a>()</tt>	:return a verbose string representation of the dependencyspan.
<tt style='background-color:#E8E8E8;'> parse.DependencySpan <a href=' /parse/projectivedependencyparser.py#L83'>__hash__</a>()</tt>	:return the hash value of this dependencyspan.
<tt style='background-color:#E8E8E8;'> parse.ChartCell <a href=' /parse/projectivedependencyparser.py#L100'>__init__</a>(x,y)</tt>	:param x this cell's x coordinate.
<tt style='background-color:#E8E8E8;'> parse.ChartCell <a href=' /parse/projectivedependencyparser.py#L111'>add</a>(span)</tt>	Appends the given span to the list of spans representing the chart cell's entries.
<tt style='background-color:#E8E8E8;'> parse.ChartCell <a href=' /parse/projectivedependencyparser.py#L121'>__str__</a>()</tt>	:return a verbose string representation of this chartcell.
<tt style='background-color:#E8E8E8;'> parse.ChartCell <a href=' /parse/projectivedependencyparser.py#L128'>__repr__</a>()</tt>	:return a concise string representation of this chartcell.
<tt style='background-color:#E8E8E8;'> parse.ProjectiveDependencyParser <a href=' /parse/projectivedependencyparser.py#L154'>__init__</a>(dependency_grammar)</tt>	Create a new projectivedependencyparser from a word-to-word dependency grammar dependencygrammar.
<tt style='background-color:#E8E8E8;'> parse.ProjectiveDependencyParser <a href=' /parse/projectivedependencyparser.py#L164'>parse</a>(tokens)</tt>	Performs a projective dependency parse on the list of tokens using a chart-based span-concatenation algorithm similar to eisner 1996.
<tt style='background-color:#E8E8E8;'> parse.ProjectiveDependencyParser <a href=' /parse/projectivedependencyparser.py#L204'>concatenate</a>(span1,span2)</tt>	Concatenates the two spans in whichever way possible this.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticProjectiveDependencyParser <a href=' /parse/projectivedependencyparser.py#L271'>__init__</a>()</tt>	Create a new probabilistic dependency parser no additional.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticProjectiveDependencyParser <a href=' /parse/projectivedependencyparser.py#L277'>parse</a>(tokens)</tt>	Parses the list of tokens subject to the projectivity constraint and the productions in the parser's grammar.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticProjectiveDependencyParser <a href=' /parse/projectivedependencyparser.py#L323'>concatenate</a>(span1,span2)</tt>	Concatenates the two spans in whichever way possible this.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticProjectiveDependencyParser <a href=' /parse/projectivedependencyparser.py#L356'>train</a>(graphs)</tt>	Trains a probabilisticdependencygrammar based on the list of input dependencygraphs.
<tt style='background-color:#E8E8E8;'> parse.ProbabilisticProjectiveDependencyParser <a href=' /parse/projectivedependencyparser.py#L418'>compute_prob</a>(dg)</tt>	Computes the probability of a dependency graph based on the parser's probability model (defined by the parser's.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/projectivedependencyparser.py#L494'>projective_rule_parse_demo</a>()</tt>	A demonstration showing the creation and use of a dependencygrammar to perform a projective dependency.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/projectivedependencyparser.py#L511'>arity_parse_demo</a>()</tt>	A demonstration showing the creation of a dependencygrammar in which a specific number of modifiers is listed for a given.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/projectivedependencyparser.py#L559'>projective_prob_parse_demo</a>()</tt>	A demo showing the training and use of a projective dependency parser.
<tt style='background-color:#E8E8E8;'> parse.BllipParser <a href=' /parse/bllip.py#L116'>__init__</a>(parser_model,reranker_features,reranker_weights,parser_options)</tt>	Load a bllip parser model from scratch you'll typically want to.
<tt style='background-color:#E8E8E8;'> parse.BllipParser <a href=' /parse/bllip.py#L156'>parse</a>(sentence)</tt>	Use bllip parser to parse a sentence takes a sentence as a list.
<tt style='background-color:#E8E8E8;'> parse.BllipParser <a href=' /parse/bllip.py#L174'>tagged_parse</a>(word_and_tag_pairs)</tt>	Use bllip to parse a sentence takes a sentence as a list of.
<tt style='background-color:#E8E8E8;'> parse.BllipParser <a href=' /parse/bllip.py#L202'>from_unified_model_dir</a>(this_class,model_dir,parser_options,reranker_options)</tt>	Create a bllipparser object from a unified parsing model directory.
<tt style='background-color:#E8E8E8;'> parse.IncrementalChartParser <a href=' /parse/earleychart.py#L265'>__init__</a>(grammar,strategy,trace,trace_chart_width)</tt>	Create a new earley chart parser that uses grammar to parse texts.
<tt style='background-color:#E8E8E8;'> parse. <a href=' /parse/recursivedescent.py#L628'>demo</a>(print_times,print_grammar,print_trees,trace)</tt>	A demonstration of the earley parsers.
<tt style='background-color:#E8E8E8;'> parse.RecursiveDescentParser <a href=' /parse/recursivedescent.py#L54'>__init__</a>(grammar,trace)</tt>	Create a new recursivedescentparser, that uses grammar to parse texts.
<tt style='background-color:#E8E8E8;'> parse.RecursiveDescentParser <a href=' /parse/recursivedescent.py#L88'>_parse</a>(remaining_text,tree,frontier)</tt>	Recursively expand and match each elements of tree specified by frontier, to cover remaining_text.
<tt style='background-color:#E8E8E8;'> parse.RecursiveDescentParser <a href=' /parse/recursivedescent.py#L135'>_match</a>(rtext,tree,frontier)</tt>	:rtype iter tree :return an iterator of all parses that can be generated by.
<tt style='background-color:#E8E8E8;'> parse.RecursiveDescentParser <a href=' /parse/recursivedescent.py#L178'>_expand</a>(remaining_text,tree,frontier,production)</tt>	:rtype iter tree :return an iterator of all parses that can be generated by.
<tt style='background-color:#E8E8E8;'> parse.RecursiveDescentParser <a href=' /parse/recursivedescent.py#L230'>_production_to_tree</a>(production)</tt>	:rtype tree :return the tree that is licensed by production.
<tt style='background-color:#E8E8E8;'> parse.RecursiveDescentParser <a href=' /parse/recursivedescent.py#L255'>trace</a>(trace)</tt>	Set the level of tracing output that should be generated when parsing a text.
<tt style='background-color:#E8E8E8;'> parse.RecursiveDescentParser <a href=' /parse/recursivedescent.py#L268'>_trace_fringe</a>(tree,treeloc)</tt>	Print trace output displaying the fringe of tree the.
<tt style='background-color:#E8E8E8;'> parse.RecursiveDescentParser <a href=' /parse/recursivedescent.py#L289'>_trace_tree</a>(tree,frontier,operation)</tt>	Print trace output displaying the parser's current state.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L379'>initialize</a>(tokens)</tt>	Start parsing a given text this sets the parser's tree to.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L397'>remaining_text</a>()</tt>	:return the portion of the text that is not yet covered by the tree.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L405'>frontier</a>()</tt>	:return a list of the tree locations of all subtrees that have not yet been expanded and all leaves that have not.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L414'>tree</a>()</tt>	:return a partial structure for the text that is currently being parsed.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L423'>step</a>()</tt>	Perform a single parsing operation if an untried match is.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L454'>expand</a>(production)</tt>	Expand the first element of the frontier in particular if.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L493'>match</a>()</tt>	Match the first element of the frontier in particular if.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L519'>backtrack</a>()</tt>	Return the parser to its state before the most recent match or expand operation.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L534'>expandable_productions</a>()</tt>	:return a list of all the productions for which expansions are available for the current parser state.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L550'>untried_expandable_productions</a>()</tt>	:return a list of all the untried productions for which expansions are available for the current parser state.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L561'>untried_match</a>()</tt>	:return whether the first element of the frontier is a token that has not yet been matched.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L572'>currently_complete</a>()</tt>	:return whether the parser's current state represents a complete parse.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L580'>_parse</a>(remaining_text,tree,frontier)</tt>	A stub version of _parse that sets the parsers current state to the given arguments.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L607'>parses</a>()</tt>	:return an iterator of the parses that have been found by this parser so far.
<tt style='background-color:#E8E8E8;'> parse.SteppingRecursiveDescentParser <a href=' /parse/recursivedescent.py#L615'>set_grammar</a>(grammar)</tt>	Change the grammar used to parse texts.
<tt style='background-color:#E8E8E8;'> ccg.CCGVar <a href=' /ccg/api.py#L79'>__init__</a>(prim_only)</tt>	Initialize a variable selects a new identifier.
<tt style='background-color:#E8E8E8;'> ccg.CCGVar <a href=' /ccg/api.py#L89'>new_id</a>(cls)</tt>	A class method allowing generation of unique variable identifiers.
<tt style='background-color:#E8E8E8;'> ccg.CCGVar <a href=' /ccg/api.py#L108'>substitute</a>(substitutions)</tt>	If there is a substitution corresponding to this variable return the substituted category.
<tt style='background-color:#E8E8E8;'> ccg.CCGVar <a href=' /ccg/api.py#L117'>can_unify</a>(other)</tt>	If the variable can be replaced with other a substitution is returned.
<tt style='background-color:#E8E8E8;'> ccg.Direction <a href=' /ccg/api.py#L153'>restrs</a>()</tt>	A list of restrictions on the combinators.
<tt style='background-color:#E8E8E8;'> ccg.CCGLexicon <a href=' /ccg/lexicon.py#L97'>categories</a>(word)</tt>	Returns all the possible categories for a word.
<tt style='background-color:#E8E8E8;'> ccg.CCGLexicon <a href=' /ccg/lexicon.py#L104'>start</a>()</tt>	Return the target category for the parser.
<tt style='background-color:#E8E8E8;'> ccg.CCGLexicon <a href=' /ccg/lexicon.py#L110'>__str__</a>()</tt>	String representation of the lexicon used for debugging.
<tt style='background-color:#E8E8E8;'> ccg. <a href=' /ccg/lexicon.py#L136'>matchBrackets</a>(string)</tt>	Separate the contents matching the first set of brackets from the rest of the input.
<tt style='background-color:#E8E8E8;'> ccg. <a href=' /ccg/lexicon.py#L156'>nextCategory</a>(string)</tt>	Separate the string for the next portion of the category from the rest.
<tt style='background-color:#E8E8E8;'> ccg. <a href=' /ccg/lexicon.py#L165'>parseApplication</a>(app)</tt>	Parse an application operator.
<tt style='background-color:#E8E8E8;'> ccg. <a href=' /ccg/lexicon.py#L172'>parseSubscripts</a>(subscr)</tt>	Parse the subscripts for a primitive category.
<tt style='background-color:#E8E8E8;'> ccg. <a href=' /ccg/lexicon.py#L181'>parsePrimitiveCategory</a>(chunks,primitives,families,var)</tt>	Parse a primitive category if the primitive is the special category 'var', replace it with the.
<tt style='background-color:#E8E8E8;'> ccg. <a href=' /ccg/lexicon.py#L209'>augParseCategory</a>(line,primitives,families,var)</tt>	Parse a string representing a category and returns a tuple with.
<tt style='background-color:#E8E8E8;'> ccg. <a href=' /ccg/lexicon.py#L241'>fromstring</a>(lex_str,include_semantics)</tt>	Convert string representation into a lexicon for ccgs.
<tt style='background-color:#E8E8E8;'> chat.Chat <a href=' /chat/util.py#L38'>__init__</a>(pairs,reflections)</tt>	Initialize the chatbot pairs is a list of patterns and responses each.
<tt style='background-color:#E8E8E8;'> chat.Chat <a href=' /chat/util.py#L65'>_substitute</a>(str)</tt>	Substitute words in the string according to the specified reflections e.
<tt style='background-color:#E8E8E8;'> chat.Chat <a href=' /chat/util.py#L89'>respond</a>(str)</tt>	Generate a response to the user input.
<tt style='background-color:#E8E8E8;'> translate.IBMModel4 <a href=' /translate/ibm4.py#L168'>__init__</a>(sentence_aligned_corpus,iterations,source_word_classes,target_word_classes)</tt>	Train on sentence_aligned_corpus and create a lexical translation model distortion models a fertility model and a.
<tt style='background-color:#E8E8E8;'> translate.IBMModel4 <a href=' /translate/ibm4.py#L248'>set_uniform_probabilities</a>(sentence_aligned_corpus)</tt>	Set distortion probabilities uniformly to.
<tt style='background-color:#E8E8E8;'> translate.IBMModel4 <a href=' /translate/ibm4.py#L336'>prob_t_a_given_s</a>(alignment_info)</tt>	Probability of target sentence and an alignment given the.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/ibm_model.py#L47'>longest_target_sentence_length</a>(sentence_aligned_corpus)</tt>	:param sentence_aligned_corpus parallel corpus under consideration.
<tt style='background-color:#E8E8E8;'> translate.IBMModel <a href=' /translate/ibm_model.py#L108'>set_uniform_probabilities</a>(sentence_aligned_corpus)</tt>	Initialize probability tables to a uniform distribution derived classes should implement this accordingly.
<tt style='background-color:#E8E8E8;'> translate.IBMModel <a href=' /translate/ibm_model.py#L135'>sample</a>(sentence_pair)</tt>	Sample the most probable alignments from the entire alignment space.
<tt style='background-color:#E8E8E8;'> translate.IBMModel <a href=' /translate/ibm_model.py#L182'>best_model2_alignment</a>(sentence_pair,j_pegged,i_pegged)</tt>	Finds the best alignment according to ibm model 2.
<tt style='background-color:#E8E8E8;'> translate.IBMModel <a href=' /translate/ibm_model.py#L234'>hillclimb</a>(alignment_info,j_pegged)</tt>	Starting from the alignment in alignment_info, look at neighboring alignments iteratively for the best one.
<tt style='background-color:#E8E8E8;'> translate.IBMModel <a href=' /translate/ibm_model.py#L269'>neighboring</a>(alignment_info,j_pegged)</tt>	Determine the neighbors of alignment_info, obtained by.
<tt style='background-color:#E8E8E8;'> translate.IBMModel <a href=' /translate/ibm_model.py#L362'>prob_t_a_given_s</a>(alignment_info)</tt>	Probability of target sentence and an alignment given the source sentence.
<tt style='background-color:#E8E8E8;'> translate.AlignmentInfo <a href=' /translate/ibm_model.py#L428'>fertility_of_i</a>(i)</tt>	Fertility of word in position i of the source sentence.
<tt style='background-color:#E8E8E8;'> translate.AlignmentInfo <a href=' /translate/ibm_model.py#L434'>is_head_word</a>(j)</tt>	:return whether the word in position j of the target.
<tt style='background-color:#E8E8E8;'> translate.AlignmentInfo <a href=' /translate/ibm_model.py#L442'>center_of_cept</a>(i)</tt>	:return the ceiling of the average positions of the words in.
<tt style='background-color:#E8E8E8;'> translate.AlignmentInfo <a href=' /translate/ibm_model.py#L453'>previous_cept</a>(j)</tt>	:return the previous cept of j, or none if j belongs to.
<tt style='background-color:#E8E8E8;'> translate.AlignmentInfo <a href=' /translate/ibm_model.py#L470'>previous_in_tablet</a>(j)</tt>	:return the position of the previous word that is in the same.
<tt style='background-color:#E8E8E8;'> translate.AlignmentInfo <a href=' /translate/ibm_model.py#L482'>zero_indexed_alignment</a>()</tt>	:return zero-indexed alignment suitable for use in external nltk.
<tt style='background-color:#E8E8E8;'> translate.StackDecoder <a href=' /translate/stack_decoder.py#L79'>__init__</a>(phrase_table,language_model)</tt>	:param phrase_table table of translations for source language phrases and the log probabilities for those translations.
<tt style='background-color:#E8E8E8;'> translate.StackDecoder <a href=' /translate/stack_decoder.py#L131'>distortion_factor</a>()</tt>	Float amount of reordering of source phrases.
<tt style='background-color:#E8E8E8;'> translate.StackDecoder <a href=' /translate/stack_decoder.py#L144'>translate</a>(src_sentence)</tt>	:param src_sentence sentence to be translated.
<tt style='background-color:#E8E8E8;'> translate.StackDecoder <a href=' /translate/stack_decoder.py#L193'>find_all_src_phrases</a>(src_sentence)</tt>	Finds all subsequences in src_sentence that have a phrase translation in the translation table.
<tt style='background-color:#E8E8E8;'> translate.StackDecoder <a href=' /translate/stack_decoder.py#L217'>compute_future_scores</a>(src_sentence)</tt>	Determines the approximate scores for translating every subsequence in src_sentence.
<tt style='background-color:#E8E8E8;'> translate.StackDecoder <a href=' /translate/stack_decoder.py#L253'>future_score</a>(hypothesis,future_score_table,sentence_length)</tt>	Determines the approximate score for translating the.
<tt style='background-color:#E8E8E8;'> translate.StackDecoder <a href=' /translate/stack_decoder.py#L263'>expansion_score</a>(hypothesis,translation_option,src_phrase_span)</tt>	Calculate the score of expanding hypothesis with.
<tt style='background-color:#E8E8E8;'> translate.StackDecoder <a href=' /translate/stack_decoder.py#L295'>valid_phrases</a>(all_phrases_from,hypothesis)</tt>	Extract phrases from all_phrases_from that contains words.
<tt style='background-color:#E8E8E8;'> translate._Hypothesis <a href=' /translate/stack_decoder.py#L344'>__init__</a>(raw_score,src_phrase_span,trg_phrase,previous)</tt>	:param raw_score likelihood of hypothesis so far.
<tt style='background-color:#E8E8E8;'> translate._Hypothesis <a href=' /translate/stack_decoder.py#L375'>score</a>()</tt>	Overall score of hypothesis after accounting for local and.
<tt style='background-color:#E8E8E8;'> translate._Hypothesis <a href=' /translate/stack_decoder.py#L382'>untranslated_spans</a>(sentence_length)</tt>	Starting from each untranslated word find the longest.
<tt style='background-color:#E8E8E8;'> translate._Hypothesis <a href=' /translate/stack_decoder.py#L407'>translated_positions</a>()</tt>	List of positions in the source sentence of words already translated.
<tt style='background-color:#E8E8E8;'> translate._Stack <a href=' /translate/stack_decoder.py#L442'>__init__</a>(max_size,beam_threshold)</tt>	:param beam_threshold hypotheses that score less than this factor of the best hypothesis are discarded from the stack.
<tt style='background-color:#E8E8E8;'> translate._Stack <a href=' /translate/stack_decoder.py#L457'>push</a>(hypothesis)</tt>	Add hypothesis to the stack.
<tt style='background-color:#E8E8E8;'> translate._Stack <a href=' /translate/stack_decoder.py#L482'>best</a>()</tt>	:return hypothesis with the highest score in the stack.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/phrase_based.py#L9'>extract</a>(f_start,f_end,e_start,e_end)</tt>	This function checks for alignment point consistency and extracts phrases using the chunk of consistent phrases.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/phrase_based.py#L76'>phrase_extraction</a>(srctext,trgtext,alignment,max_phrase_length)</tt>	Phrase extraction algorithm extracts all consistent phrase pairs from a word-aligned sentence pair.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/gdfa.py#L12'>grow_diag_final_and</a>(srclen,trglen,e2f,f2e)</tt>	This module symmetrisatizes the source-to-target and target-to-source word alignment output and produces aka.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/gleu_score.py#L17'>sentence_gleu</a>(references,hypothesis,min_len,max_len)</tt>	Calculates the sentence level gleu google-bleu score described in yonghui wu mike schuster zhifeng chen quoc v.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/gleu_score.py#L91'>corpus_gleu</a>(list_of_references,hypotheses,min_len,max_len)</tt>	Calculate a single corpus-level gleu score aka system-level gleu for all.
<tt style='background-color:#E8E8E8;'> translate.IBMModel1 <a href=' /translate/ibm1.py#L99'>__init__</a>(sentence_aligned_corpus,iterations,probability_tables)</tt>	Train on sentence_aligned_corpus and create a lexical translation model.
<tt style='background-color:#E8E8E8;'> translate.IBMModel1 <a href=' /translate/ibm1.py#L165'>prob_all_alignments</a>(src_sentence,trg_sentence)</tt>	Computes the probability of all possible word alignments expressed as a marginal distribution over target words t.
<tt style='background-color:#E8E8E8;'> translate.IBMModel1 <a href=' /translate/ibm1.py#L185'>prob_alignment_point</a>(s,t)</tt>	Probability that word t in the target sentence is aligned to.
<tt style='background-color:#E8E8E8;'> translate.IBMModel1 <a href=' /translate/ibm1.py#L192'>prob_t_a_given_s</a>(alignment_info)</tt>	Probability of target sentence and an alignment given the.
<tt style='background-color:#E8E8E8;'> translate.IBMModel1 <a href=' /translate/ibm1.py#L212'>__align</a>(sentence_pair)</tt>	Determines the best word alignment for one sentence pair from the corpus that the model was trained on.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/chrf_score.py#L16'>sentence_chrf</a>(reference,hypothesis,min_len,max_len)</tt>	Calculates the sentence level chrf character n-gram f-score described in - maja popovic.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/chrf_score.py#L84'>corpus_chrf</a>(list_of_references,hypotheses,min_len,max_len)</tt>	Calculates the corpus level chrf character n-gram f-score it is the micro-averaged value of the sentence/segment level chrf score.
<tt style='background-color:#E8E8E8;'> translate.AlignedSent <a href=' /translate/api.py#L72'>__repr__</a>()</tt>	Return a string representation for this alignedsent.
<tt style='background-color:#E8E8E8;'> translate.AlignedSent <a href=' /translate/api.py#L83'>_to_dot</a>()</tt>	Dot representation of the aligned sentence.
<tt style='background-color:#E8E8E8;'> translate.AlignedSent <a href=' /translate/api.py#L117'>_repr_svg_</a>()</tt>	Ipython magic : show svg representation of this alignedsent.
<tt style='background-color:#E8E8E8;'> translate.AlignedSent <a href=' /translate/api.py#L133'>__str__</a>()</tt>	Return a human-readable string representation for this alignedsent.
<tt style='background-color:#E8E8E8;'> translate.AlignedSent <a href=' /translate/api.py#L143'>invert</a>()</tt>	Return the aligned sentence pair reversing the directionality.
<tt style='background-color:#E8E8E8;'> translate.Alignment <a href=' /translate/api.py#L185'>fromstring</a>(cls,s)</tt>	Read a giza-formatted string and return an alignment object.
<tt style='background-color:#E8E8E8;'> translate.Alignment <a href=' /translate/api.py#L201'>__getitem__</a>(key)</tt>	Look up the alignments that map from a given index or slice.
<tt style='background-color:#E8E8E8;'> translate.Alignment <a href=' /translate/api.py#L209'>invert</a>()</tt>	Return an alignment object being the inverted mapping.
<tt style='background-color:#E8E8E8;'> translate.Alignment <a href=' /translate/api.py#L215'>range</a>(positions)</tt>	Work out the range of the mapping from the given positions.
<tt style='background-color:#E8E8E8;'> translate.Alignment <a href=' /translate/api.py#L229'>__repr__</a>()</tt>	Produce a giza-formatted string representing the alignment.
<tt style='background-color:#E8E8E8;'> translate.Alignment <a href=' /translate/api.py#L235'>__str__</a>()</tt>	Produce a giza-formatted string representing the alignment.
<tt style='background-color:#E8E8E8;'> translate.Alignment <a href=' /translate/api.py#L241'>_build_index</a>()</tt>	Build a list self _index such that self _index[i] is a list.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/api.py#L259'>_check_alignment</a>(num_words,num_mots,alignment)</tt>	Check whether the alignments are legal.
<tt style='background-color:#E8E8E8;'> translate.PhraseTable <a href=' /translate/api.py#L289'>translations_for</a>(src_phrase)</tt>	Get the translations for a source language phrase.
<tt style='background-color:#E8E8E8;'> translate.PhraseTable <a href=' /translate/api.py#L304'>add</a>(src_phrase,trg_phrase,log_prob)</tt>	:type src_phrase tuple str.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/ribes_score.py#L17'>sentence_ribes</a>(references,hypothesis,alpha,beta)</tt>	The ribes rank-based intuitive bilingual evaluation score from hideki isozaki tsutomu hirao kevin duh katsuhito sudoh and.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/ribes_score.py#L71'>corpus_ribes</a>(list_of_references,hypotheses,alpha,beta)</tt>	This function "calculates ribes for a system output hypothesis with multiple references and returns "best" score among multi-references and.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/ribes_score.py#L123'>position_of_ngram</a>(ngram,sentence)</tt>	This function returns the position of the first instance of the ngram appearing in a sentence.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/ribes_score.py#L151'>word_rank_alignment</a>(reference,hypothesis,character_based)</tt>	This is the word rank alignment algorithm described in the paper to produce the *worder* list i.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/ribes_score.py#L233'>find_increasing_sequences</a>(worder)</tt>	Given the *worder* list this function groups monotonic +1 sequences.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/ribes_score.py#L257'>kendall_tau</a>(worder,normalize)</tt>	Calculates the kendall's tau correlation coefficient given the *worder* list of word alignments from word_rank_alignment(), using the formula.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/ribes_score.py#L297'>spearman_rho</a>(worder,normalize)</tt>	Calculates the spearman's rho correlation coefficient given the *worder* list of word alignment from word_rank_alignment(), using the formula.
<tt style='background-color:#E8E8E8;'> translate.IBMModel5 <a href=' /translate/ibm5.py#L175'>__init__</a>(sentence_aligned_corpus,iterations,source_word_classes,target_word_classes)</tt>	Train on sentence_aligned_corpus and create a lexical translation model vacancy models a fertility model and a.
<tt style='background-color:#E8E8E8;'> translate.IBMModel5 <a href=' /translate/ibm5.py#L263'>set_uniform_probabilities</a>(sentence_aligned_corpus)</tt>	Set vacancy probabilities uniformly to.
<tt style='background-color:#E8E8E8;'> translate.IBMModel5 <a href=' /translate/ibm5.py#L338'>sample</a>(sentence_pair)</tt>	Sample the most probable alignments from the entire alignment space according to model 4.
<tt style='background-color:#E8E8E8;'> translate.IBMModel5 <a href=' /translate/ibm5.py#L366'>prune</a>(alignment_infos)</tt>	Removes alignments from alignment_infos that have.
<tt style='background-color:#E8E8E8;'> translate.IBMModel5 <a href=' /translate/ibm5.py#L386'>hillclimb</a>(alignment_info,j_pegged)</tt>	Starting from the alignment in alignment_info, look at neighboring alignments iteratively for the best one according.
<tt style='background-color:#E8E8E8;'> translate.IBMModel5 <a href=' /translate/ibm5.py#L426'>prob_t_a_given_s</a>(alignment_info)</tt>	Probability of target sentence and an alignment given the.
<tt style='background-color:#E8E8E8;'> translate.Model5Counts <a href=' /translate/ibm5.py#L569'>update_vacancy</a>(count,alignment_info,i,trg_classes)</tt>	:param count value to add to the vacancy counts.
<tt style='background-color:#E8E8E8;'> translate.Slots <a href=' /translate/ibm5.py#L622'>occupy</a>(position)</tt>	:return mark slot at position as occupied.
<tt style='background-color:#E8E8E8;'> translate.Slots <a href=' /translate/ibm5.py#L628'>vacancies_at</a>(position)</tt>	:return number of vacant slots up to and including position.
<tt style='background-color:#E8E8E8;'> translate.IBMModel2 <a href=' /translate/ibm2.py#L99'>__init__</a>(sentence_aligned_corpus,iterations,probability_tables)</tt>	Train on sentence_aligned_corpus and create a lexical translation model and an alignment model.
<tt style='background-color:#E8E8E8;'> translate.IBMModel2 <a href=' /translate/ibm2.py#L196'>prob_all_alignments</a>(src_sentence,trg_sentence)</tt>	Computes the probability of all possible word alignments expressed as a marginal distribution over target words t.
<tt style='background-color:#E8E8E8;'> translate.IBMModel2 <a href=' /translate/ibm2.py#L218'>prob_alignment_point</a>(i,j,src_sentence,trg_sentence)</tt>	Probability that position j in trg_sentence is aligned to.
<tt style='background-color:#E8E8E8;'> translate.IBMModel2 <a href=' /translate/ibm2.py#L229'>prob_t_a_given_s</a>(alignment_info)</tt>	Probability of target sentence and an alignment given the.
<tt style='background-color:#E8E8E8;'> translate.IBMModel2 <a href=' /translate/ibm2.py#L252'>__align</a>(sentence_pair)</tt>	Determines the best word alignment for one sentence pair from the corpus that the model was trained on.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/gale_church.py#L80'>trace</a>(backlinks,source_sents_lens,target_sents_lens)</tt>	Traverse the alignment cost from the tracebacks and retrieves appropriate sentence pairs.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/gale_church.py#L108'>align_log_prob</a>(i,j,source_sents,target_sents)</tt>	Returns the log probability of the two sentences c{source_sents[i]}, c{target_sents[j]} being aligned with a specific c{alignment}.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/gale_church.py#L134'>align_blocks</a>(source_sents_lens,target_sents_lens,params)</tt>	Return the sentence alignment of two text blocks usually paragraphs.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/gale_church.py#L187'>align_texts</a>(source_blocks,target_blocks,params)</tt>	Creates the sentence alignment of two texts.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/gale_church.py#L211'>split_at</a>(it,split_value)</tt>	Splits an iterator c{it} at values of c{split_value}.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/gale_church.py#L228'>parse_token_stream</a>(stream,soft_delimiter,hard_delimiter)</tt>	Parses a stream of tokens and splits it into sentences (using c{soft_delimiter} tokens) and blocks (using c{hard_delimiter} tokens) for use with the l{align_texts} function.
<tt style='background-color:#E8E8E8;'> translate.IBMModel3 <a href=' /translate/ibm3.py#L137'>__init__</a>(sentence_aligned_corpus,iterations,probability_tables)</tt>	Train on sentence_aligned_corpus and create a lexical translation model a distortion model a fertility model and a.
<tt style='background-color:#E8E8E8;'> translate.IBMModel3 <a href=' /translate/ibm3.py#L271'>prob_t_a_given_s</a>(alignment_info)</tt>	Probability of target sentence and an alignment given the.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/bleu_score.py#L28'>sentence_bleu</a>(references,hypothesis,weights,smoothing_function)</tt>	Calculate bleu score bilingual evaluation understudy from papineni kishore salim roukos todd ward and wei-jing zhu.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/bleu_score.py#L92'>corpus_bleu</a>(list_of_references,hypotheses,weights,smoothing_function)</tt>	Calculate a single corpus-level bleu score aka system-level bleu for all.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/bleu_score.py#L205'>modified_precision</a>(references,hypothesis,n)</tt>	Calculate modified ngram precision.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/bleu_score.py#L314'>closest_ref_length</a>(references,hyp_len)</tt>	This function finds the reference that is the closest length to the hypothesis.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/bleu_score.py#L333'>brevity_penalty</a>(closest_ref_len,hyp_len)</tt>	Calculate brevity penalty.
<tt style='background-color:#E8E8E8;'> translate.SmoothingFunction <a href=' /translate/bleu_score.py#L433'>__init__</a>(epsilon,alpha,k)</tt>	This will initialize the parameters required for the various smoothing techniques the default values are set to the numbers used in the.
<tt style='background-color:#E8E8E8;'> translate.SmoothingFunction <a href=' /translate/bleu_score.py#L496'>method1</a>(p_n)</tt>	Smoothing method 1 add *epsilon* counts to precision with 0 counts.
<tt style='background-color:#E8E8E8;'> translate.SmoothingFunction <a href=' /translate/bleu_score.py#L503'>method2</a>(p_n)</tt>	Smoothing method 2 add 1 to both numerator and denominator from chin-yew lin and franz josef och 2004 automatic evaluation of.
<tt style='background-color:#E8E8E8;'> translate.SmoothingFunction <a href=' /translate/bleu_score.py#L512'>method3</a>(p_n)</tt>	Smoothing method 3 nist geometric sequence smoothing the smoothing is computed by taking 1 / 2^k ), instead of 0 for each.
<tt style='background-color:#E8E8E8;'> translate.SmoothingFunction <a href=' /translate/bleu_score.py#L534'>method4</a>(p_n,references,hypothesis,hyp_len)</tt>	Smoothing method 4 shorter translations may have inflated precision values due to having.
<tt style='background-color:#E8E8E8;'> translate.SmoothingFunction <a href=' /translate/bleu_score.py#L549'>method5</a>(p_n,references,hypothesis,hyp_len)</tt>	Smoothing method 5 the matched counts for similar values of n should be similar.
<tt style='background-color:#E8E8E8;'> translate.SmoothingFunction <a href=' /translate/bleu_score.py#L565'>method6</a>(p_n,references,hypothesis,hyp_len)</tt>	Smoothing method 6 interpolates the maximum likelihood estimate of the precision *p_n* with.
<tt style='background-color:#E8E8E8;'> translate.SmoothingFunction <a href=' /translate/bleu_score.py#L591'>method7</a>(p_n,references,hypothesis,hyp_len)</tt>	Smoothing method 6 interpolates the maximum likelihood estimate of the precision *p_n* with.
<tt style='background-color:#E8E8E8;'> translate. <a href=' /translate/metrics.py#L11'>alignment_error_rate</a>(reference,hypothesis,possible)</tt>	Return the alignment error rate aer of an alignment with respect to a "gold standard" reference alignment.
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/demo.py#L24'>demo</a>()</tt>	Run a demo with defaults see source comments for details.
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/demo.py#L31'>demo_repr_rule_format</a>()</tt>	Exemplify repr rule (see also str rule and rule format("verbose")).
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/demo.py#L37'>demo_str_rule_format</a>()</tt>	Exemplify repr rule (see also str rule and rule format("verbose")).
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/demo.py#L43'>demo_verbose_rule_format</a>()</tt>	Exemplify rule format("verbose").
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/demo.py#L49'>demo_multiposition_feature</a>()</tt>	The feature/s of a template takes a list of positions relative to the current word where the feature should be.
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/demo.py#L63'>demo_multifeature_template</a>()</tt>	Templates can have more than a single feature.
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/demo.py#L69'>demo_template_statistics</a>()</tt>	Show aggregate statistics per template little used templates are.
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/demo.py#L80'>demo_generated_templates</a>()</tt>	Template expand and feature expand are class methods facilitating.
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/demo.py#L95'>demo_learning_curve</a>()</tt>	Plot a learning curve -- the contribution on tagging accuracy of the individual rules.
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/demo.py#L103'>demo_error_analysis</a>()</tt>	Writes a file with context for each erroneous word after tagging testing data.
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/demo.py#L109'>demo_serialize_tagger</a>()</tt>	Serializes the learned tagger to a file in pickle format reloads it and validates the process.
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/demo.py#L116'>demo_high_accuracy_rules</a>()</tt>	Discard rules with low accuracy this may hurt performance a bit.
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/demo.py#L123'>postag</a>(templates,tagged_data,num_sents,max_rules)</tt>	Brill tagger demonstration.
<tt style='background-color:#E8E8E8;'> tbl.BrillTemplateI <a href=' /tbl/template.py#L25'>applicable_rules</a>(tokens,i,correctTag)</tt>	Return a list of the transformational rules that would correct the *i*th subtoken's tag in the given token.
<tt style='background-color:#E8E8E8;'> tbl.BrillTemplateI <a href=' /tbl/template.py#L46'>get_neighborhood</a>(token,index)</tt>	Returns the set of indices *i* such that applicable_rules(token i.
<tt style='background-color:#E8E8E8;'> tbl.Template <a href=' /tbl/template.py#L81'>__init__</a>()</tt>	Construct a template for generating rules.
<tt style='background-color:#E8E8E8;'> tbl.Template <a href=' /tbl/template.py#L161'>_applicable_conditions</a>(tokens,index)</tt>	:returns a set of all conditions for rules that are applicable to c{tokens[index]}.
<tt style='background-color:#E8E8E8;'> tbl.Template <a href=' /tbl/template.py#L194'>expand</a>(cls,featurelists,combinations,skipintersecting)</tt>	Factory method to mass generate templates from a list l of lists of features.
<tt style='background-color:#E8E8E8;'> tbl. <a href=' /tbl/erroranalysis.py#L16'>error_list</a>(train_sents,test_sents)</tt>	Returns a list of human-readable strings indicating the errors in the given tagging of the corpus.
<tt style='background-color:#E8E8E8;'> tbl.Feature <a href=' /tbl/feature.py#L39'>__init__</a>(positions,end)</tt>	Construct a feature which may apply at c{positions}.
<tt style='background-color:#E8E8E8;'> tbl.Feature <a href=' /tbl/feature.py#L107'>expand</a>(cls,starts,winlens,excludezero)</tt>	Return a list of features one for each start point in starts and for each window length in winlen.
<tt style='background-color:#E8E8E8;'> tbl.Feature <a href=' /tbl/feature.py#L162'>issuperset</a>(other)</tt>	Return true if this feature always returns true when other does more precisely return true if this feature refers to the same property as other.
<tt style='background-color:#E8E8E8;'> tbl.Feature <a href=' /tbl/feature.py#L192'>intersects</a>(other)</tt>	Return true if the positions of this feature intersects with those of other more precisely return true if this feature refers to the same property as other.
<tt style='background-color:#E8E8E8;'> tbl.Feature <a href=' /tbl/feature.py#L247'>extract_property</a>(tokens,index)</tt>	Any subclass of feature must define static method extract_property tokens index.
<tt style='background-color:#E8E8E8;'> tbl.TagRule <a href=' /tbl/rule.py#L43'>apply</a>(tokens,positions)</tt>	Apply this rule at every position in positions where it applies to the given sentence.
<tt style='background-color:#E8E8E8;'> tbl.TagRule <a href=' /tbl/rule.py#L74'>applies</a>(tokens,index)</tt>	:return true if the rule would change the tag of.
<tt style='background-color:#E8E8E8;'> tbl.Rule <a href=' /tbl/rule.py#L120'>__init__</a>(templateid,original_tag,replacement_tag,conditions)</tt>	Construct a new rule that changes a token's tag from c{original_tag} to c{replacement_tag} if all of the properties.
<tt style='background-color:#E8E8E8;'> tbl.Rule <a href=' /tbl/rule.py#L238'>format</a>(fmt)</tt>	Return a string representation of this rule.
<tt style='background-color:#E8E8E8;'> tbl.Rule <a href=' /tbl/rule.py#L282'>_verbose_format</a>()</tt>	Return a wordy human-readable string representation of the given rule.
<tt style='background-color:#E8E8E8;'> stem. <a href=' /stem/util.py#L8'>suffix_replace</a>(original,old,new)</tt>	Replaces the old suffix of the original string by a new suffix.
<tt style='background-color:#E8E8E8;'> stem.LancasterStemmer <a href=' /stem/lancaster.py#L169'>__init__</a>()</tt>	Create an instance of the lancaster stemmer.
<tt style='background-color:#E8E8E8;'> stem.LancasterStemmer <a href=' /stem/lancaster.py#L175'>parseRules</a>(rule_tuple)</tt>	Validate the set of rules used in this stemmer.
<tt style='background-color:#E8E8E8;'> stem.LancasterStemmer <a href=' /stem/lancaster.py#L191'>stem</a>(word)</tt>	Stem a word using the lancaster stemmer.
<tt style='background-color:#E8E8E8;'> stem.LancasterStemmer <a href=' /stem/lancaster.py#L206'>__doStemming</a>(word,intact_word)</tt>	Perform the actual word stemming.
<tt style='background-color:#E8E8E8;'> stem.LancasterStemmer <a href=' /stem/lancaster.py#L265'>__getLastLetter</a>(word)</tt>	Get the zero-based index of the last alphabetic character in this string.
<tt style='background-color:#E8E8E8;'> stem.LancasterStemmer <a href=' /stem/lancaster.py#L276'>__isAcceptable</a>(word,remove_total)</tt>	Determine if the word is acceptable for stemming.
<tt style='background-color:#E8E8E8;'> stem.LancasterStemmer <a href=' /stem/lancaster.py#L295'>__applyRule</a>(word,remove_total,append_string)</tt>	Apply the stemming rule to the word.
<tt style='background-color:#E8E8E8;'> stem.StemmerI <a href=' /stem/api.py#L16'>stem</a>(token)</tt>	Strip affixes from the token and return the stem.
<tt style='background-color:#E8E8E8;'> stem.ISRIStemmer <a href=' /stem/isri.py#L149'>stem</a>(token)</tt>	Stemming a word token using the isri stemmer.
<tt style='background-color:#E8E8E8;'> stem.ISRIStemmer <a href=' /stem/isri.py#L194'>pre32</a>(word)</tt>	Remove length three and length two prefixes in this order.
<tt style='background-color:#E8E8E8;'> stem.ISRIStemmer <a href=' /stem/isri.py#L206'>suf32</a>(word)</tt>	Remove length three and length two suffixes in this order.
<tt style='background-color:#E8E8E8;'> stem.ISRIStemmer <a href=' /stem/isri.py#L218'>waw</a>(word)</tt>	Remove connective ‘و’ if it precedes a word beginning with ‘و’.
<tt style='background-color:#E8E8E8;'> stem.ISRIStemmer <a href=' /stem/isri.py#L224'>pro_w4</a>(word)</tt>	Process length four patterns and extract length three roots.
<tt style='background-color:#E8E8E8;'> stem.ISRIStemmer <a href=' /stem/isri.py#L240'>pro_w53</a>(word)</tt>	Process length five patterns and extract length three roots.
<tt style='background-color:#E8E8E8;'> stem.ISRIStemmer <a href=' /stem/isri.py#L278'>pro_w54</a>(word)</tt>	Process length five patterns and extract length four roots.
<tt style='background-color:#E8E8E8;'> stem.ISRIStemmer <a href=' /stem/isri.py#L288'>end_w5</a>(word)</tt>	Ending step word of length five.
<tt style='background-color:#E8E8E8;'> stem.ISRIStemmer <a href=' /stem/isri.py#L296'>pro_w6</a>(word)</tt>	Process length six patterns and extract length three roots.
<tt style='background-color:#E8E8E8;'> stem.ISRIStemmer <a href=' /stem/isri.py#L314'>pro_w64</a>(word)</tt>	Process length six patterns and extract length four roots.
<tt style='background-color:#E8E8E8;'> stem.ISRIStemmer <a href=' /stem/isri.py#L322'>end_w6</a>(word)</tt>	Ending step word of length six.
<tt style='background-color:#E8E8E8;'> stem.ISRIStemmer <a href=' /stem/isri.py#L331'>suf1</a>(word)</tt>	Normalize short sufix.
<tt style='background-color:#E8E8E8;'> stem.ISRIStemmer <a href=' /stem/isri.py#L338'>pre1</a>(word)</tt>	Normalize short prefix.
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L126'>_is_consonant</a>(word,i)</tt>	Returns true if word[i] is a consonant false otherwise a consonant is defined in the paper as follows.
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L147'>_measure</a>(stem)</tt>	Returns the 'measure' of stem per definition in the paper from the paper.
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L201'>_contains_vowel</a>(stem)</tt>	Returns true if stem contains a vowel else false.
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L208'>_ends_double_consonant</a>(word)</tt>	Implements condition *d from the paper.
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L219'>_ends_cvc</a>(word)</tt>	Implements condition *o from the paper from the paper.
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L240'>_replace_suffix</a>(word,suffix,replacement)</tt>	Replaces suffix of word with replacement.
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L248'>_apply_rule_list</a>(word,rules)</tt>	Applies the first applicable suffix-removal rule to the word takes a word and a list of suffix-removal rules represented as.
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L276'>_step1a</a>(word)</tt>	Implements step 1a from "an algorithm for suffix stripping".
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L300'>_step1b</a>(word)</tt>	Implements step 1b from "an algorithm for suffix stripping" from the paper.
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L382'>_step1c</a>(word)</tt>	Implements step 1c from "an algorithm for suffix stripping".
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L425'>_step2</a>(word)</tt>	Implements step 2 from "an algorithm for suffix stripping".
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L518'>_step3</a>(word)</tt>	Implements step 3 from "an algorithm for suffix stripping".
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L543'>_step4</a>(word)</tt>	Implements step 4 from "an algorithm for suffix stripping" step 4.
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L602'>_step5a</a>(word)</tt>	Implements step 5a from "an algorithm for suffix stripping".
<tt style='background-color:#E8E8E8;'> stem.PorterStemmer <a href=' /stem/porter.py#L638'>_step5b</a>(word)</tt>	Implements step 5a from "an algorithm for suffix stripping".
<tt style='background-color:#E8E8E8;'> stem. <a href=' /stem/snowball.py#L3644'>demo</a>()</tt>	This function provides a demonstration of the snowball stemmers.
<tt style='background-color:#E8E8E8;'> stem._LanguageSpecificStemmer <a href=' /stem/snowball.py#L128'>__repr__</a>()</tt>	Print out the string representation of the respective class.
<tt style='background-color:#E8E8E8;'> stem._ScandinavianStemmer <a href=' /stem/snowball.py#L161'>_r1_scandinavian</a>(word,vowels)</tt>	Return the region r1 that is used by the scandinavian stemmers.
<tt style='background-color:#E8E8E8;'> stem._StandardStemmer <a href=' /stem/snowball.py#L204'>_r1r2_standard</a>(word,vowels)</tt>	Return the standard interpretations of the string regions r1 and r2.
<tt style='background-color:#E8E8E8;'> stem._StandardStemmer <a href=' /stem/snowball.py#L248'>_rv_standard</a>(word,vowels)</tt>	Return the standard interpretation of the string region rv.
<tt style='background-color:#E8E8E8;'> stem.DanishStemmer <a href=' /stem/snowball.py#L333'>stem</a>(word)</tt>	Stem a danish word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> stem.DutchStemmer <a href=' /stem/snowball.py#L426'>stem</a>(word)</tt>	Stem a dutch word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> stem.EnglishStemmer <a href=' /stem/snowball.py#L674'>stem</a>(word)</tt>	Stem an english word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> stem.FinnishStemmer <a href=' /stem/snowball.py#L1102'>stem</a>(word)</tt>	Stem a finnish word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> stem.FrenchStemmer <a href=' /stem/snowball.py#L1368'>stem</a>(word)</tt>	Stem a french word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> stem.FrenchStemmer <a href=' /stem/snowball.py#L1635'>__rv_french</a>(word,vowels)</tt>	Return the region rv that is used by the french stemmer.
<tt style='background-color:#E8E8E8;'> stem.GermanStemmer <a href=' /stem/snowball.py#L1704'>stem</a>(word)</tt>	Stem a german word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> stem.HungarianStemmer <a href=' /stem/snowball.py#L1899'>stem</a>(word)</tt>	Stem an hungarian word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> stem.HungarianStemmer <a href=' /stem/snowball.py#L2048'>__r1_hungarian</a>(word,vowels,digraphs)</tt>	Return the region r1 that is used by the hungarian stemmer.
<tt style='background-color:#E8E8E8;'> stem.ItalianStemmer <a href=' /stem/snowball.py#L2151'>stem</a>(word)</tt>	Stem an italian word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> stem.NorwegianStemmer <a href=' /stem/snowball.py#L2362'>stem</a>(word)</tt>	Stem a norwegian word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> stem.PortugueseStemmer <a href=' /stem/snowball.py#L2475'>stem</a>(word)</tt>	Stem a portuguese word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> stem.RomanianStemmer <a href=' /stem/snowball.py#L2705'>stem</a>(word)</tt>	Stem a romanian word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> stem.RussianStemmer <a href=' /stem/snowball.py#L2997'>stem</a>(word)</tt>	Stem a russian word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> stem.RussianStemmer <a href=' /stem/snowball.py#L3170'>__regions_russian</a>(word)</tt>	Return the regions rv and r2 which are used by the russian stemmer.
<tt style='background-color:#E8E8E8;'> stem.RussianStemmer <a href=' /stem/snowball.py#L3227'>__cyrillic_to_roman</a>(word)</tt>	Transliterate a russian word into the roman alphabet.
<tt style='background-color:#E8E8E8;'> stem.RussianStemmer <a href=' /stem/snowball.py#L3282'>__roman_to_cyrillic</a>(word)</tt>	Transliterate a russian word back into the cyrillic alphabet.
<tt style='background-color:#E8E8E8;'> stem.SpanishStemmer <a href=' /stem/snowball.py#L3389'>stem</a>(word)</tt>	Stem a spanish word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> stem.SpanishStemmer <a href=' /stem/snowball.py#L3545'>__replace_accented</a>(word)</tt>	Replaces all accented letters on a word with their non-accented counterparts.
<tt style='background-color:#E8E8E8;'> stem.SwedishStemmer <a href=' /stem/snowball.py#L3596'>stem</a>(word)</tt>	Stem a swedish word and return the stemmed form.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L161'>__init__</a>(canvas,parent)</tt>	Create a new canvas widget this constructor should only be.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L218'>bbox</a>()</tt>	:return a bounding box for this canvaswidget the bounding.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L231'>width</a>()</tt>	:return the width of this canvas widget's bounding box in its canvas's coordinate space.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L241'>height</a>()</tt>	:return the height of this canvas widget's bounding box in its canvas's coordinate space.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L251'>parent</a>()</tt>	:return the hierarchical parent of this canvas widget.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L260'>child_widgets</a>()</tt>	:return a list of the hierarchical children of this canvas widget.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L269'>canvas</a>()</tt>	:return the canvas that this canvas widget is bound to.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L276'>move</a>(dx,dy)</tt>	Move this canvas widget by a given distance in particular.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L296'>moveto</a>(x,y,anchor)</tt>	Move this canvas widget to the given location in particular.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L320'>destroy</a>()</tt>	Remove this canvaswidget from its canvas after a.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L684'>_update</a>(child)</tt>	Update this canvas widget in response to a change in one of its children.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L673'>_manage</a>()</tt>	Arrange the child widgets of this canvas widget this method.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L664'>_tags</a>()</tt>	:return a list of canvas tags for all graphical elements managed by this canvas widget not including graphical.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L394'>__setitem__</a>(attr,value)</tt>	Set the value of the attribute attr to value see the.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L407'>__getitem__</a>(attr)</tt>	:return the value of the attribute attr see the class.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L419'>__repr__</a>()</tt>	:return a string representation of this canvas widget.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L426'>hide</a>()</tt>	Temporarily hide this canvas widget.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L436'>show</a>()</tt>	Show a hidden canvas widget.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L446'>hidden</a>()</tt>	:return true if this canvas widget is hidden.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L457'>bind_click</a>(callback,button)</tt>	Register a new callback that will be called whenever this canvaswidget is clicked on.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L473'>bind_drag</a>(callback)</tt>	Register a new callback that will be called after this canvaswidget is dragged.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L487'>unbind_click</a>(button)</tt>	Remove a callback that was registered with bind_click.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L499'>unbind_drag</a>()</tt>	Remove a callback that was registered with bind_drag.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L510'>__press_cb</a>(event)</tt>	Handle a button-press event - record the button press event in self.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L545'>__start_drag</a>(event)</tt>	Begin dragging this object.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L555'>__motion_cb</a>(event)</tt>	Handle a motion event.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L565'>__release_cb</a>(event)</tt>	Handle a release callback - unregister motion & button release callbacks.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L589'>__drag</a>()</tt>	If this canvaswidget has a drag callback then call it otherwise find the closest ancestor with a drag callback and.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L605'>__click</a>(button)</tt>	If this canvaswidget has a drag callback then call it otherwise find the closest ancestor with a click callback and.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L625'>_add_child_widget</a>(child)</tt>	Register a hierarchical child widget the child will be.
<tt style='background-color:#E8E8E8;'> draw.CanvasWidget <a href=' /draw/util.py#L644'>_remove_child_widget</a>(child)</tt>	Remove a hierarchical child widget this child will no longer.
<tt style='background-color:#E8E8E8;'> draw.TextWidget <a href=' /draw/util.py#L712'>__init__</a>(canvas,text)</tt>	Create a new text widget.
<tt style='background-color:#E8E8E8;'> draw.TextWidget <a href=' /draw/util.py#L744'>text</a>()</tt>	:return the text displayed by this text widget.
<tt style='background-color:#E8E8E8;'> draw.TextWidget <a href=' /draw/util.py#L751'>set_text</a>(text)</tt>	Change the text that is displayed by this text widget.
<tt style='background-color:#E8E8E8;'> draw.SymbolWidget <a href=' /draw/util.py#L794'>__init__</a>(canvas,symbol)</tt>	Create a new symbol widget.
<tt style='background-color:#E8E8E8;'> draw.SymbolWidget <a href=' /draw/util.py#L808'>symbol</a>()</tt>	:return the name of the symbol that is displayed by this symbol widget.
<tt style='background-color:#E8E8E8;'> draw.SymbolWidget <a href=' /draw/util.py#L816'>set_symbol</a>(symbol)</tt>	Change the symbol that is displayed by this symbol widget.
<tt style='background-color:#E8E8E8;'> draw.SymbolWidget <a href=' /draw/util.py#L831'>symbolsheet</a>(size)</tt>	Open a new tkinter window that displays the entire alphabet for the symbol font.
<tt style='background-color:#E8E8E8;'> draw.AbstractContainerWidget <a href=' /draw/util.py#L870'>__init__</a>(canvas,child)</tt>	Create a new container widget this constructor should only.
<tt style='background-color:#E8E8E8;'> draw.AbstractContainerWidget <a href=' /draw/util.py#L889'>child</a>()</tt>	:return the child widget contained by this container widget.
<tt style='background-color:#E8E8E8;'> draw.AbstractContainerWidget <a href=' /draw/util.py#L896'>set_child</a>(child)</tt>	Change the child widget contained by this container widget.
<tt style='background-color:#E8E8E8;'> draw.BoxWidget <a href=' /draw/util.py#L927'>__init__</a>(canvas,child)</tt>	Create a new box widget.
<tt style='background-color:#E8E8E8;'> draw.OvalWidget <a href=' /draw/util.py#L981'>__init__</a>(canvas,child)</tt>	Create a new oval widget.
<tt style='background-color:#E8E8E8;'> draw.ParenWidget <a href=' /draw/util.py#L1083'>__init__</a>(canvas,child)</tt>	Create a new parenthasis widget.
<tt style='background-color:#E8E8E8;'> draw.BracketWidget <a href=' /draw/util.py#L1137'>__init__</a>(canvas,child)</tt>	Create a new bracket widget.
<tt style='background-color:#E8E8E8;'> draw.SequenceWidget <a href=' /draw/util.py#L1195'>__init__</a>(canvas)</tt>	Create a new sequence widget.
<tt style='background-color:#E8E8E8;'> draw.SequenceWidget <a href=' /draw/util.py#L1290'>replace_child</a>(oldchild,newchild)</tt>	Replace the child canvas widget oldchild with newchild.
<tt style='background-color:#E8E8E8;'> draw.SequenceWidget <a href=' /draw/util.py#L1308'>remove_child</a>(child)</tt>	Remove the given child canvas widget child's parent will.
<tt style='background-color:#E8E8E8;'> draw.SequenceWidget <a href=' /draw/util.py#L1322'>insert_child</a>(index,child)</tt>	Insert a child canvas widget before a given index.
<tt style='background-color:#E8E8E8;'> draw.StackWidget <a href=' /draw/util.py#L1352'>__init__</a>(canvas)</tt>	Create a new stack widget.
<tt style='background-color:#E8E8E8;'> draw.StackWidget <a href=' /draw/util.py#L1447'>replace_child</a>(oldchild,newchild)</tt>	Replace the child canvas widget oldchild with newchild.
<tt style='background-color:#E8E8E8;'> draw.StackWidget <a href=' /draw/util.py#L1465'>remove_child</a>(child)</tt>	Remove the given child canvas widget child's parent will.
<tt style='background-color:#E8E8E8;'> draw.StackWidget <a href=' /draw/util.py#L1479'>insert_child</a>(index,child)</tt>	Insert a child canvas widget before a given index.
<tt style='background-color:#E8E8E8;'> draw.SpaceWidget <a href=' /draw/util.py#L1504'>__init__</a>(canvas,width,height)</tt>	Create a new space widget.
<tt style='background-color:#E8E8E8;'> draw.SpaceWidget <a href=' /draw/util.py#L1523'>set_width</a>(width)</tt>	Change the width of this space widget.
<tt style='background-color:#E8E8E8;'> draw.SpaceWidget <a href=' /draw/util.py#L1534'>set_height</a>(height)</tt>	Change the height of this space widget.
<tt style='background-color:#E8E8E8;'> draw.ScrollWatcherWidget <a href=' /draw/util.py#L1556'>__init__</a>(canvas)</tt>	Create a new scroll-watcher widget.
<tt style='background-color:#E8E8E8;'> draw.ScrollWatcherWidget <a href=' /draw/util.py#L1572'>add_child</a>(canvaswidget)</tt>	Add a new canvas widget to the scroll-watcher the.
<tt style='background-color:#E8E8E8;'> draw.ScrollWatcherWidget <a href=' /draw/util.py#L1585'>remove_child</a>(canvaswidget)</tt>	Remove a canvas widget from the scroll-watcher the.
<tt style='background-color:#E8E8E8;'> draw.ScrollWatcherWidget <a href=' /draw/util.py#L1602'>_adjust_scrollregion</a>()</tt>	Adjust the scrollregion of this scroll-watcher's canvas to include the bounding boxes of all of its children.
<tt style='background-color:#E8E8E8;'> draw.CanvasFrame <a href=' /draw/util.py#L1638'>__init__</a>(parent)</tt>	Create a new canvasframe.
<tt style='background-color:#E8E8E8;'> draw.CanvasFrame <a href=' /draw/util.py#L1695'>print_to_file</a>(filename)</tt>	Print the contents of this canvasframe to a postscript file.
<tt style='background-color:#E8E8E8;'> draw.CanvasFrame <a href=' /draw/util.py#L1721'>scrollregion</a>()</tt>	:return the current scroll region for the canvas managed by this canvasframe.
<tt style='background-color:#E8E8E8;'> draw.CanvasFrame <a href=' /draw/util.py#L1730'>canvas</a>()</tt>	:return the canvas managed by this canvasframe.
<tt style='background-color:#E8E8E8;'> draw.CanvasFrame <a href=' /draw/util.py#L1737'>add_widget</a>(canvaswidget,x,y)</tt>	Register a canvas widget with this canvasframe the.
<tt style='background-color:#E8E8E8;'> draw.CanvasFrame <a href=' /draw/util.py#L1767'>_find_room</a>(widget,desired_x,desired_y)</tt>	Try to find a space for a given widget.
<tt style='background-color:#E8E8E8;'> draw.CanvasFrame <a href=' /draw/util.py#L1800'>destroy_widget</a>(canvaswidget)</tt>	Remove a canvas widget from this canvasframe this.
<tt style='background-color:#E8E8E8;'> draw.CanvasFrame <a href=' /draw/util.py#L1812'>pack</a>(cnf)</tt>	Pack this canvasframe see the documentation for.
<tt style='background-color:#E8E8E8;'> draw.CanvasFrame <a href=' /draw/util.py#L1820'>destroy</a>()</tt>	Destroy this canvasframe if this canvasframe created a.
<tt style='background-color:#E8E8E8;'> draw.CanvasFrame <a href=' /draw/util.py#L1829'>mainloop</a>()</tt>	Enter the tkinter mainloop this function must be called if.
<tt style='background-color:#E8E8E8;'> draw.ShowText <a href=' /draw/util.py#L1909'>mainloop</a>()</tt>	Enter the tkinter mainloop this function must be called if.
<tt style='background-color:#E8E8E8;'> draw.ColorizedList <a href=' /draw/util.py#L2009'>__init__</a>(parent,items)</tt>	Construct a new list.
<tt style='background-color:#E8E8E8;'> draw.ColorizedList <a href=' /draw/util.py#L2038'>_init_colortags</a>(textwidget,options)</tt>	Set up any colortags that will be used by this colorized list.
<tt style='background-color:#E8E8E8;'> draw.ColorizedList <a href=' /draw/util.py#L2046'>_item_repr</a>(item)</tt>	Return a list of text colortag tuples that make up the colorized representation of the item.
<tt style='background-color:#E8E8E8;'> draw.ColorizedList <a href=' /draw/util.py#L2059'>get</a>(index)</tt>	:return a list of the items contained by this list.
<tt style='background-color:#E8E8E8;'> draw.ColorizedList <a href=' /draw/util.py#L2068'>set</a>(items)</tt>	Modify the list of items contained by this list.
<tt style='background-color:#E8E8E8;'> draw.ColorizedList <a href=' /draw/util.py#L2090'>unmark</a>(item)</tt>	Remove highlighting from the given item or from every item if no item is given.
<tt style='background-color:#E8E8E8;'> draw.ColorizedList <a href=' /draw/util.py#L2106'>mark</a>(item)</tt>	Highlight the given item.
<tt style='background-color:#E8E8E8;'> draw.ColorizedList <a href=' /draw/util.py#L2116'>markonly</a>(item)</tt>	Remove any current highlighting and mark the given item.
<tt style='background-color:#E8E8E8;'> draw.ColorizedList <a href=' /draw/util.py#L2124'>view</a>(item)</tt>	Adjust the view such that the given item is visible if.
<tt style='background-color:#E8E8E8;'> draw.ColorizedList <a href=' /draw/util.py#L2136'>add_callback</a>(event,func)</tt>	Register a callback function with the list this function.
<tt style='background-color:#E8E8E8;'> draw.ColorizedList <a href=' /draw/util.py#L2156'>remove_callback</a>(event,func)</tt>	Deregister a callback function if func is none then.
<tt style='background-color:#E8E8E8;'> draw.MutableOptionMenu <a href=' /draw/util.py#L2304'>destroy</a>()</tt>	Destroy this widget and the associated menu.
<tt style='background-color:#E8E8E8;'> draw. <a href=' /draw/util.py#L2313'>demo</a>()</tt>	A simple demonstration showing how to use canvas widgets.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L61'>__init__</a>(master,columns,column_weights,cnf)</tt>	Construct a new multi-column listbox widget.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L155'>_resize_column</a>(event)</tt>	Callback used to resize a column of the table return true.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L204'>column_names</a>()</tt>	A tuple containing the names of the columns used by this multi-column listbox.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L212'>column_labels</a>()</tt>	A tuple containing the tkinter label widgets used to.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L225'>listboxes</a>()</tt>	A tuple containing the tkinter listbox widgets used to.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L252'>_pagesize</a>()</tt>	:return the number of rows that makes up one page.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L260'>select</a>(index,delta,see)</tt>	Set the selected row if index is specified then select.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L295'>configure</a>(cnf)</tt>	Configure this widget use label_* to configure all.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L315'>__setitem__</a>(key,val)</tt>	Configure this widget this is equivalent to.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L322'>rowconfigure</a>(row_index,cnf)</tt>	Configure all table cells in the given row valid keyword.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L330'>columnconfigure</a>(col_index,cnf)</tt>	Configure all table cells in the given column valid keyword.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L346'>itemconfigure</a>(row_index,col_index,cnf)</tt>	Configure the table cell at the given row and column valid.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L359'>insert</a>(index)</tt>	Insert the given row or rows into the table at the given index.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L374'>get</a>(first,last)</tt>	Return the value s of the specified row s if last is.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L387'>bbox</a>(row,col)</tt>	Return the bounding box for the given table cell relative to this widget's top-left corner.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L401'>hide_column</a>(col_index)</tt>	Hide the given column the column's state is still.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L415'>show_column</a>(col_index)</tt>	Display a column that has been hidden using hide_column().
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L432'>bind_to_labels</a>(sequence,func,add)</tt>	Add a binding to each tkinter label widget in this.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L445'>bind_to_listboxes</a>(sequence,func,add)</tt>	Add a binding to each tkinter listbox widget in this.
<tt style='background-color:#E8E8E8;'> draw.MultiListbox <a href=' /draw/table.py#L458'>bind_to_columns</a>(sequence,func,add)</tt>	Add a binding to each tkinter label and tkinter listbox.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L575'>__init__</a>(master,column_names,rows,column_weights)</tt>	Construct a new table widget.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L651'>pack</a>()</tt>	Position this table's main frame widget in its parent widget.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L656'>grid</a>()</tt>	Position this table's main frame widget in its parent widget.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L661'>focus</a>()</tt>	Direct keyboard input foxus to this widget.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L665'>bind</a>(sequence,func,add)</tt>	Add a binding to this table's main frame that will call func in response to the event sequence.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L670'>rowconfigure</a>(row_index,cnf)</tt>	:see multilistbox rowconfigure().
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L674'>columnconfigure</a>(col_index,cnf)</tt>	:see multilistbox columnconfigure().
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L679'>itemconfigure</a>(row_index,col_index,cnf)</tt>	:see multilistbox itemconfigure().
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L684'>bind_to_labels</a>(sequence,func,add)</tt>	:see multilistbox bind_to_labels().
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L688'>bind_to_listboxes</a>(sequence,func,add)</tt>	:see multilistbox bind_to_listboxes().
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L692'>bind_to_columns</a>(sequence,func,add)</tt>	:see multilistbox bind_to_columns().
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L704'>insert</a>(row_index,rowvalue)</tt>	Insert a new row into the table so that its row index will be row_index.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L722'>extend</a>(rowvalues)</tt>	Add new rows at the end of the table.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L733'>append</a>(rowvalue)</tt>	Add a new row to the end of the table.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L743'>clear</a>()</tt>	Delete all rows in this table.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L751'>__getitem__</a>(index)</tt>	Return the value of a row or a cell in this table if.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L767'>__setitem__</a>(index,val)</tt>	Replace the value of a row or a cell in this table with val.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L807'>__delitem__</a>(row_index)</tt>	Delete the row_indexth row from this table.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L819'>__len__</a>()</tt>	:return the number of rows in this table.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L825'>_checkrow</a>(rowvalue)</tt>	Helper function check that a given row value has the correct number of elements and if not raise an exception.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L838'>column_names</a>()</tt>	A list of the names of the columns in this table.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L843'>column_index</a>(i)</tt>	If i is a valid column index integer then return it as is.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L856'>hide_column</a>(column_index)</tt>	:see multilistbox hide_column().
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L860'>show_column</a>(column_index)</tt>	:see multilistbox show_column().
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L868'>selected_row</a>()</tt>	Return the index of the currently selected row or none if no row is selected.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L878'>select</a>(index,delta,see)</tt>	:see multilistbox select().
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L886'>sort_by</a>(column_index,order)</tt>	Sort the rows in this table using the specified column's values as a sort key.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L924'>_sort</a>(event)</tt>	Event handler for clicking on a column label -- sort by that column.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L943'>_fill_table</a>(save_config)</tt>	Re-draw the table from scratch by clearing out the table's multi-column listbox and then filling it in with values from.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L963'>_save_config_info</a>(row_indices,index_by_id)</tt>	Return a 'cookie' containing information about which row is selected and what color configurations have been applied.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L1000'>_restore_config_info</a>(cookie,index_by_id,see)</tt>	Restore selection & color configuration information that was saved using _save_config_info.
<tt style='background-color:#E8E8E8;'> draw.Table <a href=' /draw/table.py#L1034'>_check_table_vs_mlb</a>()</tt>	Verify that the contents of the table's _rows variable match the contents of its multi-listbox (_mlb).
<tt style='background-color:#E8E8E8;'> draw. <a href=' /draw/dispersion.py#L12'>dispersion_plot</a>(text,words,ignore_case,title)</tt>	Generate a lexical dispersion plot.
<tt style='background-color:#E8E8E8;'> draw.CFGEditor <a href=' /draw/cfg.py#L301'>_clear_tags</a>(linenum)</tt>	Remove all tags (except arrow and sel) from the given line of the text widget used for editing the productions.
<tt style='background-color:#E8E8E8;'> draw.CFGEditor <a href=' /draw/cfg.py#L312'>_check_analyze</a>()</tt>	Check if we've moved to a new line if we have then remove.
<tt style='background-color:#E8E8E8;'> draw.CFGEditor <a href=' /draw/cfg.py#L324'>_replace_arrows</a>()</tt>	Replace any '->' text strings with arrows (char \256 in symbol font).
<tt style='background-color:#E8E8E8;'> draw.CFGEditor <a href=' /draw/cfg.py#L345'>_analyze_token</a>(match,linenum)</tt>	Given a line number and a regexp match for a token on that line colorize the token.
<tt style='background-color:#E8E8E8;'> draw.CFGEditor <a href=' /draw/cfg.py#L379'>_analyze_line</a>(linenum)</tt>	Colorize a given line.
<tt style='background-color:#E8E8E8;'> draw.CFGEditor <a href=' /draw/cfg.py#L401'>_mark_error</a>(linenum,line)</tt>	Mark the location of an error in a line.
<tt style='background-color:#E8E8E8;'> draw.CFGEditor <a href=' /draw/cfg.py#L425'>_analyze</a>()</tt>	Replace -> with arrows and colorize the entire buffer.
<tt style='background-color:#E8E8E8;'> draw.CFGEditor <a href=' /draw/cfg.py#L434'>_parse_productions</a>()</tt>	Parse the current contents of the textwidget buffer to create a list of productions.
<tt style='background-color:#E8E8E8;'> draw.TreeSegmentWidget <a href=' /draw/tree.py#L148'>set_label</a>(label)</tt>	Set the node label to label.
<tt style='background-color:#E8E8E8;'> draw.TreeSegmentWidget <a href=' /draw/tree.py#L157'>replace_child</a>(oldchild,newchild)</tt>	Replace the child oldchild with newchild.
<tt style='background-color:#E8E8E8;'> draw. <a href=' /draw/tree.py#L404'>tree_to_treesegment</a>(canvas,t,make_node,make_leaf)</tt>	Convert a tree into a treesegmentwidget.
<tt style='background-color:#E8E8E8;'> draw.TreeWidget <a href=' /draw/tree.py#L520'>expanded_tree</a>()</tt>	Return the treesegmentwidget for the specified subtree.
<tt style='background-color:#E8E8E8;'> draw.TreeWidget <a href=' /draw/tree.py#L531'>collapsed_tree</a>()</tt>	Return the treesegmentwidget for the specified subtree.
<tt style='background-color:#E8E8E8;'> draw.TreeWidget <a href=' /draw/tree.py#L542'>bind_click_trees</a>(callback,button)</tt>	Add a binding to all tree segments.
<tt style='background-color:#E8E8E8;'> draw.TreeWidget <a href=' /draw/tree.py#L551'>bind_drag_trees</a>(callback,button)</tt>	Add a binding to all tree segments.
<tt style='background-color:#E8E8E8;'> draw.TreeWidget <a href=' /draw/tree.py#L560'>bind_click_leaves</a>(callback,button)</tt>	Add a binding to all leaves.
<tt style='background-color:#E8E8E8;'> draw.TreeWidget <a href=' /draw/tree.py#L567'>bind_drag_leaves</a>(callback,button)</tt>	Add a binding to all leaves.
<tt style='background-color:#E8E8E8;'> draw.TreeWidget <a href=' /draw/tree.py#L574'>bind_click_nodes</a>(callback,button)</tt>	Add a binding to all nodes.
<tt style='background-color:#E8E8E8;'> draw.TreeWidget <a href=' /draw/tree.py#L581'>bind_drag_nodes</a>(callback,button)</tt>	Add a binding to all nodes.
<tt style='background-color:#E8E8E8;'> draw.TreeWidget <a href=' /draw/tree.py#L715'>toggle_collapsed</a>(treeseg)</tt>	Collapse/expand a tree.
<tt style='background-color:#E8E8E8;'> draw.TreeView <a href=' /draw/tree.py#L846'>mainloop</a>()</tt>	Enter the tkinter mainloop this function must be called if.
<tt style='background-color:#E8E8E8;'> draw. <a href=' /draw/tree.py#L856'>draw_trees</a>()</tt>	Open a new window containing a graphical diagram of the given trees.
<tt style='background-color:#E8E8E8;'> tokenize.PunktLanguageVars <a href=' /tokenize/punkt.py#L244'>_word_tokenizer_re</a>()</tt>	Compiles and returns a regular expression for word tokenization.
<tt style='background-color:#E8E8E8;'> tokenize.PunktLanguageVars <a href=' /tokenize/punkt.py#L260'>word_tokenize</a>(s)</tt>	Tokenize a string to split off punctuation other than periods.
<tt style='background-color:#E8E8E8;'> tokenize.PunktLanguageVars <a href=' /tokenize/punkt.py#L276'>period_context_re</a>()</tt>	Compiles and returns a regular expression to find contexts including possible sentence boundaries.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/punkt.py#L305'>_pair_iter</a>(it)</tt>	Yields pairs of tokens from the given iterator such that each input token will appear as the first element in a yielded tuple.
<tt style='background-color:#E8E8E8;'> tokenize.PunktToken <a href=' /tokenize/punkt.py#L413'>_get_type</a>(tok)</tt>	Returns a case-normalized representation of the token.
<tt style='background-color:#E8E8E8;'> tokenize.PunktToken <a href=' /tokenize/punkt.py#L417'>type_no_period</a>()</tt>	The type with its final period removed if it has one.
<tt style='background-color:#E8E8E8;'> tokenize.PunktToken <a href=' /tokenize/punkt.py#L426'>type_no_sentperiod</a>()</tt>	The type with its final period removed if it is marked as a sentence break.
<tt style='background-color:#E8E8E8;'> tokenize.PunktToken <a href=' /tokenize/punkt.py#L436'>first_upper</a>()</tt>	True if the token's first character is uppercase.
<tt style='background-color:#E8E8E8;'> tokenize.PunktToken <a href=' /tokenize/punkt.py#L441'>first_lower</a>()</tt>	True if the token's first character is lowercase.
<tt style='background-color:#E8E8E8;'> tokenize.PunktToken <a href=' /tokenize/punkt.py#L454'>is_ellipsis</a>()</tt>	True if the token text is that of an ellipsis.
<tt style='background-color:#E8E8E8;'> tokenize.PunktToken <a href=' /tokenize/punkt.py#L459'>is_number</a>()</tt>	True if the token text is that of a number.
<tt style='background-color:#E8E8E8;'> tokenize.PunktToken <a href=' /tokenize/punkt.py#L464'>is_initial</a>()</tt>	True if the token text is that of an initial.
<tt style='background-color:#E8E8E8;'> tokenize.PunktToken <a href=' /tokenize/punkt.py#L469'>is_alpha</a>()</tt>	True if the token text is all alphabetic.
<tt style='background-color:#E8E8E8;'> tokenize.PunktToken <a href=' /tokenize/punkt.py#L474'>is_non_punct</a>()</tt>	True if the token is either a number or is alphabetic.
<tt style='background-color:#E8E8E8;'> tokenize.PunktToken <a href=' /tokenize/punkt.py#L483'>__repr__</a>()</tt>	A string representation of the token that can reproduce it with eval(), which lists all the token's non-default.
<tt style='background-color:#E8E8E8;'> tokenize.PunktToken <a href=' /tokenize/punkt.py#L501'>__str__</a>()</tt>	A string representation akin to that used by kiss and strunk.
<tt style='background-color:#E8E8E8;'> tokenize.PunktBaseClass <a href=' /tokenize/punkt.py#L535'>_tokenize_words</a>(plaintext)</tt>	Divide the given text into tokens using the punkt word segmentation regular expression and generate the resulting list.
<tt style='background-color:#E8E8E8;'> tokenize.PunktBaseClass <a href=' /tokenize/punkt.py#L562'>_annotate_first_pass</a>(tokens)</tt>	Perform the first pass of annotation which makes decisions based purely based on the word type of each word.
<tt style='background-color:#E8E8E8;'> tokenize.PunktBaseClass <a href=' /tokenize/punkt.py#L583'>_first_pass_annotation</a>(aug_tok)</tt>	Performs type-based annotation on a single token.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L653'>get_params</a>()</tt>	Calculates and returns parameters for sentence boundary detection as derived from training.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L706'>train</a>(text,verbose,finalize)</tt>	Collects training data from a given text if finalize is true it.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L719'>train_tokens</a>(tokens,verbose,finalize)</tt>	Collects training data from a given list of tokens.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L792'>finalize_training</a>(verbose)</tt>	Uses data that has been gathered in training to determine likely collocations and sentence starters.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L816'>freq_threshold</a>(ortho_thresh,type_thresh,colloc_thres,sentstart_thresh)</tt>	Allows memory use to be reduced after much training by removing data about rare tokens that are unlikely to have a statistical effect with.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L838'>_freq_threshold</a>(fdist,threshold)</tt>	Returns a freqdist containing only data with counts below a given threshold as well as a mapping (none -> count_removed).
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L860'>_get_orthography_data</a>(tokens)</tt>	Collect information about whether each token type occurs with different case patterns i overall ii at.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L908'>_reclassify_abbrev_types</a>(types)</tt>	Re classifies each given token if - it is period-final and not a known abbreviation or.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L972'>find_abbrev_types</a>()</tt>	Recalculates abbreviations given type frequencies despite no prior determination of abbreviations.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L987'>_is_rare_abbrev_type</a>(cur_tok,next_tok)</tt>	A word type is counted as a rare abbreviation if.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L1034'>_dunning_log_likelihood</a>(count_a,count_b,count_ab,N)</tt>	A function that calculates the modified dunning log-likelihood ratio scores for abbreviation candidates.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L1053'>_col_log_likelihood</a>(count_a,count_b,count_ab,N)</tt>	A function that will just compute log-likelihood estimate in the original paper it's described in algorithm 6 and 7.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L1106'>_is_potential_collocation</a>(aug_tok1,aug_tok2)</tt>	Returns true if the pair of tokens may form a collocation given log-likelihood statistics.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L1118'>_find_collocations</a>()</tt>	Generates likely collocations and their log-likelihood.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L1150'>_is_potential_sent_starter</a>(cur_tok,prev_tok)</tt>	Returns true given a token and the token that preceds it if it seems clear that the token is beginning a sentence.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L1162'>_find_sent_starters</a>()</tt>	Uses collocation heuristics for each candidate token to determine if it frequently starts sentences.
<tt style='background-color:#E8E8E8;'> tokenize.PunktTrainer <a href=' /tokenize/punkt.py#L1187'>_get_sentbreak_count</a>(tokens)</tt>	Returns the number of sentence breaks marked in a given set of augmented tokens.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1208'>__init__</a>(train_text,verbose,lang_vars,token_cls)</tt>	Train_text can either be the sole training text for this sentence boundary detector or can be a punktparameters object.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1220'>train</a>(train_text,verbose)</tt>	Derives parameters from a given training text or uses the parameters given.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1235'>tokenize</a>(text,realign_boundaries)</tt>	Given a text returns a list of the sentences in that text.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1241'>debug_decisions</a>(text)</tt>	Classifies candidate periods as sentence breaks yielding a dict for each that may be used to understand why the decision was made.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1270'>span_tokenize</a>(text,realign_boundaries)</tt>	Given a text returns a list of the start end spans of sentences in the text.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1280'>sentences_from_text</a>(text,realign_boundaries)</tt>	Given a text generates the sentences in that text by only testing candidate sentence breaks.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1304'>_realign_boundaries</a>(text,slices)</tt>	Attempts to realign punctuation that falls after the period but should otherwise be included in the same sentence.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1334'>text_contains_sentbreak</a>(text)</tt>	Returns true if the given text includes a sentence break.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1346'>sentences_from_text_legacy</a>(text)</tt>	Given a text generates the sentences in that text annotates all.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1355'>sentences_from_tokens</a>(tokens)</tt>	Given a sequence of tokens generates lists of tokens each list corresponding to a sentence.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1370'>_annotate_tokens</a>(tokens)</tt>	Given a set of tokens augmented with markers for line-start and paragraph-start returns an iterator through those tokens with full.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1391'>_build_sentence_list</a>(text,tokens)</tt>	Given the original text and the list of augmented word tokens construct and return a tokenized list of sentence strings.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1468'>_annotate_second_pass</a>(tokens)</tt>	Performs a token-based classification section 4 over the given tokens making use of the orthographic heuristic (4.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1478'>_second_pass_annotation</a>(aug_tok1,aug_tok2)</tt>	Performs token-based classification over a pair of contiguous tokens updating the first.
<tt style='background-color:#E8E8E8;'> tokenize.PunktSentenceTokenizer <a href=' /tokenize/punkt.py#L1560'>_ortho_heuristic</a>(aug_tok)</tt>	Decide whether the given token is the first token in a sentence.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/punkt.py#L1605'>demo</a>(text,tok_cls,train_cls)</tt>	Builds a punkt model and applies it to the same text.
<tt style='background-color:#E8E8E8;'> tokenize.StanfordTokenizer <a href=' /tokenize/stanford.py#L58'>tokenize</a>(s)</tt>	Use stanford tokenizer's ptbtokenizer to tokenize multiple sentences.
<tt style='background-color:#E8E8E8;'> tokenize.ReppTokenizer <a href=' /tokenize/repp.py#L65'>tokenize</a>(sentence)</tt>	Use repp to tokenize a single sentence.
<tt style='background-color:#E8E8E8;'> tokenize.ReppTokenizer <a href=' /tokenize/repp.py#L76'>tokenize_sents</a>(sentences,keep_token_positions)</tt>	Tokenize multiple sentences using repp.
<tt style='background-color:#E8E8E8;'> tokenize.ReppTokenizer <a href=' /tokenize/repp.py#L101'>generate_repp_command</a>(inputfilename)</tt>	This module generates the repp command to be used at the terminal.
<tt style='background-color:#E8E8E8;'> tokenize.ReppTokenizer <a href=' /tokenize/repp.py#L120'>parse_repp_outputs</a>(repp_output)</tt>	This module parses the tri-tuple format that repp outputs using the "--format triple" option and returns an generator with tuple of string.
<tt style='background-color:#E8E8E8;'> tokenize.ReppTokenizer <a href=' /tokenize/repp.py#L140'>find_repptokenizer</a>(repp_dirname)</tt>	A module to find repp tokenizer binary and its *repp set* config file.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/util.py#L12'>string_span_tokenize</a>(s,sep)</tt>	Return the offsets of the tokens in *s*, as a sequence of start end tuples by splitting the string at each occurrence of *sep*.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/util.py#L45'>regexp_span_tokenize</a>(s,regexp)</tt>	Return the offsets of the tokens in *s*, as a sequence of start end tuples by splitting the string at each successive match of *regexp*.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/util.py#L71'>spans_to_relative</a>(spans)</tt>	Return a sequence of relative spans given a sequence of spans.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/util.py#L149'>is_cjk</a>(character)</tt>	Python port of moses' code to check for cjk character.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/util.py#L171'>xml_escape</a>(text)</tt>	This function transforms the input text into an "escaped" version suitable for well-formed xml formatting.
<tt style='background-color:#E8E8E8;'> tokenize.MWETokenizer <a href=' /tokenize/mwe.py#L41'>__init__</a>(mwes,separator)</tt>	Initialize the multi-word tokenizer with a list of expressions and a.
<tt style='background-color:#E8E8E8;'> tokenize.MWETokenizer <a href=' /tokenize/mwe.py#L58'>add_mwe</a>(mwe)</tt>	Add a multi-word expression to the lexicon stored as a word trie we use util.
<tt style='background-color:#E8E8E8;'> tokenize.MWETokenizer <a href=' /tokenize/mwe.py#L80'>tokenize</a>(text)</tt>	:param text a list containing tokenized text :type text list str.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/casual.py#L202'>_replace_html_entities</a>(text,keep,remove_illegal,encoding)</tt>	Remove entities from text by converting them to their corresponding unicode character.
<tt style='background-color:#E8E8E8;'> tokenize.TweetTokenizer <a href=' /tokenize/casual.py#L287'>tokenize</a>(text)</tt>	:param text str.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/casual.py#L316'>reduce_lengthening</a>(text)</tt>	Replace repeated character sequences of length 3 or greater with sequences of length 3.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/casual.py#L324'>remove_handles</a>(text)</tt>	Remove twitter username handles from text.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/casual.py#L336'>casual_tokenize</a>(text,preserve_case,reduce_len,strip_handles)</tt>	Convenience function for wrapping the tokenizer.
<tt style='background-color:#E8E8E8;'> tokenize.TextTilingTokenizer <a href=' /tokenize/texttiling.py#L84'>tokenize</a>(text)</tt>	Return a tokenized copy of *text*, where each "token" represents a separate topic.
<tt style='background-color:#E8E8E8;'> tokenize.TextTilingTokenizer <a href=' /tokenize/texttiling.py#L153'>_block_comparison</a>(tokseqs,token_table)</tt>	Implements the block comparison method.
<tt style='background-color:#E8E8E8;'> tokenize.TextTilingTokenizer <a href=' /tokenize/texttiling.py#L194'>_smooth_scores</a>(gap_scores)</tt>	Wraps the smooth function from the scipy cookbook.
<tt style='background-color:#E8E8E8;'> tokenize.TextTilingTokenizer <a href=' /tokenize/texttiling.py#L199'>_mark_paragraph_breaks</a>(text)</tt>	Identifies indented text or line breaks as the beginning of.
<tt style='background-color:#E8E8E8;'> tokenize.TextTilingTokenizer <a href=' /tokenize/texttiling.py#L218'>_divide_to_tokensequences</a>(text)</tt>	Divides the text into pseudosentences of fixed size.
<tt style='background-color:#E8E8E8;'> tokenize.TextTilingTokenizer <a href=' /tokenize/texttiling.py#L228'>_create_token_table</a>(token_sequences,par_breaks)</tt>	Creates a table of tokentablefields.
<tt style='background-color:#E8E8E8;'> tokenize.TextTilingTokenizer <a href=' /tokenize/texttiling.py#L279'>_identify_boundaries</a>(depth_scores)</tt>	Identifies boundaries at the peaks of similarity score.
<tt style='background-color:#E8E8E8;'> tokenize.TextTilingTokenizer <a href=' /tokenize/texttiling.py#L306'>_depth_scores</a>(scores)</tt>	Calculates the depth of each gap i e the average difference.
<tt style='background-color:#E8E8E8;'> tokenize.TextTilingTokenizer <a href=' /tokenize/texttiling.py#L336'>_normalize_boundaries</a>(text,boundaries,paragraph_breaks)</tt>	Normalize the boundaries identified to the original text's.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/texttiling.py#L393'>smooth</a>(x,window_len,window)</tt>	Smooth the data using a window with requested size.
<tt style='background-color:#E8E8E8;'> tokenize.SExprTokenizer <a href=' /tokenize/sexpr.py#L87'>tokenize</a>(text)</tt>	Return a list of s-expressions extracted from *text*.
<tt style='background-color:#E8E8E8;'> tokenize.TokenizerI <a href=' /tokenize/api.py#L25'>tokenize</a>(s)</tt>	Return a tokenized copy of *s*.
<tt style='background-color:#E8E8E8;'> tokenize.TokenizerI <a href=' /tokenize/api.py#L35'>span_tokenize</a>(s)</tt>	Identify the tokens using integer offsets (start_i end_i), where s[start_i end_i] is the corresponding token.
<tt style='background-color:#E8E8E8;'> tokenize.TokenizerI <a href=' /tokenize/api.py#L44'>tokenize_sents</a>(strings)</tt>	Apply self tokenize() to each element of strings i e :.
<tt style='background-color:#E8E8E8;'> tokenize.TokenizerI <a href=' /tokenize/api.py#L54'>span_tokenize_sents</a>(strings)</tt>	Apply self span_tokenize() to each element of strings i e :.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/__init__.py#L86'>sent_tokenize</a>(text,language)</tt>	Return a sentence-tokenized copy of *text*, using nltk's recommended sentence tokenizer.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/__init__.py#L115'>word_tokenize</a>(text,language)</tt>	Return a tokenized copy of *text*, using nltk's recommended word tokenizer.
<tt style='background-color:#E8E8E8;'> tokenize. <a href=' /tokenize/regexp.py#L189'>regexp_tokenize</a>(text,pattern,gaps,discard_empty)</tt>	Return a tokenized copy of *text* see :class regexptokenizer.
<tt style='background-color:#E8E8E8;'> tokenize.MosesTokenizer <a href=' /tokenize/moses.py#L300'>penn_tokenize</a>(text,return_str)</tt>	This is a python port of the penn treebank tokenizer adapted by the moses machine translation community.
<tt style='background-color:#E8E8E8;'> tokenize.MosesTokenizer <a href=' /tokenize/moses.py#L318'>tokenize</a>(text,agressive_dash_splits,return_str)</tt>	Python port of the moses tokenizer.
<tt style='background-color:#E8E8E8;'> tokenize.MosesDetokenizer <a href=' /tokenize/moses.py#L477'>tokenize</a>(tokens,return_str)</tt>	Python port of the moses detokenizer.
<tt style='background-color:#E8E8E8;'> tokenize.MosesDetokenizer <a href=' /tokenize/moses.py#L611'>detokenize</a>(tokens,return_str)</tt>	Duck-typing the abstract *tokenize()*.
<tt style='background-color:#E8E8E8;'> metrics.NgramAssocMeasures <a href=' /metrics/association.py#L63'>_contingency</a>()</tt>	Calculates values of a contingency table from marginal values.
<tt style='background-color:#E8E8E8;'> metrics.NgramAssocMeasures <a href=' /metrics/association.py#L69'>_marginals</a>()</tt>	Calculates values of contingency table marginals from its values.
<tt style='background-color:#E8E8E8;'> metrics.NgramAssocMeasures <a href=' /metrics/association.py#L75'>_expected_values</a>(cls,cont)</tt>	Calculates expected values for a contingency table.
<tt style='background-color:#E8E8E8;'> metrics.NgramAssocMeasures <a href=' /metrics/association.py#L89'>raw_freq</a>()</tt>	Scores ngrams by their frequency.
<tt style='background-color:#E8E8E8;'> metrics.NgramAssocMeasures <a href=' /metrics/association.py#L94'>student_t</a>(cls)</tt>	Scores ngrams using student's t test with independence hypothesis for unigrams as in manning and schutze 5.
<tt style='background-color:#E8E8E8;'> metrics.NgramAssocMeasures <a href=' /metrics/association.py#L104'>chi_sq</a>(cls)</tt>	Scores ngrams using pearson's chi-square as in manning and schutze 5.
<tt style='background-color:#E8E8E8;'> metrics.NgramAssocMeasures <a href=' /metrics/association.py#L114'>mi_like</a>()</tt>	Scores ngrams using a variant of mutual information the keyword.
<tt style='background-color:#E8E8E8;'> metrics.NgramAssocMeasures <a href=' /metrics/association.py#L123'>pmi</a>(cls)</tt>	Scores ngrams by pointwise mutual information as in manning and schutze 5.
<tt style='background-color:#E8E8E8;'> metrics.NgramAssocMeasures <a href=' /metrics/association.py#L131'>likelihood_ratio</a>(cls)</tt>	Scores ngrams using likelihood ratios as in manning and schutze 5 3 4.
<tt style='background-color:#E8E8E8;'> metrics.NgramAssocMeasures <a href=' /metrics/association.py#L140'>poisson_stirling</a>(cls)</tt>	Scores ngrams using the poisson-stirling measure.
<tt style='background-color:#E8E8E8;'> metrics.NgramAssocMeasures <a href=' /metrics/association.py#L147'>jaccard</a>(cls)</tt>	Scores ngrams using the jaccard index.
<tt style='background-color:#E8E8E8;'> metrics.BigramAssocMeasures <a href=' /metrics/association.py#L184'>_contingency</a>(n_ii,n_ix_xi_tuple,n_xx)</tt>	Calculates values of a bigram contingency table from marginal values.
<tt style='background-color:#E8E8E8;'> metrics.BigramAssocMeasures <a href=' /metrics/association.py#L192'>_marginals</a>(n_ii,n_oi,n_io,n_oo)</tt>	Calculates values of contingency table marginals from its values.
<tt style='background-color:#E8E8E8;'> metrics.BigramAssocMeasures <a href=' /metrics/association.py#L197'>_expected_values</a>(cont)</tt>	Calculates expected values for a contingency table.
<tt style='background-color:#E8E8E8;'> metrics.BigramAssocMeasures <a href=' /metrics/association.py#L205'>phi_sq</a>(cls)</tt>	Scores bigrams using phi-square the square of the pearson correlation coefficient.
<tt style='background-color:#E8E8E8;'> metrics.BigramAssocMeasures <a href=' /metrics/association.py#L215'>chi_sq</a>(cls,n_ii,n_ix_xi_tuple,n_xx)</tt>	Scores bigrams using chi-square i e phi-sq multiplied by the number.
<tt style='background-color:#E8E8E8;'> metrics.BigramAssocMeasures <a href=' /metrics/association.py#L223'>fisher</a>(cls)</tt>	Scores bigrams using fisher's exact test pedersen 1996 less.
<tt style='background-color:#E8E8E8;'> metrics.BigramAssocMeasures <a href=' /metrics/association.py#L235'>dice</a>(n_ii,n_ix_xi_tuple,n_xx)</tt>	Scores bigrams using dice's coefficient.
<tt style='background-color:#E8E8E8;'> metrics.TrigramAssocMeasures <a href=' /metrics/association.py#L263'>_contingency</a>(n_iii,n_iix_tuple,n_ixx_tuple,n_xxx)</tt>	Calculates values of a trigram contingency table or cube from marginal values.
<tt style='background-color:#E8E8E8;'> metrics.TrigramAssocMeasures <a href=' /metrics/association.py#L283'>_marginals</a>()</tt>	Calculates values of contingency table marginals from its values.
<tt style='background-color:#E8E8E8;'> metrics.QuadgramAssocMeasures <a href=' /metrics/association.py#L320'>_contingency</a>(n_iiii,n_iiix_tuple,n_iixx_tuple,n_ixxx_tuple)</tt>	Calculates values of a quadgram contingency table from marginal values.
<tt style='background-color:#E8E8E8;'> metrics.QuadgramAssocMeasures <a href=' /metrics/association.py#L349'>_marginals</a>()</tt>	Calculates values of contingency table marginals from its values.
<tt style='background-color:#E8E8E8;'> metrics.ContingencyMeasures <a href=' /metrics/association.py#L389'>__init__</a>(measures)</tt>	Constructs a contingencymeasures given a ngramassocmeasures class.
<tt style='background-color:#E8E8E8;'> metrics.ContingencyMeasures <a href=' /metrics/association.py#L400'>_make_contingency_fn</a>(measures,old_fn)</tt>	From an association measure function produces a new function which accepts contingency table values as its arguments.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/scores.py#L24'>accuracy</a>(reference,test)</tt>	Given a list of reference values and a corresponding list of test values return the fraction of corresponding values that are.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/scores.py#L43'>precision</a>(reference,test)</tt>	Given a set of reference values and a set of test values return the fraction of test values that appear in the reference set.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/scores.py#L65'>recall</a>(reference,test)</tt>	Given a set of reference values and a set of test values return the fraction of reference values that appear in the test set.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/scores.py#L87'>f_measure</a>(reference,test,alpha)</tt>	Given a set of reference values and a set of test values return the f-measure of the test values when compared against the.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/scores.py#L119'>log_likelihood</a>(reference,test)</tt>	Given a list of reference values and a corresponding list of test probability distributions return the average log likelihood of.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/scores.py#L139'>approxrand</a>(a,b)</tt>	Returns an approximate significance level between two lists of independently generated test values.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/aline.py#L372'>align</a>(str1,str2,epsilon)</tt>	Compute the alignment of two phonetic strings.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/aline.py#L422'>_retrieve</a>(i,j,s,S)</tt>	Retrieve the path through the similarity matrix s starting at i j.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/aline.py#L449'>sigma_skip</a>(p)</tt>	Returns score of an indel of p.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/aline.py#L457'>sigma_sub</a>(p,q)</tt>	Returns score of a substitution of p with q.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/aline.py#L465'>sigma_exp</a>(p,q)</tt>	Returns score of an expansion/compression.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/aline.py#L475'>delta</a>(p,q)</tt>	Return weighted sum of difference between p and q.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/aline.py#L487'>diff</a>(p,q,f)</tt>	Returns difference between phonetic segments p and q for feature f.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/aline.py#L496'>R</a>(p,q)</tt>	Return relevant features for segment comparsion.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/aline.py#L506'>V</a>(p)</tt>	Return vowel weight if p is vowel.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/paice.py#L338'>demo</a>()</tt>	Demonstration of the module.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L101'>__init__</a>(data,distance)</tt>	Initialize an annotation task.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L125'>load_array</a>(array)</tt>	Load an sequence of annotation results appending to any data already loaded.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L137'>agr</a>(cA,cB,i,data)</tt>	Agreement between two coders on a given item.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L167'>N</a>(k,i,c)</tt>	Implements the "n-notation" used in artstein and poesio 2007.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L187'>Ao</a>(cA,cB)</tt>	Observed agreement between two coders on all items.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L196'>_pairwise_average</a>(function)</tt>	Calculates the average of function results for each coder pair.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L211'>avg_Ao</a>()</tt>	Average observed agreement across all coders and items.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L219'>Do_alpha</a>()</tt>	The observed disagreement for the alpha coefficient.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L236'>Do_Kw_pairwise</a>(cA,cB,max_distance)</tt>	The observed disagreement for the weighted kappa coefficient.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L251'>Do_Kw</a>(max_distance)</tt>	Averaged over all labelers.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L260'>S</a>()</tt>	Bennett albert and goldstein 1954.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L268'>pi</a>()</tt>	Scott 1955 here multi-pi.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L297'>kappa</a>()</tt>	Cohen 1960 averages naively over kappas for each coder pair.
<tt style='background-color:#E8E8E8;'> metrics.AnnotationTask <a href=' /metrics/agreement.py#L304'>multi_kappa</a>()</tt>	Davies and fleiss 1982 averages over observed and expected agreements for each coder pair.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/paice.py#L26'>get_words_from_dictionary</a>(lemmas)</tt>	Get original set of words used for analysis.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/paice.py#L42'>_truncate</a>(words,cutlength)</tt>	Group words by stems defined by truncating them at given length.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/paice.py#L64'>_count_intersection</a>(l1,l2)</tt>	Count intersection between two line segments defined by coordinate pairs.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/paice.py#L95'>_get_derivative</a>(coordinates)</tt>	Get derivative of the line from 0 0 to given coordinates.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/paice.py#L109'>_calculate_cut</a>(lemmawords,stems)</tt>	Count understemmed and overstemmed pairs for lemma stem pair with common words.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/paice.py#L134'>_calculate</a>(lemmas,stems)</tt>	Calculate actual and maximum possible amounts of understemmed and overstemmed word pairs.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/paice.py#L175'>_indexes</a>(gumt,gdmt,gwmt,gdnt)</tt>	Count understemming index ui overstemming index oi and stemming weight sw.
<tt style='background-color:#E8E8E8;'> metrics.Paice <a href=' /metrics/paice.py#L214'>__init__</a>(lemmas,stems)</tt>	:param lemmas a dictionary where keys are lemmas and values are sets or lists of words corresponding to that lemma.
<tt style='background-color:#E8E8E8;'> metrics.Paice <a href=' /metrics/paice.py#L244'>_get_truncation_indexes</a>(words,cutlength)</tt>	Count ui oi when stemming is done by truncating words at 'cutlength'.
<tt style='background-color:#E8E8E8;'> metrics.Paice <a href=' /metrics/paice.py#L260'>_get_truncation_coordinates</a>(cutlength)</tt>	Count ui oi pairs for truncation points until we find the segment where ui oi crosses the truncation line.
<tt style='background-color:#E8E8E8;'> metrics.Paice <a href=' /metrics/paice.py#L299'>_errt</a>()</tt>	Count error-rate relative to truncation errt.
<tt style='background-color:#E8E8E8;'> metrics.Paice <a href=' /metrics/paice.py#L331'>update</a>()</tt>	Update statistics after lemmas and stems have been set.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/segmentation.py#L52'>windowdiff</a>(seg1,seg2,k,boundary)</tt>	Compute the windowdiff score for a pair of segmentations a.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/segmentation.py#L122'>ghd</a>(ref,hyp,ins_cost,del_cost)</tt>	Compute the generalized hamming distance for a reference and a hypothetical segmentation corresponding to the cost related to the transformation.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/segmentation.py#L188'>pk</a>(ref,hyp,k,boundary)</tt>	Compute the pk metric for a pair of segmentations a segmentation is any sequence over a vocabulary of two items (e.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/spearman.py#L13'>_rank_dists</a>(ranks1,ranks2)</tt>	Finds the difference between the values in ranks1 and ranks2 for keys present in both dicts.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/spearman.py#L27'>spearman_correlation</a>(ranks1,ranks2)</tt>	Returns the spearman correlation coefficient for two rankings which should be dicts or sequences of key rank.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/spearman.py#L45'>ranks_from_sequence</a>(seq)</tt>	Given a sequence yields each element with an increasing rank suitable for use as an argument to spearman_correlation.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/spearman.py#L52'>ranks_from_scores</a>(scores,rank_gap)</tt>	Given a sequence of key score tuples yields each key with an increasing rank tying with previous key's rank if the difference between.
<tt style='background-color:#E8E8E8;'> metrics.ConfusionMatrix <a href=' /metrics/confusionmatrix.py#L32'>__init__</a>(reference,test,sort_by_count)</tt>	Construct a new confusion matrix from a list of reference values and a corresponding list of test values.
<tt style='background-color:#E8E8E8;'> metrics.ConfusionMatrix <a href=' /metrics/confusionmatrix.py#L80'>__getitem__</a>(li_lj_tuple)</tt>	:return the number of times that value li was expected and value lj was given.
<tt style='background-color:#E8E8E8;'> metrics.ConfusionMatrix <a href=' /metrics/confusionmatrix.py#L98'>pretty_format</a>(show_percents,values_in_chart,truncate,sort_by_count)</tt>	:return a multi-line string representation of this confusion matrix.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/distance.py#L58'>edit_distance</a>(s1,s2,substitution_cost,transpositions)</tt>	Calculate the levenshtein edit-distance between two strings.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/distance.py#L95'>binary_distance</a>(label1,label2)</tt>	Simple equality test.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/distance.py#L111'>jaccard_distance</a>(label1,label2)</tt>	Distance metric comparing set-similarity.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/distance.py#L118'>masi_distance</a>(label1,label2)</tt>	Distance metric that takes into account partial agreement when multiple labels are assigned.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/distance.py#L146'>interval_distance</a>(label1,label2)</tt>	Krippendorff's interval distance metric >>> from nltk.
<tt style='background-color:#E8E8E8;'> metrics. <a href=' /metrics/distance.py#L163'>presence</a>(label)</tt>	Higher-order function to test presence of a given label.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/util.py#L20'>credsfromfile</a>(creds_file,subdir,verbose)</tt>	Convenience function for authentication.
<tt style='background-color:#E8E8E8;'> twitter.Authenticate <a href=' /twitter/util.py#L44'>load_creds</a>(creds_file,subdir,verbose)</tt>	Read oauth credentials from a text file.
<tt style='background-color:#E8E8E8;'> twitter.Authenticate <a href=' /twitter/util.py#L98'>_validate_creds_file</a>(verbose)</tt>	Check validity of a credentials file.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/util.py#L117'>add_access_token</a>(creds_file)</tt>	For oauth 2 retrieve an access token for an app and append it to a credentials file.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/util.py#L136'>guess_path</a>(pth)</tt>	If the path is not absolute guess that it is a subdirectory of the user's home directory.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/common.py#L25'>extract_fields</a>(tweet,fields)</tt>	Extract field values from a full tweet and return them as a list.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/common.py#L85'>json2csv</a>(fp,outfile,fields,encoding)</tt>	Extract selected fields from a file of line-separated json tweets and write to a file in csv format.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/common.py#L129'>outf_writer_compat</a>(outfile,encoding,errors,gzip_compress)</tt>	Identify appropriate csv writer given the python version.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/common.py#L148'>json2csv_entities</a>(tweets_file,outfile,main_fields,entity_type)</tt>	Extract selected fields from a file of line-separated json tweets and write to a file in csv format.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L47'>verbose</a>(func)</tt>	Decorator for demo functions.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L58'>yesterday</a>()</tt>	Get yesterday's datetime as a 5-tuple.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L67'>setup</a>()</tt>	Initialize global variables for the demos.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L79'>twitterclass_demo</a>()</tt>	Use the simplified :class twitter class to write some tweets to a file.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L98'>sampletoscreen_demo</a>(limit)</tt>	Sample from the streaming api and send output to terminal.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L109'>tracktoscreen_demo</a>(track,limit)</tt>	Track keywords from the public streaming api and send output to terminal.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L120'>search_demo</a>(keywords)</tt>	Use the rest api to search for past tweets containing a given keyword.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L131'>tweets_by_user_demo</a>(user,count)</tt>	Use the rest api to search for past tweets by a given user.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L142'>lookup_by_userid_demo</a>()</tt>	Use the rest api to convert a userid to a screen name.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L157'>followtoscreen_demo</a>(limit)</tt>	Using the streaming api select just the tweets from a specified list of userids.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L172'>streamtofile_demo</a>(limit)</tt>	Write 20 tweets sampled from the public streaming api to a file.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L183'>limit_by_time_demo</a>(keywords)</tt>	Query the rest api for tweets about nltk since yesterday and send the output to terminal.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L205'>corpusreader_demo</a>()</tt>	Use :module twittercorpusreader tp read a file of tweets and print out * some full tweets in json format.
<tt style='background-color:#E8E8E8;'> twitter. <a href=' /twitter/twitter_demo.py#L236'>expand_tweetids_demo</a>()</tt>	Given a file object containing a list of tweet ids fetch the corresponding full tweets if available.
<tt style='background-color:#E8E8E8;'> twitter.LocalTimezoneOffsetWithUTC <a href=' /twitter/api.py#L39'>utcoffset</a>(dt)</tt>	Access the relevant time offset.
<tt style='background-color:#E8E8E8;'> twitter.BasicTweetHandler <a href=' /twitter/api.py#L69'>do_continue</a>()</tt>	Returns false if the client should stop fetching tweets.
<tt style='background-color:#E8E8E8;'> twitter.TweetHandlerI <a href=' /twitter/api.py#L80'>__init__</a>(limit,upper_date_limit,lower_date_limit)</tt>	:param int limit the number of data items to process in the current round of processing.
<tt style='background-color:#E8E8E8;'> twitter.TweetHandlerI <a href=' /twitter/api.py#L104'>handle</a>(data)</tt>	Deal appropriately with data returned by the twitter api.
<tt style='background-color:#E8E8E8;'> twitter.TweetHandlerI <a href=' /twitter/api.py#L110'>on_finish</a>()</tt>	Actions when the tweet limit has been reached.
<tt style='background-color:#E8E8E8;'> twitter.TweetHandlerI <a href=' /twitter/api.py#L116'>check_date_limit</a>(data,verbose)</tt>	Validate date limits.
<tt style='background-color:#E8E8E8;'> twitter.Streamer <a href=' /twitter/twitterclient.py#L57'>register</a>(handler)</tt>	Register a method for handling tweets.
<tt style='background-color:#E8E8E8;'> twitter.Streamer <a href=' /twitter/twitterclient.py#L65'>on_success</a>(data)</tt>	:param data response from twitter api.
<tt style='background-color:#E8E8E8;'> twitter.Streamer <a href=' /twitter/twitterclient.py#L82'>on_error</a>(status_code,data)</tt>	:param status_code the status code returned by the twitter api.
<tt style='background-color:#E8E8E8;'> twitter.Streamer <a href=' /twitter/twitterclient.py#L90'>sample</a>()</tt>	Wrapper for 'statuses / sample' api call.
<tt style='background-color:#E8E8E8;'> twitter.Streamer <a href=' /twitter/twitterclient.py#L107'>filter</a>(track,follow,lang)</tt>	Wrapper for 'statuses / filter' api call.
<tt style='background-color:#E8E8E8;'> twitter.Query <a href=' /twitter/twitterclient.py#L135'>register</a>(handler)</tt>	Register a method for handling tweets.
<tt style='background-color:#E8E8E8;'> twitter.Query <a href=' /twitter/twitterclient.py#L143'>expand_tweetids</a>(ids_f,verbose)</tt>	Given a file object containing a list of tweet ids fetch the corresponding full tweets from the twitter api.
<tt style='background-color:#E8E8E8;'> twitter.Query <a href=' /twitter/twitterclient.py#L173'>_search_tweets</a>(keywords,limit,lang)</tt>	Assumes that the handler has been informed fetches tweets from.
<tt style='background-color:#E8E8E8;'> twitter.Query <a href=' /twitter/twitterclient.py#L192'>search_tweets</a>(keywords,limit,lang,max_id)</tt>	Call the rest api 'search/tweets' endpoint with some plausible defaults.
<tt style='background-color:#E8E8E8;'> twitter.Query <a href=' /twitter/twitterclient.py#L269'>user_info_from_id</a>(userids)</tt>	Convert a list of userids into a variety of information about the users.
<tt style='background-color:#E8E8E8;'> twitter.Query <a href=' /twitter/twitterclient.py#L280'>user_tweets</a>(screen_name,limit,include_rts)</tt>	Return a collection of the most recent tweets posted by the user.
<tt style='background-color:#E8E8E8;'> twitter.Twitter <a href=' /twitter/twitterclient.py#L308'>tweets</a>(keywords,follow,to_screen,stream)</tt>	Process some tweets in a simple manner.
<tt style='background-color:#E8E8E8;'> twitter.TweetViewer <a href=' /twitter/twitterclient.py#L395'>handle</a>(data)</tt>	Direct data to sys stdout.
<tt style='background-color:#E8E8E8;'> twitter.TweetWriter <a href=' /twitter/twitterclient.py#L418'>__init__</a>(limit,upper_date_limit,lower_date_limit,fprefix)</tt>	The difference between the upper and lower date limits depends on whether tweets are coming in an ascending date order (i.
<tt style='background-color:#E8E8E8;'> twitter.TweetWriter <a href=' /twitter/twitterclient.py#L458'>timestamped_file</a>()</tt>	:return timestamped file name.
<tt style='background-color:#E8E8E8;'> twitter.TweetWriter <a href=' /twitter/twitterclient.py#L480'>handle</a>(data)</tt>	Write twitter data as line-delimited json into one or more files.
<tt style='background-color:#E8E8E8;'> classify.TextCat <a href=' /classify/textcat.py#L76'>remove_punctuation</a>(text)</tt>	Get rid of punctuation except apostrophes.
<tt style='background-color:#E8E8E8;'> classify.TextCat <a href=' /classify/textcat.py#L80'>profile</a>(text)</tt>	Create freqdist of trigrams within text.
<tt style='background-color:#E8E8E8;'> classify.TextCat <a href=' /classify/textcat.py#L100'>calc_dist</a>(lang,trigram,text_profile)</tt>	Calculate the "out-of-place" measure between the.
<tt style='background-color:#E8E8E8;'> classify.TextCat <a href=' /classify/textcat.py#L124'>lang_dists</a>(text)</tt>	Calculate the "out-of-place" measure between.
<tt style='background-color:#E8E8E8;'> classify.TextCat <a href=' /classify/textcat.py#L142'>guess_language</a>(text)</tt>	Find the language with the min distance.
<tt style='background-color:#E8E8E8;'> classify.ARFF_Formatter <a href=' /classify/weka.py#L227'>__init__</a>(labels,features)</tt>	:param labels a list of all class labels that can be generated.
<tt style='background-color:#E8E8E8;'> classify.ARFF_Formatter <a href=' /classify/weka.py#L238'>format</a>(tokens)</tt>	Returns a string representation of arff output for the given data.
<tt style='background-color:#E8E8E8;'> classify.ARFF_Formatter <a href=' /classify/weka.py#L242'>labels</a>()</tt>	Returns the list of classes.
<tt style='background-color:#E8E8E8;'> classify.ARFF_Formatter <a href=' /classify/weka.py#L246'>write</a>(outfile,tokens)</tt>	Writes arff data to a file for the given data.
<tt style='background-color:#E8E8E8;'> classify.ARFF_Formatter <a href=' /classify/weka.py#L253'>from_train</a>(tokens)</tt>	Constructs an arff_formatter instance with class labels and feature types determined from the given data.
<tt style='background-color:#E8E8E8;'> classify.ARFF_Formatter <a href=' /classify/weka.py#L285'>header_section</a>()</tt>	Returns an arff header as a string.
<tt style='background-color:#E8E8E8;'> classify.ARFF_Formatter <a href=' /classify/weka.py#L304'>data_section</a>(tokens,labeled)</tt>	Returns the arff data section for the given data.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/util.py#L28'>apply_features</a>(feature_func,toks,labeled)</tt>	Use the lazymap class to construct a lazy list-like object that is analogous to map(feature_func toks).
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/util.py#L70'>attested_labels</a>(tokens)</tt>	:return a list of all labels that are attested in the given list of tokens.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/rte_classify.py#L24'>ne</a>(token)</tt>	This just assumes that words in all caps or titles are named entities.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/rte_classify.py#L35'>lemmatize</a>(word)</tt>	Use morphy from wordnet to find the base form of verbs.
<tt style='background-color:#E8E8E8;'> classify.RTEFeatureExtractor <a href=' /classify/rte_classify.py#L49'>__init__</a>(rtepair,stop,lemmatize)</tt>	:param rtepair a rtepair from which features should be extracted.
<tt style='background-color:#E8E8E8;'> classify.RTEFeatureExtractor <a href=' /classify/rte_classify.py#L85'>overlap</a>(toktype,debug)</tt>	Compute the overlap between text and hypothesis.
<tt style='background-color:#E8E8E8;'> classify.RTEFeatureExtractor <a href=' /classify/rte_classify.py#L104'>hyp_extra</a>(toktype,debug)</tt>	Compute the extraneous material in the hypothesis.
<tt style='background-color:#E8E8E8;'> classify.NaiveBayesClassifier <a href=' /classify/naivebayes.py#L63'>__init__</a>(label_probdist,feature_probdist)</tt>	:param label_probdist p label the probability distribution over labels.
<tt style='background-color:#E8E8E8;'> classify.NaiveBayesClassifier <a href=' /classify/naivebayes.py#L147'>most_informative_features</a>(n)</tt>	Return a list of the 'most informative' features used by this classifier.
<tt style='background-color:#E8E8E8;'> classify.NaiveBayesClassifier <a href=' /classify/naivebayes.py#L181'>train</a>(cls,labeled_featuresets,estimator)</tt>	:param labeled_featuresets a list of classified featuresets i.
<tt style='background-color:#E8E8E8;'> classify.PositiveNaiveBayesClassifier <a href=' /classify/positivenaivebayes.py#L89'>train</a>(positive_featuresets,unlabeled_featuresets,positive_prob_prior,estimator)</tt>	:param positive_featuresets a list of featuresets that are known as positive examples (i.
<tt style='background-color:#E8E8E8;'> classify.MaxentClassifier <a href=' /classify/maxent.py#L103'>__init__</a>(encoding,weights,logarithmic)</tt>	Construct a new maxent classifier model typically new.
<tt style='background-color:#E8E8E8;'> classify.MaxentClassifier <a href=' /classify/maxent.py#L129'>set_weights</a>(new_weights)</tt>	Set the feature weight vector for this classifier.
<tt style='background-color:#E8E8E8;'> classify.MaxentClassifier <a href=' /classify/maxent.py#L138'>weights</a>()</tt>	:return the feature weight vector for this classifier.
<tt style='background-color:#E8E8E8;'> classify.MaxentClassifier <a href=' /classify/maxent.py#L169'>explain</a>(featureset,columns)</tt>	Print a table showing the effect of each of the features in the given feature set and how they combine to determine the.
<tt style='background-color:#E8E8E8;'> classify.MaxentClassifier <a href=' /classify/maxent.py#L206'>show_most_informative_features</a>(n,show)</tt>	:param show all neg or pos for negative-only or positive-only.
<tt style='background-color:#E8E8E8;'> classify.MaxentClassifier <a href=' /classify/maxent.py#L229'>train</a>(cls,train_toks,algorithm,trace)</tt>	Train a new maxent classifier based on the given corpus of training samples.
<tt style='background-color:#E8E8E8;'> classify.MaxentFeatureEncodingI <a href=' /classify/maxent.py#L342'>encode</a>(featureset,label)</tt>	Given a featureset label pair return the corresponding vector of joint-feature values.
<tt style='background-color:#E8E8E8;'> classify.MaxentFeatureEncodingI <a href=' /classify/maxent.py#L354'>length</a>()</tt>	:return the size of the fixed-length joint-feature vectors that are generated by this encoding.
<tt style='background-color:#E8E8E8;'> classify.MaxentFeatureEncodingI <a href=' /classify/maxent.py#L362'>labels</a>()</tt>	:return a list of the "known labels" -- i e all labels.
<tt style='background-color:#E8E8E8;'> classify.MaxentFeatureEncodingI <a href=' /classify/maxent.py#L371'>describe</a>(fid)</tt>	:return a string describing the value of the joint-feature whose index in the generated feature vectors is fid.
<tt style='background-color:#E8E8E8;'> classify.MaxentFeatureEncodingI <a href=' /classify/maxent.py#L379'>train</a>(cls,train_toks)</tt>	Construct and return new feature encoding based on a given training corpus train_toks.
<tt style='background-color:#E8E8E8;'> classify.FunctionBackedMaxentFeatureEncoding <a href=' /classify/maxent.py#L396'>__init__</a>(func,length,labels)</tt>	Construct a new feature encoding based on the given function.
<tt style='background-color:#E8E8E8;'> classify.BinaryMaxentFeatureEncoding <a href=' /classify/maxent.py#L476'>__init__</a>(labels,mapping,unseen_features,alwayson_features)</tt>	:param labels a list of the "known labels" for this encoding.
<tt style='background-color:#E8E8E8;'> classify.BinaryMaxentFeatureEncoding <a href=' /classify/maxent.py#L584'>train</a>(cls,train_toks,count_cutoff,labels)</tt>	Construct and return new feature encoding based on a given training corpus train_toks.
<tt style='background-color:#E8E8E8;'> classify.GISEncoding <a href=' /classify/maxent.py#L650'>__init__</a>(labels,mapping,unseen_features,alwayson_features)</tt>	:param c the correction constant the value of the correction.
<tt style='background-color:#E8E8E8;'> classify.GISEncoding <a href=' /classify/maxent.py#L664'>C</a>()</tt>	The non-negative constant that all encoded feature vectors will sum to.
<tt style='background-color:#E8E8E8;'> classify.TypedMaxentFeatureEncoding <a href=' /classify/maxent.py#L806'>__init__</a>(labels,mapping,unseen_features,alwayson_features)</tt>	:param labels a list of the "known labels" for this encoding.
<tt style='background-color:#E8E8E8;'> classify.TypedMaxentFeatureEncoding <a href=' /classify/maxent.py#L921'>train</a>(cls,train_toks,count_cutoff,labels)</tt>	Construct and return new feature encoding based on a given training corpus train_toks.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/maxent.py#L984'>train_maxent_classifier_with_gis</a>(train_toks,trace,encoding,labels)</tt>	Train a new conditionalexponentialclassifier, using the given training samples using the generalized iterative scaling.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/maxent.py#L1103'>train_maxent_classifier_with_iis</a>(train_toks,trace,encoding,labels)</tt>	Train a new conditionalexponentialclassifier, using the given training samples using the improved iterative scaling algorithm.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/maxent.py#L1188'>calculate_nfmap</a>(train_toks,encoding)</tt>	Construct a map that can be used to compress nf which is typically sparse.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/maxent.py#L1215'>calculate_deltas</a>(train_toks,classifier,unattested,ffreq_empirical)</tt>	Calculate the update values for the classifier weights for this iteration of iis.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/maxent.py#L1341'>train_maxent_classifier_with_megam</a>(train_toks,trace,encoding,labels)</tt>	Train a new conditionalexponentialclassifier, using the given training samples using the external megam library.
<tt style='background-color:#E8E8E8;'> classify.Senna <a href=' /classify/senna.py#L79'>executable</a>(base_path)</tt>	The function that determines the system specific binary that should be used in the pipeline.
<tt style='background-color:#E8E8E8;'> classify.Senna <a href=' /classify/senna.py#L97'>_map</a>()</tt>	A method that calculates the order of the columns that senna pipeline will output the tags into.
<tt style='background-color:#E8E8E8;'> classify.Senna <a href=' /classify/senna.py#L110'>tag</a>(tokens)</tt>	Applies the specified operation s on a list of tokens.
<tt style='background-color:#E8E8E8;'> classify.Senna <a href=' /classify/senna.py#L116'>tag_sents</a>(sentences)</tt>	Applies the tag method over a list of sentences this method will return a.
<tt style='background-color:#E8E8E8;'> classify.ClassifierI <a href=' /classify/api.py#L41'>labels</a>()</tt>	:return the list of category labels used by this classifier.
<tt style='background-color:#E8E8E8;'> classify.ClassifierI <a href=' /classify/api.py#L48'>classify</a>(featureset)</tt>	:return the most appropriate label for the given featureset.
<tt style='background-color:#E8E8E8;'> classify.ClassifierI <a href=' /classify/api.py#L58'>prob_classify</a>(featureset)</tt>	:return a probability distribution over labels for the given featureset.
<tt style='background-color:#E8E8E8;'> classify.ClassifierI <a href=' /classify/api.py#L69'>classify_many</a>(featuresets)</tt>	Apply self classify() to each element of featuresets i e :.
<tt style='background-color:#E8E8E8;'> classify.ClassifierI <a href=' /classify/api.py#L79'>prob_classify_many</a>(featuresets)</tt>	Apply self prob_classify() to each element of featuresets i e :.
<tt style='background-color:#E8E8E8;'> classify.MultiClassifierI <a href=' /classify/api.py#L104'>labels</a>()</tt>	:return the list of category labels used by this classifier.
<tt style='background-color:#E8E8E8;'> classify.MultiClassifierI <a href=' /classify/api.py#L111'>classify</a>(featureset)</tt>	:return the most appropriate set of labels for the given featureset.
<tt style='background-color:#E8E8E8;'> classify.MultiClassifierI <a href=' /classify/api.py#L121'>prob_classify</a>(featureset)</tt>	:return a probability distribution over sets of labels for the given featureset.
<tt style='background-color:#E8E8E8;'> classify.MultiClassifierI <a href=' /classify/api.py#L132'>classify_many</a>(featuresets)</tt>	Apply self classify() to each element of featuresets i e :.
<tt style='background-color:#E8E8E8;'> classify.MultiClassifierI <a href=' /classify/api.py#L142'>prob_classify_many</a>(featuresets)</tt>	Apply self prob_classify() to each element of featuresets i e :.
<tt style='background-color:#E8E8E8;'> classify.DecisionTreeClassifier <a href=' /classify/decisiontree.py#L23'>__init__</a>(label,feature_name,decisions,default)</tt>	:param label the most likely label for tokens that reach this node in the decision tree.
<tt style='background-color:#E8E8E8;'> classify.DecisionTreeClassifier <a href=' /classify/decisiontree.py#L74'>pretty_format</a>(width,prefix,depth)</tt>	Return a string containing a pretty-printed version of this decision tree.
<tt style='background-color:#E8E8E8;'> classify.DecisionTreeClassifier <a href=' /classify/decisiontree.py#L99'>pseudocode</a>(prefix,depth)</tt>	Return a string representation of this decision tree that expresses the decisions it makes as a nested set of pseudocode.
<tt style='background-color:#E8E8E8;'> classify.DecisionTreeClassifier <a href=' /classify/decisiontree.py#L129'>train</a>(labeled_featuresets,entropy_cutoff,depth_cutoff,support_cutoff)</tt>	:param binary if true then treat all feature/value pairs as individual binary features rather than using a single n-way.
<tt style='background-color:#E8E8E8;'> classify.SklearnClassifier <a href=' /classify/scikitlearn.py#L54'>__init__</a>(estimator,dtype,sparse)</tt>	:param estimator scikit-learn classifier object.
<tt style='background-color:#E8E8E8;'> classify.SklearnClassifier <a href=' /classify/scikitlearn.py#L77'>classify_many</a>(featuresets)</tt>	Classify a batch of samples.
<tt style='background-color:#E8E8E8;'> classify.SklearnClassifier <a href=' /classify/scikitlearn.py#L89'>prob_classify_many</a>(featuresets)</tt>	Compute per-class probabilities for a batch of samples.
<tt style='background-color:#E8E8E8;'> classify.SklearnClassifier <a href=' /classify/scikitlearn.py#L100'>labels</a>()</tt>	The class labels used by this classifier.
<tt style='background-color:#E8E8E8;'> classify.SklearnClassifier <a href=' /classify/scikitlearn.py#L107'>train</a>(labeled_featuresets)</tt>	Train fit the scikit-learn estimator.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/tadm.py#L29'>write_tadm_file</a>(train_toks,encoding,stream)</tt>	Generate an input file for tadm based on the given corpus of classified tokens.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/tadm.py#L62'>parse_tadm_weights</a>(paramfile)</tt>	Given the stdout output generated by tadm when training a model return a numpy array containing the corresponding weight.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/tadm.py#L73'>call_tadm</a>(args)</tt>	Call the tadm binary with the given arguments.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/megam.py#L43'>config_megam</a>(bin)</tt>	Configure nltk's interface to the megam maxent optimization package.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/megam.py#L64'>write_megam_file</a>(train_toks,encoding,stream,bernoulli)</tt>	Generate an input file for megam based on the given corpus of classified tokens.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/megam.py#L125'>parse_megam_weights</a>(s,features_count,explicit)</tt>	Given the stdout output generated by megam when training a model return a numpy array containing the corresponding weight.
<tt style='background-color:#E8E8E8;'> classify. <a href=' /classify/megam.py#L156'>call_megam</a>(args)</tt>	Call the megam binary with the given arguments.
<tt style='background-color:#E8E8E8;'> inference.TableauProverCommand <a href=' /inference/tableau.py#L321'>__init__</a>(goal,assumptions,prover)</tt>	:param goal input expression to prove :type goal sem.
<tt style='background-color:#E8E8E8;'> inference.Agenda <a href=' /inference/tableau.py#L386'>pop_first</a>()</tt>	Pop the first expression that appears in the agenda.
<tt style='background-color:#E8E8E8;'> inference.ClosedDomainProver <a href=' /inference/nonmonotonic.py#L55'>replace_quants</a>(ex,domain)</tt>	Apply the closed domain assumption to the expression - domain = union([e.
<tt style='background-color:#E8E8E8;'> inference.UniqueNamesProver <a href=' /inference/nonmonotonic.py#L89'>assumptions</a>()</tt>	- domain = union([e free()|e constants() for e in all_expressions]).
<tt style='background-color:#E8E8E8;'> inference.SetHolder <a href=' /inference/nonmonotonic.py#L128'>__getitem__</a>(item)</tt>	:param item variable.
<tt style='background-color:#E8E8E8;'> inference.ClosedWorldProver <a href=' /inference/nonmonotonic.py#L218'>_make_unique_signature</a>(predHolder)</tt>	This method figures out how many arguments the predicate takes and returns a tuple containing that number of unique variables.
<tt style='background-color:#E8E8E8;'> inference.ClosedWorldProver <a href=' /inference/nonmonotonic.py#L225'>_make_antecedent</a>(predicate,signature)</tt>	Return an application expression with 'predicate' as the predicate and 'signature' as the list of arguments.
<tt style='background-color:#E8E8E8;'> inference.ClosedWorldProver <a href=' /inference/nonmonotonic.py#L235'>_make_predicate_dict</a>(assumptions)</tt>	Create a dictionary of predicates from the assumptions.
<tt style='background-color:#E8E8E8;'> inference.MaceCommand <a href=' /inference/mace.py#L32'>__init__</a>(goal,assumptions,max_models,model_builder)</tt>	:param goal input expression to prove :type goal sem.
<tt style='background-color:#E8E8E8;'> inference.MaceCommand <a href=' /inference/mace.py#L53'>_convert2val</a>(valuation_str)</tt>	Transform the output file into an nltk-style valuation.
<tt style='background-color:#E8E8E8;'> inference.MaceCommand <a href=' /inference/mace.py#L93'>_make_relation_set</a>(num_entities,values)</tt>	Convert a mace4-style relation table into a dictionary.
<tt style='background-color:#E8E8E8;'> inference.MaceCommand <a href=' /inference/mace.py#L123'>_make_model_var</a>(value)</tt>	Pick an alphabetic character as identifier for an entity in the model.
<tt style='background-color:#E8E8E8;'> inference.MaceCommand <a href=' /inference/mace.py#L136'>_decorate_model</a>(valuation_str,format)</tt>	Print out a mace4 model using any mace4 interpformat format.
<tt style='background-color:#E8E8E8;'> inference.MaceCommand <a href=' /inference/mace.py#L153'>_transform_output</a>(valuation_str,format)</tt>	Transform the output file into any mace4 interpformat format.
<tt style='background-color:#E8E8E8;'> inference.MaceCommand <a href=' /inference/mace.py#L166'>_call_interpformat</a>(input_str,args,verbose)</tt>	Call the interpformat binary with the given input.
<tt style='background-color:#E8E8E8;'> inference.Mace <a href=' /inference/mace.py#L191'>_build_model</a>(goal,assumptions,verbose)</tt>	Use mace4 to build a first order model.
<tt style='background-color:#E8E8E8;'> inference.Mace <a href=' /inference/mace.py#L205'>_call_mace4</a>(input_str,args,verbose)</tt>	Call the mace4 binary with the given input.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/mace.py#L228'>decode_result</a>(found)</tt>	Decode the result of model_found().
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/mace.py#L237'>test_model_found</a>(arguments)</tt>	Try some proofs and exhibit the results.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/mace.py#L251'>test_build_model</a>(arguments)</tt>	Try to build a nltk sem valuation.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/mace.py#L278'>test_transform_output</a>(argument_pair)</tt>	Transform the model into various mace4 interpformat formats.
<tt style='background-color:#E8E8E8;'> inference.Prover <a href=' /inference/api.py#L37'>_prove</a>(goal,assumptions,verbose)</tt>	:return whether the proof was successful or not along with the proof.
<tt style='background-color:#E8E8E8;'> inference.ModelBuilder <a href=' /inference/api.py#L59'>_build_model</a>(goal,assumptions,verbose)</tt>	Perform the actual model building.
<tt style='background-color:#E8E8E8;'> inference.TheoremToolCommand <a href=' /inference/api.py#L73'>add_assumptions</a>(new_assumptions)</tt>	Add new assumptions to the assumption list.
<tt style='background-color:#E8E8E8;'> inference.TheoremToolCommand <a href=' /inference/api.py#L82'>retract_assumptions</a>(retracted,debug)</tt>	Retract assumptions from the assumption list.
<tt style='background-color:#E8E8E8;'> inference.TheoremToolCommand <a href=' /inference/api.py#L94'>assumptions</a>()</tt>	List the current assumptions.
<tt style='background-color:#E8E8E8;'> inference.TheoremToolCommand <a href=' /inference/api.py#L102'>goal</a>()</tt>	Return the goal.
<tt style='background-color:#E8E8E8;'> inference.TheoremToolCommand <a href=' /inference/api.py#L110'>print_assumptions</a>()</tt>	Print the list of the current assumptions.
<tt style='background-color:#E8E8E8;'> inference.ProverCommand <a href=' /inference/api.py#L122'>prove</a>(verbose)</tt>	Perform the actual proof.
<tt style='background-color:#E8E8E8;'> inference.ProverCommand <a href=' /inference/api.py#L128'>proof</a>(simplify)</tt>	Return the proof string.
<tt style='background-color:#E8E8E8;'> inference.ProverCommand <a href=' /inference/api.py#L136'>get_prover</a>()</tt>	Return the prover object.
<tt style='background-color:#E8E8E8;'> inference.ModelBuilderCommand <a href=' /inference/api.py#L150'>build_model</a>(verbose)</tt>	Perform the actual model building.
<tt style='background-color:#E8E8E8;'> inference.ModelBuilderCommand <a href=' /inference/api.py#L158'>model</a>(format)</tt>	Return a string representation of the model.
<tt style='background-color:#E8E8E8;'> inference.ModelBuilderCommand <a href=' /inference/api.py#L167'>get_model_builder</a>()</tt>	Return the model builder object.
<tt style='background-color:#E8E8E8;'> inference.BaseTheoremToolCommand <a href=' /inference/api.py#L180'>__init__</a>(goal,assumptions)</tt>	:param goal input expression to prove :type goal sem.
<tt style='background-color:#E8E8E8;'> inference.BaseTheoremToolCommand <a href=' /inference/api.py#L198'>add_assumptions</a>(new_assumptions)</tt>	Add new assumptions to the assumption list.
<tt style='background-color:#E8E8E8;'> inference.BaseTheoremToolCommand <a href=' /inference/api.py#L208'>retract_assumptions</a>(retracted,debug)</tt>	Retract assumptions from the assumption list.
<tt style='background-color:#E8E8E8;'> inference.BaseTheoremToolCommand <a href=' /inference/api.py#L228'>assumptions</a>()</tt>	List the current assumptions.
<tt style='background-color:#E8E8E8;'> inference.BaseTheoremToolCommand <a href=' /inference/api.py#L236'>goal</a>()</tt>	Return the goal.
<tt style='background-color:#E8E8E8;'> inference.BaseTheoremToolCommand <a href=' /inference/api.py#L244'>print_assumptions</a>()</tt>	Print the list of the current assumptions.
<tt style='background-color:#E8E8E8;'> inference.BaseProverCommand <a href=' /inference/api.py#L257'>__init__</a>(prover,goal,assumptions)</tt>	:param prover the theorem tool to execute with the assumptions.
<tt style='background-color:#E8E8E8;'> inference.BaseProverCommand <a href=' /inference/api.py#L270'>prove</a>(verbose)</tt>	Perform the actual proof store the result to prevent unnecessary.
<tt style='background-color:#E8E8E8;'> inference.BaseProverCommand <a href=' /inference/api.py#L281'>proof</a>(simplify)</tt>	Return the proof string.
<tt style='background-color:#E8E8E8;'> inference.BaseProverCommand <a href=' /inference/api.py#L292'>decorate_proof</a>(proof_string,simplify)</tt>	Modify and return the proof string.
<tt style='background-color:#E8E8E8;'> inference.BaseModelBuilderCommand <a href=' /inference/api.py#L311'>__init__</a>(modelbuilder,goal,assumptions)</tt>	:param modelbuilder the theorem tool to execute with the assumptions.
<tt style='background-color:#E8E8E8;'> inference.BaseModelBuilderCommand <a href=' /inference/api.py#L324'>build_model</a>(verbose)</tt>	Attempt to build a model store the result to prevent unnecessary.
<tt style='background-color:#E8E8E8;'> inference.BaseModelBuilderCommand <a href=' /inference/api.py#L336'>model</a>(format)</tt>	Return a string representation of the model.
<tt style='background-color:#E8E8E8;'> inference.BaseModelBuilderCommand <a href=' /inference/api.py#L349'>_decorate_model</a>(valuation_str,format)</tt>	:param valuation_str str with the model builder's output.
<tt style='background-color:#E8E8E8;'> inference.TheoremToolCommandDecorator <a href=' /inference/api.py#L366'>__init__</a>(command)</tt>	:param command theoremtoolcommand to decorate.
<tt style='background-color:#E8E8E8;'> inference.ProverCommandDecorator <a href=' /inference/api.py#L399'>__init__</a>(proverCommand)</tt>	:param provercommand provercommand to decorate.
<tt style='background-color:#E8E8E8;'> inference.ProverCommandDecorator <a href=' /inference/api.py#L417'>proof</a>(simplify)</tt>	Return the proof string.
<tt style='background-color:#E8E8E8;'> inference.ProverCommandDecorator <a href=' /inference/api.py#L428'>decorate_proof</a>(proof_string,simplify)</tt>	Modify and return the proof string.
<tt style='background-color:#E8E8E8;'> inference.ModelBuilderCommandDecorator <a href=' /inference/api.py#L446'>__init__</a>(modelBuilderCommand)</tt>	:param modelbuildercommand modelbuildercommand to decorate.
<tt style='background-color:#E8E8E8;'> inference.ModelBuilderCommandDecorator <a href=' /inference/api.py#L456'>build_model</a>(verbose)</tt>	Attempt to build a model store the result to prevent unnecessary.
<tt style='background-color:#E8E8E8;'> inference.ModelBuilderCommandDecorator <a href=' /inference/api.py#L469'>model</a>(format)</tt>	Return a string representation of the model.
<tt style='background-color:#E8E8E8;'> inference.ModelBuilderCommandDecorator <a href=' /inference/api.py#L482'>_decorate_model</a>(valuation_str,format)</tt>	Modify and return the proof string.
<tt style='background-color:#E8E8E8;'> inference.ResolutionProver <a href=' /inference/resolution.py#L34'>_prove</a>(goal,assumptions,verbose)</tt>	:param goal input expression to prove :type goal sem.
<tt style='background-color:#E8E8E8;'> inference.ResolutionProverCommand <a href=' /inference/resolution.py#L98'>__init__</a>(goal,assumptions,prover)</tt>	:param goal input expression to prove :type goal sem.
<tt style='background-color:#E8E8E8;'> inference.ResolutionProverCommand <a href=' /inference/resolution.py#L114'>prove</a>(verbose)</tt>	Perform the actual proof store the result to prevent unnecessary.
<tt style='background-color:#E8E8E8;'> inference.ResolutionProverCommand <a href=' /inference/resolution.py#L140'>_decorate_clauses</a>(clauses)</tt>	Decorate the proof output.
<tt style='background-color:#E8E8E8;'> inference.Clause <a href=' /inference/resolution.py#L167'>unify</a>(other,bindings,used,skipped)</tt>	Attempt to unify this clause with the other returning a list of resulting unified clauses.
<tt style='background-color:#E8E8E8;'> inference.Clause <a href=' /inference/resolution.py#L208'>isSubsetOf</a>(other)</tt>	Return true iff every term in 'self' is a term in 'other'.
<tt style='background-color:#E8E8E8;'> inference.Clause <a href=' /inference/resolution.py#L220'>subsumes</a>(other)</tt>	Return true iff 'self' subsumes 'other', this is if there is a substitution such that every term in 'self' can be unified with a term.
<tt style='background-color:#E8E8E8;'> inference.Clause <a href=' /inference/resolution.py#L256'>is_tautology</a>()</tt>	Self is a tautology if it contains ground terms p and -p the ground.
<tt style='background-color:#E8E8E8;'> inference.Clause <a href=' /inference/resolution.py#L283'>replace</a>(variable,expression)</tt>	Replace every instance of variable with expression across every atom.
<tt style='background-color:#E8E8E8;'> inference.Clause <a href=' /inference/resolution.py#L293'>substitute_bindings</a>(bindings)</tt>	Replace every binding.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/resolution.py#L309'>_iterate_first</a>(first,second,bindings,used)</tt>	This method facilitates movement through the terms of 'self'.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/resolution.py#L338'>_iterate_second</a>(first,second,bindings,used)</tt>	This method facilitates movement through the terms of 'other'.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/resolution.py#L364'>_unify_terms</a>(a,b,bindings,used)</tt>	This method attempts to unify two terms two expressions are unifiable.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/resolution.py#L440'>_clausify</a>(expression)</tt>	:param expression a skolemized expression in cnf.
<tt style='background-color:#E8E8E8;'> inference.BindingDict <a href=' /inference/resolution.py#L466'>__init__</a>(binding_list)</tt>	:param binding_list list of (abstractvariableexpression, atomicexpression) to initialize the dictionary.
<tt style='background-color:#E8E8E8;'> inference.BindingDict <a href=' /inference/resolution.py#L476'>__setitem__</a>(variable,binding)</tt>	A binding is consistent with the dict if its variable is not already bound or if its variable is already bound to its argument.
<tt style='background-color:#E8E8E8;'> inference.BindingDict <a href=' /inference/resolution.py#L513'>__getitem__</a>(variable)</tt>	Return the expression to which 'variable' is bound.
<tt style='background-color:#E8E8E8;'> inference.BindingDict <a href=' /inference/resolution.py#L529'>__add__</a>(other)</tt>	:param other bindingdict the dict with which to combine self.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/resolution.py#L558'>most_general_unification</a>(a,b,bindings)</tt>	Find the most general unification of the two given expressions.
<tt style='background-color:#E8E8E8;'> inference.ReadingCommand <a href=' /inference/discourse.py#L64'>parse_to_readings</a>(sentence)</tt>	:param sentence the sentence to read.
<tt style='background-color:#E8E8E8;'> inference.ReadingCommand <a href=' /inference/discourse.py#L71'>process_thread</a>(sentence_readings)</tt>	This method should be used to handle dependencies between readings such as resolving anaphora.
<tt style='background-color:#E8E8E8;'> inference.ReadingCommand <a href=' /inference/discourse.py#L83'>combine_readings</a>(readings)</tt>	:param readings readings to combine.
<tt style='background-color:#E8E8E8;'> inference.ReadingCommand <a href=' /inference/discourse.py#L92'>to_fol</a>(expression)</tt>	Convert this expression into a first-order logic expression.
<tt style='background-color:#E8E8E8;'> inference.CfgReadingCommand <a href=' /inference/discourse.py#L105'>__init__</a>(gramfile)</tt>	:param gramfile name of file where grammar can be loaded.
<tt style='background-color:#E8E8E8;'> inference.CfgReadingCommand <a href=' /inference/discourse.py#L113'>parse_to_readings</a>(sentence)</tt>	:see readingcommand parse_to_readings().
<tt style='background-color:#E8E8E8;'> inference.CfgReadingCommand <a href=' /inference/discourse.py#L120'>combine_readings</a>(readings)</tt>	:see readingcommand combine_readings().
<tt style='background-color:#E8E8E8;'> inference.CfgReadingCommand <a href=' /inference/discourse.py#L124'>to_fol</a>(expression)</tt>	:see readingcommand to_fol().
<tt style='background-color:#E8E8E8;'> inference.DrtGlueReadingCommand <a href=' /inference/discourse.py#L130'>__init__</a>(semtype_file,remove_duplicates,depparser)</tt>	:param semtype_file name of file where grammar can be loaded.
<tt style='background-color:#E8E8E8;'> inference.DrtGlueReadingCommand <a href=' /inference/discourse.py#L143'>parse_to_readings</a>(sentence)</tt>	:see readingcommand parse_to_readings().
<tt style='background-color:#E8E8E8;'> inference.DrtGlueReadingCommand <a href=' /inference/discourse.py#L147'>process_thread</a>(sentence_readings)</tt>	:see readingcommand process_thread().
<tt style='background-color:#E8E8E8;'> inference.DrtGlueReadingCommand <a href=' /inference/discourse.py#L154'>combine_readings</a>(readings)</tt>	:see readingcommand combine_readings().
<tt style='background-color:#E8E8E8;'> inference.DrtGlueReadingCommand <a href=' /inference/discourse.py#L159'>to_fol</a>(expression)</tt>	:see readingcommand to_fol().
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L168'>__init__</a>(input,reading_command,background)</tt>	Initialize a discoursetester.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L196'>sentences</a>()</tt>	Display the list of sentences in the current discourse.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L203'>add_sentence</a>(sentence,informchk,consistchk)</tt>	Add a sentence to the current discourse.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L234'>retract_sentence</a>(sentence,verbose)</tt>	Remove a sentence from the current discourse.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L255'>grammar</a>()</tt>	Print out the grammar in use for parsing input sentences.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L265'>_get_readings</a>(sentence)</tt>	Build a list of semantic readings for a sentence.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L273'>_construct_readings</a>()</tt>	Use self _sentences to construct a value for self _readings.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L285'>_construct_threads</a>()</tt>	Use self _readings to construct a value for self _threads.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L303'>_show_readings</a>(sentence)</tt>	Print out the readings for the discourse or a single sentence.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L320'>_show_threads</a>(filter,show_thread_readings)</tt>	Print out the value of self _threads or self _filtered_hreads.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L340'>readings</a>(sentence,threaded,verbose,filter)</tt>	Construct and show the readings of the discourse or of a single sentence.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L364'>expand_threads</a>(thread_id,threads)</tt>	Given a thread id find the list of logic expression objects corresponding to the reading ids in that thread.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L411'>models</a>(thread_id,show,verbose)</tt>	Call mace4 to build a model for each current discourse thread.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L437'>add_background</a>(background,verbose)</tt>	Add a list of background assumptions for reasoning about the discourse.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L456'>background</a>()</tt>	Show the current background assumptions.
<tt style='background-color:#E8E8E8;'> inference.DiscourseTester <a href=' /inference/discourse.py#L467'>multiply</a>(discourse,readings)</tt>	Multiply every thread in discourse by every reading in readings.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/discourse.py#L495'>load_fol</a>(s)</tt>	Temporarily duplicated from nltk sem util.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/discourse.py#L519'>discourse_demo</a>(reading_command)</tt>	Illustrate the various methods of discoursetester.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/discourse.py#L573'>drt_discourse_demo</a>(reading_command)</tt>	Illustrate the various methods of discoursetester.
<tt style='background-color:#E8E8E8;'> inference.Prover9CommandParent <a href=' /inference/prover9.py#L46'>print_assumptions</a>(output_format)</tt>	Print the list of the current assumptions.
<tt style='background-color:#E8E8E8;'> inference.Prover9Command <a href=' /inference/prover9.py#L66'>__init__</a>(goal,assumptions,timeout,prover)</tt>	:param goal input expression to prove :type goal sem.
<tt style='background-color:#E8E8E8;'> inference.Prover9Command <a href=' /inference/prover9.py#L89'>decorate_proof</a>(proof_string,simplify)</tt>	:see baseprovercommand decorate_proof().
<tt style='background-color:#E8E8E8;'> inference.Prover9Parent <a href=' /inference/prover9.py#L123'>prover9_input</a>(goal,assumptions)</tt>	:return the input string that should be provided to the prover9 binary.
<tt style='background-color:#E8E8E8;'> inference.Prover9Parent <a href=' /inference/prover9.py#L144'>binary_locations</a>()</tt>	A list of directories that should be searched for the prover9 executables.
<tt style='background-color:#E8E8E8;'> inference.Prover9Parent <a href=' /inference/prover9.py#L168'>_call</a>(input_str,binary,args,verbose)</tt>	Call the binary with the given input.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/prover9.py#L202'>convert_to_prover9</a>(input)</tt>	Convert a logic expression to prover9 format.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/prover9.py#L222'>_convert_to_prover9</a>(expression)</tt>	Convert logic expression to prover9 formatted string.
<tt style='background-color:#E8E8E8;'> inference.Prover9 <a href=' /inference/prover9.py#L261'>_prove</a>(goal,assumptions,verbose)</tt>	Use prover9 to prove a theorem.
<tt style='background-color:#E8E8E8;'> inference.Prover9 <a href=' /inference/prover9.py#L275'>prover9_input</a>(goal,assumptions)</tt>	:see prover9parent prover9_input.
<tt style='background-color:#E8E8E8;'> inference.Prover9 <a href=' /inference/prover9.py#L282'>_call_prover9</a>(input_str,args,verbose)</tt>	Call the prover9 binary with the given input.
<tt style='background-color:#E8E8E8;'> inference.Prover9 <a href=' /inference/prover9.py#L315'>_call_prooftrans</a>(input_str,args,verbose)</tt>	Call the prooftrans binary with the given input.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/prover9.py#L361'>test_convert_to_prover9</a>(expr)</tt>	Test that parsing works ok.
<tt style='background-color:#E8E8E8;'> inference. <a href=' /inference/prover9.py#L369'>test_prove</a>(arguments)</tt>	Try some proofs and exhibit the results.
<tt style='background-color:#E8E8E8;'> sem.FStructure <a href=' /sem/lfg.py#L18'>safeappend</a>(key,item)</tt>	Append 'item' to the list at 'key' if no list exists for 'key', then.
<tt style='background-color:#E8E8E8;'> sem.FStructure <a href=' /sem/lfg.py#L128'>_make_label</a>(value)</tt>	Pick an alphabetic character as identifier for an entity in the model.
<tt style='background-color:#E8E8E8;'> sem.Boxer <a href=' /sem/boxer.py#L54'>__init__</a>(boxer_drs_interpreter,elimeq,bin_dir,verbose)</tt>	:param boxer_drs_interpreter a class that converts from the abstractboxerdrs object hierarchy to a different object.
<tt style='background-color:#E8E8E8;'> sem.Boxer <a href=' /sem/boxer.py#L80'>interpret</a>(input,discourse_id,question,verbose)</tt>	Use boxer to give a first order representation.
<tt style='background-color:#E8E8E8;'> sem.Boxer <a href=' /sem/boxer.py#L95'>interpret_multi</a>(input,discourse_id,question,verbose)</tt>	Use boxer to give a first order representation.
<tt style='background-color:#E8E8E8;'> sem.Boxer <a href=' /sem/boxer.py#L110'>interpret_sents</a>(inputs,discourse_ids,question,verbose)</tt>	Use boxer to give a first order representation.
<tt style='background-color:#E8E8E8;'> sem.Boxer <a href=' /sem/boxer.py#L121'>interpret_multi_sents</a>(inputs,discourse_ids,question,verbose)</tt>	Use boxer to give a first order representation.
<tt style='background-color:#E8E8E8;'> sem.Boxer <a href=' /sem/boxer.py#L147'>_call_candc</a>(inputs,discourse_ids,question,verbose)</tt>	Call the candc binary with the given input.
<tt style='background-color:#E8E8E8;'> sem.Boxer <a href=' /sem/boxer.py#L160'>_call_boxer</a>(candc_out,verbose)</tt>	Call the boxer binary with the given input.
<tt style='background-color:#E8E8E8;'> sem.Boxer <a href=' /sem/boxer.py#L195'>_call</a>(input_str,binary,args,verbose)</tt>	Call the binary with the given input.
<tt style='background-color:#E8E8E8;'> sem.BoxerOutputDrsParser <a href=' /sem/boxer.py#L275'>__init__</a>(discourse_id)</tt>	This class is used to parse the prolog drs output from boxer into a hierarchy of python objects.
<tt style='background-color:#E8E8E8;'> sem.BoxerOutputDrsParser <a href=' /sem/boxer.py#L297'>parse_condition</a>(indices)</tt>	Parse a drs condition.
<tt style='background-color:#E8E8E8;'> sem.BoxerOutputDrsParser <a href=' /sem/boxer.py#L317'>handle_condition</a>(tok,indices)</tt>	Handle a drs condition.
<tt style='background-color:#E8E8E8;'> sem.BoxerOutputDrsParser <a href=' /sem/boxer.py#L642'>_sent_and_word_indices</a>(indices)</tt>	:return list of (sent_index word_indices) tuples.
<tt style='background-color:#E8E8E8;'> sem.AbstractBoxerDrs <a href=' /sem/boxer.py#L848'>_variables</a>()</tt>	:return (set<variables>, set<events>, set<propositions>).
<tt style='background-color:#E8E8E8;'> sem.NltkDrtBoxerDrsInterpreter <a href=' /sem/boxer.py#L1185'>interpret</a>(ex)</tt>	:param ex abstractboxerdrs.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/relextract.py#L45'>_expand</a>(type)</tt>	Expand an ne class name.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/relextract.py#L56'>class_abbrev</a>(type)</tt>	Abbreviate an ne class name.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/relextract.py#L68'>_join</a>(lst,sep,untag)</tt>	Join a list into a string turning tags tuples into tag strings or just words.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/relextract.py#L83'>descape_entity</a>(m,defs)</tt>	Translate one entity to its iso latin value.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/relextract.py#L102'>list2sym</a>(lst)</tt>	Convert a list of strings into a canonical symbol.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/relextract.py#L116'>tree2semi_rel</a>(tree)</tt>	Group a chunk structure into a list of 'semi-relations' of the form (list str tree).
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/relextract.py#L145'>semi_rel2reldict</a>(pairs,window,trace)</tt>	Converts the pairs generated by tree2semi_rel into a 'reldict': a dictionary which stores information about the subject and object nes plus the filler between them.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/relextract.py#L177'>extract_rels</a>(subjclass,objclass,doc,corpus)</tt>	Filter the output of semi_rel2reldict according to specified ne classes and a filler pattern.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/relextract.py#L231'>rtuple</a>(reldict,lcon,rcon)</tt>	Pretty print the reldict as an rtuple.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/relextract.py#L248'>clause</a>(reldict,relsym)</tt>	Print the relation in clausal form.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/relextract.py#L267'>in_demo</a>(trace,sql)</tt>	Select pairs of organizations and locations whose mentions occur with an intervening occurrence of the preposition "in".
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/relextract.py#L398'>conllned</a>(trace)</tt>	Find the copula+'van' relation ('of') in the dutch tagged training corpus from conll 2002.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/util.py#L25'>parse_sents</a>(inputs,grammar,trace)</tt>	Convert input sentences into syntactic trees.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/util.py#L51'>root_semrep</a>(syntree,semkey)</tt>	Find the semantic representation at the root of a tree.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/util.py#L71'>interpret_sents</a>(inputs,grammar,semkey,trace)</tt>	Add the semantic representation to each syntactic parse tree of each input sentence.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/util.py#L86'>evaluate_sents</a>(inputs,grammar,model,assignment)</tt>	Add the truth-in-a-model value to each semantic representation for each syntactic parse of each input sentences.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/util.py#L141'>demo_legacy_grammar</a>()</tt>	Check that interpret_sents() is compatible with legacy grammars that use a lowercase 'sem' feature.
<tt style='background-color:#E8E8E8;'> sem.Concept <a href=' /sem/chat80.py#L223'>__init__</a>(prefLabel,arity,altLabels,closures)</tt>	:param preflabel the preferred label for the concept.
<tt style='background-color:#E8E8E8;'> sem.Concept <a href=' /sem/chat80.py#L260'>augment</a>(data)</tt>	Add more data to the concept's extension set.
<tt style='background-color:#E8E8E8;'> sem.Concept <a href=' /sem/chat80.py#L274'>_make_graph</a>(s)</tt>	Convert a set of pairs into an adjacency linked list encoding of a graph.
<tt style='background-color:#E8E8E8;'> sem.Concept <a href=' /sem/chat80.py#L286'>_transclose</a>(g)</tt>	Compute the transitive closure of a graph represented as a linked list.
<tt style='background-color:#E8E8E8;'> sem.Concept <a href=' /sem/chat80.py#L299'>_make_pairs</a>(g)</tt>	Convert an adjacency linked list back into a set of pairs.
<tt style='background-color:#E8E8E8;'> sem.Concept <a href=' /sem/chat80.py#L310'>close</a>()</tt>	Close a binary relation in the concept's extension set.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L334'>clause2concepts</a>(filename,rel_name,schema,closures)</tt>	Convert a file of prolog clauses into a list of concept objects.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L373'>cities2table</a>(filename,rel_name,dbname,verbose)</tt>	Convert a file of prolog clauses into a database table.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L409'>sql_query</a>(dbname,query)</tt>	Execute an sql query over a database.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L428'>_str2records</a>(filename,rel)</tt>	Read a file into memory and convert each relation clause into a list.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L442'>unary_concept</a>(label,subj,records)</tt>	Make a unary concept out of the primary key in a record.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L464'>binary_concept</a>(label,closures,subj,obj)</tt>	Make a binary concept out of the primary key and another field in a record.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L502'>process_bundle</a>(rels)</tt>	Given a list of relation metadata bundles make a corresponding dictionary of concepts indexed by the relation name.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L531'>make_valuation</a>(concepts,read,lexicon)</tt>	Convert a list of concept objects into a list of label extension pairs optionally create a valuation object.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L558'>val_dump</a>(rels,db)</tt>	Make a valuation from a list of relation metadata bundles and dump to persistent database.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L578'>val_load</a>(db)</tt>	Load a valuation from a persistent database.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L615'>label_indivs</a>(valuation,lexicon)</tt>	Assign individual constants to the individuals in the domain of a valuation.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L638'>make_lex</a>(symbols)</tt>	Create lexical cfg rules for each individual symbol.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L672'>concepts</a>(items)</tt>	Build a list of concepts corresponding to the relation names in items.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/chat80.py#L770'>sql_demo</a>()</tt>	Print out every row from the 'city db' database.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/skolemize.py#L14'>skolemize</a>(expression,univ_scope,used_variables)</tt>	Skolemize the expression and convert to conjunctive normal form cnf.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/skolemize.py#L88'>to_cnf</a>(first,second)</tt>	Convert this split disjunction to conjunctive normal form cnf.
<tt style='background-color:#E8E8E8;'> sem.LinearLogicParser <a href=' /sem/linearlogic.py#L55'>attempt_ApplicationExpression</a>(expression,context)</tt>	Attempt to make an application expression if the next tokens.
<tt style='background-color:#E8E8E8;'> sem.AtomicExpression <a href=' /sem/linearlogic.py#L96'>__init__</a>(name,dependencies)</tt>	:param name str for the constant name.
<tt style='background-color:#E8E8E8;'> sem.AtomicExpression <a href=' /sem/linearlogic.py#L108'>simplify</a>(bindings)</tt>	If 'self' is bound by 'bindings', return the atomic to which it is bound.
<tt style='background-color:#E8E8E8;'> sem.AtomicExpression <a href=' /sem/linearlogic.py#L121'>compile_pos</a>(index_counter,glueFormulaFactory)</tt>	From iddo lev's phd dissertation p108-109.
<tt style='background-color:#E8E8E8;'> sem.AtomicExpression <a href=' /sem/linearlogic.py#L132'>compile_neg</a>(index_counter,glueFormulaFactory)</tt>	From iddo lev's phd dissertation p108-109.
<tt style='background-color:#E8E8E8;'> sem.ConstantExpression <a href=' /sem/linearlogic.py#L162'>unify</a>(other,bindings)</tt>	If 'other' is a constant then it must be equal to 'self' if 'other' is a variable.
<tt style='background-color:#E8E8E8;'> sem.VariableExpression <a href=' /sem/linearlogic.py#L183'>unify</a>(other,bindings)</tt>	'self' must not be bound to anything other than 'other'.
<tt style='background-color:#E8E8E8;'> sem.ImpExpression <a href=' /sem/linearlogic.py#L203'>__init__</a>(antecedent,consequent)</tt>	:param antecedent expression for the antecedent.
<tt style='background-color:#E8E8E8;'> sem.ImpExpression <a href=' /sem/linearlogic.py#L216'>unify</a>(other,bindings)</tt>	Both the antecedent and consequent of 'self' and 'other' must unify.
<tt style='background-color:#E8E8E8;'> sem.ImpExpression <a href=' /sem/linearlogic.py#L231'>compile_pos</a>(index_counter,glueFormulaFactory)</tt>	From iddo lev's phd dissertation p108-109.
<tt style='background-color:#E8E8E8;'> sem.ImpExpression <a href=' /sem/linearlogic.py#L243'>compile_neg</a>(index_counter,glueFormulaFactory)</tt>	From iddo lev's phd dissertation p108-109.
<tt style='background-color:#E8E8E8;'> sem.ApplicationExpression <a href=' /sem/logic.py#L1154'>__init__</a>(function,argument,argument_indices)</tt>	:param function expression for the function.
<tt style='background-color:#E8E8E8;'> sem.ApplicationExpression <a href=' /sem/logic.py#L1164'>simplify</a>(bindings)</tt>	Since function is an implication return its consequent there should be.
<tt style='background-color:#E8E8E8;'> sem.BindingDict <a href=' /sem/linearlogic.py#L358'>__setitem__</a>(variable,binding)</tt>	A binding is consistent with the dict if its variable is not already bound or if its variable is already bound to its argument.
<tt style='background-color:#E8E8E8;'> sem.BindingDict <a href=' /sem/linearlogic.py#L379'>__getitem__</a>(variable)</tt>	Return the expression to which 'variable' is bound.
<tt style='background-color:#E8E8E8;'> sem.BindingDict <a href=' /sem/linearlogic.py#L395'>__add__</a>(other)</tt>	:param other bindingdict the dict with which to combine self.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/evaluate.py#L53'>is_rel</a>(s)</tt>	Check whether a set represents a relation of any arity.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/evaluate.py#L70'>set2rel</a>(s)</tt>	Convert a set containing individuals strings or numbers into a set of unary tuples.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/evaluate.py#L93'>arity</a>(rel)</tt>	Check the arity of a relation.
<tt style='background-color:#E8E8E8;'> sem.Valuation <a href=' /sem/evaluate.py#L116'>__init__</a>(xs)</tt>	:param xs a list of symbol value pairs.
<tt style='background-color:#E8E8E8;'> sem.Valuation <a href=' /sem/evaluate.py#L141'>domain</a>()</tt>	Set-theoretic domain of the value-space of a valuation.
<tt style='background-color:#E8E8E8;'> sem.Valuation <a href=' /sem/evaluate.py#L152'>symbols</a>()</tt>	The non-logical constants which the valuation recognizes.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/evaluate.py#L171'>_read_valuation_line</a>(s)</tt>	Read a line in a valuation file.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/evaluate.py#L205'>read_valuation</a>(s,encoding)</tt>	Convert a valuation string into a valuation.
<tt style='background-color:#E8E8E8;'> sem.Assignment <a href=' /sem/evaluate.py#L307'>purge</a>(var)</tt>	Remove one or all keys i e logic variables from an.
<tt style='background-color:#E8E8E8;'> sem.Assignment <a href=' /sem/evaluate.py#L321'>__str__</a>()</tt>	Pretty printing for assignments {'x', 'u'} appears as 'g[u/x]'.
<tt style='background-color:#E8E8E8;'> sem.Assignment <a href=' /sem/evaluate.py#L332'>_addvariant</a>()</tt>	Create a more pretty-printable version of the assignment.
<tt style='background-color:#E8E8E8;'> sem.Assignment <a href=' /sem/evaluate.py#L343'>add</a>(var,val)</tt>	Add a new variable-value pair to the assignment and update self.
<tt style='background-color:#E8E8E8;'> sem.Model <a href=' /sem/evaluate.py#L391'>evaluate</a>(expr,g,trace)</tt>	Read input expressions and provide a handler for satisfy that blocks further propagation of the undefined error.
<tt style='background-color:#E8E8E8;'> sem.Model <a href=' /sem/evaluate.py#L414'>satisfy</a>(parsed,g,trace)</tt>	Recursive interpretation function for a formula of first-order logic.
<tt style='background-color:#E8E8E8;'> sem.Model <a href=' /sem/evaluate.py#L488'>i</a>(parsed,g,trace)</tt>	An interpretation function.
<tt style='background-color:#E8E8E8;'> sem.Model <a href=' /sem/evaluate.py#L514'>satisfiers</a>(parsed,varex,g,trace)</tt>	Generate the entities from the model's domain that satisfy an open formula.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/evaluate.py#L582'>propdemo</a>(trace)</tt>	Example of a propositional model.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/evaluate.py#L629'>folmodel</a>(quiet,trace)</tt>	Example of a first-order model.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/evaluate.py#L674'>foldemo</a>(trace)</tt>	Interpretation of closed expressions in a first-order model.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/evaluate.py#L718'>satdemo</a>(trace)</tt>	Satisfiers of an open formula in a first order model.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/evaluate.py#L764'>demo</a>(num,trace)</tt>	Run exists demos.
<tt style='background-color:#E8E8E8;'> sem.DrtGlueDemo <a href=' /sem/drt_glue_demo.py#L354'>mainloop</a>()</tt>	Enter the tkinter mainloop this function must be called if.
<tt style='background-color:#E8E8E8;'> sem.HoleSemantics <a href=' /sem/hole.py#L76'>__init__</a>(usr)</tt>	Constructor usr' is a sem expression representing an.
<tt style='background-color:#E8E8E8;'> sem.HoleSemantics <a href=' /sem/hole.py#L102'>is_node</a>(x)</tt>	Return true if x is a node label or hole in this semantic representation.
<tt style='background-color:#E8E8E8;'> sem.HoleSemantics <a href=' /sem/hole.py#L109'>_break_down</a>(usr)</tt>	Extract holes labels formula fragments and constraints from the hole semantics underspecified representation usr.
<tt style='background-color:#E8E8E8;'> sem.HoleSemantics <a href=' /sem/hole.py#L142'>_find_top_most_labels</a>()</tt>	Return the set of labels which are not referenced directly as part of another formula fragment.
<tt style='background-color:#E8E8E8;'> sem.HoleSemantics <a href=' /sem/hole.py#L150'>_find_top_hole</a>()</tt>	Return the hole that will be the top of the formula tree.
<tt style='background-color:#E8E8E8;'> sem.HoleSemantics <a href=' /sem/hole.py#L158'>pluggings</a>()</tt>	Calculate and return all the legal pluggings mappings of labels to holes of this semantics given the constraints.
<tt style='background-color:#E8E8E8;'> sem.HoleSemantics <a href=' /sem/hole.py#L167'>_plug_nodes</a>(queue,potential_labels,plug_acc,record)</tt>	Plug the nodes in queue' with the labels in potential_labels'.
<tt style='background-color:#E8E8E8;'> sem.HoleSemantics <a href=' /sem/hole.py#L198'>_plug_hole</a>(hole,ancestors0,queue,potential_labels0)</tt>	Try all possible ways of plugging a single hole.
<tt style='background-color:#E8E8E8;'> sem.HoleSemantics <a href=' /sem/hole.py#L240'>_violates_constraints</a>(label,ancestors)</tt>	Return true if the label' cannot be placed underneath the holes given by the set ancestors' because it would violate the constraints imposed.
<tt style='background-color:#E8E8E8;'> sem.HoleSemantics <a href=' /sem/hole.py#L252'>_sanity_check_plugging</a>(plugging,node,ancestors)</tt>	Make sure that a given plugging is legal we recursively go through.
<tt style='background-color:#E8E8E8;'> sem.HoleSemantics <a href=' /sem/hole.py#L272'>formula_tree</a>(plugging)</tt>	Return the first-order logic formula tree for this underspecified representation using the plugging given.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L92'>__init__</a>(type_check)</tt>	:param type_check bool should type checking be performed? to their types.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L127'>parse</a>(data,signature)</tt>	Parse the expression.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L154'>process</a>(data)</tt>	Split the data into tokens.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L241'>get_all_symbols</a>()</tt>	This method exists to be overridden.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L245'>inRange</a>(location)</tt>	Return true if the given location is within the buffer.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L249'>token</a>(location)</tt>	Get the next waiting token if a location is given then.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L266'>process_next_expression</a>(context)</tt>	Parse the next complete expression from the stream and return it.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L280'>handle</a>(tok,context)</tt>	This method is intended to be overridden for logics that.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L391'>get_QuantifiedExpression_factory</a>(tok)</tt>	This method serves as a hook for other logic parsers that.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L410'>attempt_EqualityExpression</a>(expression,context)</tt>	Attempt to make an equality expression if the next token is an.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L423'>make_EqualityExpression</a>(first,second)</tt>	This method serves as a hook for other logic parsers that.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L428'>attempt_BooleanExpression</a>(expression,context)</tt>	Attempt to make a boolean expression if the next token is a boolean.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L443'>get_BooleanExpression_factory</a>(tok)</tt>	This method serves as a hook for other logic parsers that.
<tt style='background-color:#E8E8E8;'> sem.LogicParser <a href=' /sem/logic.py#L460'>attempt_ApplicationExpression</a>(expression,context)</tt>	Attempt to make an application expression the next tokens are.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/logic.py#L530'>read_logic</a>(s,logic_parser,encoding)</tt>	Convert a file of first order formulas into a list of {expression}s.
<tt style='background-color:#E8E8E8;'> sem.Variable <a href=' /sem/logic.py#L562'>__init__</a>(name)</tt>	:param name the name of the variable.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/logic.py#L593'>unique_variable</a>(pattern,ignore)</tt>	Return a new unique variable.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/logic.py#L620'>skolem_function</a>(univ_scope)</tt>	Return a skolem function over the variables in univ_scope.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/logic.py#L832'>typecheck</a>(expressions,signature)</tt>	Ensure correct typing across a collection of expression objects.
<tt style='background-color:#E8E8E8;'> sem.SubstituteBindingsI <a href=' /sem/logic.py#L853'>substitute_bindings</a>(bindings)</tt>	:return the object that is obtained by replacing each variable bound by bindings with its values.
<tt style='background-color:#E8E8E8;'> sem.SubstituteBindingsI <a href=' /sem/logic.py#L862'>variables</a>()</tt>	:return a list of all variables in this object.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L896'>negate</a>()</tt>	If this is a negated expression remove the negation.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L927'>equiv</a>(other,prover)</tt>	Check for logical equivalence.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L963'>typecheck</a>(signature)</tt>	Infer and check types raise exceptions if necessary.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L986'>findtype</a>(variable)</tt>	Find the type of the given variable as it is used in this expression.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L995'>_set_type</a>(other_type,signature)</tt>	Set the type of this expression to be the given type raise type.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L1005'>replace</a>(variable,expression,replace_bound,alpha_convert)</tt>	Replace every instance of 'variable' with 'expression'.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L1020'>normalize</a>(newvars)</tt>	Rename auto-generated unique variables.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L1042'>visit</a>(function,combinator)</tt>	Recursively visit subexpressions apply 'function' to each.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L1059'>visit_structured</a>(function,combinator)</tt>	Recursively visit subexpressions apply 'function' to each.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L1080'>variables</a>()</tt>	Return a set of all the variables for binding substitution.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L1090'>free</a>()</tt>	Return a set of all the free non-bound variables this includes.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L1099'>constants</a>()</tt>	Return a set of individual constants non-predicates.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L1107'>predicates</a>()</tt>	Return a set of predicates constants not variables.
<tt style='background-color:#E8E8E8;'> sem.Expression <a href=' /sem/logic.py#L1115'>simplify</a>()</tt>	:return beta-converted version of this expression.
<tt style='background-color:#E8E8E8;'> sem.ApplicationExpression <a href=' /sem/logic.py#L1154'>__init__</a>(function,argument)</tt>	:param function expression, for the function expression.
<tt style='background-color:#E8E8E8;'> sem.ApplicationExpression <a href=' /sem/logic.py#L1179'>_set_type</a>(other_type,signature)</tt>	:see expression _set_type().
<tt style='background-color:#E8E8E8;'> sem.ApplicationExpression <a href=' /sem/logic.py#L1196'>findtype</a>(variable)</tt>	:see expression findtype().
<tt style='background-color:#E8E8E8;'> sem.ApplicationExpression <a href=' /sem/logic.py#L1223'>constants</a>()</tt>	:see expression constants().
<tt style='background-color:#E8E8E8;'> sem.ApplicationExpression <a href=' /sem/logic.py#L1231'>predicates</a>()</tt>	:see expression predicates().
<tt style='background-color:#E8E8E8;'> sem.ApplicationExpression <a href=' /sem/logic.py#L1239'>visit</a>(function,combinator)</tt>	:see expression visit().
<tt style='background-color:#E8E8E8;'> sem.ApplicationExpression <a href=' /sem/logic.py#L1280'>uncurry</a>()</tt>	Uncurry this application expression.
<tt style='background-color:#E8E8E8;'> sem.ApplicationExpression <a href=' /sem/logic.py#L1294'>pred</a>()</tt>	Return uncurried base-function.
<tt style='background-color:#E8E8E8;'> sem.ApplicationExpression <a href=' /sem/logic.py#L1303'>args</a>()</tt>	Return uncurried arg-list.
<tt style='background-color:#E8E8E8;'> sem.ApplicationExpression <a href=' /sem/logic.py#L1310'>is_atom</a>()</tt>	Is this expression an atom (as opposed to a lambda expression applied.
<tt style='background-color:#E8E8E8;'> sem.AbstractVariableExpression <a href=' /sem/logic.py#L1322'>__init__</a>(variable)</tt>	:param variable variable, for the variable.
<tt style='background-color:#E8E8E8;'> sem.AbstractVariableExpression <a href=' /sem/logic.py#L1332'>replace</a>(variable,expression,replace_bound,alpha_convert)</tt>	:see expression replace().
<tt style='background-color:#E8E8E8;'> sem.AbstractVariableExpression <a href=' /sem/logic.py#L1341'>_set_type</a>(other_type,signature)</tt>	:see expression _set_type().
<tt style='background-color:#E8E8E8;'> sem.AbstractVariableExpression <a href=' /sem/logic.py#L1358'>findtype</a>(variable)</tt>	:see expression findtype().
<tt style='background-color:#E8E8E8;'> sem.AbstractVariableExpression <a href=' /sem/logic.py#L1366'>predicates</a>()</tt>	:see expression predicates().
<tt style='background-color:#E8E8E8;'> sem.AbstractVariableExpression <a href=' /sem/logic.py#L1370'>__eq__</a>(other)</tt>	Allow equality between instances of abstractvariableexpression subtypes.
<tt style='background-color:#E8E8E8;'> sem.IndividualVariableExpression <a href=' /sem/logic.py#L1392'>_set_type</a>(other_type,signature)</tt>	:see expression _set_type().
<tt style='background-color:#E8E8E8;'> sem.IndividualVariableExpression <a href=' /sem/logic.py#L1407'>free</a>()</tt>	:see expression free().
<tt style='background-color:#E8E8E8;'> sem.IndividualVariableExpression <a href=' /sem/logic.py#L1411'>constants</a>()</tt>	:see expression constants().
<tt style='background-color:#E8E8E8;'> sem.FunctionVariableExpression <a href=' /sem/logic.py#L1420'>free</a>()</tt>	:see expression free().
<tt style='background-color:#E8E8E8;'> sem.FunctionVariableExpression <a href=' /sem/logic.py#L1424'>constants</a>()</tt>	:see expression constants().
<tt style='background-color:#E8E8E8;'> sem.ConstantExpression <a href=' /sem/logic.py#L1438'>_set_type</a>(other_type,signature)</tt>	:see expression _set_type().
<tt style='background-color:#E8E8E8;'> sem.ConstantExpression <a href=' /sem/logic.py#L1462'>free</a>()</tt>	:see expression free().
<tt style='background-color:#E8E8E8;'> sem.ConstantExpression <a href=' /sem/logic.py#L1466'>constants</a>()</tt>	:see expression constants().
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/logic.py#L1471'>VariableExpression</a>(variable)</tt>	This is a factory method that instantiates and returns a subtype of abstractvariableexpression appropriate for the given variable.
<tt style='background-color:#E8E8E8;'> sem.VariableBinderExpression <a href=' /sem/logic.py#L1490'>__init__</a>(variable,term)</tt>	:param variable variable, for the variable.
<tt style='background-color:#E8E8E8;'> sem.VariableBinderExpression <a href=' /sem/logic.py#L1500'>replace</a>(variable,expression,replace_bound,alpha_convert)</tt>	:see expression replace().
<tt style='background-color:#E8E8E8;'> sem.VariableBinderExpression <a href=' /sem/logic.py#L1523'>alpha_convert</a>(newvar)</tt>	Rename all occurrences of the variable introduced by this variable binder in the expression to newvar.
<tt style='background-color:#E8E8E8;'> sem.VariableBinderExpression <a href=' /sem/logic.py#L1534'>free</a>()</tt>	:see expression free().
<tt style='background-color:#E8E8E8;'> sem.VariableBinderExpression <a href=' /sem/logic.py#L1538'>findtype</a>(variable)</tt>	:see expression findtype().
<tt style='background-color:#E8E8E8;'> sem.VariableBinderExpression <a href=' /sem/logic.py#L1546'>visit</a>(function,combinator)</tt>	:see expression visit().
<tt style='background-color:#E8E8E8;'> sem.VariableBinderExpression <a href=' /sem/logic.py#L1550'>visit_structured</a>(function,combinator)</tt>	:see expression visit_structured().
<tt style='background-color:#E8E8E8;'> sem.VariableBinderExpression <a href=' /sem/logic.py#L1554'>__eq__</a>(other)</tt>	Defines equality modulo alphabetic variance if we are comparing.
<tt style='background-color:#E8E8E8;'> sem.LambdaExpression <a href=' /sem/logic.py#L1581'>_set_type</a>(other_type,signature)</tt>	:see expression _set_type().
<tt style='background-color:#E8E8E8;'> sem.QuantifiedExpression <a href=' /sem/logic.py#L1607'>_set_type</a>(other_type,signature)</tt>	:see expression _set_type().
<tt style='background-color:#E8E8E8;'> sem.NegatedExpression <a href=' /sem/logic.py#L1645'>_set_type</a>(other_type,signature)</tt>	:see expression _set_type().
<tt style='background-color:#E8E8E8;'> sem.NegatedExpression <a href=' /sem/logic.py#L1660'>visit</a>(function,combinator)</tt>	:see expression visit().
<tt style='background-color:#E8E8E8;'> sem.NegatedExpression <a href=' /sem/logic.py#L1664'>negate</a>()</tt>	:see expression negate().
<tt style='background-color:#E8E8E8;'> sem.BinaryExpression <a href=' /sem/logic.py#L1691'>findtype</a>(variable)</tt>	:see expression findtype().
<tt style='background-color:#E8E8E8;'> sem.BinaryExpression <a href=' /sem/logic.py#L1703'>visit</a>(function,combinator)</tt>	:see expression visit().
<tt style='background-color:#E8E8E8;'> sem.BooleanExpression <a href=' /sem/logic.py#L1728'>_set_type</a>(other_type,signature)</tt>	:see expression _set_type().
<tt style='background-color:#E8E8E8;'> sem.EqualityExpression <a href=' /sem/logic.py#L1775'>_set_type</a>(other_type,signature)</tt>	:see expression _set_type().
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/logic.py#L1818'>is_indvar</a>(expr)</tt>	An individual variable must be a single lowercase character other than 'e', followed by zero or more digits.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/logic.py#L1829'>is_funcvar</a>(expr)</tt>	A function variable must be a single uppercase character followed by zero or more digits.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/logic.py#L1840'>is_eventvar</a>(expr)</tt>	An event variable must be a single lowercase 'e' character followed by zero or more digits.
<tt style='background-color:#E8E8E8;'> sem.DrtParser <a href=' /sem/drt.py#L67'>get_all_symbols</a>()</tt>	This method exists to be overridden.
<tt style='background-color:#E8E8E8;'> sem.DrtParser <a href=' /sem/drt.py#L74'>handle</a>(tok,context)</tt>	This method is intended to be overridden for logics that.
<tt style='background-color:#E8E8E8;'> sem.DrtParser <a href=' /sem/drt.py#L139'>make_EqualityExpression</a>(first,second)</tt>	This method serves as a hook for other logic parsers that.
<tt style='background-color:#E8E8E8;'> sem.DrtParser <a href=' /sem/drt.py#L144'>get_BooleanExpression_factory</a>(tok)</tt>	This method serves as a hook for other logic parsers that.
<tt style='background-color:#E8E8E8;'> sem.DrtExpression <a href=' /sem/drt.py#L208'>equiv</a>(other,prover)</tt>	Check for logical equivalence.
<tt style='background-color:#E8E8E8;'> sem.DrtExpression <a href=' /sem/drt.py#L234'>get_refs</a>(recursive)</tt>	Return the set of discourse referents in this drs.
<tt style='background-color:#E8E8E8;'> sem.DrtExpression <a href=' /sem/drt.py#L242'>is_pronoun_function</a>()</tt>	Is self of the form "pro x "?.
<tt style='background-color:#E8E8E8;'> sem.DrtExpression <a href=' /sem/drt.py#L262'>pretty_format</a>()</tt>	Draw the drs.
<tt style='background-color:#E8E8E8;'> sem.DRS <a href=' /sem/drt.py#L279'>__init__</a>(refs,conds,consequent)</tt>	:param refs list of drtindividualvariableexpression for the.
<tt style='background-color:#E8E8E8;'> sem.DRS <a href=' /sem/drt.py#L289'>replace</a>(variable,expression,replace_bound,alpha_convert)</tt>	Replace all instances of variable v with expression e in self where v is free in self.
<tt style='background-color:#E8E8E8;'> sem.DRS <a href=' /sem/drt.py#L333'>free</a>()</tt>	:see expression free().
<tt style='background-color:#E8E8E8;'> sem.DRS <a href=' /sem/drt.py#L340'>get_refs</a>(recursive)</tt>	:see abstractexpression get_refs().
<tt style='background-color:#E8E8E8;'> sem.DRS <a href=' /sem/drt.py#L350'>visit</a>(function,combinator)</tt>	:see expression visit().
<tt style='background-color:#E8E8E8;'> sem.DRS <a href=' /sem/drt.py#L357'>visit_structured</a>(function,combinator)</tt>	:see expression visit_structured().
<tt style='background-color:#E8E8E8;'> sem.DRS <a href=' /sem/drt.py#L452'>__eq__</a>(other)</tt>	Defines equality modulo alphabetic variance.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/drt.py#L483'>DrtVariableExpression</a>(variable)</tt>	This is a factory method that instantiates and returns a subtype of drtabstractvariableexpression appropriate for the given variable.
<tt style='background-color:#E8E8E8;'> sem.DrtAbstractVariableExpression <a href=' /sem/drt.py#L502'>get_refs</a>(recursive)</tt>	:see abstractexpression get_refs().
<tt style='background-color:#E8E8E8;'> sem.DrtProposition <a href=' /sem/drt.py#L566'>visit</a>(function,combinator)</tt>	:see expression visit().
<tt style='background-color:#E8E8E8;'> sem.DrtProposition <a href=' /sem/drt.py#L570'>visit_structured</a>(function,combinator)</tt>	:see expression visit_structured().
<tt style='background-color:#E8E8E8;'> sem.DrtNegatedExpression <a href=' /sem/drt.py#L582'>get_refs</a>(recursive)</tt>	:see abstractexpression get_refs().
<tt style='background-color:#E8E8E8;'> sem.DrtLambdaExpression <a href=' /sem/drt.py#L594'>alpha_convert</a>(newvar)</tt>	Rename all occurrences of the variable introduced by this variable binder in the expression to newvar.
<tt style='background-color:#E8E8E8;'> sem.DrtBinaryExpression <a href=' /sem/drt.py#L620'>get_refs</a>(recursive)</tt>	:see abstractexpression get_refs().
<tt style='background-color:#E8E8E8;'> sem.DrtConcatenation <a href=' /sem/drt.py#L664'>replace</a>(variable,expression,replace_bound,alpha_convert)</tt>	Replace all instances of variable v with expression e in self where v is free in self.
<tt style='background-color:#E8E8E8;'> sem.DrtConcatenation <a href=' /sem/drt.py#L717'>get_refs</a>(recursive)</tt>	:see abstractexpression get_refs().
<tt style='background-color:#E8E8E8;'> sem.DrtConcatenation <a href=' /sem/drt.py#L727'>__eq__</a>(other)</tt>	Defines equality modulo alphabetic variance.
<tt style='background-color:#E8E8E8;'> sem.DrtConcatenation <a href=' /sem/drt.py#L769'>visit</a>(function,combinator)</tt>	:see expression visit().
<tt style='background-color:#E8E8E8;'> sem.DrtApplicationExpression <a href=' /sem/drt.py#L797'>get_refs</a>(recursive)</tt>	:see abstractexpression get_refs().
<tt style='background-color:#E8E8E8;'> sem.PossibleAntecedents <a href=' /sem/drt.py#L822'>free</a>()</tt>	Set of free variables.
<tt style='background-color:#E8E8E8;'> sem.PossibleAntecedents <a href=' /sem/drt.py#L826'>replace</a>(variable,expression,replace_bound,alpha_convert)</tt>	Replace all instances of variable v with expression e in self where v is free in self.
<tt style='background-color:#E8E8E8;'> sem.DrsDrawer <a href=' /sem/drt.py#L927'>__init__</a>(drs,size_canvas,canvas)</tt>	:param drs drtexpression, the drs to be drawn.
<tt style='background-color:#E8E8E8;'> sem.DrsDrawer <a href=' /sem/drt.py#L959'>_get_text_height</a>()</tt>	Get the height of a line of text.
<tt style='background-color:#E8E8E8;'> sem.DrsDrawer <a href=' /sem/drt.py#L963'>draw</a>(x,y)</tt>	Draw the drs.
<tt style='background-color:#E8E8E8;'> sem.DrsDrawer <a href=' /sem/drt.py#L972'>_visit</a>(expression,x,y)</tt>	Return the bottom-rightmost point without actually drawing the item.
<tt style='background-color:#E8E8E8;'> sem.DrsDrawer <a href=' /sem/drt.py#L983'>_draw_command</a>(item,x,y)</tt>	Draw the given item at the given location.
<tt style='background-color:#E8E8E8;'> sem.DrsDrawer <a href=' /sem/drt.py#L1003'>_visit_command</a>(item,x,y)</tt>	Return the bottom-rightmost point without actually drawing the item.
<tt style='background-color:#E8E8E8;'> sem.DrsDrawer <a href=' /sem/drt.py#L1017'>_handle</a>(expression,command,x,y)</tt>	:param expression the expression to handle.
<tt style='background-color:#E8E8E8;'> sem.DrsDrawer <a href=' /sem/drt.py#L1186'>_get_centered_top</a>(top,full_height,item_height)</tt>	Get the y-coordinate of the point that a figure should start at if its height is 'item_height' and it needs to be centered in an area that.
<tt style='background-color:#E8E8E8;'> sem.CooperStore <a href=' /sem/cooper_storage.py#L17'>__init__</a>(featstruct)</tt>	:param featstruct the value of the sem node in a tree from.
<tt style='background-color:#E8E8E8;'> sem.CooperStore <a href=' /sem/cooper_storage.py#L32'>_permute</a>(lst)</tt>	:return an iterator over the permutations of the input list.
<tt style='background-color:#E8E8E8;'> sem.CooperStore <a href=' /sem/cooper_storage.py#L45'>s_retrieve</a>(trace)</tt>	Carry out s-retrieval of binding operators in store if hack=true.
<tt style='background-color:#E8E8E8;'> sem. <a href=' /sem/cooper_storage.py#L76'>parse_with_bindops</a>(sentence,grammar,trace)</tt>	Use a grammar with binding operators to parse a sentence.
<tt style='background-color:#E8E8E8;'> sem.GlueFormula <a href=' /sem/glue.py#L55'>applyto</a>(arg)</tt>	Self = (\x walk x subj -o f.
<tt style='background-color:#E8E8E8;'> sem.GlueFormula <a href=' /sem/glue.py#L92'>compile</a>(counter)</tt>	From iddo lev's phd dissertation p108-109.
<tt style='background-color:#E8E8E8;'> sem.GlueDict <a href=' /sem/glue.py#L315'>get_semtypes</a>(node)</tt>	Based on the node return a list of plausible semtypes in order of plausibility.
<tt style='background-color:#E8E8E8;'> sem.GlueDict <a href=' /sem/glue.py#L349'>get_meaning_formula</a>(generic,word)</tt>	:param generic a meaning formula string containing the.
<tt style='background-color:#E8E8E8;'> sem.GlueDict <a href=' /sem/glue.py#L400'>get_label</a>(node)</tt>	Pick an alphabetic character as identifier for an entity in the model.
<tt style='background-color:#E8E8E8;'> sem.GlueDict <a href=' /sem/glue.py#L417'>lookup_unique</a>(rel,node,depgraph)</tt>	Lookup 'key' there should be exactly one item in the associated relation.
<tt style='background-color:#E8E8E8;'> sem.Glue <a href=' /sem/glue.py#L548'>dep_parse</a>(sentence)</tt>	Return a dependency graph for the sentence.
