subclasses should reimplement this method to update the scene transform by calling self
stop using this frame buffer the previous framebuffer will be made active
the name of this shader object
simple utility to retrieve kwargs in predetermined order
force edge i j to be present in mesh
set depth values parameters
copy functions from opengl gl into _pyopengl namespace
add a reference for the backend object that gives access to the low level context
bind a vertexbuffer that has structured data parameters
buffer size in bytes
produce a darker color if possible parameters
turn number of bytes into human-readable str
x __len__() <==> len x
specify pixel arithmetic for rgb and alpha parameters
add an node to the scene for this viewbox
get the known colors returns
the color of the border in pixels
update the visual
the glir queue corresponding to the current canvas
helper to check valid options
show a colorbar parameters
take a screenshot using glreadpixels not sure where to put this
reset shader source if necesssary
extend a colorarray with new colors parameters
length-n array of color hsv values
connect the callback to the event group the callback will receive
set a uniform value value is assumed to have been checked
timer event handler parameters
the shape of the texture/renderbuffer attached to this framebuffer
flush gl commands this is a wrapper for glflush()
the number of component lines in the torus link this is equal
create a cone parameters
the increment by which the mouse wheel has moved
shorter string representation
swap gl buffers such that the offscreen buffer becomes visible parameters
the vispy visuals textvisual associated with the ticks
downsample by averaging points together across axis
show an image parameters
generate vertices & indices for a filled and outlined cube returns
the canvas in which this node's scenegraph is being drawn
retrieve a graph layout some graph layouts accept extra options
ensures that all edges are valid
set the scale and units used to calculate depth values parameters
the subscene object that represents the root node of the scene graph to be displayed
write text and scroll parameters
undo up filter
helper for assert_* ports
define the set of gl state parameters to use when drawing parameters
undo the filter for a scanline scanline is a sequence of
set vispy data download directory parameters
the vispy visuals meshvisual that used to fill in
unblock this emitter see :func event eventemitter block
replace $color_i by color #i in the glsl template
return true if the named module is a package
helper function to allocate a buffer to contain an image of
glsl declaration strings required for a variable to hold this data
write the face info to the net line
rename all objects like "name_1" to avoid conflicts objects are
create a png encoder object
return the image data as rgba pixels with 8-bits per sample
each face consists of three or more sets of indices each set
the node to be used as the document coordinate system
fetch a remote vispy font
the physical resolution of the canvas in dots per inch
the angle of the camera in degrees around the y axis an angle of
the uniform color for this mesh
append a new set of vertices to the collection
return an item or create it if the location is available
buffer offset in bytes relative to base
glsl function that samples the texture
return the version of the freetype library being used as a tuple of
attach a filter to this visual each filter modifies the appearance or behavior of the visual
find a visual whose bounding rect encompasses *pos*
draw handler parameters
return a list giving the order to draw visuals
return a shader function that accepts only a single vec4 argument and defines new attributes / uniforms supplying the function with
the p parameter of the torus knot or link
a full implementation of dave green's "cubehelix" for matplotlib
od __iter__() <==> iter od
new program was added to the multiprogram update items in the shader
the name of the gui backend that this app wraps
update rotation parmeters based on mouse movement
get the full rotation this rotation is composed of the
set gl configuration
add a subvisual parameters
helper to get the gl version string
the object that events generated by this emitter apply to
return the current time in seconds with high precision (unix version use manager
map coordinates parameters
test vispy software parameters
check that two images match
the color of the border around the colorbar in pixels
internal method for resize
set the color using an nx4 array of rgba floats
rebuilds the shaders and repositions the objects
the vispy application instance on which this canvas is based
return a string listing all changes to the working tree in a git repository
return a new view of this visual
return an array nf 3 of vertex indexes three per triangular face in the mesh
set the range of the view region for the camera parameters
vector in the direction of the axis line
preprocess a code by removing comments version and merging includes
the object that the event applies to i e the source of the event
check that an image test result matches a pre-approved standard
set the vertex color array parameters
get the object with the given id or none if it does not exist
create a 4x4 homography matrix that represents the rotation of the quaternion
load glyph from font into dict
push a viewport x y w h on the stack values must be integers
return a list of names that are declared in this object's definition not including the name of the object itself
the spectrogram frequencies
return filter weight for a distance x
set the maximum height of the widget
update rotation parmeters based on mouse movement
the size w h of this widget
set the frustum parameters
create a new viewbox and add it as a child widget
set front or back function and reference value parameters
the start radii of the ellipse
the user-set distance if none default the distance is
normalize the given coordinate list to the range [0 scale]
the number of faces in the mesh
map coordinates parameters
the background color of the widget
convenience function for setting the logging level parameters
set the volume data
flush commands call this after setting to context to current
return a list describing the path from this node to a child node if *node* is not a grand child of this node then raise runtimeerror
the viewbox received a mouse event update transform accordingly
for the app backends to create the glshared object
od iteritems -> an iterator over the key value items in od
return true if this data set has face color information
get relevant system and debugging information parameters
glsl type of the sampler
transform mapping from document coordinate frame to the framebuffer physical pixel coordinate frame
boolean that determines whether this node and its children are drawn in picking mode
called when this camera is changes its view also called
a wrapper around all vertex shaders contained in this multiprogram
convert a cftype into an equivalent python type
extra space along each glyph edge due to sdf borders
detach a filter
return the min max bounding values of this visual along *axis* in the local coordinate system
data can be numpy array or the size of data to allocate
try to reduce dtype up to a given level when it is possible
translate the matrix the translation is applied *after* the transformations already present
generate linearly spaced control points from a set of colors
the dimension that is considered up
create a json-serializable message of glir commands numpy arrays
source code for vertex and fragment shader
optionally create a new profiler based on caller's qualname
called to inform any listeners that this transform has changed
physical resolution of the document coordinate system dots per inch
return a rgba array for the requested items
remove a subvisual parameters
return true assuming there's something to read on stdin
set data in the buffer deferred operation
serialize a numpy array
autoreleased version of cfstr
viewbox key event handler parameters
the width of the border around the colorbar in pixels
set the line data parameters
show a 3d mesh parameters
append new data to the right side of every line strip and remove as much data from the left
compute cross product between list of 3d vectors much faster than np
